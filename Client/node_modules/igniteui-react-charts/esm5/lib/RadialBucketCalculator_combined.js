/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, markType, runOn, EnumUtil, typeCast, fromEnum, markDep } from "igniteui-react-core";
import { IBucketizer_$type } from "./IBucketizer";
import { NotImplementedException } from "igniteui-react-core";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { truncate, intDivide } from "igniteui-react-core";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference_$type } from "./IHasCategoryModePreference";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { RadialFrame } from "./RadialFrame";
import { DependencyProperty } from "igniteui-react-core";
import { HighlightingInfo } from "./HighlightingInfo";
import { RadialSeriesRenderManager } from "./RadialSeriesRenderManager";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { ScalerParams } from "./ScalerParams";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { RadialAxes } from "./RadialAxes";
import { Visibility_$type } from "igniteui-react-core";
import { SeriesRenderingArguments } from "./SeriesRenderingArguments";
import { PropertyMetadata } from "igniteui-react-core";
import { round10N } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var RadialBucketCalculator = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RadialBucketCalculator, _super);
    function RadialBucketCalculator(a) {
        var _this = _super.call(this) || this;
        _this.a = null;
        _this.c = 0;
        _this.d = 0;
        _this.b = 0;
        _this.a = a;
        return _this;
    }
    RadialBucketCalculator.prototype.getBucket = function (a) {
        throw new NotImplementedException(0);
    };
    RadialBucketCalculator.prototype.getBucketWithoutUnknowns = function (a) {
        return this.getBucket(a);
    };
    RadialBucketCalculator.prototype.getErrorBucket = function (a, b) {
        return NaN;
    };
    RadialBucketCalculator.prototype.getBucketInfo = function (a, b, c, d) {
        a = this.c;
        b = this.d;
        c = this.b;
        d = this.a.cr.gh;
        return {
            p0: a,
            p1: b,
            p2: c,
            p3: d
        };
    };
    RadialBucketCalculator.prototype.e = function (a) {
        var b = this.a.bv;
        var c = this.a.bu;
        var d = this.a.cr.qz;
        if (b.isEmpty || c.isEmpty || d == null || this.a.cr.ch == null || this.a.cr.ch.count == 0) {
            this.b = 0;
            return;
        }
        var e = Math.floor(d.l4(c, b));
        var f = Math.ceil(d.l3(c, b));
        if (d.cc) {
            f = Math.ceil(d.l4(c, b));
            e = Math.floor(d.l3(c, b));
        }
        if (f < e) {
            f = d.kq + f;
        }
        var g = this.a.cr.q6;
        var h = g != null ? g.ma : 0.75;
        var i = Math.min(c.width, c.height) * 0.5 * (h) * 2 * Math.PI;
        var j = Math.floor((f - e + 1) * a / i);
        this.b = truncate(Math.max(1, j));
        this.c = truncate(Math.max(0, Math.floor(e / this.b) - 1));
        this.d = truncate(Math.ceil(f / this.b));
    };
    RadialBucketCalculator.prototype.cacheValues = function () {
    };
    RadialBucketCalculator.prototype.unCacheValues = function () {
    };
    RadialBucketCalculator.$t = markType(RadialBucketCalculator, 'RadialBucketCalculator', Base.$, [IBucketizer_$type]);
    return RadialBucketCalculator;
}(Base));
export { RadialBucketCalculator };
/**
 * @hidden
 */
var RadialBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RadialBase, _super);
    function RadialBase() {
        var _this = _super.call(this) || this;
        _this.rd = null;
        _this.re = null;
        _this.rg = false;
        _this.rf = false;
        _this.q4 = null;
        _this.q5 = null;
        _this.assigningRadialStyle = null;
        _this.assigningRadialMarkerStyle = null;
        _this.rb = new RadialFrame(3);
        _this.rc = new RadialFrame(3);
        _this.q9 = new RadialFrame(3);
        _this.q7 = null;
        _this.rd = new RadialSeriesRenderManager();
        _this.re = new SeriesRenderer$2(RadialFrame.$, RadialBaseView.$, 1, runOn(_this, _this.r1), runOn(_this, _this.r4), runOn(_this, _this.cr), runOn(_this, _this.l8), runOn(_this, _this.r0), function (a) { return _this.q8.cs.e(_this.gh); });
        return _this;
    }
    RadialBase.prototype.lh = function (a) {
        _super.prototype.lh.call(this, a);
        this.q8 = a;
    };
    RadialBase.prototype.r0 = function () {
        if (this.cb.g) {
            this.cb.t();
        }
    };
    Object.defineProperty(RadialBase.prototype, "categoryAxis", {
        get: function () {
            return this.qz;
        },
        enumerable: false,
        configurable: true
    });
    RadialBase.prototype.ar = function () {
        return this.qz;
    };
    RadialBase.prototype.qw = function (a, b) {
        return null;
    };
    RadialBase.prototype.cx = function (a, b, c) {
        var _this = this;
        if (!this.hasMarkers) {
            return false;
        }
        var d = this.qz;
        var e = new ScalerParams(1, this.ca.pg, this.pf, d.cc);
        e.c = this.getEffectiveViewport1(this.bx);
        var f = this.q6;
        var g = new ScalerParams(1, this.ca.pg, this.pf, f.cc);
        g.c = this.getEffectiveViewport1(this.bx);
        a.clear();
        this.pq.cf(function (h) {
            if (h._visibility == 0) {
                var i = new SeriesPointOfInterest();
                var j = h.n;
                var k = h.o;
                if (j < _this.pf.left || j > _this.pf.right || k < _this.pf.top || k > _this.pf.bottom) {
                    return;
                }
                var l = void 0;
                var m = void 0;
                var n = _this.q7.g(j, k, _this.bx.bv, _this.bx.bu, l, m);
                l = n.p4;
                m = n.p5;
                i.b = l;
                i.c = m;
                if (b) {
                    i.d = _this.rv(i.c, c);
                }
                else {
                    i.d = d.fw(h.ak);
                }
                i.a = h.content;
                a.add(i);
            }
        });
        return true;
    };
    RadialBase.prototype.rv = function (a, b) {
        if (b >= 0) {
            return round10N(a, b).toString();
        }
        else {
            return a.toString();
        }
    };
    RadialBase.prototype.get_d4 = function () {
        return true;
    };
    RadialBase.prototype.get_dr = function () {
        return true;
    };
    RadialBase.prototype.q1 = function (a, b, c) {
        var d = new HighlightingInfo();
        d.b = this;
        d.h = 0;
        d.g = this.ch.count - 1;
        d.d = true;
        if (c != null && c.h == d.h && c.g == d.g) {
            return c;
        }
        return d;
    };
    RadialBase.prototype.q2 = function (a, b, c) {
        var d = this.q8.cs.c;
        var e = this.q8.cs.d;
        var f = this.q8.cs.b;
        var g = this.ra();
        var h = this.ch.count;
        var i = this.qz;
        var j = -1;
        var k = -1;
        var l = this.g0(b);
        j = truncate(Math.floor((intDivide(l, f)))) * f;
        k = j + (f - 1);
        if (c != null && c.h == j && c.g == k) {
            return c;
        }
        var m = new HighlightingInfo();
        m.b = this;
        m.h = j;
        m.g = k;
        return m;
    };
    RadialBase.prototype.q3 = function (a, b, c) {
        var d = this.q8.cs.c;
        var e = this.q8.cs.d;
        var f = this.q8.cs.b;
        var g = this.ra();
        var h = this.ch.count;
        var i = this.qz;
        var j = -1;
        var k = -1;
        var l = this.g0(b);
        j = truncate(Math.floor((intDivide(l, f)))) * f;
        k = j + (f - 1);
        if (c != null && c.h == j && c.g == k) {
            return c;
        }
        var m = new HighlightingInfo();
        m.e = true;
        m.b = this;
        m.h = j;
        m.g = k;
        return m;
    };
    RadialBase.prototype.av = function (a, b, c) {
        if (this.cy && this.d9(this.bj) && !c) {
            var d = this.q2(a, b, this.q4);
            this.q4 = d;
            return d;
        }
        else {
            var e = this.q1(a, b, this.q4);
            this.q4 = e;
            return e;
        }
    };
    RadialBase.prototype.aw = function (a, b, c) {
        if (this.d9(this.bj) && !c) {
            var d = this.q3(a, b, this.q5);
            this.q5 = d;
            return d;
        }
        else {
            var e = this.q1(a, b, this.q5);
            e.e = true;
            this.q5 = e;
            return e;
        }
    };
    RadialBase.prototype.rp = function () {
        return (this.assigningRadialStyle != null && this.rg) || (this.bj != 1);
    };
    RadialBase.prototype.ro = function () {
        return (this.assigningRadialMarkerStyle != null && this.rf) || (this.bj != 1);
    };
    RadialBase.prototype.r3 = function (a) {
        if (this.assigningRadialStyle != null && this.rg) {
            this.assigningRadialStyle(this, a);
        }
    };
    RadialBase.prototype.r2 = function (a) {
        if (this.assigningRadialMarkerStyle != null && this.rf) {
            this.assigningRadialMarkerStyle(this, a);
        }
    };
    RadialBase.prototype.rr = function (a) {
        return a.cs.b;
    };
    RadialBase.prototype.rs = function (a) {
        return a.cs.c;
    };
    RadialBase.prototype.ag = function () {
        return [this.qz, this.q6];
    };
    RadialBase.prototype.mn = function (a, b) {
        this.q8.cs.e(this.gh);
        this.l0(false);
    };
    RadialBase.prototype.mm = function (a, b) {
        this.q8.cs.e(this.gh);
        this.l0(false);
    };
    RadialBase.prototype.lm = function (a, b, c, d) {
        _super.prototype.lm.call(this, a, b, c, d);
        switch (b) {
            case "SeriesViewer":
                if (c != null && d == null) {
                    if (this.qz != null) {
                        this.qz.bx(this);
                    }
                    if (this.q6 != null) {
                        this.q6.bx(this);
                    }
                }
                if (c == null && d != null) {
                    if (this.qz != null) {
                        this.qz.cn(this);
                    }
                    if (this.q6 != null) {
                        this.q6.cn(this);
                    }
                }
                this.q8.cs.e(this.gh);
                this.l0(false);
                break;
            case RadialBase.$$p[0]:
                if (this.qz != null && this.q6 != null) {
                    this.q7 = new RadialAxes(this.q6, this.qz);
                }
                if (c != null) {
                    c.bx(this);
                }
                if (d != null) {
                    d.cn(this);
                }
                this.q8.cs.e(this.gh);
                this.l0(false);
                break;
            case RadialBase.$$p[4]:
                if (this.qz != null && this.q6 != null) {
                    this.q7 = new RadialAxes(this.q6, this.qz);
                }
                if (c != null) {
                    c.bx(this);
                }
                if (d != null) {
                    d.cn(this);
                }
                this.q8.cs.e(this.gh);
                if (this.q6 == null || !this.q6.cv()) {
                    this.l0(false);
                }
                break;
            case "SyncLink":
                if (this.b5 != null && this.ca != null) {
                    this.q8.cs.e(this.gh);
                    this.l0(false);
                }
                break;
            case "TransitionProgress":
                this.rc.c(this.gn, this.rb, this.q9);
                if (this.ct(this.bx)) {
                    return;
                }
                if (this.gn == 1) {
                    this.r4(this.q9, this.q8);
                }
                else {
                    this.r4(this.rc, this.q8);
                }
                if (this.ca != null) {
                    this.ca.ln(this);
                }
                break;
            case RadialBase.$$p[1]:
                this.l0(false);
                this.k7();
                break;
            case "VisibilityProxy":
                if (EnumUtil.getEnumValue(Visibility_$type, c) != 0 && EnumUtil.getEnumValue(Visibility_$type, d) == 0) {
                    this.q8.cs.e(this.gh);
                }
                break;
            case RadialBase.$$p[3]:
                this.rg = this.rn();
                this.l0(false);
                break;
            case RadialBase.$$p[2]:
                this.rf = this.rm();
                this.l0(false);
                break;
        }
    };
    RadialBase.prototype.rn = function () {
        return this.rl;
    };
    RadialBase.prototype.rm = function () {
        return this.rk;
    };
    RadialBase.prototype.ri = function (a) {
        if (typeCast(NumericRadiusAxis.$, a) !== null) {
            return true;
        }
        return false;
    };
    RadialBase.prototype.rh = function (a) {
        if (typeCast(CategoryAngleAxis.$, a) !== null) {
            return true;
        }
        return false;
    };
    RadialBase.prototype.hh = function (a) {
        var b = this.g0(a);
        return b >= 0 && this.ch != null && b < this.ch.count ? this.ch.item(b) : null;
    };
    RadialBase.prototype.rq = function (a) {
        var b = this.bx.bv;
        var c = this.bx.bu;
        if (this.qz != null && !b.isEmpty && !c.isEmpty && this.q7 != null) {
            var d = this.q7.c(a);
            if (d < 0) {
                d += Math.PI * 2;
            }
            if (d > Math.PI * 2) {
                d -= Math.PI * 2;
            }
            return d;
        }
        return NaN;
    };
    RadialBase.prototype.fw = function (a) {
        var b = this.bx.bv;
        var c = this.bx.bu;
        var d = -1;
        if (this.qz != null && !b.isEmpty && !c.isEmpty && this.q7 != null) {
            var e = this.q7.c(a);
            if (e < 0) {
                e += Math.PI * 2;
            }
            if (e > Math.PI * 2) {
                e -= Math.PI * 2;
            }
            var f = this.qz.getUnscaledAngle(e);
            if (this.qz.categoryMode != 0) {
                f -= 0.5;
            }
            d = f;
        }
        return d;
    };
    RadialBase.prototype.g0 = function (a) {
        var b = truncate(Math.round(this.fw(a)));
        if (this.ch != null && b == this.ch.count) {
            b = 0;
        }
        return b;
    };
    RadialBase.prototype.eh = function (a) {
        return false;
    };
    RadialBase.prototype.ra = function () {
        var a = this.q9;
        if (this.cr()) {
            if (this.cb.g) {
                this.cb.t();
            }
            a = this.rc;
        }
        return a;
    };
    RadialBase.prototype.ky = function () {
        _super.prototype.ky.call(this);
        if (this.qz != null) {
            this.qz.hq(false);
        }
        if (this.q6 != null) {
            this.q6.hq(false);
        }
    };
    RadialBase.prototype.e3 = function (a, b, c) {
        var d = true;
        var e = c;
        if (!_super.prototype.e3.call(this, a, b, c) || !c.o() || b.isEmpty || a.isEmpty || this.qz == null || this.qz.itemsSource == null || this.q6 == null || this.q7 == null || this.ch == null || this.qz.bh == null || this.q6.bh == null || this.q6.kv == this.q6.ku) {
            e.cs.b = 0;
            d = false;
        }
        return d;
    };
    RadialBase.prototype.l1 = function (a) {
        var b;
        var c;
        var d = this.getViewInfo(c, b);
        c = d.p0;
        b = d.p1;
        if (!this.e3(c, b, this.bx)) {
            this.kh(true, this.bx);
            return;
        }
        var e = new SeriesRenderingArguments(this, c, b, a, this.em);
        var f = this.re.g(e, this.rb, this.q9, this.rc, this.q8);
        this.rb = f.p1;
        this.q9 = f.p2;
        this.rc = f.p3;
    };
    RadialBase.prototype.rt = function () {
        var e_1, _a;
        var a = 0;
        try {
            for (var _b = __values(fromEnum(this.ca.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var b = _c.value;
                if (b == this) {
                    return a;
                }
                var c = typeCast(RadialBase.$, b);
                if (c != null && c.qz == this.qz && c.preferredCategoryMode(c.qz) == 2) {
                    a++;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return -1;
    };
    RadialBase.$t = markType(RadialBase, 'RadialBase', MarkerSeries.$, [IHasCategoryModePreference_$type]);
    RadialBase.$$p = markDep(DependencyProperty, PropertyMetadata, RadialBase, 'raisePropertyChanged', ['AngleAxis:qz:r5', [CategoryAngleAxis.$, null], 'ClipSeriesToBounds:rj:r6', [0, false], 'IsCustomRadialMarkerStyleAllowed:rk:r7', [0, false], 'IsCustomRadialStyleAllowed:rl:r8', [0, false], 'ValueAxis:q6:r9', [NumericRadiusAxis.$, null]]);
    return RadialBase;
}(MarkerSeries));
export { RadialBase };
/**
 * @hidden
 */
var RadialBaseView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RadialBaseView, _super);
    function RadialBaseView(a) {
        var _this = _super.call(this, a) || this;
        _this.cs = null;
        _this.cr = null;
        _this.ct = null;
        _this.cu = 0;
        _this.cv = null;
        _this.cr = a;
        _this.ct = new Pool$1(Marker.$);
        _this.ci(_this.ct);
        return _this;
    }
    RadialBaseView.prototype.cf = function (a) {
        this.ct.c(a);
    };
    RadialBaseView.$t = markType(RadialBaseView, 'RadialBaseView', MarkerSeriesView.$);
    return RadialBaseView;
}(MarkerSeriesView));
export { RadialBaseView };
//# sourceMappingURL=RadialBucketCalculator_combined.js.map
