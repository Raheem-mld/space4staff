/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { MarkerSeries } from "./MarkerSeries";
import { ISupportsErrorBars_$type } from "./ISupportsErrorBars";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { ScatterAxisInfoCache } from "./ScatterAxisInfoCache";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Series } from "./Series";
import { TrendLineType_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { ScatterItemSearchMode_$type } from "./ScatterItemSearchMode";
import { ScatterErrorBarSettings } from "./ScatterErrorBarSettings";
import { HighlightingInfo } from "./HighlightingInfo";
import { ScatterFrame } from "./ScatterFrame";
import { Base, enumGetBox, Number_$type, typeCast, fromEnum, Point_$type, runOn, markType, markDep, PointUtil } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { Dictionary$2 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { GeometryUtil } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Thickness } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { AssigningScatterStyleEventArgs } from "./AssigningScatterStyleEventArgs";
import { AssigningScatterMarkerStyleEventArgs } from "./AssigningScatterMarkerStyleEventArgs";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { ErrorBarsHelper } from "./ErrorBarsHelper";
import { PathGeometry } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { boxArray$1, arrayShallowClone } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { DataTemplateMeasureInfo } from "igniteui-react-core";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
var ScatterBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ScatterBase, _super);
    function ScatterBase() {
        var _this = _super.call(this) || this;
        _this.rb = null;
        _this.rp = null;
        _this.rq = null;
        _this.t2 = null;
        _this.t3 = null;
        _this.rk = 1;
        _this.qw = null;
        _this.qx = null;
        _this.rh = null;
        _this.rj = null;
        _this.rf = null;
        _this.ru = false;
        _this.rt = false;
        _this.q7 = null;
        _this.q8 = null;
        _this.assigningScatterStyle = null;
        _this.assigningScatterMarkerStyle = null;
        _this.ro = null;
        _this.ri = null;
        _this.re = null;
        _this.rl = _this.rm();
        _this.ro = new ScatterSeriesRenderManager();
        _this.ri = new ScatterFrame();
        _this.t3 = Rect.empty;
        _this.t2 = Rect.empty;
        return _this;
    }
    ScatterBase.prototype.bu = function () {
        return new ScatterBaseView(this);
    };
    ScatterBase.prototype.ke = function () {
        _super.prototype.ke.call(this);
        this.xAxis = null;
        this.yAxis = null;
    };
    ScatterBase.prototype.lh = function (a) {
        _super.prototype.lh.call(this, a);
        this.rc = a;
    };
    ScatterBase.prototype.get_d6 = function () {
        return true;
    };
    ScatterBase.prototype.ag = function () {
        return [this.xAxis, this.yAxis];
    };
    ScatterBase.prototype.hk = function (a, b) {
        var c = this.ja(b);
        if (c == ScatterBase.$$p[8]) {
            return this.hl(a, b, this.so);
        }
        if (c == ScatterBase.$$p[10]) {
            return this.hl(a, b, this.ss);
        }
        return null;
    };
    ScatterBase.prototype.cx = function (a, b, c) {
        var _this = this;
        if (!this.hasMarkers) {
            return false;
        }
        var d = this.xAxis;
        var e = new ScalerParams(1, this.ca.pg, this.pf, d.cc);
        e.c = this.getEffectiveViewport1(this.bx);
        var f = this.yAxis;
        var g = new ScalerParams(1, this.ca.pg, this.pf, f.cc);
        g.c = this.getEffectiveViewport1(this.bx);
        a.clear();
        this.pq.cf(function (h) {
            if (h._visibility == 0) {
                var i = new SeriesPointOfInterest();
                var j = h.n;
                var k = h.o;
                if (j < _this.pf.left || j > _this.pf.right || k < _this.pf.top || k > _this.pf.bottom) {
                    return;
                }
                i.b = d.eb(j, e);
                i.c = f.eb(k, g);
                i.a = h.content;
                a.add(i);
            }
        });
        return true;
    };
    ScatterBase.prototype.bo = function () {
        if (this.bp == 0) {
            if (this.sc <= 2000) {
                return 1;
            }
            else {
                return _super.prototype.bo.call(this);
            }
        }
        else {
            return _super.prototype.bo.call(this);
        }
    };
    ScatterBase.prototype.pd = function (a) {
        if (!this.hasMarkers || !this.pt()) {
            return Rect.empty;
        }
        var b = this.pq.by(this.ox(a));
        if (b != null) {
            return this.pq.cp(b);
        }
        return Rect.empty;
    };
    ScatterBase.prototype.ep = function (a, b) {
        if (this.pu(a, b)) {
            return true;
        }
        return false;
    };
    Object.defineProperty(ScatterBase.prototype, "rr", {
        get: function () {
            return this.rp;
        },
        set: function (a) {
            if (this.rp != a) {
                var b = this.rr;
                this.rp = a;
                this.raisePropertyChanged("XColumn", b, this.rr);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScatterBase.prototype, "rs", {
        get: function () {
            return this.rq;
        },
        set: function (a) {
            if (this.rq != a) {
                var b = this.rs;
                this.rq = a;
                this.raisePropertyChanged("YColumn", b, this.rs);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScatterBase.prototype, "tz", {
        get: function () {
            return this.c(ScatterBase.tg);
        },
        set: function (a) {
            this.h(ScatterBase.tg, a);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScatterBase.prototype, "GetErrorBarsXAxis", {
        get: function () {
            return this.xAxis;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScatterBase.prototype, "GetErrorBarsYAxis", {
        get: function () {
            return this.yAxis;
        },
        enumerable: false,
        configurable: true
    });
    ScatterBase.prototype.ky = function () {
        _super.prototype.ky.call(this);
        if (this.xAxis != null) {
            this.xAxis.hq(false);
        }
        if (this.yAxis != null) {
            this.yAxis.hq(false);
        }
    };
    ScatterBase.prototype.lm = function (a, b, c, d) {
        _super.prototype.lm.call(this, a, b, c, d);
        if (this.rc.cx.g$b(a, b, c, d)) {
            this.l0(false);
            this.k7();
        }
        switch (b) {
            case "FastItemsSource":
                if (typeCast(IFastItemsSource_$type, c) != null) {
                    c.deregisterColumn(this.rr);
                    c.deregisterColumn(this.rs);
                    this.rr = null;
                    this.rs = null;
                }
                if (typeCast(IFastItemsSource_$type, d) != null) {
                    this.rr = this.ce(this.so);
                    this.rs = this.ce(this.ss);
                }
                if ((this.yAxis != null && !this.yAxis.cv()) || (this.xAxis != null && !this.xAxis.cv())) {
                    this.l0(false);
                }
                break;
            case ScatterBase.$$p[7]:
                if (c != null) {
                    c.bx(this);
                }
                if (d != null) {
                    d.cn(this);
                }
                if ((this.xAxis != null && !this.xAxis.cv()) || (d == null && c != null)) {
                    this.l0(false);
                }
                this.k7();
                break;
            case ScatterBase.$$p[9]:
                if (c != null) {
                    c.bx(this);
                }
                if (d != null) {
                    d.cn(this);
                }
                if ((this.yAxis != null && !this.yAxis.cv()) || (d == null && c != null)) {
                    this.l0(false);
                }
                this.k7();
                break;
            case ScatterBase.$$p[8]:
                if (this.ch != null) {
                    this.ch.deregisterColumn(this.rr);
                    this.rr = this.ce(this.so);
                }
                break;
            case "XColumn":
                this.rc.cx.g$i();
                if (this.xAxis != null && !this.xAxis.cv()) {
                    this.l0(false);
                }
                break;
            case ScatterBase.$$p[10]:
                if (this.ch != null) {
                    this.ch.deregisterColumn(this.rs);
                    this.rs = this.ce(this.ss);
                }
                break;
            case "YColumn":
                this.rc.cx.g$i();
                if (this.yAxis != null && !this.yAxis.cv()) {
                    this.l0(false);
                }
                break;
            case ScatterBase.$$p[5]:
                this.l0(false);
                this.k7();
                break;
            case ScatterBase.$$p[6]:
                this.l0(false);
                this.k7();
                break;
            case "TransitionProgress":
                this.rj.c(this.gn, this.rh, this.rf);
                this.su();
                try {
                    if (this.ct(this.bx)) {
                        return;
                    }
                    if ((Math.round(this.gn * 100000) / 100000) == 1) {
                        this.te(this.rf, this.rc);
                    }
                    else {
                        this.te(this.rj, this.rc);
                    }
                    if (this.ca != null) {
                        this.ca.ln(this);
                    }
                }
                finally {
                    this.tf();
                }
                break;
            case "TrendLineBrush":
                this.md();
                break;
            case ScatterBase.$$p[0]:
                if (this.rd != null) {
                    this.rd.r = this;
                }
                this.l0(false);
                this.k7();
                break;
            case "TrendLineType":
                this.k7();
                break;
            case ScatterBase.$$p[2]:
                this.ru = this.r2();
                this.l0(false);
                break;
            case ScatterBase.$$p[1]:
                this.rt = this.r1();
                this.l0(false);
                break;
            case ScatterBase.$$p[3]:
                this.rl = this.rm();
                break;
        }
    };
    ScatterBase.prototype.r2 = function () {
        return this.ry;
    };
    ScatterBase.prototype.r1 = function () {
        return this.rx;
    };
    ScatterBase.prototype.rw = function (a) {
        if (typeCast(NumericYAxis.$, a) !== null) {
            return true;
        }
        return false;
    };
    ScatterBase.prototype.rv = function (a) {
        if (typeCast(NumericXAxis.$, a) !== null) {
            return true;
        }
        return false;
    };
    ScatterBase.prototype.tf = function () {
        this.t2 = Rect.empty;
        this.t3 = Rect.empty;
    };
    ScatterBase.prototype.su = function () {
        var a = this.getViewInfo(this.t2, this.t3);
        this.t2 = a.p0;
        this.t3 = a.p1;
    };
    ScatterBase.prototype.r0 = function (a, b) {
        if (b != 3) {
            return true;
        }
        if (a == null) {
            return true;
        }
        if (this.so == a || this.ss == a) {
            return true;
        }
        return false;
    };
    ScatterBase.prototype.kk = function (a, b, c, d) {
        var e = false;
        if (!this.r0(d, a)) {
            return;
        }
        this.rc.cx.g$e(a, b, c, d);
        if (this.xAxis != null && !this.xAxis.cv()) {
            e = true;
        }
        if (this.yAxis != null && !this.yAxis.cv()) {
            e = true;
        }
        if (e) {
            this.l0(true);
        }
    };
    ScatterBase.prototype.s6 = function (a) {
        this.s7(a, null);
    };
    ScatterBase.prototype.s7 = function (a, b) {
        var e_1, _a, e_2, _b;
        var c = this.rr != null ? this.rr.count : 0;
        var d = this.rs != null ? this.rs.count : 0;
        var e = Math.min(c, d);
        if (e <= this.sc) {
            a.m.clear();
            var f = new List$1(OwnedPoint.$, 0);
            try {
                for (var _c = __values(fromEnum(a.u.values)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var g = _d.value;
                    f.add(g);
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return))
                        _a.call(_c);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
            var h_1 = this.ch;
            f.aa(function (i, j) {
                var k = h_1.indexOf(i.a);
                var l = h_1.indexOf(j.a);
                if (k < l) {
                    return -1;
                }
                if (k > l) {
                    return 1;
                }
                return 0;
            });
            if (b != null) {
                b.i = a.m;
            }
            try {
                for (var _e = __values(fromEnum(f)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var i = _f.value;
                    if (h_1.indexOf(i.a) >= 0) {
                        if (b != null) {
                            b.j(i.c);
                        }
                        else {
                            a.m.add({ $type: Point_$type, x: i.c.x, y: i.c.y });
                        }
                    }
                }
            }
            catch (e_2_1) {
                e_2 = { error: e_2_1 };
            }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return))
                        _b.call(_e);
                }
                finally {
                    if (e_2)
                        throw e_2.error;
                }
            }
        }
    };
    ScatterBase.prototype.ap = function (a) {
        if (a != null && a == this.xAxis && this.rr != null) {
            return new AxisRange(this.rr.minimum, this.rr.maximum);
        }
        if (a != null && a == this.yAxis && this.rs != null) {
            return new AxisRange(this.rs.minimum, this.rs.maximum);
        }
        return null;
    };
    ScatterBase.prototype.hh = function (a) {
        var b = this.g0(a);
        if (this.ch != null && b >= 0 && b < this.ch.count) {
            return this.ch.item(b);
        }
        return null;
    };
    Object.defineProperty(ScatterBase.prototype, "rl", {
        get: function () {
            return this.rk;
        },
        set: function (a) {
            var b = this.rk;
            this.rk = a;
            if (b != this.rk) {
                this.raisePropertyChanged("ActualItemSearchMode", enumGetBox(ScatterItemSearchMode_$type, b), enumGetBox(ScatterItemSearchMode_$type, this.rk));
            }
        },
        enumerable: false,
        configurable: true
    });
    ScatterBase.prototype.rm = function () {
        if (this.rn != 0) {
            return this.rn;
        }
        return this.rz ? 4 : 1;
    };
    ScatterBase.prototype.g0 = function (a) {
        var b = truncate(Math.round(this.fw(a)));
        return b;
    };
    ScatterBase.prototype.fw = function (a) {
        switch (this.rl) {
            case 1: return this.r8(a);
            case 3: return this.r9(a);
            case 2: return this.r6(a);
            case 4: return this.r7(a);
        }
        return -1;
    };
    ScatterBase.prototype.r7 = function (a) {
        return this.sa(a, false);
    };
    ScatterBase.prototype.r6 = function (a) {
        var b = this.ox(a);
        var c = b.x;
        var d = b.y;
        if (this.ch == null || this.xAxis == null || this.yAxis == null || this.rr == null || this.rs == null) {
            return -1;
        }
        if (this.ch.count > this.sb) {
            return -1;
        }
        this.sx();
        var e = this.qw;
        var f = this.qx;
        if (e == null || f == null) {
            return -1;
        }
        var g = 1.7976931348623157E+308;
        var h = -1;
        for (var i = 0; i < this.rr.count; i++) {
            var j = e[i];
            var k = f[i];
            var l = (c - j) * (c - j) + (d - k) * (d - k);
            if (l < g) {
                g = l;
                h = i;
            }
        }
        return h;
    };
    ScatterBase.prototype.sx = function () {
        var _this = this;
        var a = this.bx.bv;
        var b = this.bx.bu;
        var c = this.getEffectiveViewport();
        if (this.rb == null) {
            return;
        }
        var d = new ScalerParams(0, a, b, this.rb.d, c);
        var e = ((function () {
            var $ret = new ScalerParams(0, a, b, _this.rb.e, c);
            $ret.b = _this.f2();
            return $ret;
        })());
        if (this.qw == null || this.qx == null) {
            var f = arrayShallowClone(this.rr.asArray());
            var g = arrayShallowClone(this.rs.asArray());
            this.xAxis.g5(boxArray$1(f), 0, f.length, d);
            this.yAxis.g5(boxArray$1(g), 0, g.length, e);
            this.qw = f;
            this.qx = g;
        }
    };
    ScatterBase.prototype.get_rz = function () {
        return false;
    };
    Object.defineProperty(ScatterBase.prototype, "rz", {
        get: function () {
            return this.get_rz();
        },
        enumerable: false,
        configurable: true
    });
    ScatterBase.prototype.sa = function (a, b) {
        if (!this.rz) {
            return -1;
        }
        var c = { $type: Point_$type, x: 0, y: 0 };
        var d = true;
        var e = this.rg();
        if (e == null) {
            return -1;
        }
        if (e.m == null) {
            return -1;
        }
        if (this.ch == null || this.ch.count > this.sb) {
            return -1;
        }
        this.sx();
        var f = this.qw;
        var g = this.qx;
        if (f == null || g == null) {
            return -1;
        }
        var h = this.ox(a);
        var i = 1.7976931348623157E+308;
        var j = -1;
        for (var k = 0; k < this.qw.length; k++) {
            var l = { $type: Point_$type, x: this.qw[k], y: this.qx[k] };
            if (k > 0) {
                if (!b || e.j.containsKey(this.ch.item(k)) || e.j.containsKey(this.ch.item(k - 1))) {
                    var m = GeometryUtil.d(h, c, l);
                    if (m < i) {
                        i = m;
                        j = k;
                    }
                }
            }
            c = l;
        }
        if (j >= 0) {
            var n = { $type: Point_$type, x: this.qw[j], y: this.qx[j] };
            var o = { $type: Point_$type, x: this.qw[j - 1], y: this.qx[j - 1] };
            if (!b || (e.j.containsKey(this.ch.item(j)) && e.j.containsKey(this.ch.item(j - 1)))) {
                var p = GeometryUtil.h(h, o, n);
                return (j - 1) + p;
            }
            else if (e.j.containsKey(this.ch.item(j))) {
                return j;
            }
            else {
                return j - 1;
            }
        }
        return -1;
    };
    ScatterBase.prototype.r9 = function (a) {
        return this.sa(a, true);
    };
    ScatterBase.prototype.r8 = function (a) {
        var _this = this;
        var b = null;
        var c = 1.7976931348623157E+308;
        var d = this.ox(a);
        var e = d.x;
        var f = d.y;
        if (this.rc.cy.e > this.sb) {
            return -1;
        }
        this.rc.c5(function (g) {
            if (g._visibility == 0) {
                var h = _this.rc.cp(g);
                var i = h.left + h.width / 2;
                var j = h.top + h.height / 2;
                var k = (e - i) * (e - i) + (f - j) * (f - j);
                if (k < c) {
                    c = k;
                    b = g;
                }
            }
        });
        if (b != null) {
            return b.ak;
        }
        return -1;
    };
    ScatterBase.prototype.o2 = function (a, b, c) {
        var _this = this;
        if (this.xAxis == null || this.yAxis == null || this.rr == null || this.rs == null) {
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        var d = this.bx.bv;
        var e = this.bx.bu;
        var f = this.getEffectiveViewport();
        var g = new ScalerParams(0, d, e, this.xAxis.cc, f);
        var h = ((function () {
            var $ret = new ScalerParams(0, d, e, _this.yAxis.cc, f);
            $ret.b = _this.f2();
            return $ret;
        })());
        if (b) {
            var i = this.fw(a);
            if (i == -1) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            var j = truncate(Math.floor(i));
            var k = truncate(Math.ceil(i));
            if (j < 0) {
                j = 0;
            }
            if (k < 0) {
                k = 0;
            }
            if (k > this.ch.count - 1) {
                k = this.ch.count - 1;
            }
            if (j > this.ch.count - 1) {
                j = this.ch.count - 1;
            }
            if (k == j) {
                var l = this.xAxis.d8(this.rr.item(j), g);
                var m = this.yAxis.d8(this.rs.item(j), h);
                return { $type: Point_$type, x: l, y: m };
            }
            var n = i - Math.floor(i);
            var o = this.xAxis.d8(this.rr.item(j), g);
            var p = this.yAxis.d8(this.rs.item(j), h);
            var q = this.xAxis.d8(this.rr.item(k), g);
            var r = this.yAxis.d8(this.rs.item(k), h);
            var s = q - o;
            var t = r - p;
            return { $type: Point_$type, x: o + s * n, y: p + t * n };
        }
        else {
            var u = this.g0(a);
            if (u == -1) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            var v = this.xAxis.d8(this.rr.item(u), g);
            var w = this.yAxis.d8(this.rs.item(u), h);
            return { $type: Point_$type, x: v, y: w };
        }
    };
    ScatterBase.prototype.eh = function (a) {
        var _this = this;
        var b = this.ca != null ? this.ca.pg : Rect.empty;
        b = b.copy();
        var c = this.ca != null ? this.ca.pv : Rect.empty;
        var d = new Rect(0, 0, 0, 1, 1);
        var e = this.o9(this.bx);
        var f = new ScalerParams(0, d, d, this.xAxis.cc, e);
        var g = ((function () {
            var $ret = new ScalerParams(0, d, d, _this.yAxis.cc, e);
            $ret.b = _this.f2();
            return $ret;
        })());
        var h = !b.isEmpty && !c.isEmpty && this.ch != null ? this.ch.indexOf(a) : -1;
        var i = this.xAxis != null && this.rr != null && h < this.rr.count ? this.xAxis.d8(this.rr.item(h), f) : NaN;
        var j = this.yAxis != null && this.rs != null && h < this.rs.count ? this.yAxis.d8(this.rs.item(h), g) : NaN;
        if (!isNaN_(i)) {
            if (i < b.left + 0.1 * b.width) {
                i = i + 0.4 * b.width;
                b.x = i - 0.5 * b.width;
            }
            if (i > b.right - 0.1 * b.width) {
                i = i - 0.4 * b.width;
                b.x = i - 0.5 * b.width;
            }
        }
        if (!isNaN_(j)) {
            if (j < b.top + 0.1 * b.height) {
                j = j + 0.4 * b.height;
                b.y = j - 0.5 * b.height;
            }
            if (j > b.bottom - 0.1 * b.height) {
                j = j - 0.4 * b.height;
                b.y = j - 0.5 * b.height;
            }
        }
        if (this.b5 != null) {
            this.b5.ap(this.ca, b, true);
        }
        return h >= 0;
    };
    ScatterBase.prototype.mm = function (a, b) {
        this.l0(false);
    };
    ScatterBase.prototype.mn = function (a, b) {
        this.l0(false);
    };
    ScatterBase.prototype.rg = function () {
        var a = this.rf;
        if (this.cr()) {
            if (this.cb.g) {
                this.cb.t();
            }
            a = this.rj;
        }
        return a;
    };
    ScatterBase.prototype.sv = function (a, b, c, d, e) {
        var _this = this;
        b.g = new Dictionary$2(Base.$, OwnedPoint.$, 1, c);
        var f = this.getEffectiveViewport1(a);
        var g = this.ch;
        var h;
        var i;
        var j = ((function () {
            var $ret = new ScalerParams(0, d, e, _this.rb.d, f);
            $ret.c = _this.getEffectiveViewport1(a);
            return $ret;
        })());
        var k = ((function () {
            var $ret = new ScalerParams(0, d, e, _this.rb.e, f);
            $ret.c = _this.getEffectiveViewport1(a);
            $ret.b = _this.f2();
            return $ret;
        })());
        var l = false;
        var m = 0;
        if (this.ca != null) {
            if (this.ca.ei()) {
                var n = this.ca.i1(d, j);
                l = n.c;
                m = n.d;
            }
        }
        var _loop_1 = function (o) {
            h = this_1.rr.item(o);
            i = this_1.rs.item(o);
            var p = { $type: Point_$type, x: this_1.rb.a.d8(h, j), y: this_1.rb.b.d8(i, k) };
            if (l) {
                if (p.x < e.left || p.x > e.right) {
                    if (p.x + m >= e.left && p.x + m <= e.right) {
                        p = { $type: Point_$type, x: p.x + m, y: i };
                    }
                }
            }
            if (!isInfinity(p.x) && !isInfinity(p.y)) {
                var q_1 = g.item(o);
                if (!b.g.containsKey(q_1)) {
                    var r_1 = { $type: Point_$type, x: h, y: i };
                    var s_1 = { $type: Point_$type, x: p.x, y: p.y };
                    b.g.addItem(q_1, ((function () {
                        var $ret = new OwnedPoint();
                        $ret.a = q_1;
                        $ret.b = r_1;
                        $ret.c = s_1;
                        return $ret;
                    })()));
                }
            }
        };
        var this_1 = this;
        for (var o = 0; o < c; o++) {
            _loop_1(o);
        }
    };
    ScatterBase.prototype.s3 = function (a, b) {
        var _this = this;
        this.qw = null;
        this.qx = null;
        a.j.clear();
        a.n.clear();
        a.h.clear();
        a.l.clear();
        a.i.clear();
        a.k.clear();
        var c = Math.min(this.rr != null ? this.rr.count : 0, this.rs != null ? this.rs.count : 0);
        var d = b.bv;
        var e = b.bu;
        var f = this.getEffectiveViewport1(b);
        var g = new ScalerParams(0, d, e, this.xAxis.cc, f);
        g.c = this.getEffectiveViewport1(b);
        var h = ((function () {
            var $ret = new ScalerParams(0, d, e, _this.yAxis.cc, f);
            $ret.b = _this.f2();
            return $ret;
        })());
        h.c = this.getEffectiveViewport1(b);
        if (c < 1) {
            return;
        }
        this.rb = ((function () {
            var $ret = new ScatterAxisInfoCache();
            $ret.a = _this.xAxis;
            $ret.b = _this.yAxis;
            $ret.d = _this.xAxis.cc;
            $ret.e = _this.yAxis.cc;
            $ret.c = _this.ch;
            return $ret;
        })());
        var i = b;
        if (c <= this.sc) {
            this.sv(i, a, c, d, e);
        }
        if (this.pt()) {
            b.cv.l(a.j, this.sc, d, e, this.gh);
        }
        var j = ((function () {
            var $ret = new Clipper(0, e, false);
            $ret.i = a.n;
            return $ret;
        })());
        var k = this.o7(b);
        var l = this.xAxis.eb(k.left, g);
        var m = this.xAxis.eb(k.right, g);
        b.cx.h(a.n, this.trendLineType, this.rr, this.rs, this.trendLinePeriod, function (n) { return _this.xAxis.d8(n, g); }, function (n) { return _this.yAxis.d8(n, h); }, ((function () {
            var $ret = new TrendResolutionParams();
            $ret.b = _this.gh;
            $ret.f = e;
            $ret.g = d;
            return $ret;
        })()), j, l, m);
        this.s1(a, b);
    };
    ScatterBase.prototype.kh = function (a, b) {
        _super.prototype.kh.call(this, a, b);
        var c = b;
        c.c4(a);
    };
    ScatterBase.prototype.get_dr = function () {
        return true;
    };
    ScatterBase.prototype.q5 = function (a, b, c) {
        return null;
    };
    ScatterBase.prototype.q6 = function (a, b, c) {
        var d = this.rg();
        var e = this.rc.by(this.ox(b));
        var f = -1;
        if (e == null) {
            if (a != null) {
                f = this.ch.indexOf(a);
            }
            else {
                return null;
            }
        }
        else {
            f = e.ak;
        }
        if (f == -1) {
            return null;
        }
        var g = new HighlightingInfo();
        g.b = this;
        g.h = f;
        g.g = f;
        g.d = false;
        g.e = true;
        if (c != null && c.h == g.h && c.g == g.g) {
            return c;
        }
        return g;
    };
    ScatterBase.prototype.pg = function () {
        if (this.pr != 1 && this.pr != 13) {
            var a = this.pq.cq();
            var b = (a.width / 2) + (this.pw / 2);
            var c = (a.height / 2) + (this.pw / 2);
            return new Thickness(1, b, c, b, c);
        }
        return new Thickness(1, 0, 0, 0, 0);
    };
    ScatterBase.prototype.q4 = function (a, b, c) {
        var d = new HighlightingInfo();
        d.b = this;
        d.h = 0;
        d.g = this.ch.count - 1;
        d.d = true;
        if (c != null && c.h == d.h && c.g == d.g) {
            return c;
        }
        return d;
    };
    ScatterBase.prototype.av = function (a, b, c) {
        if (this.cy && this.d9(this.bj) && !c) {
            var d = this.q5(a, b, this.q7);
            this.q7 = d;
            return d;
        }
        else {
            var e = this.q4(a, b, this.q7);
            this.q7 = e;
            return e;
        }
    };
    ScatterBase.prototype.aw = function (a, b, c) {
        if (this.d9(this.bj) && !c) {
            var d = this.q6(a, b, this.q8);
            this.q8 = d;
            return d;
        }
        else {
            var e = this.q4(a, b, this.q8);
            e.e = true;
            this.q8 = e;
            return e;
        }
    };
    ScatterBase.prototype.r4 = function () {
        return (this.assigningScatterStyle != null && this.ru) || (this.bj != 1);
    };
    ScatterBase.prototype.r3 = function () {
        return (this.assigningScatterMarkerStyle != null && this.rt) || (this.bj != 1);
    };
    ScatterBase.prototype.te = function (a, b) {
        var _this = this;
        var c = b.bu;
        this.rb = ((function () {
            var $ret = new ScatterAxisInfoCache();
            $ret.a = _this.xAxis;
            $ret.b = _this.yAxis;
            $ret.d = _this.xAxis.cc;
            $ret.e = _this.yAxis.cc;
            return $ret;
        })());
        if (this.pt()) {
            b.cv.j(a.j, this.pv);
            if (this.r3()) {
                this.sw(b, a);
            }
        }
        b.cm();
        var d = ((function () {
            var $ret = new Clipper(1, NaN, c.bottom, NaN, c.top, false);
            $ret.i = b.cx.g$j.ak;
            return $ret;
        })());
        b.cx.g$h(a.n, d);
        this.tb(a, b);
    };
    ScatterBase.prototype.qz = function (a, b) {
        return this.q0(a, b);
    };
    ScatterBase.prototype.q0 = function (a, b) {
        if (b < a || a < 0 || a > this.rr.count || b < 0 || b > this.rr.count) {
            return null;
        }
        var c = new Array((b - a) + 1);
        for (var d = a; d <= b; d++) {
            var e = d;
            c[d - a] = this.ch.item(d);
        }
        return c;
    };
    ScatterBase.prototype.sw = function (a, b) {
        var _this = this;
        a.b3 = true;
        this.ro.aw(this, this.r3(), runOn(this, this.qz));
        var c = this.ro.d;
        var d = c != null;
        var e = this.getEffectiveViewport1(a);
        var f = this.ch == null ? 0 : this.ch.count;
        this.rc.cf(function (g) {
            if (g._visibility == 0) {
                var h = g.ak;
                var i = g.content;
                if (i == null) {
                    i = new DataContext();
                    g.content = i;
                }
                if (d) {
                    _this.sy(h, f, a.q);
                }
                _this.ro.ac(g, i);
            }
        });
    };
    ScatterBase.prototype.sz = function (a, b, c) {
        var d = this.bj != 1;
        this.ro.ay(this.ro.b, a, b, false);
        this.ro.ab(this.fj);
        var e = this.ro.av;
        var f = null;
        var g = this.ch;
        if (d && this.ca != null) {
            f = this.ca.a3.getHighlightingInfo(this, g, e.o, e.n, false);
            e.b = f;
        }
        e.f = c;
        this.s9(e);
        this.ro.z(this, f, c, d, a < 0);
    };
    ScatterBase.prototype.sy = function (a, b, c) {
        var d = this.bj != 1;
        this.ro.ay(this.ro.d, a, b, true);
        this.ro.aa(this.fj);
        var e = this.ro.au;
        var f = null;
        var g = this.ch;
        var h = null;
        if (d && this.ca != null) {
            f = this.ca.a3.getHighlightingInfo(this, g, e.o, e.n, true);
            if (this.ca.a3.isCrossSeriesHighlight(this)) {
                h = this.ca.a3.getHighlightingInfo(this, g, e.o, e.n, true);
            }
            e.b = f;
        }
        e.f = c;
        this.s8(e);
        this.ro.y(this, f, c, d, e.m, this.ca.a3.totalHighlightingProgress);
    };
    ScatterBase.prototype.s9 = function (a) {
        if (this.assigningScatterStyle != null && this.ru) {
            this.assigningScatterStyle(this, a);
        }
    };
    ScatterBase.prototype.s8 = function (a) {
        if (this.assigningScatterMarkerStyle != null && this.rt) {
            this.assigningScatterMarkerStyle(this, a);
        }
    };
    ScatterBase.prototype.s1 = function (a, b) {
        var e_3, _a;
        var c = new ErrorBarsHelper(this, b);
        if (this.rd == null) {
            return;
        }
        var d = this.rd.u;
        var e = this.rd.v;
        var f = 0;
        var g = 0;
        var h = 0;
        var i = 0;
        try {
            for (var _b = __values(fromEnum(a.j.keys)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var j = _c.value;
                var k = a.j.item(j);
                if (d != null) {
                    switch (d.getCalculatorType()) {
                        case 1:
                            var l = this.s4(k, c, d, h, i, true);
                            h = l.p3;
                            i = l.p4;
                            break;
                        case 0:
                            var m = this.s2(k, c, d, h, i, true);
                            h = m.p3;
                            i = m.p4;
                            break;
                        case 2:
                            var n = this.s0(k, c, d, j, h, i, true);
                            h = n.p4;
                            i = n.p5;
                            break;
                        case 3:
                            var o = this.s5(c, d, f, h, i, true);
                            f = o.p2;
                            h = o.p3;
                            i = o.p4;
                            break;
                        case 4:
                            var p = this.s2(k, c, d, h, i, true);
                            h = p.p3;
                            i = p.p4;
                            break;
                    }
                    ;
                    var q = new OwnedPoint();
                    q.c = c.l(d, this.rb.a, k.c, f);
                    q.a = k.a;
                    a.h.addItem(j, q);
                    a.i.addItem(j, [h, i]);
                }
                if (e != null) {
                    switch (e.getCalculatorType()) {
                        case 1:
                            var r = this.s4(k, c, e, h, i, false);
                            h = r.p3;
                            i = r.p4;
                            break;
                        case 0:
                            var s = this.s2(k, c, e, h, i, false);
                            h = s.p3;
                            i = s.p4;
                            break;
                        case 2:
                            var t = this.s0(k, c, e, j, h, i, false);
                            h = t.p4;
                            i = t.p5;
                            break;
                        case 3:
                            var u = this.s5(c, e, g, h, i, false);
                            g = u.p2;
                            h = u.p3;
                            i = u.p4;
                            break;
                        case 4:
                            var v = this.s2(k, c, e, h, i, false);
                            h = v.p3;
                            i = v.p4;
                            break;
                    }
                    ;
                    var w = new OwnedPoint();
                    w.c = c.m(e, this.rb.b, k.c, g);
                    w.a = k.a;
                    a.l.addItem(j, w);
                    a.k.addItem(j, [h, i]);
                }
            }
        }
        catch (e_3_1) {
            e_3 = { error: e_3_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_3)
                    throw e_3.error;
            }
        }
    };
    ScatterBase.prototype.s4 = function (a, b, c, d, e, f) {
        if (f) {
            var g = void 0;
            var h = void 0, i = void 0;
            i = this.rb.a;
            if (this.rd.s == 0) {
                g = a.c.x;
                h = this.rb.a;
            }
            else {
                g = a.c.y;
                h = this.rb.b;
            }
            var j = b.f(g, c, h, i, d, e);
            d = j.p4;
            e = j.p5;
        }
        else {
            var k = void 0;
            var l = void 0, m = void 0;
            m = this.rb.b;
            if (this.rd.t == 0) {
                k = a.c.x;
                l = this.rb.a;
            }
            else {
                k = a.c.y;
                l = this.rb.b;
            }
            var n = b.f(k, c, l, m, d, e);
            d = n.p4;
            e = n.p5;
        }
        return {
            p3: d,
            p4: e
        };
    };
    ScatterBase.prototype.s2 = function (a, b, c, d, e, f) {
        if (f) {
            var g = b.j(a.c.x, c, this.rb.a, d, e);
            d = g.p3;
            e = g.p4;
        }
        else {
            var h = b.j(a.c.y, c, this.rb.b, d, e);
            d = h.p3;
            e = h.p4;
        }
        return {
            p3: d,
            p4: e
        };
    };
    ScatterBase.prototype.s0 = function (a, b, c, d, e, f, g) {
        var h = c.getItemColumn();
        var i = this.ch.indexOf(d);
        if (h != null && i < h.count) {
            var j = h.item(i);
            if (g) {
                var k = b.h(a.c.x, j, this.rb.a, e, f);
                e = k.p3;
                f = k.p4;
            }
            else {
                var l = b.h(a.c.y, j, this.rb.b, e, f);
                e = l.p3;
                f = l.p4;
            }
        }
        else {
            e = NaN;
            f = NaN;
        }
        return {
            p4: e,
            p5: f
        };
    };
    ScatterBase.prototype.s5 = function (a, b, c, d, e, f) {
        var g = a.i(b, c);
        c = g.p1;
        if (f) {
            var h = a.k(c, b, this.rb.a, d, e);
            d = h.p3;
            e = h.p4;
        }
        else {
            var i = a.k(c, b, this.rb.b, d, e);
            d = i.p3;
            e = i.p4;
        }
        return {
            p2: c,
            p3: d,
            p4: e
        };
    };
    ScatterBase.prototype.tb = function (a, b) {
        if (!b.o() || this.rd == null) {
            b.c6();
            return;
        }
        this.tc(a, b);
        this.td(a, b);
    };
    ScatterBase.prototype.tc = function (a, b) {
        var e_4, _a;
        b.c2();
        var c = new ErrorBarsHelper(this, b);
        var d = new PathGeometry();
        var e = this.rd.u;
        try {
            for (var _b = __values(fromEnum(a.j.keys)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var f = _c.value;
                if (e != null && a.i.containsKey(f)) {
                    var g = a.i.item(f)[0];
                    var h = a.i.item(f)[1];
                    if (!isNaN_(g) && !isNaN_(h)) {
                        var i = a.h.item(f).c;
                        if (this.rd.o == 1 || this.rd.o == 2) {
                            c.d(d, i, g, true);
                        }
                        if (this.rd.o == 1 || this.rd.o == 3) {
                            c.d(d, i, h, false);
                        }
                    }
                }
            }
        }
        catch (e_4_1) {
            e_4 = { error: e_4_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_4)
                    throw e_4.error;
            }
        }
        b.c7(d);
    };
    ScatterBase.prototype.td = function (a, b) {
        var e_5, _a;
        b.c3();
        var c = new ErrorBarsHelper(this, b);
        var d = new PathGeometry();
        var e = this.rd.v;
        try {
            for (var _b = __values(fromEnum(a.j.keys)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var f = _c.value;
                if (e != null && a.k.containsKey(f)) {
                    var g = a.k.item(f)[0];
                    var h = a.k.item(f)[1];
                    if (!isNaN_(g) && !isNaN_(h)) {
                        var i = a.l.item(f).c;
                        if (this.rd.p == 1 || this.rd.p == 2) {
                            c.e(d, i, g, true);
                        }
                        if (this.rd.p == 1 || this.rd.p == 3) {
                            c.e(d, i, h, false);
                        }
                    }
                }
            }
        }
        catch (e_5_1) {
            e_5 = { error: e_5_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_5)
                    throw e_5.error;
            }
        }
    };
    ScatterBase.prototype.e3 = function (a, b, c) {
        var d = true;
        if (!_super.prototype.e3.call(this, a, b, c) || b.isEmpty || a.isEmpty || this.xAxis == null || this.yAxis == null || this.xAxis.bh == null || this.yAxis.bh == null || this.rr == null || this.rs == null || this.rr.count == 0 || this.rs.count == 0 || this.ch == null || this.ch.count != this.rr.count || this.ch.count != this.rs.count || this.xAxis.bh == null || this.yAxis.bh == null || this.xAxis.kv == this.xAxis.ku || this.yAxis.kv == this.yAxis.ku) {
            d = false;
        }
        return d;
    };
    ScatterBase.prototype.getViewInfo = function (a, b) {
        if (!this.t2.isEmpty && !this.t3.isEmpty) {
            a = this.t2;
            b = this.t3;
            return {
                p0: a,
                p1: b
            };
        }
        a = this.bx.bu;
        b = this.bx.bv;
        return {
            p0: a,
            p1: b
        };
    };
    ScatterBase.prototype.l1 = function (a) {
        this.su();
        try {
            if (this.ct(this.bx)) {
                return;
            }
            if (this.ch != null && this.ch.count > this.sc) {
                a = false;
            }
            if (this.ei(a) && !this.em) {
                var b = this.rh;
                if (this.cr()) {
                    if (this.cb.g) {
                        this.cb.t();
                    }
                    this.rh = this.rj;
                    this.rj = b;
                }
                else {
                    this.rh = this.rf;
                    this.rf = b;
                }
                this.s3(this.rf, this.rc);
                this.l8();
            }
            else {
                if (!this.em) {
                    this.s3(this.rf, this.rc);
                }
                this.te(this.rf, this.rc);
            }
        }
        finally {
            this.tf();
        }
    };
    ScatterBase.prototype.md = function () {
        _super.prototype.md.call(this);
        if (this.g9 < 0) {
            return;
        }
        this.rc.da();
    };
    ScatterBase.prototype.l2 = function (a, b) {
        _super.prototype.l2.call(this, a, b);
        if (!this.et) {
            this.bx.a2(b);
            return;
        }
        this.bx.a2(b);
        if (this.ct(this.bw)) {
            return;
        }
        var c = typeCast(ScatterBaseView.$, this.bw);
        if (!this.en) {
            this.ri = new ScatterFrame();
            this.s3(this.ri, c);
        }
        this.en = false;
        this.te(this.ri, c);
        this.et = false;
    };
    ScatterBase.prototype.lz = function (a, b, c, d, e) {
        _super.prototype.lz.call(this, a, b, c, d, e);
        var f = this.a4.a$h.item(d);
        var g = f;
        f.a1(c);
        if (this.ct(g)) {
            return;
        }
        if (this.re == null) {
            this.re = new ScatterFrame();
        }
        this.s3(this.re, g);
        this.te(this.re, g);
    };
    ScatterBase.prototype.ta = function (a, b) {
        var e_6, _a, e_7, _b;
        var c = new List$1(Base.$, 0);
        try {
            for (var _c = __values(fromEnum(b.c)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var d = _d.value;
                if (!a.containsKey(d)) {
                    c.add1(d);
                }
            }
        }
        catch (e_6_1) {
            e_6 = { error: e_6_1 };
        }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return))
                    _a.call(_c);
            }
            finally {
                if (e_6)
                    throw e_6.error;
            }
        }
        try {
            for (var _e = __values(fromEnum(c)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var e = _f.value;
                b.h(e);
            }
        }
        catch (e_7_1) {
            e_7 = { error: e_7_1 };
        }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return))
                    _b.call(_e);
            }
            finally {
                if (e_7)
                    throw e_7.error;
            }
        }
    };
    ScatterBase.prototype.qy = function (a, b, c, d, e) {
        var _this = this;
        if (c == null || c.length != this.rb.c.count) {
            c = new Array(this.rb.c.count);
            for (var f = 0; f < this.rb.c.count; f++) {
                c[f] = PointUtil.create();
            }
        }
        var g = this.getEffectiveViewport1(a);
        var h = ((function () {
            var $ret = new ScalerParams(0, d, e, _this.xAxis.cc, g);
            $ret.c = _this.getEffectiveViewport1(a);
            return $ret;
        })());
        var i = ((function () {
            var $ret = new ScalerParams(0, d, e, _this.yAxis.cc, g);
            $ret.c = _this.getEffectiveViewport1(a);
            $ret.b = _this.f2();
            return $ret;
        })());
        var j = this.o7(a);
        var k = this.rb.a.eb(j.left, h);
        var l = this.rb.a.eb(j.right, h);
        var m = this.rb.b.eb(j.bottom, i);
        var n = this.rb.b.eb(j.top, i);
        if (this.rb.d) {
            var o = k;
            k = l;
            l = o;
        }
        if (this.rb.e) {
            var p = m;
            m = n;
            n = p;
        }
        var q = this.rb;
        var r = q.a;
        var s = q.b;
        var t;
        var u;
        var v = this.rr;
        var w = this.rs;
        var x = false;
        var y = 0;
        var z = 0;
        if (this.ca != null) {
            if (this.ca.ei()) {
                var aa = this.ca.i1(d, h);
                x = aa.c;
                y = aa.d;
                z = r.eb(0 + y, h);
                var ab = r.eb(0, h);
                z -= ab;
            }
        }
        for (var ac = 0; ac < this.rb.c.count; ac++) {
            t = v.item(ac);
            u = w.item(ac);
            if (x) {
                if (t >= k && t <= l && u >= m && u <= n) {
                    c[ac].x = r.d8(t, h);
                    c[ac].y = s.d8(u, i);
                }
                else {
                    if ((t + z) >= k && (t + z) <= l && u >= m && u <= n) {
                        c[ac].x = r.d8(t, h) + y;
                        c[ac].y = s.d8(u, i);
                    }
                    else {
                        c[ac].x = NaN;
                        c[ac].y = NaN;
                    }
                }
            }
            else {
                if (t >= k && t <= l && u >= m && u <= n) {
                    c[ac].x = r.d8(t, h);
                    c[ac].y = s.d8(u, i);
                }
                else {
                    c[ac].x = NaN;
                    c[ac].y = NaN;
                }
            }
        }
        return c;
    };
    ScatterBase.prototype.r5 = function (a, b) {
        var e_8, _a;
        if (b == null) {
            b = new List$1(Number_$type, 2, a.e);
        }
        else {
            b.clear();
        }
        var c = 0;
        var d = this.ch;
        try {
            for (var _b = __values(fromEnum(a.c)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var e = _c.value;
                b.add(d.indexOf(e));
            }
        }
        catch (e_8_1) {
            e_8 = { error: e_8_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_8)
                    throw e_8.error;
            }
        }
        return b;
    };
    ScatterBase.prototype.kr = function (a) {
        _super.prototype.kr.call(this, a);
        this.a6.exportTrendlineData(this, a, this.rc.cx.g$j);
    };
    ScatterBase.prototype.f2 = function () {
        return Series.f3(this.rs, null);
    };
    ScatterBase.$t = markType(ScatterBase, 'ScatterBase', MarkerSeries.$, [ISupportsErrorBars_$type, ITrendLineSeries_$type]);
    ScatterBase.tg = DependencyProperty.i("ActualTrendLineBrush", Brush.$, ScatterBase.$, new PropertyMetadata(2, null, function (a, b) { return a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue); }));
    ScatterBase.$$p = markDep(DependencyProperty, PropertyMetadata, ScatterBase, 'raisePropertyChanged', ['ErrorBarSettings:rd:th', [ScatterErrorBarSettings.$, null], 'IsCustomScatterMarkerStyleAllowed:rx:ti', [0, false], 'IsCustomScatterStyleAllowed:ry:tj', [0, false], 'ItemSearchMode:rn:tk', [ScatterItemSearchMode_$type, enumGetBox(ScatterItemSearchMode_$type, 0)], 'ItemSearchThreshold:sb:tl', [1, 10000], 'MarkerCollisionAvoidance:q3:tm', [CollisionAvoidanceType_$type, enumGetBox(CollisionAvoidanceType_$type, 0)], 'MaximumMarkers:sc:tn', [1, 400], 'XAxis::tv', [NumericXAxis.$, null], 'XMemberPath:so:tw', [2, null], 'YAxis::tx', [NumericYAxis.$, null], 'YMemberPath:ss:ty', [2, null], 'TrendLineType::tt', [TrendLineType_$type, enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness::ts', [1, 1.5], 'TrendLinePeriod::tr', [1, 7], 'TrendLineBrush::to', [Brush.$, null], 'TrendLineZIndex:sd:tu', [1, 1001], 'TrendLineDashArray:t0:tp', [DoubleCollection.$], 'TrendLineDashCap:t1:tq', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 0)]]);
    return ScatterBase;
}(MarkerSeries));
export { ScatterBase };
/**
 * @hidden
 */
var ScatterSeriesRenderManager = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ScatterSeriesRenderManager, _super);
    function ScatterSeriesRenderManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.au = null;
        _this.av = null;
        return _this;
    }
    ScatterSeriesRenderManager.prototype.c = function () {
        this.au = new AssigningScatterMarkerStyleEventArgs();
        return this.au;
    };
    ScatterSeriesRenderManager.prototype.a = function () {
        this.av = new AssigningScatterStyleEventArgs();
        return this.av;
    };
    ScatterSeriesRenderManager.prototype.aw = function (a, b, c) {
        this.w(a, b, c);
    };
    ScatterSeriesRenderManager.prototype.ax = function (a, b, c) {
        this.x(a, b, c);
    };
    ScatterSeriesRenderManager.prototype.ay = function (a, b, c, d) {
        if (b == -1) {
            a.c = false;
            a.o = 0;
            a.n = c - 1;
        }
        else {
            if (d) {
                a.o = b;
                a.n = b;
            }
            else {
                a.c = false;
                a.o = b;
                a.n = b;
            }
        }
    };
    ScatterSeriesRenderManager.$t = markType(ScatterSeriesRenderManager, 'ScatterSeriesRenderManager', SeriesRenderManager.$);
    return ScatterSeriesRenderManager;
}(SeriesRenderManager));
export { ScatterSeriesRenderManager };
/**
 * @hidden
 */
var ScatterBaseView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ScatterBaseView, _super);
    function ScatterBaseView(a) {
        var _this = _super.call(this, a) || this;
        _this.cv = null;
        _this.ct = null;
        _this.cw = null;
        _this.c1 = null;
        _this.dc = null;
        _this.dd = null;
        _this.cx = null;
        _this.db = null;
        _this.cy = null;
        _this.cw = a;
        _this.cy = new HashPool$2(Base.$, Marker.$);
        _this.ch(_this.cy);
        _this.cx = new ScatterTrendLineManager();
        return _this;
    }
    ScatterBaseView.prototype.as = function () {
        _super.prototype.as.call(this);
        this.cv = this.cu();
        this.dc = new Path();
        this.dd = new Path();
        if (!this.q) {
            this.cw.sc = 2000;
        }
    };
    ScatterBaseView.prototype.de = function (a) {
        if (this.db == null) {
            this.db = new DataTemplateMeasureInfo();
            this.db.context = this.k.g();
        }
        this.db.width = a.width;
        this.db.height = a.height;
        this.db.data = a.content;
        var b = a.ah;
        if (b.measure != null) {
            b.measure(this.db);
        }
        return new Size(1, this.db.width, this.db.height);
    };
    ScatterBaseView.prototype.cu = function () {
        var _this = this;
        var a = new NumericMarkerManager(1, function (b) { return _this.cy.item(b); }, function (b) { return _this.cw.rb.c.item(b); }, runOn(this, this.c9), runOn(this, this.cr), runOn(this, this.cz), function () { return _this.cw.q3; });
        a.q = runOn(this, this.de);
        return a;
    };
    ScatterBaseView.prototype.c9 = function (a) {
        this.cw.ta(a, this.cy);
    };
    ScatterBaseView.prototype.c0 = function () {
        return this.b4;
    };
    ScatterBaseView.prototype.cs = function () {
        return this.ct;
    };
    ScatterBaseView.prototype.cr = function () {
        this.ct = this.cw.qy(this, this.cy, this.ct, this.bv, this.bu);
        return this.ct;
    };
    ScatterBaseView.prototype.cz = function () {
        this.c1 = this.cw.r5(this.cy, this.c1);
        return this.c1;
    };
    ScatterBaseView.prototype.c2 = function () {
    };
    ScatterBaseView.prototype.c7 = function (a) {
    };
    ScatterBaseView.prototype.c3 = function () {
    };
    ScatterBaseView.prototype.c8 = function (a) {
    };
    ScatterBaseView.prototype.da = function () {
        if (this.cw.trendLineBrush != null) {
            this.cw.tz = this.cw.trendLineBrush;
        }
        else {
            this.cw.tz = this.cw.of;
        }
    };
    ScatterBaseView.prototype.cf = function (a) {
        this.cy.f(a);
    };
    ScatterBaseView.prototype.c5 = function (a) {
        this.cy.g(a);
    };
    ScatterBaseView.prototype.c6 = function () {
    };
    ScatterBaseView.prototype.a5 = function (a, b) {
        _super.prototype.a5.call(this, a, b);
        if (a.d) {
            if (this.cw.trendLineType != 0 && !b) {
                var c = this.cx.g$j;
                c.ac = this.cw.trendLineThickness;
                c._stroke = this.cw.tz;
                c.ai = this.cw.t0;
                c.ad = this.cw.t1;
                a.u(c);
            }
        }
    };
    ScatterBaseView.prototype.c4 = function (a) {
        if (a) {
            this.c6();
            this.cy.clear();
        }
        this.cx.g$d();
        this.aq();
    };
    ScatterBaseView.prototype.getDefaultTooltipTemplate = function () {
        var a = "<div class='ui-chart-default-tooltip-content'><span";
        var b = this.e.a4.a$r(this.e);
        if (!stringIsNullOrEmpty(b)) {
            a += " style='color:" + b + "'";
        }
        a += ">" + this.cw.hp + "</span><br/><span>" + "x: </span><span class='ui-priority-primary'>${item." + this.cw.so + "}</span><br/><span>" + "y: </span><span class='ui-priority-primary'>${item." + this.cw.ss + "}</span></div>";
        return a;
    };
    ScatterBaseView.$t = markType(ScatterBaseView, 'ScatterBaseView', MarkerSeriesView.$);
    return ScatterBaseView;
}(MarkerSeriesView));
export { ScatterBaseView };
//# sourceMappingURL=ScatterBase_combined.js.map
