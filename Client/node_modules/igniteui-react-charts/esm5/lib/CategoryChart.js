/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { XYChart } from "./XYChart";
import { typeCast, runOn, delegateCombine, enumGetBox, markType, TypeRegistrar, getInstanceType } from "igniteui-react-core";
import { CategoryChartType_$type } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance_$type } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode_$type } from "./CategoryTransitionInMode";
import { TransitionInSpeedType_$type } from "./TransitionInSpeedType";
import { CategoryXAxis } from "./CategoryXAxis";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleCategorySeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { Series } from "./Series";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { ArrayExtension } from "igniteui-react-core";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { CategoryChartMockDataGenerator } from "./CategoryChartMockDataGenerator";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
var CategoryChart = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CategoryChart, _super);
    function CategoryChart() {
        var _this = _super.call(this) || this;
        _this.ug = 1000;
        _this.tf = null;
        _this.sz = 9;
        _this.s1 = 1;
        _this.tj = false;
        _this.s3 = 0;
        _this.td = 0;
        _this.tt = 0;
        _this.tu = 0;
        _this.ts = 0;
        _this.tv = 0;
        _this.tw = NaN;
        _this.tl = false;
        _this.uh = 10;
        _this.ty = NaN;
        _this.tx = NaN;
        _this.tz = 0;
        _this.sv = null;
        _this.sw = null;
        _this.tk = true;
        _this.th = false;
        _this.ti = false;
        _this.tr = null;
        _this.i4();
        return _this;
    }
    CategoryChart.prototype.jl = function () {
        _super.prototype.jl.call(this);
        if (this.dataChart == null) {
            return;
        }
        var a = this.dataChart.cf.j.e();
        this.sx = a.d;
        this.sy = a.e;
        if (this.r7 == null) {
            this.r7 = a.k;
        }
        if (this.se == null) {
            this.se = a.k;
        }
        this.n6 = 0;
        this.sf = AxisDefaults.h;
        this.si = null;
        this.sb = AxisDefaults.g;
        this.r8 = null;
        this.np = AxisDefaults.f;
        this.sc = AxisDefaults.j;
        this.nq = AxisDefaults.e;
        this.ce = true;
        this.cf = false;
        this.aa = 0;
        this.ea = Defaults.j;
        this.lg = Defaults.ae;
        this.lb = Defaults.af;
        this.lc = Defaults.ag;
    };
    CategoryChart.prototype.jn = function (a, b) {
        _super.prototype.jn.call(this, a, b);
        a.hb = this.ui;
        a.cd = this.tg;
    };
    CategoryChart.prototype.j7 = function (a, b, c) {
        var _this = this;
        _super.prototype.j7.call(this, a, b, c);
        switch (a) {
            case "TransitionInDuration":
                this.ja(function (d) { return d.hb = _this.ui; });
                break;
            case "TransitionInEasingFunction":
                this.ja(function (d) { return d.cd = _this.tg; });
                break;
        }
    };
    Object.defineProperty(CategoryChart.prototype, "ui", {
        get: function () {
            return this.ug;
        },
        set: function (a) {
            var b = this.ui;
            if (a != b) {
                this.ug = a;
                this.j6("TransitionInDuration", b, this.ui);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "tg", {
        get: function () {
            return this.tf;
        },
        set: function (a) {
            var b = this.tg;
            if (a != b) {
                this.tf = a;
                this.j6("TransitionInEasingFunction", b, this.tg);
            }
        },
        enumerable: false,
        configurable: true
    });
    CategoryChart.prototype.ul = function () {
        var cvd_ = this.fe();
        cvd_.scaleByViewport();
        return (cvd_.serialize());
    };
    CategoryChart.prototype.jg = function (a) {
        _super.prototype.jg.call(this, a);
        a.da = this.ca;
    };
    CategoryChart.prototype.jm = function (a, b) {
        _super.prototype.jm.call(this, a, b);
        var c = typeCast(HorizontalAnchoredCategorySeries.$, a);
        if (c == null) {
            return;
        }
        c.sx = this.s2;
        c.ru = this.to;
        c.re = this.s4;
        c.b7 = this.te;
        c.trendLineBrush = ArrayExtension.getModulus$1(Brush.$, this.t, b);
        c.trendLineType = this.bm;
        c.trendLineThickness = this.ev;
        c.pr = this.a3(a, b);
        if (a.dx) {
            a.l5(ArrayExtension.getModulus$1(Brush.$, this.sx, b), ArrayExtension.getModulus$1(Brush.$, this.sy, b));
        }
    };
    CategoryChart.prototype.s5 = function () {
        return new CategoryXAxis();
    };
    CategoryChart.prototype.s9 = function () {
        return new NumericYAxis();
    };
    CategoryChart.prototype.i1 = function () {
        this.xAxis = this.s5();
        this.xAxis.name = "xAxis";
        var a = this.xAxis;
        a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.u9));
        this.yAxis = this.s9();
        this.yAxis.name = "yAxis";
        var b = this.yAxis;
        b.propertyChanged = delegateCombine(b.propertyChanged, runOn(this, this.va));
        if (this.xAxis.ay == null) {
            this.xAxis.ay = new AxisLabelSettings();
        }
        if (this.yAxis.ay == null) {
            this.yAxis.ay = new AxisLabelSettings();
        }
    };
    CategoryChart.prototype.q7 = function (a) {
        _super.prototype.q7.call(this, a);
        a.kf = this.tp;
    };
    CategoryChart.prototype.get_ai = function () {
        return 0;
    };
    Object.defineProperty(CategoryChart.prototype, "ai", {
        get: function () {
            return this.get_ai();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "s0", {
        get: function () {
            return this.sz;
        },
        set: function (a) {
            if (a != this.sz) {
                var b = this.s0;
                this.sz = a;
                this.j6("ChartType", enumGetBox(CategoryChartType_$type, b), enumGetBox(CategoryChartType_$type, this.s0));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "s2", {
        get: function () {
            return this.s1;
        },
        set: function (a) {
            var b = this.s2;
            if (a != b) {
                this.s1 = a;
                this.j6("MarkerCollisionAvoidance", enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, b), enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, this.s2));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "to", {
        get: function () {
            return this.tj;
        },
        set: function (a) {
            var b = this.to;
            if (a != b) {
                this.tj = a;
                this.j6("IsTransitionInEnabled", b, this.to);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "s4", {
        get: function () {
            return this.s3;
        },
        set: function (a) {
            var b = this.s4;
            if (a != b) {
                this.s3 = a;
                this.j6("TransitionInMode", enumGetBox(CategoryTransitionInMode_$type, b), enumGetBox(CategoryTransitionInMode_$type, this.s4));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "te", {
        get: function () {
            return this.td;
        },
        set: function (a) {
            var b = this.te;
            if (a != b) {
                this.td = a;
                this.j6("TransitionInSpeedType", enumGetBox(TransitionInSpeedType_$type, b), enumGetBox(TransitionInSpeedType_$type, this.te));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "t7", {
        get: function () {
            return this.tt;
        },
        set: function (a) {
            var b = this.t7;
            if (a != b) {
                this.tt = a;
                this.j6("XAxisInterval", b, this.t7);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "t8", {
        get: function () {
            return this.tu;
        },
        set: function (a) {
            var b = this.t8;
            if (a != b) {
                this.tu = a;
                this.j6("XAxisMinorInterval", b, this.t8);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "t6", {
        get: function () {
            return this.ts;
        },
        set: function (a) {
            var b = this.t6;
            if (a != b) {
                this.ts = a;
                this.j6("XAxisGap", b, this.t6);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "t9", {
        get: function () {
            return this.tv;
        },
        set: function (a) {
            var b = this.t9;
            if (a != b) {
                this.tv = a;
                this.j6("XAxisOverlap", b, this.t9);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "uc", {
        get: function () {
            return this.tw;
        },
        set: function (a) {
            var b = this.uc;
            if (a != b) {
                this.tw = a;
                this.j6("YAxisInterval", b, this.uc);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "tq", {
        get: function () {
            return this.tl;
        },
        set: function (a) {
            var b = this.tq;
            if (a != b) {
                this.tl = a;
                this.j6("YAxisIsLogarithmic", b, this.tq);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "uj", {
        get: function () {
            return this.uh;
        },
        set: function (a) {
            var b = this.uj;
            if (a != b) {
                this.uh = a;
                this.j6("YAxisLogarithmBase", b, this.uj);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "ue", {
        get: function () {
            return this.ty;
        },
        set: function (a) {
            var b = this.ue;
            if (a != b) {
                this.ty = a;
                this.j6("YAxisMinimumValue", b, this.ue);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "ud", {
        get: function () {
            return this.tx;
        },
        set: function (a) {
            var b = this.ud;
            if (a != b) {
                this.tx = a;
                this.j6("YAxisMaximumValue", b, this.ud);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "uf", {
        get: function () {
            return this.tz;
        },
        set: function (a) {
            var b = this.uf;
            if (a != b) {
                this.tz = a;
                this.j6("YAxisMinorInterval", b, this.uf);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "t5", {
        get: function () {
            return this.xAxis.l3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "t4", {
        get: function () {
            return this.xAxis.l2;
        },
        enumerable: false,
        configurable: true
    });
    CategoryChart.prototype.t1 = function () {
        return this.t5;
    };
    CategoryChart.prototype.t3 = function () {
        return this.ub;
    };
    CategoryChart.prototype.t0 = function () {
        return this.t4;
    };
    CategoryChart.prototype.t2 = function () {
        return this.ua;
    };
    Object.defineProperty(CategoryChart.prototype, "ub", {
        get: function () {
            return this.yAxis.kv;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "ua", {
        get: function () {
            return this.yAxis.ku;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "sx", {
        get: function () {
            return this.sv;
        },
        set: function (a) {
            var b = this.sx;
            if (a != b) {
                this.sv = a;
                this.j6("NegativeBrushes", b, this.sx);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "sy", {
        get: function () {
            return this.sw;
        },
        set: function (a) {
            var b = this.sy;
            if (a != b) {
                this.sw = a;
                this.j6("NegativeOutlines", b, this.sy);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "tp", {
        get: function () {
            return this.tk;
        },
        set: function (a) {
            var b = this.tp;
            if (a != b) {
                this.tk = a;
                this.j6("YAxisAbbreviateLargeNumbers", b, this.tp);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "tm", {
        get: function () {
            return this.th;
        },
        set: function (a) {
            var b = this.tm;
            if (a != b) {
                this.th = a;
                this.j6("IsCategoryHighlightingEnabled", b, this.tm);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "tn", {
        get: function () {
            return this.ti;
        },
        set: function (a) {
            var b = this.tn;
            if (a != b) {
                this.ti = a;
                this.j6("IsItemHighlightingEnabled", b, this.tn);
            }
        },
        enumerable: false,
        configurable: true
    });
    CategoryChart.prototype.get_c5 = function () {
        var a = new List$1(DataSeriesType_$type, 0);
        if (TypeRegistrar.isRegistered("AreaSeries")) {
            a.add(2);
        }
        if (TypeRegistrar.isRegistered("ColumnSeries")) {
            a.add(1);
        }
        if (TypeRegistrar.isRegistered("LineSeries")) {
            a.add(0);
        }
        if (TypeRegistrar.isRegistered("PointSeries")) {
            a.add(10);
        }
        if (TypeRegistrar.isRegistered("SplineSeries")) {
            a.add(6);
        }
        if (TypeRegistrar.isRegistered("SplineAreaSeries")) {
            a.add(7);
        }
        if (TypeRegistrar.isRegistered("StepAreaSeries")) {
            a.add(5);
        }
        if (TypeRegistrar.isRegistered("StepLineSeries")) {
            a.add(4);
        }
        if (TypeRegistrar.isRegistered("WaterfallSeries")) {
            a.add(8);
        }
        return a;
    };
    Object.defineProperty(CategoryChart.prototype, "c5", {
        get: function () {
            return this.get_c5();
        },
        enumerable: false,
        configurable: true
    });
    CategoryChart.prototype.de = function () {
        if (this.tr == null) {
            this.tr = CategoryChartMockDataGenerator.a();
        }
        return this.tr;
    };
    CategoryChart.prototype.u9 = function (a, b) {
        switch (b.propertyName) {
            case "ActualMinimum":
                this.kd("XAxisActualMinimum");
                break;
            case "ActualMaximum":
                this.kd("XAxisActualMaximum");
                break;
        }
    };
    CategoryChart.prototype.va = function (a, b) {
        switch (b.propertyName) {
            case "ActualMinimumValue":
                this.kd("YAxisActualMinimum");
                break;
            case "ActualMaximumValue":
                this.kd("YAxisActualMaximum");
                break;
        }
    };
    CategoryChart.prototype.kp = function () {
        _super.prototype.kp.call(this);
        this.xAxis.fj = this.og == null ? XYChart.os(this.xAxis, this.ac.dataSeries) : this.og;
        this.xAxis.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
    };
    Object.defineProperty(CategoryChart.prototype, "xAxis", {
        get: function () {
            return this._xAxis;
        },
        set: function (a) {
            this._xAxis = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "yAxis", {
        get: function () {
            return this._yAxis;
        },
        set: function (a) {
            this._yAxis = a;
        },
        enumerable: false,
        configurable: true
    });
    CategoryChart.prototype.s8 = function (a, b) {
        switch (a) {
            case 2: return this.bc(1);
            case 3: return this.bc(10);
            case 0: return this.bc(0);
            case 1: return this.bc(2);
            case 6: return this.bc(6);
            case 7: return this.bc(7);
            case 4: return this.bc(4);
            case 5: return this.bc(5);
            case 8: return this.bc(8);
            case 9: return this.s7(b);
            default: return this.bc(1);
        }
    };
    CategoryChart.prototype.s7 = function (a) {
        return this.bc(a);
    };
    CategoryChart.prototype.ab = function (a) {
        switch (this.s0) {
            case 1: return 2;
            case 0: return 0;
            case 3: return 10;
            case 6: return 6;
            case 7: return 7;
            case 5: return 5;
            case 4: return 4;
            case 8: return 8;
            case 9: return a.suggestedSeries;
            default:
            case 2: return 1;
        }
    };
    CategoryChart.prototype.bb = function (a, b) {
        var c = this.s8(this.s0, a.suggestedSeries);
        c.tb = a.findMatchingHint(0).path;
        c.xAxis = this.xAxis;
        c.yAxis = this.yAxis;
        return c;
    };
    CategoryChart.prototype.kn = function (a) {
        if (a.suggestedSecondaryAxis == 2) {
            this.yAxis.kk = true;
            this.yAxis.k7 = 10;
        }
    };
    CategoryChart.prototype.kq = function () {
        this.yAxis.kk = this.tq;
        this.yAxis.k7 = this.uj;
    };
    CategoryChart.prototype.get_c4 = function () {
        return ((function () {
            var $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
            $ret.add(new SimpleCategorySeriesRule());
            $ret.add(new SubCollectionsRule());
            return $ret;
        })());
    };
    Object.defineProperty(CategoryChart.prototype, "c4", {
        get: function () {
            return this.get_c4();
        },
        enumerable: false,
        configurable: true
    });
    CategoryChart.prototype.iz = function (a, b) {
        var c = typeCast(HorizontalAnchoredCategorySeries.$, a);
        if (c != null) {
            c.sx = this.s2;
            c.pr = this.a3(a, b);
        }
    };
    CategoryChart.prototype.u7 = function (a) {
        this.u8(function (b, c) { return a(b); });
    };
    CategoryChart.prototype.u8 = function (a) {
        if (this.dataChart == null) {
            return;
        }
        for (var b = 0; b < this.dataChart.series.count; b++) {
            var c = typeCast(HorizontalAnchoredCategorySeries.$, this.dataChart.series._inner[b]);
            if (c == null) {
                continue;
            }
            a(c, b);
        }
    };
    CategoryChart.prototype.ly = function () {
        return this.xAxis;
    };
    CategoryChart.prototype.lz = function () {
        return this.yAxis;
    };
    CategoryChart.prototype.tb = function () {
        return this.bc(30);
    };
    CategoryChart.prototype.tc = function () {
        return this.bc(31);
    };
    CategoryChart.prototype.c1 = function (a, b) {
        var c = _super.prototype.c1.call(this, a, b);
        if (c != null) {
            var d = new List$1(Series.$, 0);
            if (this.th) {
                d.add(this.tb());
            }
            if (this.ti) {
                d.add(this.tc());
            }
            for (var e = 0; e < d.count; e++) {
                var f = d._inner[e];
                f.name = a + getInstanceType(f).typeName;
                c.add(f);
            }
        }
        return c;
    };
    CategoryChart.prototype.ku = function (a, b, c) {
        _super.prototype.ku.call(this, a, b, c);
        if (this.ac.dataSeries.count > 0) {
            if (stringIsNullOrEmpty(this.gb)) {
                this.ak.setXMemberPath(a, c.getMemberPathFor(16));
            }
            if (stringIsNullOrEmpty(this.gd)) {
                this.ak.setYMemberPath(a, c.getMemberPathFor(0));
            }
            if (stringIsNullOrEmpty(this.f7)) {
                this.ak.setLabelMemberPath(a, c.getMemberPathFor(0));
            }
            if (stringIsNullOrEmpty(this.f4)) {
                this.ak.setContentMemberPath(a, c.getMemberPathFor(0));
            }
        }
    };
    CategoryChart.prototype.cl = function () {
        if (this.aa == 4 || this.aa == 3) {
            return true;
        }
        else if (this.aa == 0) {
            if (this.s0 == 2 || this.s0 == 8) {
                return false;
            }
            else if (this.s0 == 9 && this.ac != null && this.ac.dataSeries != null && this.ac.dataSeries.count > 0) {
                var a = this.ac.dataSeries._inner[0].suggestedSeries;
                if (a == 1 || a == 8) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };
    CategoryChart.prototype.j6 = function (a, b, c) {
        var _this = this;
        _super.prototype.j6.call(this, a, b, c);
        switch (a) {
            case "ChartType":
                this.kp();
                break;
            case "MarkerCollisionAvoidance":
                this.u7(function (d) { return d.sx = _this.s2; });
                break;
            case "IsTransitionInEnabled":
                this.u7(function (d) { return d.ru = _this.to; });
                break;
            case "TransitionInMode":
                this.u7(function (d) { return d.re = _this.s4; });
                break;
            case "TransitionInSpeedType":
                this.u7(function (d) { return d.b7 = _this.te; });
                break;
            case "XAxisInterval":
                this.xAxis.ly = this.t7;
                break;
            case "XAxisMinorInterval":
                this.xAxis.lz = this.t8;
                break;
            case "XAxisGap":
                this.xAxis.kf = this.t6;
                break;
            case "XAxisOverlap":
                this.xAxis.km = this.t9;
                break;
            case "YAxisInterval":
                this.yAxis.kz = this.uc;
                break;
            case "YAxisIsLogarithmic":
                this.yAxis.kk = this.tq;
                break;
            case "YAxisLogarithmBase":
                this.yAxis.k7 = this.uj;
                break;
            case "YAxisMinimumValue":
                this.yAxis.k3 = this.ue;
                break;
            case "YAxisMaximumValue":
                this.yAxis.k2 = this.ud;
                break;
            case "YAxisMinorInterval":
                this.yAxis.k4 = this.uf;
                break;
            case "NegativeBrushes":
            case "NegativeOutlines":
                this.u8(function (d, e) {
                    if (d.dx) {
                        d.l5(ArrayExtension.getModulus$1(Brush.$, _this.sx, e), ArrayExtension.getModulus$1(Brush.$, _this.sy, e));
                    }
                });
                break;
            case "YAxisAbbreviateLargeNumbers":
                this.re(function (d) { return d.kf = _this.tp; });
                break;
            case "IsCategoryHighlightingEnabled":
            case "IsItemHighlightingEnabled":
                this.kp();
                break;
        }
    };
    CategoryChart.$t = markType(CategoryChart, 'CategoryChart', XYChart.$);
    return CategoryChart;
}(XYChart));
export { CategoryChart };
//# sourceMappingURL=CategoryChart.js.map
