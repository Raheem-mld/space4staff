/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ScatterBase } from "./ScatterBase";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Point_$type, typeCast, runOn, Number_$type, enumGetBox, markType, markDep } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { ScatterFrame } from "./ScatterFrame";
import { ScatterLineSeriesView } from "./ScatterLineSeriesView";
import { PathGeometry } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { Clipper } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { RectUtil } from "igniteui-react-core";
import { PolyLineSegment } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { PathFigureCollection } from "igniteui-react-core";
import { Flattener } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { boxArray$1, arrayShallowClone } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
var ScatterLineSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ScatterLineSeries, _super);
    function ScatterLineSeries() {
        var _this = _super.call(this) || this;
        _this.ab = ScatterLineSeries.$;
        _this.rh = new ScatterFrame();
        _this.rj = new ScatterFrame();
        _this.rf = new ScatterFrame();
        var a = function (b, c, d) {
            var e = _this.ch.indexOf(b.a);
            if (e == -1 || e == 0) {
                return b;
            }
            var f = _this.ch.item(e - 1);
            var g;
            if (!((function () { var h = c.g.tryGetValue(f, g); g = h.p1; return h.ret; })())) {
                return b;
            }
            return g;
        };
        _this.rh.o = a;
        _this.rj.o = a;
        _this.rf.o = a;
        return _this;
    }
    ScatterLineSeries.prototype.get_dv = function () {
        return true;
    };
    ScatterLineSeries.prototype.bu = function () {
        return new ScatterLineSeriesView(this);
    };
    ScatterLineSeries.prototype.ep = function (a, b) {
        if (this.pu(a, b)) {
            return true;
        }
        if (this.t5(a, b)) {
            return true;
        }
        return false;
    };
    ScatterLineSeries.prototype.t5 = function (a, b) {
        var c = this.bx;
        var d = c.dg;
        return this.eq(a, b, d.ak);
    };
    ScatterLineSeries.prototype.s3 = function (a, b) {
        var _this = this;
        _super.prototype.s3.call(this, a, b);
        a.m.clear();
        a.u.clear();
        var c = b.bv;
        var d = b.bu;
        var e = this.getEffectiveViewport1(b);
        var f = this.gh * this.gh;
        var g = 0;
        if (this.rr != null) {
            g = this.rr.count;
        }
        if (this.rs != null) {
            g = Math.min(this.rs.count, g);
        }
        var h = new ScalerParams(0, c, d, this.rb.d, e);
        var i = ((function () {
            var $ret = new ScalerParams(0, c, d, _this.rb.e, e);
            $ret.b = _this.f2();
            return $ret;
        })());
        var j = arrayShallowClone(this.rr.asArray());
        var k = arrayShallowClone(this.rs.asArray());
        this.xAxis.g5(boxArray$1(j), 0, j.length, h);
        this.yAxis.g5(boxArray$1(k), 0, k.length, i);
        var l = d.top - 10;
        var m = d.bottom + 10;
        var n = d.left - 10;
        var o = d.right + 10;
        var p = ((function () {
            var $ret = new Clipper(1, n, m, o, l, false);
            $ret.i = a.m;
            return $ret;
        })());
        for (var q = 0; q < g;) {
            var r = q;
            ++q;
            if (g > this.sc) {
                while (q < g) {
                    var s = j[q] - j[r];
                    var t = k[q] - k[r];
                    var u = s * s + t * t;
                    if (u >= f) {
                        break;
                    }
                    ++q;
                }
                p.j(this.uc(j, k, r, q - 1));
            }
            else {
                var v = new OwnedPoint();
                v.c = { $type: Point_$type, x: j[r], y: k[r] };
                v.a = this.ch.item(r);
                if (!a.u.containsKey(v.a)) {
                    a.u.addItem(v.a, v);
                }
            }
        }
        if (g > this.sc) {
            p.i = null;
        }
    };
    ScatterLineSeries.prototype.uc = function (a, b, c, d) {
        if (c == d) {
            return { $type: Point_$type, x: a[c], y: b[c] };
        }
        var e = 0;
        var f = 0;
        var g = (d - c + 1);
        for (var h = c; h <= d; ++h) {
            e += a[h];
            f += b[h];
        }
        return { $type: Point_$type, x: e / g, y: f / g };
    };
    ScatterLineSeries.prototype.get_rz = function () {
        return true;
    };
    ScatterLineSeries.prototype.te = function (a, b) {
        b.c4(false);
        _super.prototype.te.call(this, a, b);
        var c = this.getEffectiveViewport1(b);
        var d = new Rect(0, b.bu.left, b.bu.top, b.bu.width, b.bu.height);
        d = RectUtil.t(d, this.fl, this.fl);
        this.s7(a, new Clipper(0, d, false));
        var e = typeCast(ScatterLineSeriesView.$, b);
        this.ro.ax(this, this.r4(), runOn(this, this.qz));
        var f = false;
        var g = this.ro.b;
        if (g != null) {
            f = true;
        }
        if (f) {
            this.sz(-1, this.rr.count, b.q);
        }
        this.ro.ad(e.dg, true, false, true, false);
        this.ua(e.dg, a.m.count, function (h) { return a.m._inner[h].x; }, function (h) { return a.m._inner[h].y; }, this.t4, this.gh);
    };
    ScatterLineSeries.prototype.ua = function (a, b, c, d, e, f) {
        var g = new PathGeometry();
        a.ak = g;
        g.c = new PathFigureCollection();
        var h = new List$1(PolyLineSegment.$, 0);
        var i = 0;
        for (var j = 0; j < b; j++) {
            if (isNaN_(c(j)) || isNaN_(d(j))) {
                var k = j - i;
                if (k > 0) {
                    if (e == 1 || h.count == 0) {
                        var l = new PolyLineSegment();
                        h.add(l);
                    }
                    this.t9(h._inner[h.count - 1]._points, i, j - 1, c, d, f);
                }
                i = j + 1;
            }
        }
        if (e == 1 || h.count == 0) {
            var m = new PolyLineSegment();
            h.add(m);
        }
        this.t9(h._inner[h.count - 1]._points, i, b - 1, c, d, f);
        var _loop_1 = function (n) {
            var o = h._inner[n];
            if (o._points.count > 0) {
                var p = ((function () {
                    var $ret = new PathFigure();
                    $ret.startPoint = o._points._inner[0];
                    return $ret;
                })());
                p._segments.add(o);
                g.c.add(p);
            }
        };
        for (var n = 0; n < h.count; n++) {
            _loop_1(n);
        }
    };
    ScatterLineSeries.prototype.t6 = function (a, b, c, d, e, f) {
        var g = new List$1(Number_$type, 0);
        var h = d;
        var i = e;
        var j = i - h + 1;
        while (j > 0) {
            if (j <= 512) {
                Flattener.c(g, b, c, h, i, f);
                h = i + 1;
            }
            else {
                var k = h + 512 - 1;
                Flattener.c(g, b, c, h, k, f);
                h = k + 1;
            }
            j = i - h + 1;
        }
        return g;
    };
    ScatterLineSeries.prototype.t9 = function (a, b, c, d, e, f) {
        if (c > -1) {
            var g = this.gh;
            var h = this.t6(new List$1(Number_$type, 0), d, e, b, c, g);
            var i = void 0;
            for (var j = 0; j < h.count; j++) {
                i = h.item(j);
                a.add({ $type: Point_$type, x: d(i), y: e(i) });
            }
        }
    };
    ScatterLineSeries.prototype.lm = function (a, b, c, d) {
        _super.prototype.lm.call(this, a, b, c, d);
        switch (b) {
            case ScatterLineSeries.$$p[0]:
                this.l0(false);
                this.k7();
                break;
        }
    };
    ScatterLineSeries.$t = markType(ScatterLineSeries, 'ScatterLineSeries', ScatterBase.$);
    ScatterLineSeries.$$p = markDep(DependencyProperty, PropertyMetadata, ScatterLineSeries, 'raisePropertyChanged', ['UnknownValuePlotting:t4:ub', [UnknownValuePlotting_$type, enumGetBox(UnknownValuePlotting_$type, 1)]]);
    return ScatterLineSeries;
}(ScatterBase));
export { ScatterLineSeries };
//# sourceMappingURL=ScatterLineSeries.js.map
