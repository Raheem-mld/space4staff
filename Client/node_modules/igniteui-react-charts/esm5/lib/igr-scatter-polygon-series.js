import { __extends } from "tslib";
import { IgrStyle } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { IgrShapeSeriesBase } from "./igr-shape-series-base";
import { ScatterPolygonSeries } from "./ScatterPolygonSeries";
import { ensureEnum, brushToString, stringToBrush } from "igniteui-react-core";
/**
 * Series class which renders polygons as Paths based on lists of points in the ItemsSource.
*/
var IgrScatterPolygonSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrScatterPolygonSeries, _super);
    function IgrScatterPolygonSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrScatterPolygonSeries.prototype.createImplementation = function () {
        return new ScatterPolygonSeries();
    };
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "isPolygon", {
        /**
         * Gets whether the current series shows a polygon shape.
        */
        get: function () {
            return this.i.d1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "isMarkerlessDisplayPreferred", {
        /**
         * Overridden by derived series classes to indicate when marker-less display is preferred or not.
        */
        get: function () {
            return this.i.dw;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "hasMarkers", {
        /**
         * Returns whether the current series supports visual markers.
        */
        get: function () {
            return this.i.hasMarkers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "shapeStyle", {
        /**
         * The default style to apply to all Shapes in the series.
        */
        get: function () {
            if (this.i.tr == null) {
                return null;
            }
            if (!this.i.tr.externalObject) {
                var e = new IgrStyle();
                e._implementation = this.i.tr;
                this.i.tr.externalObject = e;
            }
            return this.i.tr.externalObject;
        },
        set: function (v) {
            v == null ? this.i.tr = null : this.i.tr = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        */
        get: function () {
            return this.i.sf;
        },
        set: function (v) {
            this.i.sf = ensureEnum(MarkerType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        */
        get: function () {
            return this.i.s6;
        },
        set: function (v) {
            this.i.s6 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerThickness", {
        /**
         * Gets or sets thickness of the marker outline
        */
        get: function () {
            return this.i.sn;
        },
        set: function (v) {
            this.i.sn = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "actualMarkerTemplate", {
        /**
         * Gets the effective marker template for the current series object.
        */
        get: function () {
            return this.i.s4;
        },
        set: function (v) {
            this.i.s4 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        */
        get: function () {
            return brushToString(this.i.tn);
        },
        set: function (v) {
            this.i.tn = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "actualMarkerBrush", {
        /**
         * Gets the effective marker brush for the current series object.
        */
        get: function () {
            return brushToString(this.i.tl);
        },
        set: function (v) {
            this.i.tl = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        */
        get: function () {
            return brushToString(this.i.to);
        },
        set: function (v) {
            this.i.to = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "actualMarkerOutline", {
        /**
         * Gets the effective marker outline for the current series object.
        */
        get: function () {
            return brushToString(this.i.tm);
        },
        set: function (v) {
            this.i.tm = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerCollisionAvoidance", {
        /**
         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
        */
        get: function () {
            return this.i.r6;
        },
        set: function (v) {
            this.i.r6 = ensureEnum(CollisionAvoidanceType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerOutlineMode", {
        /**
         * Gets or sets whether the marker outline is based on the marker brush of the series rather than the marker outlines collection.
        */
        get: function () {
            return this.i.sd;
        },
        set: function (v) {
            this.i.sd = ensureEnum(MarkerOutlineMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerFillMode", {
        /**
         * Gets or sets whether the marker fill is based on the marker outline of the series rather than the marker brushes collection.
        */
        get: function () {
            return this.i.r9;
        },
        set: function (v) {
            this.i.r9 = ensureEnum(MarkerFillMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    IgrScatterPolygonSeries.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.shapeStyle && this.shapeStyle.name && this.shapeStyle.name == name) {
            return this.shapeStyle;
        }
        return null;
    };
    return IgrScatterPolygonSeries;
}(IgrShapeSeriesBase));
export { IgrScatterPolygonSeries };
//# sourceMappingURL=igr-scatter-polygon-series.js.map
