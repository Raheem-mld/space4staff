/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { markType, typeCast, markDep, Point_$type } from "igniteui-react-core";
import { isNaN_, truncate, isInfinity } from "igniteui-react-core";
import { CategorySeries } from "./CategorySeries";
import { IIsCategoryBased_$type } from "./IIsCategoryBased";
import { IHasHighLowValueCategory_$type } from "./IHasHighLowValueCategory";
import { RangeCategoryFramePreparer } from "./RangeCategoryFramePreparer";
import { DependencyProperty } from "igniteui-react-core";
import { Series } from "./Series";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { IScaler_$type } from "./IScaler";
import { CategorySeriesView } from "./CategorySeriesView";
import { CategoryFrame } from "./CategoryFrame";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { AxisRange } from "./AxisRange";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { ISortingAxis_$type } from "./ISortingAxis";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { CollisionAvoider } from "./CollisionAvoider";
import { ISupportsMarkers_$type } from "./ISupportsMarkers";
import { PropertyMetadata } from "igniteui-react-core";
import { FastFlattener } from "igniteui-react-core";
/**
 * @hidden
 */
var RangeCategoryBucketCalculator = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RangeCategoryBucketCalculator, _super);
    function RangeCategoryBucketCalculator(a) {
        var _this = _super.call(this, a) || this;
        _this.j = null;
        _this.l = 0;
        _this.k = 0;
        _this.i = null;
        _this.h = null;
        _this.j = a;
        return _this;
    }
    RangeCategoryBucketCalculator.prototype.getBucketWithoutUnknowns = function (a) {
        var b = false;
        var c = this.i;
        var d = this.h;
        var e = this.l;
        var f = this.k;
        var g = Math.min(e, f);
        var h = a * this.d;
        var i = Math.min(h + this.d - 1, g - 1);
        var j = 1.7976931348623157E+308;
        var k = -1.7976931348623157E+308;
        var l = true;
        var m = 0;
        var n = 0;
        var o;
        var p;
        if (h <= i) {
            for (var q = h; q <= i; ++q) {
                m = c[q];
                n = d[q];
                if (m < n) {
                    o = m;
                    p = n;
                }
                else {
                    p = m;
                    o = n;
                }
                if (!l) {
                    j = j < o ? j : o;
                    k = k > o ? k : o;
                    j = j < p ? j : p;
                    k = k > p ? k : p;
                }
                else {
                    j = Math.min(j, o);
                    k = Math.max(k, o);
                    k = Math.max(k, p);
                    j = Math.min(j, p);
                    l = false;
                }
            }
        }
        if (b && n < m) {
            var r = j;
            j = k;
            k = r;
        }
        if (!l) {
            var s = new Array(3);
            s[0] = 0.5 * (h + i);
            s[1] = j;
            s[2] = k;
            return s;
        }
        var t = new Array(3);
        t[0] = NaN;
        t[1] = NaN;
        t[2] = NaN;
        return t;
    };
    RangeCategoryBucketCalculator.prototype.getBucket = function (a) {
        var b = false;
        var c = this.i;
        var d = this.h;
        var e = this.l;
        var f = this.k;
        var g = Math.min(e, f);
        var h = a * this.d;
        var i = Math.min(h + this.d - 1, g - 1);
        var j = NaN;
        var k = NaN;
        var l = true;
        var m = 0;
        var n = 0;
        var o;
        var p;
        if (h <= i) {
            for (var q = h; q <= i; ++q) {
                m = c[q];
                n = d[q];
                if (m < n) {
                    o = m;
                    p = n;
                }
                else {
                    p = m;
                    o = n;
                }
                if (!l) {
                    if (!isNaN_(o)) {
                        j = j < o ? j : o;
                        k = k > o ? k : o;
                    }
                    if (!isNaN_(p)) {
                        j = j < p ? j : p;
                        k = k > p ? k : p;
                    }
                }
                else {
                    if (!isNaN_(o)) {
                        if (isNaN_(j)) {
                            j = o;
                        }
                        else {
                            j = Math.min(j, o);
                        }
                        if (!isNaN_(k)) {
                            k = Math.max(k, o);
                        }
                    }
                    if (!isNaN_(p)) {
                        if (isNaN_(k)) {
                            k = p;
                        }
                        else {
                            k = Math.max(k, p);
                        }
                        if (!isNaN_(j)) {
                            j = Math.min(j, p);
                        }
                    }
                    if (!isNaN_(j) && !isNaN_(k)) {
                        l = false;
                    }
                }
            }
        }
        if (n < m && b) {
            var r = j;
            j = k;
            k = r;
        }
        if (!l) {
            var s = new Array(3);
            s[0] = 0.5 * (h + i);
            s[1] = j;
            s[2] = k;
            return s;
        }
        var t = new Array(3);
        t[0] = NaN;
        t[1] = NaN;
        t[2] = NaN;
        return t;
    };
    RangeCategoryBucketCalculator.prototype.cacheValues = function () {
        this.l = this.j.c0.lowColumn.count;
        this.k = this.j.c0.highColumn.count;
        this.i = this.j.c0.lowColumn.asArray();
        this.h = this.j.c0.highColumn.asArray();
    };
    RangeCategoryBucketCalculator.prototype.unCacheValues = function () {
        this.i = null;
        this.h = null;
    };
    RangeCategoryBucketCalculator.$t = markType(RangeCategoryBucketCalculator, 'RangeCategoryBucketCalculator', CategoryBucketCalculator.$);
    return RangeCategoryBucketCalculator;
}(CategoryBucketCalculator));
export { RangeCategoryBucketCalculator };
/**
 * @hidden
 */
var RangeCategorySeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RangeCategorySeries, _super);
    function RangeCategorySeries() {
        var _this = _super.call(this) || this;
        _this._RangeFramePreparer = null;
        _this.sw = null;
        _this.sv = null;
        _this.ss = null;
        _this.RangeFramePreparer = new RangeCategoryFramePreparer(1, _this, _this.su, _this, _this, _this.su.cr);
        return _this;
    }
    RangeCategorySeries.prototype.bu = function () {
        return new RangeCategorySeriesView(this);
    };
    RangeCategorySeries.prototype.getHostReferenceValue = function () {
        return this.f2();
    };
    RangeCategorySeries.prototype.lh = function (a) {
        _super.prototype.lh.call(this, a);
        this.su = a;
    };
    Object.defineProperty(RangeCategorySeries.prototype, "RangeFramePreparer", {
        get: function () {
            return this._RangeFramePreparer;
        },
        set: function (a) {
            this._RangeFramePreparer = a;
        },
        enumerable: false,
        configurable: true
    });
    RangeCategorySeries.prototype.hk = function (a, b) {
        var c = this.ja(b);
        if (c == RangeCategorySeries.$$p[0]) {
            return this.hl(a, b, this.s0);
        }
        if (c == RangeCategorySeries.$$p[0]) {
            return this.hl(a, b, this.s0);
        }
        return _super.prototype.hk.call(this, a, b);
    };
    Object.defineProperty(RangeCategorySeries.prototype, "lowColumn", {
        get: function () {
            return this.sw;
        },
        set: function (a) {
            if (this.sw != a) {
                var b = this.sw;
                this.sw = a;
                this.raisePropertyChanged("LowColumn", b, this.sw);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RangeCategorySeries.prototype, "highColumn", {
        get: function () {
            return this.sv;
        },
        set: function (a) {
            if (this.sv != a) {
                var b = this.sv;
                this.sv = a;
                this.raisePropertyChanged("HighColumn", b, this.sv);
            }
        },
        enumerable: false,
        configurable: true
    });
    RangeCategorySeries.prototype.rd = function () {
        return 11;
    };
    RangeCategorySeries.prototype.sl = function (a, b) {
        _super.prototype.sl.call(this, a, b);
        b.b3 = true;
        CategoryMarkerManager.e(this, a.m, b.cu, this.pv);
        this.sf(b, a);
    };
    RangeCategorySeries.prototype.s5 = function (a, b, c, d, e, f) {
        this.su.c1(a, b, c, d, e, f);
    };
    RangeCategorySeries.prototype.aq = function (a) {
        if (a.isEmpty && this.ca != null) {
            a = this.ca.pg;
        }
        var b = this.q2();
        if (this.lowColumn == null || this.highColumn == null) {
            return null;
        }
        var c = this.o7(this.bx);
        var d = new ScalerParams(0, a, this.ca.pv, b.cc, this.getEffectiveViewport());
        var e = (b.eb(c.left, d));
        var f = (b.eb(c.right, d));
        if (b.cc) {
            var g = e;
            e = f;
            f = g;
        }
        var h = null;
        if (b.ch) {
            h = b;
            e = h.i$f(e);
            f = h.i$f(f);
        }
        else {
            e = Math.floor(e);
            f = Math.ceil(f);
        }
        e = Math.max(0, Math.min(this.lowColumn.count - 1, e));
        f = Math.max(0, Math.min(this.lowColumn.count - 1, f));
        var i = 1.7976931348623157E+308;
        var j = -1.7976931348623157E+308;
        for (var k = truncate(e); k <= truncate(f); k++) {
            var l = k;
            if (h != null) {
                l = h.i$b._inner[k];
            }
            var m = this.lowColumn.item(l);
            if (this.lowColumn.mayContainUnknowns) {
                if (isInfinity(m) || isNaN_(m)) {
                    continue;
                }
            }
            var n = this.highColumn.item(l);
            if (this.highColumn.mayContainUnknowns) {
                if (isInfinity(n) || isNaN_(n)) {
                    continue;
                }
            }
            i = Math.min(i, m);
            j = Math.max(j, n);
        }
        var o = new AxisRange(i, j);
        var p = this.rn();
        o = this.ao(o, p, a);
        return o;
    };
    RangeCategorySeries.prototype.eh = function (a) {
        var b = new Rect(0, 0, 0, 1, 1);
        var c = this.bx != null ? this.bx.bv : Rect.empty;
        c = c.copy();
        var d = this.bx != null ? this.bx.bu : Rect.empty;
        var e = !c.isEmpty && !d.isEmpty && this.ch != null ? this.ch.indexOf(a) : -1;
        var f = this.fetchXAxis();
        var g = this.fetchYAxis();
        var h = this.o9(this.bx);
        var i;
        if (f != null) {
            var j = new ScalerParams(0, b, b, f.cc, h);
            i = f.d8(e, j);
        }
        else {
            i = NaN;
        }
        var k = f != null ? this.RangeFramePreparer.r(typeCast(ICategoryScaler_$type, f), b, b, h) : 0;
        i += k;
        if (e >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
            if (!isNaN_(i)) {
                if (i < c.left + 0.1 * c.width) {
                    i = i + 0.4 * c.width;
                }
                if (i > c.right - 0.1 * c.width) {
                    i = i - 0.4 * c.width;
                }
                c.x = i - 0.5 * c.width;
            }
            if (g != null && this.highColumn != null && e < this.highColumn.count) {
                var l = new ScalerParams(0, b, b, g.cc, h);
                l.b = this.f2();
                var m = g.d8(this.highColumn.item(e), l);
                var n = g.d8(this.lowColumn.item(e), l);
                if (!isNaN_(m) && !isNaN_(n)) {
                    var o = Math.abs(n - m);
                    if (c.height < o) {
                        c.height = o;
                        c.y = Math.min(n, m);
                    }
                    else {
                        if (n < c.top + 0.1 * c.height) {
                            n = n + 0.4 * c.height;
                        }
                        if (n > c.bottom - 0.1 * c.height) {
                            n = n - 0.4 * c.height;
                        }
                        c.y = n - 0.5 * c.height;
                    }
                }
            }
            if (this.b5 != null) {
                this.b5.ap(this.ca, c, true);
            }
        }
        return e >= 0;
    };
    RangeCategorySeries.prototype.lm = function (a, b, c, d) {
        _super.prototype.lm.call(this, a, b, c, d);
        switch (b) {
            case "FastItemsSource":
                if (typeCast(IFastItemsSource_$type, c) != null) {
                    c.deregisterColumn(this.lowColumn);
                    c.deregisterColumn(this.highColumn);
                    this.lowColumn = null;
                    this.highColumn = null;
                }
                if (typeCast(IFastItemsSource_$type, d) != null) {
                    this.lowColumn = this.ce(this.s3);
                    this.highColumn = this.ce(this.s0);
                }
                if (!this.rx()) {
                    this.rc.cr.g(this.gh);
                    this.l0(false);
                }
                break;
            case RangeCategorySeries.$$p[1]:
                if (this.ch != null) {
                    this.ch.deregisterColumn(this.lowColumn);
                    this.lowColumn = this.ce(this.s3);
                }
                break;
            case "LowColumn":
                if (!this.rx()) {
                    this.rc.cr.g(this.gh);
                    this.l0(false);
                }
                break;
            case RangeCategorySeries.$$p[0]:
                if (this.ch != null) {
                    this.ch.deregisterColumn(this.highColumn);
                    this.highColumn = this.ce(this.s0);
                }
                break;
            case "HighColumn":
                if (!this.rx()) {
                    this.rc.cr.g(this.gh);
                    this.l0(false);
                }
                break;
        }
    };
    RangeCategorySeries.prototype.ap = function (a) {
        if (this.lowColumn == null || this.lowColumn.count == 0 || this.highColumn == null || this.highColumn.count == 0) {
            return null;
        }
        if (a == this.fetchXAxis()) {
            var b = Math.min(this.lowColumn.count, this.highColumn.count);
            return new AxisRange(0, b - 1);
        }
        if (a == this.fetchYAxis()) {
            var c = Math.min(this.lowColumn.minimum, this.highColumn.minimum);
            var d = Math.max(this.lowColumn.maximum, this.highColumn.maximum);
            return new AxisRange(Math.min(c, d), Math.max(c, d));
        }
        return null;
    };
    RangeCategorySeries.prototype.kk = function (a, b, c, d) {
        if (this.fetchXAxis() != null && typeCast(ISortingAxis_$type, this.fetchXAxis()) !== null) {
            this.fetchXAxis().i$i();
        }
        var e = this.fetchXAxis();
        switch (a) {
            case 3:
                if (d == this.s3 || d == this.s0) {
                    if (e != null) {
                        e.cv();
                    }
                    if (!this.rx()) {
                        this.l0(true);
                    }
                }
                break;
            case 1:
                if (e != null) {
                    e.cv();
                }
                this.rc.cr.g(this.gh);
                if (!this.rx()) {
                    this.l0(true);
                }
                break;
            case 0:
                if (e != null) {
                    e.cv();
                }
                this.rc.cr.g(this.gh);
                if (!this.rx()) {
                    this.l0(true);
                }
                break;
            case 2:
                if (e != null) {
                    e.cv();
                }
                if (this.s3 != null && this.s0 != null && this.rc.cr.d > 0 && !this.rx()) {
                    this.l0(true);
                }
                break;
            case 4:
                if (e != null) {
                    e.cv();
                }
                this.rc.cr.g(this.gh);
                if (!this.rx()) {
                    this.l0(true);
                }
                break;
        }
    };
    RangeCategorySeries.prototype.e3 = function (a, b, c) {
        var d = _super.prototype.e3.call(this, a, b, c);
        if (this.lowColumn == null || this.lowColumn.count == 0 || this.highColumn == null || this.highColumn.count == 0) {
            d = false;
        }
        return d;
    };
    RangeCategorySeries.prototype.si = function (a, b) {
        _super.prototype.si.call(this, a, b);
        this.RangeFramePreparer.d(a, b);
    };
    Object.defineProperty(RangeCategorySeries.prototype, "currentCategoryMode", {
        get: function () {
            return this.preferredCategoryMode(typeCast(CategoryAxisBase.$, this.fetchXAxis()));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RangeCategorySeries.prototype, "scaler", {
        get: function () {
            return typeCast(ICategoryScaler_$type, this.fetchXAxis());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RangeCategorySeries.prototype, "yScaler", {
        get: function () {
            return typeCast(IScaler_$type, this.fetchYAxis());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RangeCategorySeries.prototype, "bucketizer", {
        get: function () {
            return this.rc.cr;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RangeCategorySeries.prototype, "currentMode2Index", {
        get: function () {
            return this.r6();
        },
        enumerable: false,
        configurable: true
    });
    RangeCategorySeries.prototype.provideCollisionDetector = function () {
        return new CollisionAvoider();
    };
    Object.defineProperty(RangeCategorySeries.prototype, "mayContainUnknowns", {
        get: function () {
            return this.lowColumn == null || this.lowColumn.mayContainUnknowns || this.highColumn == null || this.highColumn.mayContainUnknowns;
        },
        enumerable: false,
        configurable: true
    });
    RangeCategorySeries.prototype.l2 = function (a, b) {
        var c = this.et;
        _super.prototype.l2.call(this, a, b);
        if (!c) {
            this.bx.a2(b);
            return;
        }
        this.bx.a2(b);
        if (this.ct(this.bw)) {
            return;
        }
        var d = new RangeCategoryFramePreparer(1, this, typeCast(ISupportsMarkers_$type, this.bw), this.ca.cf.o, this, this.bw.cr);
        if (!this.en) {
            this.q6 = new CategoryFrame(3);
            this.q6.u();
            d.d(this.q6, this.bw);
        }
        this.en = false;
        this.sl(this.q6, this.bw);
        this.et = false;
    };
    RangeCategorySeries.prototype.lz = function (a, b, c, d, e) {
        _super.prototype.lz.call(this, a, b, c, d, e);
        var f = this.a4.a$h.item(d);
        var g = f;
        g.cr.g(this.gh);
        f.a1(c);
        if (this.ct(g)) {
            return;
        }
        var h = new RangeCategoryFramePreparer(1, this, typeCast(ISupportsMarkers_$type, f), f, this, f.cr);
        if (this.ss == null) {
            this.ss = new CategoryFrame(3);
        }
        this.ss.u();
        h.d(this.ss, g);
        this.sl(this.ss, g);
    };
    RangeCategorySeries.prototype.f2 = function () {
        return Series.f3(this.lowColumn, typeCast(ISortingAxis_$type, this.fetchXAxis()));
    };
    Object.defineProperty(RangeCategorySeries.prototype, "useHighMarkerFidelity", {
        get: function () {
            return this.ry;
        },
        enumerable: false,
        configurable: true
    });
    RangeCategorySeries.$t = markType(RangeCategorySeries, 'RangeCategorySeries', CategorySeries.$, [IIsCategoryBased_$type, IHasHighLowValueCategory_$type]);
    RangeCategorySeries.$$p = markDep(DependencyProperty, PropertyMetadata, RangeCategorySeries, 'raisePropertyChanged', ['HighMemberPath:s0:s6', [2, null], 'LowMemberPath:s3:s7', [2, null]]);
    return RangeCategorySeries;
}(CategorySeries));
export { RangeCategorySeries };
/**
 * @hidden
 */
var RangeCategorySeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RangeCategorySeriesView, _super);
    function RangeCategorySeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.c0 = null;
        _this.c0 = a;
        return _this;
    }
    RangeCategorySeriesView.prototype.c1 = function (a, b, c, d, e, f) {
        a.ak.clear();
        b.ak.clear();
        c.ak.clear();
        var g = FastFlattener.b(d, e, true, f, this.e.gh);
        var h = FastFlattener.b(d, e, false, f, this.e.gh);
        var i = g.count;
        var j = h.count;
        var k;
        var l;
        var m;
        var n;
        for (var o = 0; o < i; o++) {
            k = g.item(o);
            l = e._inner[k];
            m = l[0];
            n = l[1];
            a.ak.add({ $type: Point_$type, x: m, y: n });
            b.ak.add({ $type: Point_$type, x: m, y: n });
        }
        var p;
        var q;
        for (var r = 0; r < j; r++) {
            k = h.item(r);
            l = e._inner[k];
            if (f) {
                p = l[0];
                q = l[2];
            }
            else {
                p = l[2];
                q = l[3];
            }
            c.ak.add({ $type: Point_$type, x: p, y: q });
            b.ak.add({ $type: Point_$type, x: p, y: q });
        }
        a.ab = a.ak.count > 0;
        b.ab = b.ak.count > 0;
        c.ab = c.ak.count > 0;
    };
    RangeCategorySeriesView.prototype.cs = function () {
        return new RangeCategoryBucketCalculator(this);
    };
    RangeCategorySeriesView.$t = markType(RangeCategorySeriesView, 'RangeCategorySeriesView', CategorySeriesView.$);
    return RangeCategorySeriesView;
}(CategorySeriesView));
export { RangeCategorySeriesView };
//# sourceMappingURL=RangeCategoryBucketCalculator_combined.js.map
