import { __extends } from "tslib";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrNumericAngleAxis } from "./igr-numeric-angle-axis";
import { IgrNumericRadiusAxis } from "./igr-numeric-radius-axis";
import { TrendLineType_$type } from "igniteui-react-core";
import { ScatterItemSearchMode_$type } from "./ScatterItemSearchMode";
import { IgrAssigningPolarStyleEventArgs } from "./igr-assigning-polar-style-event-args";
import { IgrAssigningPolarMarkerStyleEventArgs } from "./igr-assigning-polar-marker-style-event-args";
import { IgrMarkerSeries } from "./igr-marker-series";
import { ensureBool, ensureEnum, brushToString, stringToBrush, toPoint, fromPoint } from "igniteui-react-core";
/**
 * Represents the base class from which all IgxDataChartComponent polar series are derived.
*/
var IgrPolarBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrPolarBase, _super);
    function IgrPolarBase(props) {
        var _this = _super.call(this, props) || this;
        _this._angleAxisName = null;
        _this._radiusAxisName = null;
        _this._assigningPolarStyle = null;
        _this._assigningPolarStyle_wrapped = null;
        _this._assigningPolarMarkerStyle = null;
        _this._assigningPolarMarkerStyle_wrapped = null;
        return _this;
    }
    Object.defineProperty(IgrPolarBase.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "isPolar", {
        /**
         * Checks if this series is a polar series
        */
        get: function () {
            return this.i.d0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "angleMemberPath", {
        /**
         * Gets or sets the path to use to find the angle values for the series.
        */
        get: function () {
            return this.i.so;
        },
        set: function (v) {
            this.i.so = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "radiusMemberPath", {
        /**
         * Gets or sets the path to use to get the radius values for the series.
        */
        get: function () {
            return this.i.sy;
        },
        set: function (v) {
            this.i.sy = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "angleAxis", {
        /**
         * Gets the effective angle axis for the current series object.
        */
        get: function () {
            if (this.i.q8 == null) {
                return null;
            }
            if (!this.i.q8.externalObject) {
                var e = IgrNumericAngleAxis._createFromInternal(this.i.q8);
                if (e) {
                    e._implementation = this.i.q8;
                }
                this.i.q8.externalObject = e;
            }
            return this.i.q8.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.q8 = null : this.i.q8 = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "angleAxisName", {
        /**
        * Gets or sets the name to use to resolve angleAxis from markup.
        */
        get: function () {
            return this._angleAxisName;
        },
        set: function (v) {
            this._angleAxisName = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "radiusAxis", {
        /**
         * Gets the effective radius axis for the current series object.
        */
        get: function () {
            if (this.i.q9 == null) {
                return null;
            }
            if (!this.i.q9.externalObject) {
                var e = IgrNumericRadiusAxis._createFromInternal(this.i.q9);
                if (e) {
                    e._implementation = this.i.q9;
                }
                this.i.q9.externalObject = e;
            }
            return this.i.q9.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.q9 = null : this.i.q9 = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "radiusAxisName", {
        /**
        * Gets or sets the name to use to resolve radiusAxis from markup.
        */
        get: function () {
            return this._radiusAxisName;
        },
        set: function (v) {
            this._radiusAxisName = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "useCartesianInterpolation", {
        /**
         * Gets or sets whether Cartesian Interpolation should be used rather than Archimedian
         * spiral based interpolation.
        */
        get: function () {
            return this.i.r8;
        },
        set: function (v) {
            this.i.r8 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "maximumMarkers", {
        /**
         * Gets or sets the maximum number of markers displayed by the current series.
         * If more than the specified number of markers are visible, the polar series will automatically
         * choose a representative set.
        */
        get: function () {
            return this.i.si;
        },
        set: function (v) {
            this.i.si = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "trendLineType", {
        /**
         * Gets or sets the trend type for the current series object.
        */
        get: function () {
            return this.i.rq;
        },
        set: function (v) {
            this.i.rq = ensureEnum(TrendLineType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "trendLineBrush", {
        /**
         * Gets or sets the brush that specifies how the current series
         * object's trend line is drawn.
        */
        get: function () {
            return brushToString(this.i.tx);
        },
        set: function (v) {
            this.i.tx = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "actualTrendLineBrush", {
        /**
         * Gets the effective TrendLineBrush for this series.
        */
        get: function () {
            return brushToString(this.i.tw);
        },
        set: function (v) {
            this.i.tw = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "trendLineThickness", {
        /**
         * Gets or sets the thickness of the current series object's trend line.
        */
        get: function () {
            return this.i.sg;
        },
        set: function (v) {
            this.i.sg = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "trendLinePeriod", {
        /**
         * Gets or sets the moving average period for the current series object.
        */
        get: function () {
            return this.i.sj;
        },
        set: function (v) {
            this.i.sj = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "trendLineZIndex", {
        /**
         * Sets or Gets the Trendline Z index.
        */
        get: function () {
            return this.i.sk;
        },
        set: function (v) {
            this.i.sk = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "clipSeriesToBounds", {
        /**
         * Gets or sets whether to clip the series to the bounds.
         * Setting this to true can effect performance.
        */
        get: function () {
            return this.i.rz;
        },
        set: function (v) {
            this.i.rz = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "actualItemSearchMode", {
        get: function () {
            return this.i.rm;
        },
        set: function (v) {
            this.i.rm = ensureEnum(ScatterItemSearchMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "itemSearchMode", {
        /**
         * Gets or sets the mode the series will use to find the closest point to the cursor.
        */
        get: function () {
            return this.i.ro;
        },
        set: function (v) {
            this.i.ro = ensureEnum(ScatterItemSearchMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "itemSearchThreshold", {
        /**
         * Gets or sets the threshold to use when searching for items using ItemSearchMode.
        */
        get: function () {
            return this.i.sh;
        },
        set: function (v) {
            this.i.sh = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "isCustomPolarStyleAllowed", {
        /**
         * Gets or sets whether this Polar series should allow custom style overrides of its individual visuals.
        */
        get: function () {
            return this.i.r2;
        },
        set: function (v) {
            this.i.r2 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "isCustomPolarMarkerStyleAllowed", {
        /**
         * Gets or sets whether this Polar series should allow custom style overrides of its individual marker visuals.
        */
        get: function () {
            return this.i.r1;
        },
        set: function (v) {
            this.i.r1 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    IgrPolarBase.prototype.bindAxes = function (axes) {
        _super.prototype.bindAxes.call(this, axes);
        for (var i = 0; i < axes.length; i++) {
            if (this.angleAxisName && this.angleAxisName.length > 0 &&
                axes[i].name == this.angleAxisName) {
                this.angleAxis = axes[i];
            }
        }
        for (var i = 0; i < axes.length; i++) {
            if (this.radiusAxisName && this.radiusAxisName.length > 0 &&
                axes[i].name == this.radiusAxisName) {
                this.radiusAxis = axes[i];
            }
        }
    };
    IgrPolarBase.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.angleAxis && this.angleAxis.name && this.angleAxis.name == name) {
            return this.angleAxis;
        }
        if (this.radiusAxis && this.radiusAxis.name && this.radiusAxis.name == name) {
            return this.radiusAxis;
        }
        return null;
    };
    IgrPolarBase.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.angleAxis && this.angleAxis._styling) {
            this.angleAxis._styling(container, component, this);
        }
        if (this.radiusAxis && this.radiusAxis._styling) {
            this.radiusAxis._styling(container, component, this);
        }
        this._inStyling = false;
    };
    /**
     * Scrolls the requested item into view, if possible.
    
    * @param item  * The item to scroll into view.
    */
    IgrPolarBase.prototype.scrollIntoView = function (item) {
        var iv = this.i.eh(item);
        return (iv);
    };
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    IgrPolarBase.prototype.getItem = function (world) {
        var iv = this.i.hh(toPoint(world));
        return (iv);
    };
    /**
     * Gets the index of the item that resides at the provided world coordinates.
    
    * @param world  * The world coordinates of the requested item.
    */
    IgrPolarBase.prototype.getItemIndex = function (world) {
        var iv = this.i.g0(toPoint(world));
        return (iv);
    };
    IgrPolarBase.prototype.getExactItemIndex = function (world) {
        var iv = this.i.fw(toPoint(world));
        return (iv);
    };
    IgrPolarBase.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {
        var iv = this.i.o2(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    };
    IgrPolarBase.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.hk(item, memberPathName);
        return (iv);
    };
    /**
     * Determine if object can be used as RadiusAxis
    
    * @param axis  * The object to check
    */
    IgrPolarBase.prototype.canUseAsRadiusAxis = function (axis) {
        var iv = this.i.ry(axis);
        return (iv);
    };
    /**
     * Determine if object can be used as AngleAxis
    
    * @param axis  * The object to check
    */
    IgrPolarBase.prototype.canUseAsAngleAxis = function (axis) {
        var iv = this.i.rx(axis);
        return (iv);
    };
    Object.defineProperty(IgrPolarBase.prototype, "assigningPolarStyle", {
        /**
         * Event raised when Assigning Category Style
        */
        get: function () {
            return this._assigningPolarStyle;
        },
        set: function (ev) {
            var _this = this;
            if (this._assigningPolarStyle_wrapped !== null) {
                this.i.assigningPolarStyle = delegateRemove(this.i.assigningPolarStyle, this._assigningPolarStyle_wrapped);
                this._assigningPolarStyle_wrapped = null;
                this._assigningPolarStyle = null;
            }
            this._assigningPolarStyle = ev;
            this._assigningPolarStyle_wrapped = function (o, e) {
                var outerArgs = new IgrAssigningPolarStyleEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeAssigningPolarStyle) {
                    _this.beforeAssigningPolarStyle(_this, outerArgs);
                }
                if (_this._assigningPolarStyle) {
                    _this._assigningPolarStyle(_this, outerArgs);
                }
            };
            this.i.assigningPolarStyle = delegateCombine(this.i.assigningPolarStyle, this._assigningPolarStyle_wrapped);
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrPolarBase.prototype, "assigningPolarMarkerStyle", {
        /**
         * Event raised when Assigning Polar Marker Style
        */
        get: function () {
            return this._assigningPolarMarkerStyle;
        },
        set: function (ev) {
            var _this = this;
            if (this._assigningPolarMarkerStyle_wrapped !== null) {
                this.i.assigningPolarMarkerStyle = delegateRemove(this.i.assigningPolarMarkerStyle, this._assigningPolarMarkerStyle_wrapped);
                this._assigningPolarMarkerStyle_wrapped = null;
                this._assigningPolarMarkerStyle = null;
            }
            this._assigningPolarMarkerStyle = ev;
            this._assigningPolarMarkerStyle_wrapped = function (o, e) {
                var outerArgs = new IgrAssigningPolarMarkerStyleEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeAssigningPolarMarkerStyle) {
                    _this.beforeAssigningPolarMarkerStyle(_this, outerArgs);
                }
                if (_this._assigningPolarMarkerStyle) {
                    _this._assigningPolarMarkerStyle(_this, outerArgs);
                }
            };
            this.i.assigningPolarMarkerStyle = delegateCombine(this.i.assigningPolarMarkerStyle, this._assigningPolarMarkerStyle_wrapped);
            ;
        },
        enumerable: false,
        configurable: true
    });
    return IgrPolarBase;
}(IgrMarkerSeries));
export { IgrPolarBase };
//# sourceMappingURL=igr-polar-base.js.map
