/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Series } from "./Series";
import { DependencyProperty } from "igniteui-react-core";
import { IEnumerable_$type, runOn, delegateCombine, delegateRemove, typeCast, markType, markDep } from "igniteui-react-core";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { Triangulator } from "igniteui-react-core";
import { TriangulationStatusEventArgs } from "igniteui-react-core";
import { FastItemsSource } from "igniteui-react-core";
import { SeriesViewer } from "./SeriesViewer";
import { Axis } from "./Axis";
import { AxisRange } from "./AxisRange";
import { PropertyMetadata } from "igniteui-react-core";
/**
 * @hidden
 */
var ScatterTriangulationSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ScatterTriangulationSeries, _super);
    function ScatterTriangulationSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.pp = null;
        _this.pq = null;
        _this.py = false;
        _this.pl = null;
        _this.triangulationStatusChanged = null;
        _this.p1 = null;
        _this.pm = null;
        _this.pn = null;
        _this.po = null;
        return _this;
    }
    ScatterTriangulationSeries.prototype.ke = function () {
        _super.prototype.ke.call(this);
        this.pi = null;
        this.pj = null;
    };
    ScatterTriangulationSeries.prototype.hk = function (a, b) {
        var c = this.ja(b);
        if (c == ScatterTriangulationSeries.$$p[6]) {
            return this.hl(a, b, this.qg);
        }
        if (c == ScatterTriangulationSeries.$$p[8]) {
            return this.hl(a, b, this.qk);
        }
        return _super.prototype.hk.call(this, a, b);
    };
    Object.defineProperty(ScatterTriangulationSeries.prototype, "pv", {
        get: function () {
            return this.pp;
        },
        set: function (a) {
            var b = this.pv != a;
            if (b) {
                var c = this.pv;
                this.pp = a;
                this.raisePropertyChanged("XColumn", c, this.pv);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScatterTriangulationSeries.prototype, "pw", {
        get: function () {
            return this.pq;
        },
        set: function (a) {
            var b = this.pw != a;
            if (b) {
                var c = this.pw;
                this.pq = a;
                this.raisePropertyChanged("YColumn", c, this.pw);
            }
        },
        enumerable: false,
        configurable: true
    });
    ScatterTriangulationSeries.prototype.l1 = function (a) {
        var b = this.ch != null && this.px == null && this.p1 == null && this.pv != null && this.pw != null && this.pv.count >= 3 && this.pw.count >= 3 && !this.py;
        if (b) {
            this.qo();
            this.py = true;
        }
    };
    ScatterTriangulationSeries.prototype.qo = function () {
        this.pl = new Triangulator(this.ch.count, this.pv, this.pw);
        var a = this.pl;
        a.triangulationStatusChanged = delegateCombine(a.triangulationStatusChanged, runOn(this, this.qp));
        this.pl.y();
    };
    ScatterTriangulationSeries.prototype.qm = function () {
        if (this.pl == null) {
            return;
        }
        this.pl.r();
        var a = this.pl;
        a.triangulationStatusChanged = delegateRemove(a.triangulationStatusChanged, runOn(this, this.qp));
        this.pl = null;
    };
    ScatterTriangulationSeries.prototype.qp = function (a, b) {
        var _this = this;
        if (this.triangulationStatusChanged != null) {
            this.triangulationStatusChanged(this, new TriangulationStatusEventArgs(b.currentStatus));
        }
        if (b.currentStatus >= 100) {
            if (this.pl == null) {
                return;
            }
            var c = this.pl;
            c.triangulationStatusChanged = delegateRemove(c.triangulationStatusChanged, runOn(this, this.qp));
            this.p1 = this.pl.n();
            this.pl = null;
            var d = ((function () {
                var $ret = new FastItemsSource();
                $ret.e = _this.p1;
                return $ret;
            })());
            this.ps = this.pr(d, "v1");
            this.pt = this.pr(d, "v2");
            this.pu = this.pr(d, "v3");
            this.l0(false);
        }
    };
    ScatterTriangulationSeries.prototype.pr = function (a, b) {
        if (b == null) {
            return a.registerColumnInt(null, null, false);
        }
        var c = null;
        var d = SeriesViewer.b1(b, this.coercionMethods);
        c = d.a;
        return a.registerColumnInt(b, c, this.expectFunctions);
    };
    ScatterTriangulationSeries.prototype.lm = function (a, b, c, d) {
        var _this = this;
        _super.prototype.lm.call(this, a, b, c, d);
        switch (b) {
            case "FastItemsSource":
                var e = typeCast(IFastItemsSource_$type, c);
                if (e != null) {
                    e.deregisterColumn(this.pv);
                    e.deregisterColumn(this.pw);
                    this.pv = null;
                    this.pw = null;
                }
                this.qn();
                var f = typeCast(IFastItemsSource_$type, d);
                if (f != null) {
                    this.pv = this.ce(this.qg);
                    this.pw = this.ce(this.qk);
                }
                this.l0(false);
                break;
            case ScatterTriangulationSeries.$$p[6]:
                if (this.ch != null) {
                    this.ch.deregisterColumn(this.pv);
                    this.pv = this.ce(this.qg);
                }
                this.qn();
                this.l0(false);
                this.k7();
                break;
            case ScatterTriangulationSeries.$$p[8]:
                if (this.ch != null) {
                    this.ch.deregisterColumn(this.pw);
                    this.pw = this.ce(this.qk);
                }
                this.qn();
                this.l0(false);
                this.k7();
                break;
            case ScatterTriangulationSeries.$$p[5]:
                if (c != null) {
                    (typeCast(Axis.$, c)).bx(this);
                }
                if (d != null) {
                    (typeCast(Axis.$, d)).cn(this);
                }
                if ((this.pi != null && !this.pi.cv()) || (d == null && c != null)) {
                    this.l0(false);
                }
                this.k7();
                break;
            case ScatterTriangulationSeries.$$p[7]:
                if (c != null) {
                    (typeCast(Axis.$, c)).bx(this);
                }
                if (d != null) {
                    (typeCast(Axis.$, d)).cn(this);
                }
                if ((this.pj != null && !this.pj.cv()) || (d == null && c != null)) {
                    this.l0(false);
                }
                this.k7();
                break;
            case ScatterTriangulationSeries.$$p[1]:
                if (this.trianglesSource != null) {
                    this.qm();
                    this.px = ((function () {
                        var $ret = new FastItemsSource();
                        $ret.e = _this.trianglesSource;
                        return $ret;
                    })());
                }
                else {
                    this.px = null;
                }
                break;
            case ScatterTriangulationSeries.$$p[0]:
                var g = typeCast(IFastItemsSource_$type, c);
                if (g != null) {
                    g.deregisterColumn(this.ps);
                    g.deregisterColumn(this.pt);
                    g.deregisterColumn(this.pu);
                    this.ps = null;
                    this.pt = null;
                    this.pu = null;
                }
                var h = typeCast(IFastItemsSource_$type, d);
                if (h != null) {
                    this.ps = this.pr(h, this.p8);
                    this.pt = this.pr(h, this.qa);
                    this.pu = this.pr(h, this.qc);
                }
                this.l0(false);
                this.k7();
                break;
            case ScatterTriangulationSeries.$$p[2]:
                if (this.px != null) {
                    this.px.deregisterColumn(this.ps);
                    this.ps = this.pr(this.px, this.p8);
                }
                this.l0(false);
                this.k7();
                break;
            case ScatterTriangulationSeries.$$p[3]:
                if (this.px != null) {
                    this.px.deregisterColumn(this.pt);
                    this.pt = this.pr(this.px, this.qa);
                }
                this.l0(false);
                this.k7();
                break;
            case ScatterTriangulationSeries.$$p[4]:
                if (this.px != null) {
                    this.px.deregisterColumn(this.pu);
                    this.pu = this.pr(this.px, this.qc);
                }
                this.l0(false);
                this.k7();
                break;
            case "XColumn":
                if (this.pi != null) {
                    this.pi.cv();
                }
                break;
            case "YColumn":
                if (this.pj != null) {
                    this.pj.cv();
                }
                break;
        }
    };
    ScatterTriangulationSeries.prototype.p0 = function (a) {
        if (typeCast(NumericYAxis.$, a) !== null) {
            return true;
        }
        return false;
    };
    ScatterTriangulationSeries.prototype.pz = function (a) {
        if (typeCast(NumericXAxis.$, a) !== null) {
            return true;
        }
        return false;
    };
    ScatterTriangulationSeries.prototype.e3 = function (a, b, c) {
        return _super.prototype.e3.call(this, a, b, c) && this.ch != null && this.pi != null && this.pj != null && this.pi.bh != null && this.pj.bh != null && a.width > 0 && a.height > 0 && this.ps != null && this.ps.count > 0 && this.pt != null && this.pt.count > 0 && this.pu != null && this.pu.count > 0 && this.pv != null && this.pv.count > 0 && this.pw != null && this.pw.count > 0;
    };
    ScatterTriangulationSeries.prototype.qn = function () {
        if (this.trianglesSource == null) {
            this.p1 = null;
            this.ps = null;
            this.pt = null;
            this.pu = null;
            this.py = false;
        }
    };
    ScatterTriangulationSeries.prototype.ky = function () {
        _super.prototype.ky.call(this);
        if (this.pi != null) {
            this.pi.hp();
        }
        if (this.pj != null) {
            this.pj.hp();
        }
    };
    ScatterTriangulationSeries.prototype.kk = function (a, b, c, d) {
        _super.prototype.kk.call(this, a, b, c, d);
        this.qn();
        this.l0(false);
    };
    ScatterTriangulationSeries.prototype.ap = function (a) {
        if (a != null && a == this.pi && this.pv != null) {
            return new AxisRange(this.pv.minimum, this.pv.maximum);
        }
        if (a != null && a == this.pj && this.pw != null) {
            return new AxisRange(this.pw.minimum, this.pw.maximum);
        }
        return null;
    };
    ScatterTriangulationSeries.prototype.mn = function (a, b) {
        this.l0(false);
    };
    ScatterTriangulationSeries.prototype.mm = function (a, b) {
        this.l0(false);
    };
    Object.defineProperty(ScatterTriangulationSeries.prototype, "ps", {
        get: function () {
            return this.pm;
        },
        set: function (a) {
            var b = this.ps != a;
            if (b) {
                var c = this.ps;
                this.pm = a;
                this.raisePropertyChanged("TriangleVertexColumn1", c, this.ps);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScatterTriangulationSeries.prototype, "pt", {
        get: function () {
            return this.pn;
        },
        set: function (a) {
            var b = this.pt != a;
            if (b) {
                var c = this.pt;
                this.pn = a;
                this.raisePropertyChanged("TriangleVertexColumn2", c, this.pt);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScatterTriangulationSeries.prototype, "pu", {
        get: function () {
            return this.po;
        },
        set: function (a) {
            var b = this.pu != a;
            if (b) {
                var c = this.pu;
                this.po = a;
                this.raisePropertyChanged("TriangleVertexColumn3", c, this.pu);
            }
        },
        enumerable: false,
        configurable: true
    });
    ScatterTriangulationSeries.prototype.get_d7 = function () {
        return true;
    };
    ScatterTriangulationSeries.prototype.get_dw = function () {
        return true;
    };
    ScatterTriangulationSeries.$t = markType(ScatterTriangulationSeries, 'ScatterTriangulationSeries', Series.$);
    ScatterTriangulationSeries.$$p = markDep(DependencyProperty, PropertyMetadata, ScatterTriangulationSeries, 'raisePropertyChanged', ['FastTrianglesSource:px:qq', [IFastItemsSource_$type, null], 'TrianglesSource::qr', [IEnumerable_$type, null], 'TriangleVertexMemberPath1:p8:qs', [2, null], 'TriangleVertexMemberPath2:qa:qt', [2, null], 'TriangleVertexMemberPath3:qc:qu', [2, null], 'XAxis:pi:qv', [NumericXAxis.$, null], 'XMemberPath:qg:qw', [2, null], 'YAxis:pj:qx', [NumericYAxis.$, null], 'YMemberPath:qk:qy', [2, null]]);
    return ScatterTriangulationSeries;
}(Series));
export { ScatterTriangulationSeries };
//# sourceMappingURL=ScatterTriangulationSeries.js.map
