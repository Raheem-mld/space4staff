/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { AnnotationLayer } from "./AnnotationLayer";
import { Brush } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Series } from "./Series";
import { Thickness } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { CrosshairLayerFrame } from "./CrosshairLayerFrame";
import { List$1 } from "igniteui-react-core";
import { Axis } from "./Axis";
import { Dictionary$2 } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { AxisAnnotation } from "./AxisAnnotation";
import { Base, Number_$type, enumGetBox, fromEnum, Point_$type, markType, markDep, runOn } from "igniteui-react-core";
import { AxisAnnotationFrameManager } from "./AxisAnnotationFrameManager";
import { Tuple$2 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { LineSegment } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { Defaults } from "./Defaults";
import { TranslateTransform } from "igniteui-react-core";
import { LineGeometry } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
/**
 * @hidden
 */
var CrosshairLayer = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CrosshairLayer, _super);
    function CrosshairLayer() {
        var _this = _super.call(this) || this;
        _this.xAxisAnnotationFormatLabel = null;
        _this.yAxisAnnotationFormatLabel = null;
        _this.qw = null;
        _this.qv = null;
        var a = new CrosshairLayerFrame();
        var b = new CrosshairLayerFrame();
        var c = new CrosshairLayerFrame();
        var d = _this.ha / 1000;
        _this.pk = a;
        _this.pj = b;
        _this.pl = c;
        _this.ab = CrosshairLayer.$;
        return _this;
    }
    CrosshairLayer.prototype.get_c5 = function () {
        return true;
    };
    CrosshairLayer.prototype.get_c3 = function () {
        return true;
    };
    CrosshairLayer.prototype.bu = function () {
        return new CrosshairLayerView(this);
    };
    CrosshairLayer.prototype.lh = function (a) {
        _super.prototype.lh.call(this, a);
        this.qo = a;
    };
    CrosshairLayer.prototype.qq = function () {
        return this.xAxisAnnotationFormatLabel != null;
    };
    CrosshairLayer.prototype.qr = function () {
        return this.yAxisAnnotationFormatLabel != null;
    };
    Object.defineProperty(CrosshairLayer.prototype, "s3", {
        get: function () {
            return new Thickness(1, this.qy, this.q0, this.qz, this.qx);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CrosshairLayer.prototype, "s4", {
        get: function () {
            return new Thickness(1, this.q3, this.q5, this.q4, this.q2);
        },
        enumerable: false,
        configurable: true
    });
    CrosshairLayer.prototype.p3 = function (a, b) {
        if (this.qp == null || this.qp == a) {
            if (!this.as.c) {
                this.l0(b);
            }
        }
    };
    CrosshairLayer.prototype.p5 = function (a, b) {
        var e_1, _a;
        var _this = this;
        _super.prototype.p5.call(this, a, b);
        var c = a;
        var d = this.qu;
        var e = this.qt;
        c.ad.clear();
        c.ae.clear();
        c.ac.clear();
        c.af.clear();
        AxisAnnotationFrameManager.b(c);
        if (this.pq(this.qp)) {
            this.r2(this.qp, c, d, e);
        }
        else {
            try {
                for (var _b = __values(fromEnum(this.ca.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var f = _c.value;
                    if (this.pq(f)) {
                        this.r2(f, c, d, e);
                    }
                    if (f.isStacked) {
                        f.ku(function (g) {
                            if (_this.pq(g)) {
                                _this.r2(g, c, d, e);
                            }
                            return true;
                        });
                    }
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
        }
    };
    CrosshairLayer.prototype.pq = function (a) {
        if (!_super.prototype.pq.call(this, a)) {
            return false;
        }
        if (this.rd != null) {
            if (a.dn) {
                var b = a.i9();
                if (!Base.equalsStatic(this.rd, b)) {
                    return false;
                }
            }
            else {
                if (!Base.equalsStatic(this.rd, a.name)) {
                    return false;
                }
            }
        }
        var c = this.py(a);
        if (!c.c) {
            return false;
        }
        return true;
    };
    CrosshairLayer.prototype.la = function () {
        _super.prototype.la.call(this);
        if (!this.as.c && !this.cr()) {
            return;
        }
        if (this.cr()) {
            this.r3(this.pl, false);
        }
        else {
            this.r3(this.pj, false);
        }
    };
    CrosshairLayer.prototype.r2 = function (a, b, c, d) {
        var e = this.py(a);
        if (!e.c) {
            return;
        }
        var f = e.d;
        f = a.o2(f, c, d);
        var g = this.of;
        if (g == null) {
            g = this.oj;
        }
        if (g == null) {
            g = a.of;
            if (g != null) {
                g = this.qo.cb(g);
            }
        }
        var h = g;
        var i = g;
        if (this.sv != null) {
            h = this.sv;
        }
        if (this.sw != null) {
            i = this.sw;
        }
        b.ac.add(h);
        b.af.add(i);
        b.ad.add(f.y);
        b.ae.add(f.x);
        if (this.qs && !isNaN_(f.y)) {
            AxisAnnotationFrameManager.c(b, f, a, this.ca, this.getEffectiveViewport(), g, this.sx, this.sz, this.sy, this.s3, this.q1, this.s0, this.s2, this.s1, this.s4, this.q6, this.s6 == 0, this.s5 == 0);
        }
    };
    CrosshairLayer.prototype.r3 = function (a, b) {
        var c = false;
        if (this.qv == null) {
            c = true;
            this.qw = new List$1(Axis.$, 0);
            this.qv = new Dictionary$2(Axis.$, Pool$1.$.specialize(AxisAnnotation.$), 0);
        }
        AxisAnnotationFrameManager.d(this, a, c, this.qv, this.qw, b, this.q7, this.q8, this.xAxisAnnotationFormatLabel, this.yAxisAnnotationFormatLabel);
    };
    CrosshairLayer.prototype.r1 = function (a, b, c, d, e) {
        var f = a.item(b);
        b++;
        if (e) {
            f._stroke = d.af._inner[c];
            f._fill = d.af._inner[c];
        }
        else {
            f._stroke = d.ac._inner[c];
            f._fill = d.ac._inner[c];
        }
        f.ac = this.fl;
        f.ai = this.os;
        f.ad = this.ot;
        return new Tuple$2(Path.$, Number_$type, f, b);
    };
    CrosshairLayer.prototype.p8 = function (a, b) {
        _super.prototype.p8.call(this, a, b);
        var c = this.qo.b5;
        var d = a;
        var e = d.ad.count;
        var f = 0;
        var g = b.bu.left;
        var h = b.bu.right;
        var i = b.bu.top;
        var j = b.bu.bottom;
        var k = this.s6 == 0;
        var l = this.s5 == 0;
        for (var m = 0; m < e; m++) {
            var n = Math.floor(d.ad._inner[m]);
            var o = Math.floor(d.ae._inner[m]);
            var p = null;
            if (k) {
                if (isNaN_(n)) {
                    continue;
                }
                var q = this.r1(c, f, m, d, true);
                p = q.c;
                f = q.d;
                var r = new PathGeometry();
                var s = new PathFigure();
                s._startPoint = { $type: Point_$type, x: o, y: i };
                var t = new LineSegment(1);
                t.c = { $type: Point_$type, x: o, y: j };
                s._segments.add(t);
                r.c.add(s);
                p.ak = r;
            }
            if (l) {
                if (isNaN_(n)) {
                    continue;
                }
                var u = this.r1(c, f, m, d, false);
                p = u.c;
                f = u.d;
                var v = new PathGeometry();
                var w = new PathFigure();
                w._startPoint = { $type: Point_$type, x: g, y: n };
                var x = new LineSegment(1);
                x.c = { $type: Point_$type, x: h, y: n };
                w._segments.add(x);
                v.c.add(w);
                p.ak = v;
            }
        }
        c.count = f;
        if (this.cr()) {
            this.r3(this.pl, true);
        }
        else {
            this.r3(this.pj, false);
        }
    };
    CrosshairLayer.prototype.eg = function () {
        return true;
    };
    CrosshairLayer.prototype.lm = function (a, b, c, d) {
        _super.prototype.lm.call(this, a, b, c, d);
        switch (b) {
            case CrosshairLayer.$$p[1]:
                this.l0(true);
                break;
            case CrosshairLayer.$$p[8]:
                this.l0(true);
                break;
            case CrosshairLayer.$$p[4]:
            case CrosshairLayer.$$p[5]:
                this.l0(true);
                break;
            case CrosshairLayer.$$p[2]:
            case CrosshairLayer.$$p[9]:
            case CrosshairLayer.$$p[11]:
            case CrosshairLayer.$$p[13]:
            case CrosshairLayer.$$p[15]:
            case CrosshairLayer.$$p[14]:
            case CrosshairLayer.$$p[12]:
            case CrosshairLayer.$$p[16]:
            case CrosshairLayer.$$p[17]:
            case CrosshairLayer.$$p[18]:
            case CrosshairLayer.$$p[20]:
            case CrosshairLayer.$$p[22]:
            case CrosshairLayer.$$p[24]:
            case CrosshairLayer.$$p[23]:
            case CrosshairLayer.$$p[21]:
            case CrosshairLayer.$$p[25]:
            case CrosshairLayer.$$p[26]:
            case CrosshairLayer.$$p[0]:
            case CrosshairLayer.$$p[7]:
            case CrosshairLayer.$$p[6]:
                this.l0(true);
                break;
        }
    };
    CrosshairLayer.$t = markType(CrosshairLayer, 'CrosshairLayer', AnnotationLayer.$);
    CrosshairLayer.$$p = markDep(DependencyProperty, PropertyMetadata, CrosshairLayer, 'raisePropertyChanged', ['HorizontalLineStroke:sv:r4', [Brush.$, null], 'HorizontalLineVisibility:s5:r5', [Visibility_$type, enumGetBox(Visibility_$type, 0)], 'IsAxisAnnotationEnabled:qs:r6', [0, false], 'SkipUnknownValues:qt:r7', [0, true], 'TargetSeriesName:rd:r8', [2, null], 'TargetSeries:qp:r9', [Series.$, null], 'UseInterpolation:qu:sa', [0, true], 'VerticalLineStroke:sw:sb', [Brush.$, null], 'VerticalLineVisibility:s6:sc', [Visibility_$type, enumGetBox(Visibility_$type, 0)], 'XAxisAnnotationBackground:sx:sd', [Brush.$, null], 'XAxisAnnotationInterpolatedValuePrecision:q7:se', [1, -1], 'XAxisAnnotationOutline:sy:sf', [Brush.$, null], 'XAxisAnnotationPaddingBottom:qx:sg', [1, NaN], 'XAxisAnnotationPaddingLeft:qy:sh', [1, NaN], 'XAxisAnnotationPaddingRight:qz:si', [1, NaN], 'XAxisAnnotationPaddingTop:q0:sj', [1, NaN], 'XAxisAnnotationStrokeThickness:q1:sk', [1, NaN], 'XAxisAnnotationTextColor:sz:sl', [Brush.$, null], 'YAxisAnnotationBackground:s0:sm', [Brush.$, null], 'YAxisAnnotationInterpolatedValuePrecision:q8:sn', [1, -1], 'YAxisAnnotationOutline:s1:so', [Brush.$, null], 'YAxisAnnotationPaddingBottom:q2:sp', [1, NaN], 'YAxisAnnotationPaddingLeft:q3:sq', [1, NaN], 'YAxisAnnotationPaddingRight:q4:sr', [1, NaN], 'YAxisAnnotationPaddingTop:q5:ss', [1, NaN], 'YAxisAnnotationStrokeThickness:q6:st', [1, NaN], 'YAxisAnnotationTextColor:s2:su', [Brush.$, null]]);
    return CrosshairLayer;
}(AnnotationLayer));
export { CrosshairLayer };
/**
 * @hidden
 */
var CrosshairLayerView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CrosshairLayerView, _super);
    function CrosshairLayerView(a) {
        var _this = _super.call(this, a) || this;
        _this.b4 = null;
        _this.b5 = null;
        _this.b6 = null;
        _this.b4 = a;
        _this.b6 = new List$1(Path.$, 0);
        return _this;
    }
    CrosshairLayerView.prototype.as = function () {
        var _this = this;
        _super.prototype.as.call(this);
        this.b5 = ((function () {
            var $ret = new Pool$1(Path.$);
            $ret.create = runOn(_this, _this.cc);
            $ret.activate = runOn(_this, _this.b7);
            $ret.disactivate = runOn(_this, _this.b9);
            $ret.destroy = runOn(_this, _this.b8);
            return $ret;
        })());
        this.b4.gm = Defaults.j;
    };
    CrosshairLayerView.prototype.cc = function () {
        var a = new Path();
        a.j = new TranslateTransform();
        this.b6.add(a);
        return a;
    };
    CrosshairLayerView.prototype.b7 = function (a) {
        a._visibility = 0;
    };
    CrosshairLayerView.prototype.b9 = function (a) {
        a._visibility = 1;
    };
    CrosshairLayerView.prototype.b8 = function (a) {
        this.b6.remove(a);
    };
    CrosshairLayerView.prototype.ca = function (a, b, c, d) {
        if (a.ak == null || a.ak.c.x != d || a.ak.d.x != c) {
            var e = ((function () {
                var $ret = new LineGeometry();
                $ret.d = { $type: Point_$type, x: c, y: b };
                $ret.c = { $type: Point_$type, x: d, y: b };
                return $ret;
            })());
            a.ak = e;
        }
    };
    CrosshairLayerView.prototype.cb = function (a) {
        if (a == null) {
            return a;
        }
        return BrushUtil.l(a, 0.1);
    };
    CrosshairLayerView.prototype.a6 = function (a, b) {
        _super.prototype.a6.call(this, a, b);
        if (a.d && !b) {
            for (var c = 0; c < this.b6.count; c++) {
                var d = this.b6._inner[c];
                if (d._visibility == 0) {
                    a.s(d);
                }
            }
        }
    };
    CrosshairLayerView.prototype.al = function (a) {
        _super.prototype.al.call(this, a);
        for (var b = 0; b < this.b6.count; b++) {
            this.e.a6.exportPathData(a, this.b6._inner[b], "crosshairLine", ["Main", "Crosshair"]);
        }
    };
    CrosshairLayerView.$t = markType(CrosshairLayerView, 'CrosshairLayerView', AnnotationLayerView.$);
    return CrosshairLayerView;
}(AnnotationLayerView));
export { CrosshairLayerView };
//# sourceMappingURL=CrosshairLayer_combined.js.map
