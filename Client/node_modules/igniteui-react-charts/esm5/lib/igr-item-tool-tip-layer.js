import { __extends } from "tslib";
import { IgrSeries } from "./igr-series";
import { IgrAnnotationLayer } from "./igr-annotation-layer";
import { ItemToolTipLayer } from "./ItemToolTipLayer";
import { ensureBool } from "igniteui-react-core";
/**
 * Represents an annotation layer that displays tooltips for all target series individually.
*/
var IgrItemToolTipLayer = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrItemToolTipLayer, _super);
    function IgrItemToolTipLayer(props) {
        return _super.call(this, props) || this;
    }
    IgrItemToolTipLayer.prototype.createImplementation = function () {
        return new ItemToolTipLayer();
    };
    Object.defineProperty(IgrItemToolTipLayer.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrItemToolTipLayer.prototype, "isAnnotationHoverLayer", {
        /**
         * Gets whether the series is an annotation layer displayed only when hovering over the chart.
        */
        get: function () {
            return this.i.c5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrItemToolTipLayer.prototype, "isDefaultTooltipBehaviorDisabled", {
        /**
         * Gets whether the default tooltip behaviors for the chart are disabled if this layer is present.
        */
        get: function () {
            return this.i.de;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrItemToolTipLayer.prototype, "targetSeriesName", {
        /**
         * Gets or sets the name of the series series to target this annotation to. If null, this annotation targets all series simultaneously.
        */
        get: function () {
            return this.i.qt;
        },
        set: function (v) {
            this.i.qt = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrItemToolTipLayer.prototype, "targetSeries", {
        /**
         * Gets or sets the series to target this annotation to. If null, this annotation targets all series simultaneously.
        */
        get: function () {
            if (this.i.qn == null) {
                return null;
            }
            if (!this.i.qn.externalObject) {
                var e = IgrSeries._createFromInternal(this.i.qn);
                if (e) {
                    e._implementation = this.i.qn;
                }
                this.i.qn.externalObject = e;
            }
            return this.i.qn.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.qn = null : this.i.qn = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrItemToolTipLayer.prototype, "useInterpolation", {
        /**
         * Gets or sets whether to use value interpolation when drawing the tooltips.
        */
        get: function () {
            return this.i.qq;
        },
        set: function (v) {
            this.i.qq = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrItemToolTipLayer.prototype, "skipUnknownValues", {
        /**
         * Gets or sets whether to skip past unknown values when searching for series values.
        */
        get: function () {
            return this.i.qp;
        },
        set: function (v) {
            this.i.qp = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    IgrItemToolTipLayer.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.targetSeries && this.targetSeries.name && this.targetSeries.name == name) {
            return this.targetSeries;
        }
        return null;
    };
    IgrItemToolTipLayer.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.targetSeries && this.targetSeries._styling) {
            this.targetSeries._styling(container, component, this);
        }
        this._inStyling = false;
    };
    /**
     * Hides any tooltips presented by the layer, if any.
    
    */
    IgrItemToolTipLayer.prototype.hideToolTips = function () {
        this.i.kx();
    };
    return IgrItemToolTipLayer;
}(IgrAnnotationLayer));
export { IgrItemToolTipLayer };
//# sourceMappingURL=igr-item-tool-tip-layer.js.map
