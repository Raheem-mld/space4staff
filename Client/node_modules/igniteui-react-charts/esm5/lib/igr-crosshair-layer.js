import { __extends } from "tslib";
import { IgrSeries } from "./igr-series";
import { Visibility_$type } from "igniteui-react-core";
import { IgrAnnotationLayer } from "./igr-annotation-layer";
import { CrosshairLayer } from "./CrosshairLayer";
import { ensureBool, brushToString, stringToBrush, ensureEnum } from "igniteui-react-core";
/**
 * Represents an annotation layer that displays crosshair lines that cross through the closest value of the target series under the cursor.
*/
var IgrCrosshairLayer = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrCrosshairLayer, _super);
    function IgrCrosshairLayer(props) {
        return _super.call(this, props) || this;
    }
    IgrCrosshairLayer.prototype.createImplementation = function () {
        return new CrosshairLayer();
    };
    Object.defineProperty(IgrCrosshairLayer.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "isAnnotationHoverLayer", {
        /**
         * Gets whether the series is an annotation layer displayed only when hovering over the chart.
        */
        get: function () {
            return this.i.c5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "isAnnotationCrosshairLayer", {
        /**
         * Gets whether the series is an crosshair annotation layer.
        */
        get: function () {
            return this.i.c3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "horizontalLineStroke", {
        /**
         * Gets or sets the color to use for the horizontal line. Leave null for an automatic value.
        */
        get: function () {
            return brushToString(this.i.sv);
        },
        set: function (v) {
            this.i.sv = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "verticalLineStroke", {
        /**
         * Gets or sets the color to use for vertical line. Leave null for an automatic value.
        */
        get: function () {
            return brushToString(this.i.sw);
        },
        set: function (v) {
            this.i.sw = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "targetSeriesName", {
        /**
         * Gets or sets the name of the series series to target this annotation to. If null, this annotation targets all series simultaneously.
        */
        get: function () {
            return this.i.rd;
        },
        set: function (v) {
            this.i.rd = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "targetSeries", {
        /**
         * Gets or sets the series to target this annotation to. If null, this annotation targets all series simultaneously.
        */
        get: function () {
            if (this.i.qp == null) {
                return null;
            }
            if (!this.i.qp.externalObject) {
                var e = IgrSeries._createFromInternal(this.i.qp);
                if (e) {
                    e._implementation = this.i.qp;
                }
                this.i.qp.externalObject = e;
            }
            return this.i.qp.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.qp = null : this.i.qp = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "useInterpolation", {
        /**
         * Gets or sets whether to use value interpolation when drawing a line through the best value for the cursor position.
        */
        get: function () {
            return this.i.qu;
        },
        set: function (v) {
            this.i.qu = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "isAxisAnnotationEnabled", {
        /**
         * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.
        */
        get: function () {
            return this.i.qs;
        },
        set: function (v) {
            this.i.qs = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationTextColor", {
        /**
         * Gets or sets the color to use for the x axis annotation text. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.sz);
        },
        set: function (v) {
            this.i.sz = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationBackground", {
        /**
         * Gets or sets the color to use for the x axis annotation backing. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.sx);
        },
        set: function (v) {
            this.i.sx = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationInterpolatedValuePrecision", {
        /**
         * Gets or sets the precision to use displaying values for interpolated crosshair positions.
        */
        get: function () {
            return this.i.q7;
        },
        set: function (v) {
            this.i.q7 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationOutline", {
        /**
         * Gets or sets the color to use for the x axis annotation outline. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.sy);
        },
        set: function (v) {
            this.i.sy = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationPaddingLeft", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.qy;
        },
        set: function (v) {
            this.i.qy = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationPaddingTop", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.q0;
        },
        set: function (v) {
            this.i.q0 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationPaddingRight", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.qz;
        },
        set: function (v) {
            this.i.qz = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationPaddingBottom", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.qx;
        },
        set: function (v) {
            this.i.qx = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationPaddingLeft", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.q3;
        },
        set: function (v) {
            this.i.q3 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationPaddingTop", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.q5;
        },
        set: function (v) {
            this.i.q5 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationPaddingRight", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.q4;
        },
        set: function (v) {
            this.i.q4 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationPaddingBottom", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.q2;
        },
        set: function (v) {
            this.i.q2 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationStrokeThickness", {
        /**
         * Gets or sets the stroke thickness for the x axis annotation backing. Leave unset for an automatic value.
        */
        get: function () {
            return this.i.q1;
        },
        set: function (v) {
            this.i.q1 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationTextColor", {
        /**
         * Gets or sets the color to use for the y axis annotation text. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.s2);
        },
        set: function (v) {
            this.i.s2 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationBackground", {
        /**
         * Gets or sets the color to use for the y axis annotation backing. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.s0);
        },
        set: function (v) {
            this.i.s0 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationInterpolatedValuePrecision", {
        /**
         * Gets or sets the precision to use displaying values for interpolated crosshair positions.
        */
        get: function () {
            return this.i.q8;
        },
        set: function (v) {
            this.i.q8 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationOutline", {
        /**
         * Gets or sets the color to use for the y axis annotation outline. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.s1);
        },
        set: function (v) {
            this.i.s1 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationStrokeThickness", {
        /**
         * Gets or sets the stroke thickness for the y axis annotation backing. Leave unset for an automatic value.
        */
        get: function () {
            return this.i.q6;
        },
        set: function (v) {
            this.i.q6 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "verticalLineVisibility", {
        /**
         * Gets or sets whether to display the vertical line.
        */
        get: function () {
            return this.i.s6;
        },
        set: function (v) {
            this.i.s6 = ensureEnum(Visibility_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "horizontalLineVisibility", {
        /**
         * Gets or sets whether to display the horizontal line.
        */
        get: function () {
            return this.i.s5;
        },
        set: function (v) {
            this.i.s5 = ensureEnum(Visibility_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "skipUnknownValues", {
        /**
         * Gets or sets whether to skip unknown values when searching for series values.
        */
        get: function () {
            return this.i.qt;
        },
        set: function (v) {
            this.i.qt = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    IgrCrosshairLayer.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.targetSeries && this.targetSeries.name && this.targetSeries.name == name) {
            return this.targetSeries;
        }
        return null;
    };
    IgrCrosshairLayer.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.targetSeries && this.targetSeries._styling) {
            this.targetSeries._styling(container, component, this);
        }
        this._inStyling = false;
    };
    return IgrCrosshairLayer;
}(IgrAnnotationLayer));
export { IgrCrosshairLayer };
//# sourceMappingURL=igr-crosshair-layer.js.map
