import { XYChart } from "./XYChart";
import { IEnumerable, Type } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { CategoryChartType } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { BrushCollection } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { Series } from "./Series";
import { XamDataChart } from "./XamDataChart";
import { Axis } from "./Axis";
import { DataSeries } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class CategoryChart extends XYChart {
    static $t: Type;
    protected jl(): void;
    protected jn(a: Series, b: number): void;
    protected j7(a: string, b: any, c: any): void;
    private ug;
    get ui(): number;
    set ui(a: number);
    private tf;
    get tg(): (time: number) => number;
    set tg(a: (time: number) => number);
    ul(): string;
    protected jg(a: XamDataChart): void;
    protected jm(a: Series, b: number): void;
    private s5;
    private s9;
    protected i1(): void;
    protected q7(a: Axis): void;
    protected get_ai(): DomainType;
    get ai(): DomainType;
    private sz;
    get s0(): CategoryChartType;
    set s0(a: CategoryChartType);
    private s1;
    get s2(): CategorySeriesMarkerCollisionAvoidance;
    set s2(a: CategorySeriesMarkerCollisionAvoidance);
    private tj;
    get to(): boolean;
    set to(a: boolean);
    private s3;
    get s4(): CategoryTransitionInMode;
    set s4(a: CategoryTransitionInMode);
    private td;
    get te(): TransitionInSpeedType;
    set te(a: TransitionInSpeedType);
    private tt;
    get t7(): number;
    set t7(a: number);
    private tu;
    get t8(): number;
    set t8(a: number);
    private ts;
    get t6(): number;
    set t6(a: number);
    private tv;
    get t9(): number;
    set t9(a: number);
    private tw;
    get uc(): number;
    set uc(a: number);
    private tl;
    get tq(): boolean;
    set tq(a: boolean);
    private uh;
    get uj(): number;
    set uj(a: number);
    private ty;
    get ue(): number;
    set ue(a: number);
    private tx;
    get ud(): number;
    set ud(a: number);
    private tz;
    get uf(): number;
    set uf(a: number);
    get t5(): number;
    get t4(): number;
    t1(): number;
    t3(): number;
    t0(): number;
    t2(): number;
    get ub(): number;
    get ua(): number;
    private sv;
    get sx(): BrushCollection;
    set sx(a: BrushCollection);
    private sw;
    get sy(): BrushCollection;
    set sy(a: BrushCollection);
    private tk;
    get tp(): boolean;
    set tp(a: boolean);
    private th;
    get tm(): boolean;
    set tm(a: boolean);
    private ti;
    get tn(): boolean;
    set tn(a: boolean);
    constructor();
    protected get_c5(): List$1<DataSeriesType>;
    protected get c5(): List$1<DataSeriesType>;
    private tr;
    protected de(): IEnumerable;
    private u9;
    private va;
    protected kp(): void;
    private _xAxis;
    private get xAxis();
    private set xAxis(value);
    private _yAxis;
    private get yAxis();
    private set yAxis(value);
    private s8;
    private s7;
    protected ab(a: DataSeries): DataSeriesType;
    protected bb(a: DataSeries, b: DataSeriesType): Series;
    protected kn(a: DataSeries): void;
    protected kq(): void;
    protected get_c4(): List$1<IDataSeriesAdapterRule>;
    protected get c4(): List$1<IDataSeriesAdapterRule>;
    protected iz(a: Series, b: number): void;
    private u7;
    private u8;
    protected ly(): Axis;
    protected lz(): Axis;
    private tb;
    private tc;
    protected c1(a: string, b: boolean): List$1<Series>;
    protected ku(a: Series, b: Series, c: DataSeries): void;
    protected cl(): boolean;
    protected j6(a: string, b: any, c: any): void;
}
