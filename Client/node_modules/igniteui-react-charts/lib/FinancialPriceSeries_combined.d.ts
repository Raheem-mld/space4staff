import { FinancialSeries } from "./FinancialSeries";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { TrendLineType } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { PriceDisplayType } from "./PriceDisplayType";
import { SeriesView } from "./SeriesView";
import { Type, Point } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { ITrendLineManager } from "./ITrendLineManager";
import { Axis } from "./Axis";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { Pool$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { GeometryGroup } from "igniteui-react-core";
import { LegendItemBadgeShape } from "./LegendItemBadgeShape";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class FinancialPriceSeries extends FinancialSeries implements ITrendLineSeries {
    static $t: Type;
    protected get_dl(): boolean;
    protected bu(): SeriesView;
    lh(a: SeriesView): void;
    s1: FinancialPriceSeriesView;
    constructor();
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get tl(): Brush;
    set tl(a: Brush);
    static readonly tb: DependencyProperty;
    trendLineThickness: number;
    to: PenLineCap;
    tn: DoubleCollection;
    trendLinePeriod: number;
    s5: number;
    protected kk(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    s2: PriceDisplayType;
    protected bo(): SeriesHitTestMode;
    pb(a: Point): Rect;
    private s0;
    ak(a: Point): Rect[];
    ep(a: Point, b: boolean): boolean;
    protected es(a: Point, b: boolean): boolean;
    protected lm(a: any, b: string, c: any, d: any): void;
    private ta;
    ap(a: Axis): AxisRange;
    aq(a: Rect): AxisRange;
    f2(): number;
    eh(a: any): boolean;
    e3(a: Rect, b: Rect, c: SeriesView): boolean;
    sh(a: CategoryFrame, b: FinancialSeriesView): void;
    kh(a: boolean, b: SeriesView): void;
    protected mm(a: Rect, b: Rect): void;
    pg(): Thickness;
    protected get_cy(): boolean;
    sj(a: CategoryFrame, b: FinancialSeriesView): void;
    f1(): number;
    private s9;
    private s3;
    private s8;
    hn(a: any, b: Point): any;
    protected md(): void;
    protected kr(a: any): void;
    tm: Brush;
    oq(): Brush;
    l5(a: Brush, b: Brush): void;
    protected a8(a: LegendItemBadgeShape): LegendItemBadgeShape;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class FinancialPriceSeriesView extends FinancialSeriesView {
    static $t: Type;
    protected b3: FinancialPriceSeries;
    constructor(a: FinancialPriceSeries);
    b6: Pool$1<Path>;
    co(): Path;
    protected b9: List$1<Path>;
    ce(a: Path): void;
    cg(a: Path): void;
    cf(a: Path): void;
    protected by(): FinancialBucketCalculator;
    as(): void;
    private cn;
    private cm;
    private b4;
    get b5(): ITrendLineManager;
    set b5(a: ITrendLineManager);
    get b7(): boolean;
    ch(): void;
    cb(): void;
    ca(): void;
    ck(): GeometryGroup;
    cj(): GeometryGroup;
    ci(): void;
    protected bb(): void;
    protected bc(): void;
    protected ac(a: number): any;
    private cl;
    protected ab(a: number): any;
    protected a6(a: RenderingContext, b: boolean): void;
    protected a5(a: RenderingContext, b: boolean): void;
    al(a: any): void;
    cc(): void;
    b8: boolean;
    cd(): void;
}
