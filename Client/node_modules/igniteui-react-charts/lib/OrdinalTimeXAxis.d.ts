import { CategoryXAxis } from "./CategoryXAxis";
import { ITimeRangeSelectorAxis } from "./ITimeRangeSelectorAxis";
import { TimeAxisLabellingMode } from "./TimeAxisLabellingMode";
import { TimeAxisLabelFormatCollection } from "./TimeAxisLabelFormatCollection";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { CategoryMode } from "./CategoryMode";
import { IList$1, EventArgs, Type } from "igniteui-react-core";
import { IGetItemAtIndex } from "igniteui-react-core";
import { FastItemsSourceEventArgs } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class OrdinalTimeXAxis extends CategoryXAxis implements ITimeRangeSelectorAxis {
    static $t: Type;
    ea(a: number, b: Rect, c: Rect): number;
    d9(a: number, b: ScalerParams, c: CategoryMode): number;
    d8(a: number, b: ScalerParams): number;
    private mx;
    g4(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    g5(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    ed(a: number, b: Rect, c: Rect): number;
    getUnscaledValue3(a: number, b: Rect, c: Rect, d: CategoryMode): number;
    eb(a: number, b: ScalerParams): number;
    private my;
    ec(a: number, b: ScalerParams, c: CategoryMode): number;
    g6(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    constructor();
    protected he(a: any, b: string, c: any, d: any): void;
    private mk;
    get actualMinimumValue(): Date;
    set actualMinimumValue(a: Date);
    private mj;
    get actualMaximumValue(): Date;
    set actualMaximumValue(a: Date);
    private mq;
    get visibleMinimum(): Date;
    set visibleMinimum(a: Date);
    private mp;
    get visibleMaximum(): Date;
    set visibleMaximum(a: Date);
    private mm;
    get mu(): Date;
    set mu(a: Date);
    private ml;
    get mt(): Date;
    set mt(a: Date);
    private nc;
    private nd;
    private m0;
    protected hr(a: boolean): void;
    private mz;
    get dateTimeMemberPath(): string;
    set dateTimeMemberPath(a: string);
    private mf;
    get mg(): TimeAxisLabellingMode;
    set mg(a: TimeAxisLabellingMode);
    private mh;
    private get mi();
    private set mi(value);
    protected h4(a: Rect, b: Rect): void;
    getWindowRectForSelection(a: Date, b: Date): Rect;
    private md;
    get me(): TimeAxisLabelFormatCollection;
    private nb;
    hg(a: string): void;
    fi(a: any): any;
    fw(a: number): string;
    private get na();
    private get m7();
    protected lp(): IGetItemAtIndex;
    protected h3(a: Rect, b: Rect): void;
    protected lw(a: number, b: ScalerParams): number;
    protected lv(a: number, b: number, c: boolean, d: ScalerParams): number;
    private m9;
    private m8;
    itemLabelFormat(): string;
    private mo;
    get minimumValue(): Date;
    set minimumValue(a: Date);
    private mn;
    get maximumValue(): Date;
    set maximumValue(a: Date);
    cx(): boolean;
    visibleRangeChanged: (sender: any, e: EventArgs) => void;
    protected lb(a: FastItemsSourceEventArgs): void;
    get isVertical(): boolean;
    j$c(a: number, b: ScalerParams): number;
    j$b(a: number, b: ScalerParams): number;
    j$d(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$e(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$a(): boolean;
}
