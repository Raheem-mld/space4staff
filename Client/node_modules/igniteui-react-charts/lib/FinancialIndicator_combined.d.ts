import { FinancialSeries } from "./FinancialSeries";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { IndicatorDisplayType } from "./IndicatorDisplayType";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { SeriesView } from "./SeriesView";
import { CategoryFrame } from "./CategoryFrame";
import { Axis } from "./Axis";
import { Point, IList$1, Type } from "igniteui-react-core";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { Rect } from "igniteui-react-core";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { ITrendLineManager } from "./ITrendLineManager";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { Clipper } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { LegendItemBadgeShape } from "./LegendItemBadgeShape";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class FinancialIndicator extends FinancialSeries implements ITrendLineSeries {
    static $t: Type;
    protected get_dj(): boolean;
    protected bu(): SeriesView;
    lh(a: SeriesView): void;
    s1: FinancialIndicatorView;
    constructor();
    te(a: boolean): void;
    protected s6(a: Point, b: Point, c: boolean): boolean;
    protected bo(): SeriesHitTestMode;
    pb(a: Point): Rect;
    ep(a: Point, b: boolean): boolean;
    protected kk(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    s3: IndicatorDisplayType;
    protected get_s2(): IndicatorDisplayType;
    get s2(): IndicatorDisplayType;
    s9: number;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get tr(): Brush;
    set tr(a: Brush);
    static readonly th: DependencyProperty;
    trendLineThickness: number;
    tt: PenLineCap;
    ts: DoubleCollection;
    trendLinePeriod: number;
    protected tb(): number;
    ta: number;
    private _indicatorColumn;
    get indicatorColumn(): List$1<number>;
    set indicatorColumn(a: List$1<number>);
    protected s0: AxisRange;
    protected abstract s4(a: number, b: number): boolean;
    protected abstract s7(a: number, b: number): IList$1<string>;
    protected lm(a: any, b: string, c: any, d: any): void;
    f8(a: Point, b: boolean, c: boolean): number;
    g6(a: Point, b: boolean): number;
    g4(a: Point, b: boolean): number;
    protected get_e2(): boolean;
    private s5;
    private tg;
    ap(a: Axis): AxisRange;
    eh(a: any): boolean;
    e3(a: Rect, b: Rect, c: SeriesView): boolean;
    sh(a: CategoryFrame, b: FinancialSeriesView): void;
    kh(a: boolean, b: SeriesView): void;
    protected p0(): CategoryTransitionInMode;
    sj(a: CategoryFrame, b: FinancialSeriesView): void;
    protected md(): void;
    protected tf(): void;
    protected kr(a: any): void;
    protected a8(a: LegendItemBadgeShape): LegendItemBadgeShape;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class FinancialIndicatorBucketCalculator extends FinancialBucketCalculator {
    static $t: Type;
    constructor(a: FinancialSeriesView);
    protected f: FinancialIndicatorView;
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class FinancialIndicatorView extends FinancialSeriesView {
    static $t: Type;
    b3: FinancialIndicator;
    constructor(a: FinancialIndicator);
    protected by(): FinancialBucketCalculator;
    as(): void;
    private readonly b6;
    private cg;
    private b9;
    cu: Path;
    cq: Path;
    cv: Path;
    cr: Path;
    cw: Path;
    cs: Path;
    ct: Path;
    cp: Path;
    private b4;
    get b5(): ITrendLineManager;
    set b5(a: ITrendLineManager);
    get b7(): boolean;
    b8(a: boolean): void;
    ce(): void;
    cc(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: boolean, e: Clipper): void;
    ca(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: boolean, e: number, f: Clipper): void;
    cb(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: boolean, e: number): void;
    cf(): void;
    private cm;
    private co;
    private cn;
    private cl;
    private ci;
    private ck;
    private cj;
    private ch;
    protected bc(): void;
    protected a6(a: RenderingContext, b: boolean): void;
    protected a5(a: RenderingContext, b: boolean): void;
    al(a: any): void;
    cd(): void;
}
