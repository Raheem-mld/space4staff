import { Base, Point, Type, EventArgs, INotifyPropertyChanged, IEnumerable, IList, PropertyChangedEventArgs } from "igniteui-react-core";
import { DomRenderer, DomWrapper } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { EventProxy } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { PieChartStyleInfo } from "./PieChartStyleInfo";
import { BrushCollection } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { PieChartVisualData } from "./PieChartVisualData";
import { Style } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Control } from "igniteui-react-core";
import { Line } from "igniteui-react-core";
import { LabelsPosition } from "./LabelsPosition";
import { Visibility } from "igniteui-react-core";
import { LeaderLineType } from "./LeaderLineType";
import { ILegendOwner } from "igniteui-react-core";
import { ILegendSeries } from "igniteui-react-core";
import { ILegendTemplateProvider } from "igniteui-react-core";
import { FastItemsSource } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { OthersCategoryType } from "./OthersCategoryType";
import { IndexCollection } from "./IndexCollection";
import { NotifyCollectionChangedEventArgs } from "igniteui-react-core";
import { IChartLegend } from "igniteui-react-core";
import { SweepDirection } from "igniteui-react-core";
import { DataTemplate } from "igniteui-react-core";
import { SliceSelectionMode } from "./SliceSelectionMode";
import { ObjectCollection } from "igniteui-react-core";
import { BindingFormatter } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { SelectedItemChangingEventArgs } from "./SelectedItemChangingEventArgs";
import { SelectedItemsChangingEventArgs } from "./SelectedItemsChangingEventArgs";
import { SelectedItemChangedEventArgs } from "./SelectedItemChangedEventArgs";
import { SelectedItemsChangedEventArgs } from "./SelectedItemsChangedEventArgs";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { ContentControl } from "igniteui-react-core";
import { PieSliceVisualData } from "./PieSliceVisualData";
import { MouseEventArgs } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class PieChartViewManager extends Base {
    static $t: Type;
    n: DomRenderer;
    protected p: DomWrapper;
    protected s: DomWrapper;
    protected r: DomWrapper;
    protected q: DomWrapper;
    private k;
    private j;
    private l;
    protected ap: Rect;
    e: RenderingContext;
    g: RenderingContext;
    f: RenderingContext;
    h: RenderingContext;
    private a;
    constructor(a: PieChartBaseView);
    aa(): void;
    ad(a: number, b: number): void;
    ae(): void;
    ab(): void;
    z(): void;
    w(a: number, b: number): void;
    ao(): Rect;
    d(): FontInfo;
    an(): Point;
    ah(a: () => void): void;
    b(): PieChartStyleInfo;
    ai(a: Path): void;
    c: EventProxy;
    ac(a: any): void;
    v(a: DomWrapper): void;
    af(a: boolean): void;
    t(): any;
    x(a: PieChartVisualData): void;
    private _toolTipObject;
    private u;
    private i;
    ak(a: any): void;
    aj(pos_: Point, context_: PieSliceDataContext): void;
    y(a: PieSliceDataContext): void;
    al(style_: Style): Brush;
    am(style_: Style): Brush;
    m(style_: Style): number;
    ag(): void;
}
/**
 * @hidden
 */
export declare class LabelClickEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: Slice, b: any);
    private _slice;
    get slice(): Slice;
    set slice(a: Slice);
    get item(): any;
    get allowSliceClick(): boolean;
    set allowSliceClick(a: boolean);
    private c;
}
/**
 * @hidden
 */
export declare class SliceClickEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: Slice, b: any);
    private _slice;
    get slice(): Slice;
    set slice(a: Slice);
    get isSelected(): boolean;
    set isSelected(a: boolean);
    private d;
    get isExploded(): boolean;
    set isExploded(a: boolean);
    private c;
    get isOthersSlice(): boolean;
    get index(): number;
    get dataContext(): any;
    private _originalEvent;
    get originalEvent(): any;
    set originalEvent(a: any);
    get origin(): Point;
    get radius(): number;
    get bounds(): Rect;
    get startAngle(): number;
    get endAngle(): number;
    get fill(): Brush;
    get outline(): Brush;
}
/**
 * @hidden
 */
export declare class SliceEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: Slice, b: any);
    private _slice;
    get slice(): Slice;
    set slice(a: Slice);
    get isSelected(): boolean;
    set isSelected(a: boolean);
    private d;
    get isExploded(): boolean;
    set isExploded(a: boolean);
    private c;
    get isOthersSlice(): boolean;
    get index(): number;
    get origin(): Point;
    get radius(): number;
    get bounds(): Rect;
    get startAngle(): number;
    get endAngle(): number;
    get fill(): Brush;
    get outline(): Brush;
    get dataContext(): any;
    private _originalEvent;
    get originalEvent(): any;
    set originalEvent(a: any);
}
/**
 * @hidden
 */
export declare class PieLabel extends Control {
    static $t: Type;
    constructor();
    ah: Slice;
    ao: Rect;
    ai: number;
    aj: any;
    ap: Line;
    aq: Path;
    ag: LabelsPosition;
    ak(a: PieChartBaseView): void;
    al(): void;
    am(): void;
    an(): void;
}
/**
 * @hidden
 */
export declare abstract class PieChartBase extends Control implements INotifyPropertyChanged, ILegendOwner, ILegendSeries, ILegendTemplateProvider {
    static $t: Type;
    a2(): PieChartBaseView;
    gj(a: PieChartBaseView): void;
    a3: PieChartBaseView;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    constructor();
    private by;
    private b1;
    private b0;
    private b2;
    private bz;
    private b5;
    private b4;
    private b3;
    private readonly a7;
    private readonly cr;
    private readonly ct;
    private readonly cs;
    private readonly cu;
    private dh;
    bk: FastItemsSource;
    private bo;
    get bt(): IFastItemColumn$1<number>;
    set bt(a: IFastItemColumn$1<number>);
    dj: number;
    db: number;
    dg: number;
    cl: List$1<number>;
    ck: List$1<number>;
    cj: List$1<any>;
    c1: number;
    ci: List$1<UIElement>;
    get cy(): number;
    a6: PieChartSliceSelector;
    private _xsr;
    private get XSRP();
    get d6(): string;
    itemsSource: IEnumerable;
    actualItemsSource: IEnumerable;
    static readonly hk: DependencyProperty;
    get c7(): number;
    set c7(a: number);
    fq: string;
    ef: string;
    eu: string;
    private bm;
    get bp(): IFastItemColumn$1<any>;
    set bp(a: IFastItemColumn$1<any>);
    private bn;
    get bq(): IFastItemColumn$1<any>;
    set bq(a: IFastItemColumn$1<any>);
    az: LabelsPosition;
    iu: Brush;
    it: Brush;
    is: Brush;
    ir: Brush;
    i7: Visibility;
    i3: Style;
    a0: LeaderLineType;
    c9: number;
    dn: any;
    da: number;
    a1: OthersCategoryType;
    e1: string;
    c2: number;
    get cx(): number;
    dd: number;
    get c0(): number;
    b7: boolean;
    b6: boolean;
    get explodedSlices(): IndexCollection;
    set explodedSlices(a: IndexCollection);
    private au;
    legend: IChartLegend;
    c8: number;
    df: number;
    iw: SweepDirection;
    get selectedSlices(): IndexCollection;
    set selectedSlices(a: IndexCollection);
    private av;
    i4: Style;
    i5: Style;
    i6: Style;
    am: BrushCollection;
    ak: BrushCollection;
    an: BrushCollection;
    al: BrushCollection;
    eb: string;
    ag: any[];
    e5: string;
    aj: any[];
    er: string;
    ah: any[];
    ew: string;
    ai: any[];
    legendItemTemplate: DataTemplate;
    legendItemBadgeTemplate: DataTemplate;
    static readonly hu: DependencyProperty;
    get g7(): DataTemplate;
    set g7(a: DataTemplate);
    cc: boolean;
    ce: boolean;
    cf: boolean;
    protected b9(): boolean;
    protected ca(): boolean;
    a4: (obj: any) => string;
    a5: (obj: any) => string;
    private cw;
    get dc(): number;
    set dc(a: number);
    private cv;
    get cz(): number;
    set cz(a: number);
    bi: SliceSelectionMode;
    get selectedItem(): any;
    set selectedItem(a: any);
    static readonly ig: DependencyProperty;
    private _selectedItems;
    get selectedItems(): ObjectCollection;
    set selectedItems(a: ObjectCollection);
    labelClick: (sender: any, e: LabelClickEventArgs) => void;
    f8(a: any, b: LabelClickEventArgs): void;
    selectedItemChanging: (sender: any, e: SelectedItemChangingEventArgs) => void;
    ga(a: any, b: SelectedItemChangingEventArgs): void;
    selectedItemsChanging: (sender: any, e: SelectedItemsChangingEventArgs) => void;
    gd(a: any, b: SelectedItemsChangingEventArgs): void;
    selectedItemChanged: (sender: any, e: SelectedItemChangedEventArgs) => void;
    f9(a: any, b: SelectedItemChangedEventArgs): void;
    selectedItemsChanged: (sender: any, e: SelectedItemsChangedEventArgs) => void;
    gb(a: any, b: SelectedItemsChangedEventArgs): void;
    sliceClick: (sender: any, e: SliceClickEventArgs) => void;
    gf(a: any, b: SliceClickEventArgs): void;
    bv: Pool$1<Slice>;
    bu: Pool$1<PieLabel>;
    fu(a: Slice, b: boolean): void;
    gx(a: Slice, b: boolean): void;
    gy(a: Slice): void;
    dl(a: Slice): any;
    i1(a: Slice, b: LabelsPosition): Rect;
    b8(a: PieLabel, b: Point): boolean;
    static de(a: number): number;
    private cb;
    private static c3;
    static g3(a: List$1<PieLabel>): void;
    gv(a: List$1<PieLabel>): void;
    protected fs(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    gr(): void;
    gk(): void;
    gm(): void;
    private fc;
    gl(): void;
    i2: Rect;
    gu(): void;
    gs(): void;
    private static c4;
    private static ix;
    private static c5;
    private static iy;
    gt(): void;
    bj(): PieChartVisualData;
    d1(): string;
    protected br(a: string): IFastItemColumn$1<number>;
    protected bs(a: string): IFastItemColumn$1<any>;
    ap: BindingFormatter;
    as: BindingFormatter;
    aq: BindingFormatter;
    ar: BindingFormatter;
    protected gn(a: any, b: string, c: any, d: any): void;
    protected ao(a: BrushCollection): BrushCollection;
    protected iv(a: Brush): Brush;
    private fb;
    private fd;
    private cm;
    protected cp(): IEnumerable;
    protected gw(a: NotifyCollectionChangedEventArgs): void;
    protected gc(a: NotifyCollectionChangedEventArgs): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected gp(a: string, b: any, c: any): void;
    private g6;
    private g5;
    g1(a: Slice, b: MouseEventArgs): void;
    g2(a: Slice, b: MouseEventArgs, c: boolean): void;
    g0(a: Point): void;
    cd(a: Slice, b: MouseEventArgs): boolean;
    private dk;
    fw(a: any, b: any): void;
    sliceEnter: (sender: any, e: SliceEventArgs) => void;
    sliceLeave: (sender: any, e: SliceEventArgs) => void;
    sliceHover: (sender: any, e: SliceEventArgs) => void;
    private be;
    private gg;
    private gh;
    private gi;
    fz(a: any, b: any, c: boolean): void;
    fy(a: any, b: any): void;
    fx(a: any, b: MouseEventArgs): void;
    ge(): void;
    provideContainer(a: any): void;
    f6(a: number, b: number): void;
    notifyContainerResized(): void;
    i0(): Rect;
    iz(): Point;
    destroy(): void;
    fv(): void;
    private dp;
    get fl(): string;
    set fl(a: string);
    get container(): ILegendOwner;
    get isStacked(): boolean;
    get isVertical(): boolean;
    get hasMarkers(): boolean;
    get isUsableInLegend(): boolean;
    get hasSubItems(): boolean;
    c6(a: Slice): number;
    f4(source_: any, a: number, b: any, c: any): void;
    f0(source_: any): void;
    private cg;
    static ch(a: any, b: any): boolean;
    f2(source_: any, a: number, b: any): void;
    f3(source_: any, a: number, b: any): void;
    gz(source_: any): void;
    gq(): void;
    g4(): void;
    bl(): FontInfo;
    resolveLegendIndex(): number;
    forSubItems(a: (arg1: any) => void): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PieChartSliceSelector extends Base {
    static $t: Type;
    private a;
    constructor(a: PieChartBase);
    d(a: Slice): boolean;
    c(a: Slice): boolean;
    h(a: Slice): any;
    f(a: any, b: boolean): boolean;
    e(a: any): boolean;
    g(a: any): boolean;
    b(a: any): boolean;
    k(a: Slice): void;
    i(a: Slice): void;
    j(a: Slice): void;
}
/**
 * @hidden
 */
export declare class PieSliceOthersContext extends Base {
    static $t: Type;
    private _data;
    get data(): IList;
    set data(a: IList);
    private _slice;
    get slice(): Slice;
    set slice(a: Slice);
}
/**
 * @hidden
 */
export declare class Slice extends ContentControl {
    static $t: Type;
    ak(): SliceView;
    bl(a: SliceView): void;
    al: SliceView;
    constructor();
    a3: number;
    ax: number;
    a1: number;
    a0: number;
    static readonly bv: DependencyProperty;
    get isSelected(): boolean;
    set isSelected(a: boolean);
    static readonly bt: DependencyProperty;
    get isExploded(): boolean;
    set isExploded(a: boolean);
    static readonly bu: DependencyProperty;
    get isOthersSlice(): boolean;
    set isOthersSlice(a: boolean);
    b7: Point;
    b5: Point;
    a2: number;
    ay: number;
    a5: number;
    get b2(): Brush;
    set b2(a: Brush);
    static readonly bp: DependencyProperty;
    a4: number;
    b8: Rect;
    ai: PieChartBase;
    aj: PieLabel;
    bf: string;
    b9: Rect;
    b3: Point;
    aq: boolean;
    au: boolean;
    av: boolean;
    ac(): void;
    az(): number;
    private cb;
    b6(): Point;
    private an;
    get aw(): boolean;
    set aw(a: boolean);
    bk(): void;
    ap(a: Point): boolean;
    private ao;
    private ca;
    am(): PieSliceVisualData;
    private static b4;
    cc: Rect;
    b0: Brush;
    b1: Brush;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PieChartBaseView extends Base {
    static $t: Type;
    constructor(a: PieChartBase);
    a: PieChartBase;
    a1(): void;
    bb(): void;
    ax(): void;
    a0(): void;
    bs: Brush;
    b: PieChartStyleInfo;
    protected h: RenderingContext;
    protected j: RenderingContext;
    protected i: RenderingContext;
    protected k: RenderingContext;
    c: PieChartViewManager;
    ay(a: any): void;
    b0(): Rect;
    bx(): Point;
    ba(): void;
    b2: Rect;
    private l;
    av(): void;
    private bi;
    private bz;
    protected a5(): void;
    protected a6(): void;
    private a8;
    private a9;
    private a7;
    private m;
    aj(a: Point, b: boolean, c: boolean): void;
    ai(a: Point): void;
    ah(a: Point): void;
    ak(a: Point): void;
    private ap;
    protected f: Slice;
    private bj;
    n(a: Point): boolean;
    p(a: Point): boolean;
    o(a: Point): boolean;
    private bd;
    al(): void;
    bn(a: any, b: any): void;
    protected u: List$1<Slice>;
    g(): Slice;
    be(a: Slice): void;
    bg(a: Slice): void;
    bf(a: Slice): void;
    protected t: List$1<PieLabel>;
    d(): PieLabel;
    ar(a: PieLabel): void;
    at(a: PieLabel): void;
    as(a: PieLabel): void;
    bl(a: PieLabel): void;
    bc(a: Slice): void;
    private bv;
    private bw;
    ad(a: Slice): any;
    y(a: any): number;
    bk(): void;
    v: number;
    x(a: any): number;
    b1(a: PieLabel): Rect;
    b3(): Size;
    bm(a: PieLabel, b: number, c: number): void;
    bp(a: any): void;
    br(): void;
    au(): void;
    private am;
    az(a: number, b: number): void;
    aw(): void;
    protected by: Point;
    protected ag: any;
    protected s: boolean;
    protected e: PieSliceDataContext;
    get af(): any;
    aq(): void;
    bq(a: any): void;
    bo(a: Point, b: any, c: any): void;
    bh(): void;
    a2(): void;
    ac(): any;
    ao(): void;
    r(): boolean;
    an(a: PieChartVisualData): void;
    q(): boolean;
    a4(): void;
    bt(a: Slice): Brush;
    bu(a: Slice): Brush;
    w(a: Slice): number;
    z(a: Style): number;
    aa(): number;
    a3(): void;
    ae(a: any): any;
}
/**
 * @hidden
 */
export declare class PieSliceDataContext extends DataContext {
    static $t: Type;
    private _slice;
    get slice(): Slice;
    set slice(a: Slice);
    private _percentValue;
    get percentValue(): number;
    set percentValue(a: number);
    private _isOthersSlice;
    get isOthersSlice(): boolean;
    set isOthersSlice(a: boolean);
    flatten(): any;
}
/**
 * @hidden
 */
export declare class SliceView extends Base {
    static $t: Type;
    protected a: Slice;
    constructor(a: Slice);
    g: Path;
    b(): void;
    c(): void;
    f(): Path;
    d(a: number, b: number): void;
    e(): void;
}
