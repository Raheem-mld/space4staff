import { MarkerSeries } from "./MarkerSeries";
import { ISupportsErrorBars } from "./ISupportsErrorBars";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { ScatterAxisInfoCache } from "./ScatterAxisInfoCache";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { Axis } from "./Axis";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { ScatterErrorBarSettings } from "./ScatterErrorBarSettings";
import { HighlightingInfo } from "./HighlightingInfo";
import { ScatterFrame } from "./ScatterFrame";
import { SeriesView } from "./SeriesView";
import { Point, Type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { AxisRange } from "./AxisRange";
import { HashPool$2 } from "igniteui-react-core";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Thickness } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { AssigningScatterStyleEventArgs } from "./AssigningScatterStyleEventArgs";
import { AssigningScatterMarkerStyleEventArgs } from "./AssigningScatterMarkerStyleEventArgs";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { ErrorBarsHelper } from "./ErrorBarsHelper";
import { IErrorBarCalculator } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-react-core";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class ScatterBase extends MarkerSeries implements ISupportsErrorBars, ITrendLineSeries {
    static $t: Type;
    protected bu(): SeriesView;
    ke(): void;
    lh(a: SeriesView): void;
    rc: ScatterBaseView;
    protected get_d6(): boolean;
    ag(): Axis[];
    hk(a: any, b: string): any;
    cx(a: List$1<SeriesPointOfInterest>, b: boolean, c: number): boolean;
    protected bo(): SeriesHitTestMode;
    pd(a: Point): Rect;
    ep(a: Point, b: boolean): boolean;
    constructor();
    rb: ScatterAxisInfoCache;
    xAxis: NumericXAxis;
    yAxis: NumericYAxis;
    so: string;
    get rr(): IFastItemColumn$1<number>;
    set rr(a: IFastItemColumn$1<number>);
    private rp;
    ss: string;
    get rs(): IFastItemColumn$1<number>;
    set rs(a: IFastItemColumn$1<number>);
    private rq;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get tz(): Brush;
    set tz(a: Brush);
    static readonly tg: DependencyProperty;
    trendLineThickness: number;
    t1: PenLineCap;
    t0: DoubleCollection;
    trendLinePeriod: number;
    q3: CollisionAvoidanceType;
    get GetErrorBarsXAxis(): Axis;
    get GetErrorBarsYAxis(): Axis;
    sd: number;
    sc: number;
    rn: ScatterItemSearchMode;
    sb: number;
    ky(): void;
    rd: ScatterErrorBarSettings;
    protected lm(a: any, b: string, c: any, d: any): void;
    protected r2(): boolean;
    protected r1(): boolean;
    rw(a: any): boolean;
    rv(a: any): boolean;
    private tf;
    private t2;
    private t3;
    private su;
    protected r0(a: string, b: FastItemsSourceEventAction): boolean;
    protected kk(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    s6(a: ScatterFrame): void;
    s7(a: ScatterFrame, b: Clipper): void;
    ap(a: Axis): AxisRange;
    hh(a: Point): any;
    private rk;
    get rl(): ScatterItemSearchMode;
    set rl(a: ScatterItemSearchMode);
    protected rm(): ScatterItemSearchMode;
    g0(a: Point): number;
    fw(a: Point): number;
    protected r7(a: Point): number;
    private qw;
    private qx;
    protected r6(a: Point): number;
    private sx;
    protected get_rz(): boolean;
    protected get rz(): boolean;
    private sa;
    protected r9(a: Point): number;
    protected r8(a: Point): number;
    o2(a: Point, b: boolean, c: boolean): Point;
    eh(a: any): boolean;
    protected mm(a: Rect, b: Rect): void;
    protected mn(a: Rect, b: Rect): void;
    rh: ScatterFrame;
    rj: ScatterFrame;
    rf: ScatterFrame;
    rg(): ScatterFrame;
    sv(a: ScatterBaseView, b: ScatterFrame, c: number, d: Rect, e: Rect): void;
    s3(a: ScatterFrame, b: ScatterBaseView): void;
    kh(a: boolean, b: SeriesView): void;
    ry: boolean;
    rx: boolean;
    protected ru: boolean;
    protected rt: boolean;
    protected get_dr(): boolean;
    private q7;
    private q8;
    protected q5(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected q6(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    pg(): Thickness;
    protected q4(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    av(a: any, b: Point, c: boolean): HighlightingInfo;
    aw(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningScatterStyle: (sender: any, args: AssigningScatterStyleEventArgs) => void;
    assigningScatterMarkerStyle: (sender: any, args: AssigningScatterMarkerStyleEventArgs) => void;
    protected r4(): boolean;
    protected r3(): boolean;
    te(a: ScatterFrame, b: ScatterBaseView): void;
    qz(a: number, b: number): any[];
    protected q0(a: number, b: number): any[];
    protected ro: ScatterSeriesRenderManager;
    sw(a: ScatterBaseView, b: ScatterFrame): void;
    protected sz(a: number, b: number, c: boolean): void;
    protected sy(a: number, b: number, c: boolean): void;
    protected s9(a: AssigningScatterStyleEventArgs): void;
    protected s8(a: AssigningScatterMarkerStyleEventArgs): void;
    s1(a: ScatterFrame, b: ScatterBaseView): void;
    s4(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    s2(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    s0(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: any, e: number, f: number, g: boolean): {
        p4?: number;
        p5?: number;
    };
    s5(a: ErrorBarsHelper, b: IErrorBarCalculator, c: number, d: number, e: number, f: boolean): {
        p2?: number;
        p3?: number;
        p4?: number;
    };
    tb(a: ScatterFrame, b: ScatterBaseView): void;
    private tc;
    private td;
    e3(a: Rect, b: Rect, c: SeriesView): boolean;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    l1(a: boolean): void;
    protected md(): void;
    ri: ScatterFrame;
    l2(a: Rect, b: RenderSurface): void;
    private re;
    lz(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    ta(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    qy(a: ScatterBaseView, b: HashPool$2<any, Marker>, c: Point[], d: Rect, e: Rect): Point[];
    r5(a: HashPool$2<any, Marker>, b: List$1<number>): List$1<number>;
    protected kr(a: any): void;
    f2(): number;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    au: AssigningScatterMarkerStyleEventArgs;
    av: AssigningScatterStyleEventArgs;
    aw(a: ScatterBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    ax(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    ay(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare class ScatterBaseView extends MarkerSeriesView {
    static $t: Type;
    cv: MarkerManagerBase;
    protected ct: Point[];
    protected cw: ScatterBase;
    protected c1: List$1<number>;
    constructor(a: ScatterBase);
    private dc;
    private dd;
    cx: ScatterTrendLineManager;
    as(): void;
    private db;
    de(a: Marker): Size;
    protected cu(): MarkerManagerBase;
    protected c9(a: IDictionary$2<any, OwnedPoint>): void;
    c0(): List$1<Marker>;
    cs(): Point[];
    protected cr(): Point[];
    protected cz(): List$1<number>;
    c2(): void;
    c7(a: PathGeometry): void;
    c3(): void;
    c8(a: PathGeometry): void;
    da(): void;
    cy: HashPool$2<any, Marker>;
    cf(a: (arg1: Marker) => void): void;
    c5(a: (arg1: Marker) => void): void;
    c6(): void;
    protected a5(a: RenderingContext, b: boolean): void;
    c4(a: boolean): void;
    getDefaultTooltipTemplate(): string;
}
