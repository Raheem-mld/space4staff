import { RadialBucketCalculator } from "./RadialBucketCalculator";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { RadialBase } from "./RadialBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { RadialFrame } from "./RadialFrame";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { RadialBaseView } from "./RadialBaseView";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { Clipper } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { RadialTrendLineManager } from "./RadialTrendLineManager";
import { PointCollection } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class AnchoredRadialBucketCalculator extends RadialBucketCalculator {
    static $t: Type;
    private f;
    constructor(a: AnchoredRadialSeriesView);
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare abstract class AnchoredRadialSeries extends RadialBase {
    static $t: Type;
    protected bu(): SeriesView;
    ke(): void;
    hk(a: any, b: string): any;
    lh(a: SeriesView): void;
    sc: AnchoredRadialSeriesView;
    constructor();
    sd: CategoryLineRasterizer;
    g6(a: Point, b: boolean): number;
    g4(a: Point, b: boolean): number;
    fu(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    f8(a: Point, b: boolean, c: boolean): number;
    o2(a: Point, b: boolean, c: boolean): Point;
    su: string;
    get si(): IFastItemColumn$1<number>;
    set si(a: IFastItemColumn$1<number>);
    private sh;
    sg: TrendLineType;
    tb: Brush;
    get ta(): Brush;
    set ta(a: Brush);
    static readonly s1: DependencyProperty;
    sq: number;
    td: PenLineCap;
    tc: DoubleCollection;
    sr: number;
    ss: number;
    ap(a: Axis): AxisRange;
    protected lm(a: any, b: string, c: any, d: any): void;
    protected kk(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    e3(a: Rect, b: Rect, c: SeriesView): boolean;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    protected get_sl(): boolean;
    protected get sl(): boolean;
    protected sn(a: CategoryAngleAxis, b: Rect, c: Rect, d: Rect): number;
    r1(a: RadialFrame, b: RadialBaseView): void;
    private so;
    private sp;
    private sm;
    sb(a: List$1<number[]>, b: number, c: SeriesView): Clipper;
    protected te: Point;
    s0(a: PointCollection, b: PointCollection, c: PointCollection, d: PointCollection, e: boolean): void;
    private sk;
    private sj;
    kh(a: boolean, b: SeriesView): void;
    r4(a: RadialFrame, b: RadialBaseView): void;
    protected sa(a: number, b: number, c: Axis): any[];
    protected sy(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    protected sz(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    sx(a: RadialBaseView, b: RadialFrame): void;
    private sw;
    protected md(): void;
    hn(a: any, b: Point): any;
    eh(a: any): boolean;
    sf: RadialFrame;
    l2(a: Rect, b: RenderSurface): void;
    private se;
    lz(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected kr(a: any): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AnchoredRadialSeriesView extends RadialBaseView {
    static $t: Type;
    cw: AnchoredRadialSeries;
    constructor(a: AnchoredRadialSeries);
    cx: RadialTrendLineManager;
    cy(a: Rect, b: Rect, c: Rect, d: Rect): void;
    cz(): void;
    protected a5(a: RenderingContext, b: boolean): void;
    getDefaultTooltipTemplate(): string;
}
