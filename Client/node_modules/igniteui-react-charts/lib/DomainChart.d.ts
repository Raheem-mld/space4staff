import { Base, INotifyPropertyChanged, IEnumerable, Type, PropertyChangedEventArgs } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { IDomainChartWidget } from "./IDomainChartWidget";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesAdapterImplementation } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { IAnnotationLayerProxy } from "./IAnnotationLayerProxy";
import { Color } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { BrushCollection } from "igniteui-react-core";
import { IChartLegend } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { UnknownValuePlotting } from "igniteui-react-core";
import { SeriesOutlineMode } from "./SeriesOutlineMode";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { MarkerFillMode } from "./MarkerFillMode";
import { MarkerTypeCollection } from "./MarkerTypeCollection";
import { MarkerAutomaticBehavior } from "./MarkerAutomaticBehavior";
import { TrendLineType } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
import { SeriesHighlightingMode } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode } from "./LegendHighlightingMode";
import { LegendItemBadgeShape } from "./LegendItemBadgeShape";
import { LegendItemBadgeMode } from "./LegendItemBadgeMode";
import { ToolTipType } from "./ToolTipType";
import { CrosshairsDisplayMode } from "./CrosshairsDisplayMode";
import { Series } from "./Series";
import { DataSeries } from "igniteui-react-core";
import { ObservableColorCollection } from "igniteui-react-core";
import { DataSeriesMarker } from "igniteui-react-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { CalloutStyleUpdatingEventArgs } from "./CalloutStyleUpdatingEventArgs";
/**
 * @hidden
 */
export declare abstract class DomainChart extends Base implements INotifyPropertyChanged {
    static $t: Type;
    protected fd: any;
    provideContainer(a: any): void;
    destroy(): void;
    private jk;
    protected jl(): void;
    protected jh(a: XamDataChart): void;
    protected je(): void;
    protected jn(a: Series, b: number): void;
    protected j7(a: string, b: any, c: any): void;
    private fc;
    get tooltipTemplate(): any;
    set tooltipTemplate(a: any);
    private cz;
    get tooltipTemplates(): List$1<any>;
    set tooltipTemplates(a: List$1<any>);
    private dn;
    get ee(): number;
    set ee(a: number);
    private fb;
    private get toolTip();
    private set toolTip(value);
    private d1;
    get er(): number;
    set er(a: number);
    private d2;
    get es(): number;
    set es(a: number);
    private d3;
    get et(): number;
    set et(a: number);
    private d0;
    get eq(): number;
    set eq(a: number);
    private dw;
    get em(): number;
    set em(a: number);
    private dy;
    get eo(): number;
    set eo(a: number);
    private dx;
    get en(): number;
    set en(a: number);
    private dv;
    get el(): number;
    set el(a: number);
    private k9;
    get lo(): Brush;
    set lo(a: Brush);
    private la;
    get lp(): Brush;
    set lp(a: Brush);
    private dk;
    protected get_eb(): number;
    protected set_eb(a: number): void;
    get eb(): number;
    set eb(a: number);
    private d4;
    get eu(): number;
    set eu(a: number);
    private du;
    get ek(): number;
    set ek(a: number);
    private di;
    get d9(): number;
    set d9(a: number);
    private e3;
    get e9(): number;
    set e9(a: number);
    private br;
    get bs(): (time: number) => number;
    set bs(a: (time: number) => number);
    protected ji(a: XamDataChart): void;
    protected jo(a: Series, b: number): void;
    protected jf(): void;
    private jp;
    ew: (arg1: HTMLElement) => any[];
    private kv;
    private ff;
    private cu;
    private ex;
    protected j8(a: string, b: any, c: any): void;
    private an;
    get ao(): IDomainChartWidget;
    set ao(a: IDomainChartWidget);
    private fr;
    get h5(): string;
    set h5(a: string);
    private ft;
    get ih(): string;
    set ih(a: string);
    private bp;
    get dataChart(): XamDataChart;
    set dataChart(a: XamDataChart);
    ac: DataSeriesAdapterImplementation;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    constructor();
    protected jj(): void;
    protected abstract get c5(): List$1<DataSeriesType>;
    protected abstract get c4(): List$1<IDataSeriesAdapterRule>;
    protected c3: List$1<MarkerType>;
    protected cq(a: DataSeriesType): boolean;
    notifyResized(): void;
    jx(): void;
    i5(): void;
    jc(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected kd(a: string): void;
    protected i6(a: (arg1: Series) => void): void;
    protected i7(a: (arg1: Series, arg2: number) => void): void;
    protected ja(a: (arg1: Series) => void): void;
    protected jb(a: (arg1: Series, arg2: number) => void): void;
    protected i8(a: (arg1: Series) => void): void;
    protected i9(a: (arg1: Series, arg2: number) => void): void;
    km(): void;
    protected jz(a: (arg1: XamDataChart) => void): void;
    protected j0(a: (arg1: XamDataChart) => void, b: boolean): void;
    protected j1(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    protected cr(a: DataSeries): boolean;
    protected cj(): boolean;
    private static readonly fl;
    private e2;
    protected gz(a: DataSeries): string;
    private static fk;
    protected g0(a: DataSeries, b: DataSeriesType): string;
    protected abstract ab(a: DataSeries): DataSeriesType;
    protected abstract bb(a: DataSeries, b: DataSeriesType): Series;
    gy(): string;
    private co;
    protected kp(): void;
    protected bc(seriesType_: DataSeriesType): Series;
    private a6;
    private a8;
    private a9;
    private ba;
    private a7;
    private aj;
    protected get ak(): IAnnotationLayerProxy;
    private get ch();
    private ci;
    private kw;
    protected ck(): boolean;
    protected cl(): boolean;
    protected c1(a: string, b: boolean): List$1<Series>;
    protected ku(a: Series, b: Series, c: DataSeries): void;
    protected abstract ko(a: DataSeries): void;
    protected abstract kn(a: DataSeries): void;
    protected kr(): void;
    private ks;
    protected kt(a: Series): void;
    protected abstract kq(): void;
    private j2;
    protected i3(): void;
    protected lj(a: number): Brush;
    protected lm(a: number): Brush;
    protected lk(a: number): Brush;
    protected ll(a: number): Brush;
    protected lq(a: number): Color;
    protected bt(a: Color): ObservableColorCollection;
    protected o(a: Color): BrushCollection;
    protected cy: List$1<Color>;
    protected get c0(): List$1<Color>;
    fe(): any;
    jq(a: string, b: string): void;
    jr(a: string, b: string, c: Series): void;
    a1(a: DataSeriesMarker): MarkerType;
    jw(source_: any, a: number, b: any, c: any): void;
    js(source_: any): void;
    jt(source_: any, a: number, b: any): void;
    ju(source_: any, a: number, b: any): void;
    seriesAdded: (sender: any, args: ChartSeriesEventArgs) => void;
    ke(a: Series): void;
    seriesRemoved: (sender: any, args: ChartSeriesEventArgs) => void;
    kk(a: Series): void;
    seriesPointerEnter: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    kg(a: Series, b: any): void;
    seriesPointerLeave: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    kh(a: Series, b: any): void;
    seriesPointerMove: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    ki(a: Series, b: any): void;
    seriesPointerDown: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    kf(a: Series, b: any): void;
    seriesPointerUp: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    kj(a: Series, b: any): void;
    calloutStyleUpdating: (sender: any, args: CalloutStyleUpdatingEventArgs) => void;
    kc(a: any, b: CalloutStyleUpdatingEventArgs): void;
    private c2;
    ka(a: () => void): void;
    private bu;
    kb(a: () => void, b: boolean): {
        p1?: boolean;
    };
    protected get_cs(): boolean;
    protected get cs(): boolean;
    protected jg(a: XamDataChart): void;
    protected s(a: BrushCollection): BrushCollection;
    protected ln(a: Brush): Brush;
    protected jm(a: Series, b: number): void;
    protected abstract i1(): void;
    protected get cb(): boolean;
    private bx;
    protected i4(): void;
    protected jd(): void;
    protected kl(a: XamDataChart): void;
    protected i0(a: Series, b: number): void;
    protected abstract iz(a: Series, b: number): void;
    protected a3(a: Series, b: number): MarkerType;
    protected a2(a: Series): MarkerType;
    protected dd(): IEnumerable;
    protected get_cm(): boolean;
    protected get cm(): boolean;
    protected de(): IEnumerable;
    protected j6(a: string, b: any, c: any): void;
    private j4;
    abstract get ai(): DomainType;
    private c9;
    get itemsSource(): IEnumerable;
    set itemsSource(a: IEnumerable);
    private c7;
    get actualItemsSource(): IEnumerable;
    set actualItemsSource(a: IEnumerable);
    private b;
    get d(): string[];
    set d(a: string[]);
    private a;
    get c(): string[];
    set c(a: string[]);
    private g;
    get n(): BrushCollection;
    set n(a: BrushCollection);
    private j;
    get r(): BrushCollection;
    set r(a: BrushCollection);
    private e;
    get l(): BrushCollection;
    set l(a: BrushCollection);
    private f;
    get m(): BrushCollection;
    set m(a: BrushCollection);
    private al;
    get legend(): IChartLegend;
    set legend(a: IChartLegend);
    private b3;
    protected get_cn(): boolean;
    protected set_cn(a: boolean): void;
    get cn(): boolean;
    set cn(a: boolean);
    private b5;
    protected get_ct(): boolean;
    protected set_ct(a: boolean): void;
    get ct(): boolean;
    set ct(a: boolean);
    private b7;
    protected get_cw(): boolean;
    protected set_cw(a: boolean): void;
    get cw(): boolean;
    set cw(a: boolean);
    private b8;
    protected get_cx(): boolean;
    protected set_cx(a: boolean): void;
    get cx(): boolean;
    set cx(a: boolean);
    private b4;
    protected get_cp(): boolean;
    protected set_cp(a: boolean): void;
    get cp(): boolean;
    set cp(a: boolean);
    private lr;
    get lt(): Rect;
    set lt(a: Rect);
    get ls(): Rect;
    private fs;
    get h9(): string;
    set h9(a: string);
    private fq;
    get hy(): string;
    set hy(a: string);
    private ky;
    get k0(): HorizontalAlignment;
    set k0(a: HorizontalAlignment);
    private kx;
    get kz(): HorizontalAlignment;
    set kz(a: HorizontalAlignment);
    private bn;
    get bo(): UnknownValuePlotting;
    set bo(a: UnknownValuePlotting);
    private dt;
    protected get_ej(): number;
    protected set_ej(a: number): void;
    get ej(): number;
    set ej(a: number);
    private dz;
    get ep(): number;
    set ep(a: number);
    private bh;
    get bi(): SeriesOutlineMode;
    set bi(a: SeriesOutlineMode);
    private az;
    get a0(): MarkerOutlineMode;
    set a0(a: MarkerOutlineMode);
    private ax;
    get ay(): MarkerFillMode;
    set ay(a: MarkerFillMode);
    private dl;
    get ec(): number;
    set ec(a: number);
    private dm;
    get ed(): number;
    set ed(a: number);
    private a4;
    get a5(): MarkerTypeCollection;
    set a5(a: MarkerTypeCollection);
    private av;
    get aw(): MarkerAutomaticBehavior;
    set aw(a: MarkerAutomaticBehavior);
    private h;
    get p(): BrushCollection;
    set p(a: BrushCollection);
    private i;
    get q(): BrushCollection;
    set q(a: BrushCollection);
    private e1;
    get e8(): number;
    set e8(a: number);
    private df;
    get d6(): number;
    set d6(a: number);
    private bw;
    get ca(): boolean;
    set ca(a: boolean);
    private k;
    get t(): BrushCollection;
    set t(a: BrushCollection);
    private bl;
    get bm(): TrendLineType;
    set bm(a: TrendLineType);
    private d5;
    get ev(): number;
    set ev(a: number);
    private bv;
    get b9(): boolean;
    set b9(a: boolean);
    private dq;
    get eg(): number;
    set eg(a: number);
    private ds;
    get ei(): number;
    set ei(a: number);
    private dr;
    get eh(): number;
    set eh(a: number);
    private dp;
    get ef(): number;
    set ef(a: number);
    protected j5(): void;
    private x;
    get y(): ComputedPlotAreaMarginMode;
    set y(a: ComputedPlotAreaMarginMode);
    private bf;
    get bg(): SeriesHighlightingMode;
    set bg(a: SeriesHighlightingMode);
    private bd;
    get be(): SeriesHighlightingBehavior;
    set be(a: SeriesHighlightingBehavior);
    private ap;
    get aq(): LegendHighlightingMode;
    set aq(a: LegendHighlightingMode);
    private at;
    get au(): LegendItemBadgeShape;
    set au(a: LegendItemBadgeShape);
    private ar;
    get as(): LegendItemBadgeMode;
    set as(a: LegendItemBadgeMode);
    private b6;
    get cv(): boolean;
    set cv(a: boolean);
    private dg;
    get d7(): number;
    set d7(a: number);
    private dh;
    get d8(): number;
    set d8(a: number);
    private e4;
    get fa(): number;
    set fa(a: number);
    private bj;
    get bk(): ToolTipType;
    set bk(a: ToolTipType);
    private z;
    get aa(): CrosshairsDisplayMode;
    set aa(a: CrosshairsDisplayMode);
    private b1;
    get cf(): boolean;
    set cf(a: boolean);
    private k6;
    get lg(): Brush;
    set lg(a: Brush);
    private dj;
    get ea(): number;
    set ea(a: number);
    private k5;
    get lf(): Brush;
    set lf(a: Brush);
    private b0;
    get ce(): boolean;
    set ce(a: boolean);
    private k1;
    get lb(): Brush;
    set lb(a: Brush);
    private k3;
    get ld(): Brush;
    set ld(a: Brush);
    private k2;
    get lc(): Brush;
    set lc(a: Brush);
    private k4;
    get le(): Brush;
    set le(a: Brush);
    private ey;
    get e5(): number;
    set e5(a: number);
    private ez;
    get e6(): number;
    set e6(a: number);
    private b2;
    get cg(): boolean;
    set cg(a: boolean);
    private k7;
    get lh(): Brush;
    set lh(a: Brush);
    private k8;
    get li(): Brush;
    set li(a: Brush);
    private e0;
    get e7(): number;
    set e7(a: number);
    private bz;
    get cd(): boolean;
    set cd(a: boolean);
    private by;
    get cc(): boolean;
    set cc(a: boolean);
    private c8;
    get calloutsItemsSource(): IEnumerable;
    set calloutsItemsSource(a: IEnumerable);
    private fo;
    get gb(): string;
    set gb(a: string);
    private fp;
    get gd(): string;
    set gd(a: string);
    private fn;
    get f7(): string;
    set f7(a: string);
    private fm;
    get f4(): string;
    set f4(a: string);
}
