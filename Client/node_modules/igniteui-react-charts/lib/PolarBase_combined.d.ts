import { MarkerSeries } from "./MarkerSeries";
import { Point, Type } from "igniteui-react-core";
import { PolarAxisInfoCache } from "./PolarAxisInfoCache";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { PolarFrame } from "./PolarFrame";
import { DependencyProperty } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { NumericAngleAxis } from "./NumericAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { HighlightingInfo } from "./HighlightingInfo";
import { SeriesView } from "./SeriesView";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Axis } from "./Axis";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { PolarAxes } from "./PolarAxes";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { OwnedPoint } from "./OwnedPoint";
import { HashPool$2 } from "igniteui-react-core";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { PolarTrendLineManager } from "./PolarTrendLineManager";
import { AssigningPolarStyleEventArgs } from "./AssigningPolarStyleEventArgs";
import { AssigningPolarMarkerStyleEventArgs } from "./AssigningPolarMarkerStyleEventArgs";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-react-core";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class PolarBase extends MarkerSeries {
    static $t: Type;
    protected bu(): SeriesView;
    lh(a: SeriesView): void;
    rc: PolarBaseView;
    private rd;
    ke(): void;
    protected get_d0(): boolean;
    cx(a: List$1<SeriesPointOfInterest>, b: boolean, c: number): boolean;
    constructor();
    private s3;
    private s5;
    private qz;
    rb: PolarAxisInfoCache;
    private t3;
    private t2;
    rp: SeriesRenderer$2<PolarFrame, PolarBaseView>;
    so: string;
    sy: string;
    protected get rt(): IFastItemColumn$1<number>;
    protected set rt(a: IFastItemColumn$1<number>);
    private rr;
    protected get ru(): IFastItemColumn$1<number>;
    protected set ru(a: IFastItemColumn$1<number>);
    private rs;
    q8: NumericAngleAxis;
    q9: NumericRadiusAxis;
    r8: boolean;
    si: number;
    rq: TrendLineType;
    tx: Brush;
    get tw(): Brush;
    set tw(a: Brush);
    static readonly td: DependencyProperty;
    sg: number;
    tz: PenLineCap;
    ty: DoubleCollection;
    sj: number;
    sk: number;
    rz: boolean;
    rh: PolarFrame;
    rj: PolarFrame;
    rf: PolarFrame;
    rg(): PolarFrame;
    ra: PolarAxes;
    ky(): void;
    protected kk(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected mm(a: Rect, b: Rect): void;
    protected mn(a: Rect, b: Rect): void;
    e3(a: Rect, b: Rect, c: SeriesView): boolean;
    l1(a: boolean): void;
    private t1;
    ap(a: Axis): AxisRange;
    eh(a: any): boolean;
    hh(a: Point): any;
    g0(a: Point): number;
    fw(a: Point): number;
    protected sc(a: Point): number;
    protected sb(a: Point): number;
    private r0;
    private r9;
    private sf;
    protected se(a: Point): number;
    protected sd(a: Point): number;
    o2(a: Point, b: boolean, c: boolean): Point;
    ag(): Axis[];
    hk(a: any, b: string): any;
    protected lm(a: any, b: string, c: any, d: any): void;
    private rl;
    get rm(): ScatterItemSearchMode;
    set rm(a: ScatterItemSearchMode);
    protected rn(): ScatterItemSearchMode;
    protected get_r3(): boolean;
    protected get r3(): boolean;
    protected r5(): boolean;
    protected r4(): boolean;
    ro: ScatterItemSearchMode;
    sh: number;
    ry(a: any): boolean;
    rx(a: any): boolean;
    kh(a: boolean, b: SeriesView): void;
    private q0;
    s2(a: PolarFrame, b: number, c: Rect, d: Rect): void;
    s8(a: PolarFrame, b: PolarBaseView): void;
    r2: boolean;
    r1: boolean;
    protected rw: boolean;
    protected rv: boolean;
    protected get_dr(): boolean;
    private q6;
    private q7;
    protected q4(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected q5(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected q3(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    av(a: any, b: Point, c: boolean): HighlightingInfo;
    aw(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningPolarStyle: (sender: any, args: AssigningPolarStyleEventArgs) => void;
    assigningPolarMarkerStyle: (sender: any, args: AssigningPolarMarkerStyleEventArgs) => void;
    protected r7(): boolean;
    protected r6(): boolean;
    tc(a: PolarFrame, b: PolarBaseView): void;
    qx(a: number, b: number): any[];
    protected qy(a: number, b: number): any[];
    protected rk: PolarSeriesRenderManager;
    s4(a: PolarBaseView, b: PolarFrame): void;
    protected s7(a: number, b: number, c: boolean): void;
    protected s6(a: number, b: number, c: boolean): void;
    protected ta(a: AssigningPolarStyleEventArgs): void;
    protected s9(a: AssigningPolarMarkerStyleEventArgs): void;
    private s1;
    protected md(): void;
    ri: PolarFrame;
    l2(a: Rect, b: RenderSurface): void;
    private re;
    lz(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    tb(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    qw(a: HashPool$2<any, Marker>, b: Rect, c: Rect): Point[];
    sa(a: HashPool$2<any, Marker>): List$1<number>;
    t0(a: number): Point;
    protected kr(a: any): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PolarSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    au: AssigningPolarMarkerStyleEventArgs;
    av: AssigningPolarStyleEventArgs;
    aw(a: PolarBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    ax(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    ay(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare class PolarBaseView extends MarkerSeriesView {
    static $t: Type;
    protected cu: PolarBase;
    ct: MarkerManagerBase;
    constructor(a: PolarBase);
    cv: PolarTrendLineManager;
    as(): void;
    cz(a: (arg1: Marker) => void): void;
    protected cs(): MarkerManagerBase;
    protected c0(a: IDictionary$2<any, OwnedPoint>): void;
    protected cr(): Point[];
    protected cx(): List$1<number>;
    cy(a: Rect, b: Rect, c: Rect, d: Rect): void;
    c1(): void;
    cw: HashPool$2<any, Marker>;
    cf(a: (arg1: Marker) => void): void;
    protected a5(a: RenderingContext, b: boolean): void;
    protected c2(): Rect;
    getDefaultTooltipTemplate(): string;
}
