import { TimeAxisBase } from "./TimeAxisBase";
import { ITimeRangeSelectorAxis } from "./ITimeRangeSelectorAxis";
import { TimeAxisBreakCollection } from "./TimeAxisBreakCollection";
import { TimeAxisLabellingMode } from "./TimeAxisLabellingMode";
import { TimeAxisLabelFormatCollection } from "./TimeAxisLabelFormatCollection";
import { TimeAxisIntervalCollection } from "./TimeAxisIntervalCollection";
import { Type, IList$1, EventArgs } from "igniteui-react-core";
import { TimeAxisLabelFormat } from "./TimeAxisLabelFormat";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { CultureInfo } from "igniteui-react-core";
import { TimeRepetitionLevel } from "./TimeRepetitionLevel";
/**
 * @hidden
 */
export declare class TimeXAxis extends TimeAxisBase implements ITimeRangeSelectorAxis {
    static $t: Type;
    constructor();
    protected get_cf(): boolean;
    d8(a: number, b: ScalerParams): number;
    private nl;
    g5(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    protected startCursor(): void;
    protected resetCursor(): void;
    private nn;
    eb(a: number, b: ScalerParams): number;
    private nm;
    private mx;
    get breaks(): TimeAxisBreakCollection;
    private m6;
    get m7(): TimeAxisLabellingMode;
    set m7(a: TimeAxisLabellingMode);
    private m4;
    get labelFormats(): TimeAxisLabelFormatCollection;
    protected he(a: any, b: string, c: any, d: any): void;
    protected h4(a: Rect, b: Rect): void;
    protected h3(a: Rect, b: Rect): void;
    cx(): boolean;
    private _omission;
    private get omission();
    private set omission(value);
    private n4;
    private mv;
    private na;
    private ng;
    private n3;
    fw(a: number): string;
    fi(a: any): any;
    static no(a: Date, b: boolean, c: Date, d: TimeAxisLabellingMode, e: number, f: IList$1<TimeAxisLabelFormat>, g: CultureInfo): any;
    static nt(a: Date, b: boolean, c: Date, d: TimeAxisLabellingMode, e: number, f: IList$1<TimeAxisLabelFormat>, g: CultureInfo): string;
    private static m8;
    protected get_ls(): boolean;
    protected set_ls(a: boolean): void;
    private m2;
    get intervals(): TimeAxisIntervalCollection;
    private nr;
    static ns(a: number, b: TimeRepetitionLevel, c: TimeAxisLabellingMode): string;
    private static mu;
    private static mw;
    private m0;
    private m1;
    private np;
    protected hr(a: boolean): void;
    private m9;
    private nb;
    private n2;
    private nf;
    get visibleMinimum(): Date;
    set visibleMinimum(a: Date);
    private nd;
    get ni(): Date;
    set ni(a: Date);
    private nc;
    get nh(): Date;
    set nh(a: Date);
    private ne;
    private mz;
    get visibleMaximum(): Date;
    set visibleMaximum(a: Date);
    protected mp(): void;
    kk(a: Rect, b: Rect, c: Rect, d: number, e: number): number;
    i$f(a: number): number;
    private n5;
    private n7;
    private n6;
    protected get_b7(): boolean;
    getWindowRectForSelection(a: Date, b: Date): Rect;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    private n0;
    static nz(a: (arg1: number) => Date, b: number): number;
    private ny;
    protected ml(): void;
    static nv(a: number): string;
    itemLabelFormat(): string;
    visibleRangeChanged: (sender: any, e: EventArgs) => void;
    protected l7(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected ma(a: Rect, b: Rect, c: Rect, d: Rect): number;
    get isVertical(): boolean;
    j$c(a: number, b: ScalerParams): number;
    j$b(a: number, b: ScalerParams): number;
    j$d(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$e(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$a(): boolean;
    get i$a(): boolean;
}
