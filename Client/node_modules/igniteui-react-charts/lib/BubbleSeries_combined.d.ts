import { ScatterBase } from "./ScatterBase";
import { IScaleLegendSeries } from "igniteui-react-core";
import { ISupportsSizeScale } from "./ISupportsSizeScale";
import { ISupportsFillScale } from "./ISupportsFillScale";
import { Rect } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { Type } from "igniteui-react-core";
import { ActualRange } from "./ActualRange";
import { SizeScale } from "./SizeScale";
import { BrushScale } from "./BrushScale";
import { SeriesView } from "./SeriesView";
import { MarkerFillMode } from "./MarkerFillMode";
import { ScatterFrame } from "./ScatterFrame";
import { IChartLegend } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { ScatterBaseView } from "./ScatterBaseView";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { Marker } from "./Marker";
import { BrushSelectionMode } from "./BrushSelectionMode";
import { MarkerManagerBase } from "./MarkerManagerBase";
/**
 * @hidden
 */
export declare class BubbleSeries extends ScatterBase implements IScaleLegendSeries, ISupportsSizeScale, ISupportsFillScale {
    static $t: Type;
    protected get_c0(): boolean;
    protected bu(): SeriesView;
    lh(a: SeriesView): void;
    t7: BubbleSeriesView;
    protected gi(): number;
    pl(): MarkerFillMode;
    constructor();
    private vk;
    private vj;
    isAttachedTo(a: IChartLegend): boolean;
    protected cz(): boolean;
    protected kt(a: (arg1: any) => void): void;
    get ud(): IFastItemColumn$1<number>;
    uj: List$1<UIElement>;
    private vi;
    get legendReady(): boolean;
    get minScaleText(): string;
    get maxScaleText(): string;
    forScaleColors(a: (arg1: Brush, arg2: number) => void): boolean;
    u0: string;
    hk(a: any, b: string): any;
    get uf(): IFastItemColumn$1<number>;
    set uf(a: IFastItemColumn$1<number>);
    private ub;
    t8: SizeScale;
    uu: string;
    private ua;
    get ue(): IFastItemColumn$1<any>;
    set ue(a: IFastItemColumn$1<any>);
    up: string;
    t6: BrushScale;
    private t9;
    get uc(): IFastItemColumn$1<number>;
    set uc(a: IFastItemColumn$1<number>);
    ug: boolean;
    uh: boolean;
    un: number;
    um: number;
    ui: boolean;
    sv(a: ScatterBaseView, b: ScatterFrame, c: number, d: Rect, e: Rect): void;
    s3(a: ScatterFrame, b: ScatterBaseView): void;
    private u5;
    static uk(a: number, b: number, c: number, d: number, e: number): number;
    static ul(a: number, b: number, c: number, d: number, logBase_: number, e: number): number;
    e3(a: Rect, b: Rect, c: SeriesView): boolean;
    protected r0(a: string, b: FastItemsSourceEventAction): boolean;
    private u4;
    protected kk(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    k0(): void;
    k6(): void;
    protected lm(a: any, b: string, c: any, d: any): void;
    updateSizeScaleGlobals(): void;
    updateFillScaleGlobals(): void;
    t5(a: SizeScale): ActualRange;
    t4(): ActualRange;
    u7(a: List$1<Marker>, b: List$1<number>, c: Rect, d: boolean): void;
    u6(a: List$1<Marker>): void;
    get actualMarkerBrush(): Brush;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class CustomPaletteBrushScale extends BrushScale {
    static $t: Type;
    constructor();
    brushSelectionMode: BrushSelectionMode;
    getBrush1(a: number, b: number): Brush;
    protected get_isReady(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class BubbleSeriesView extends ScatterBaseView {
    static $t: Type;
    protected df: BubbleSeries;
    constructor(a: BubbleSeries);
    as(): void;
    protected cu(): MarkerManagerBase;
    dh(): void;
    di(): void;
    dg(): void;
    getDefaultTooltipTemplate(): string;
}
