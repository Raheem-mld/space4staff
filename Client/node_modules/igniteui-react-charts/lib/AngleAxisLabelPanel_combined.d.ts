import { AxisLabelPanelBase } from "./AxisLabelPanelBase";
import { Point, Type, IList$1 } from "igniteui-react-core";
import { AxisLabelPanelBaseView } from "./AxisLabelPanelBaseView";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { List$1 } from "igniteui-react-core";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { IAngleScaler } from "./IAngleScaler";
import { CategoryAxisRenderer } from "./CategoryAxisRenderer";
import { DependencyProperty } from "igniteui-react-core";
import { AxisOrientation } from "./AxisOrientation";
import { AxisView } from "./AxisView";
import { PolarAxisRenderingManager } from "./PolarAxisRenderingManager";
import { ScalerParams } from "./ScalerParams";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { Geometry } from "igniteui-react-core";
import { NumericAxisBase } from "./NumericAxisBase";
import { NumericAxisRenderer } from "./NumericAxisRenderer";
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { GeometryGroup } from "igniteui-react-core";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
import { NumericAxisBaseView } from "./NumericAxisBaseView";
/**
 * @hidden
 */
export declare class AngleAxisLabelPanel extends AxisLabelPanelBase {
    static $t: Type;
    ad(): AxisLabelPanelBaseView;
    cc(a: AxisLabelPanelBaseView): void;
    c1: AngleAxisLabelPanelView;
    constructor();
    c2: boolean;
    c8: (arg1: number) => Point;
    aq(a: number, b: Rect): boolean;
    c6: number;
    c3: number;
    c5: number;
    c4: number;
    a1(): List$1<Rect>;
    private c7;
    ah(): AxisLabelsLocation;
    au(a: AxisLabelsLocation): boolean;
}
/**
 * @hidden
 */
export declare class CategoryAngleAxis extends CategoryAxisBase implements IAngleScaler {
    static $t: Type;
    a3(): AxisView;
    ha(a: AxisView): void;
    lo: CategoryAngleAxisView;
    protected get_b4(): boolean;
    private lt;
    constructor();
    au(): AxisLabelPanelBase;
    lq: CategoryAxisRenderer;
    private lu;
    private l8;
    private ly;
    private lp;
    private mn;
    private l2;
    private ln;
    getMinMaxAngle(a: Rect, b: number, c: number): {
        p1: number;
        p2: number;
    };
    ac(): void;
    private lr;
    get ls(): NumericRadiusAxis;
    set ls(a: NumericRadiusAxis);
    aj(): Axis;
    l9: number;
    private lz;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    ki(a: Rect, b: Rect, c: Rect): number;
    getGroupCenter(a: number, b: Rect, c: Rect, d: Rect): number;
    l5(a: number): number;
    protected hr(a: boolean): void;
    l4(a: Rect, b: Rect): number;
    l3(a: Rect, b: Rect): number;
    getScaledAngle(a: number): number;
    getUnscaledAngle(a: number): number;
    d8(a: number, b: ScalerParams): number;
    eb(a: number, b: ScalerParams): number;
    protected he(a: any, b: string, c: any, d: any): void;
    private mh;
    mj(a: NumericRadiusAxis): void;
    static readonly mk: DependencyProperty;
    get l6(): number;
    set l6(a: number);
    private lw;
    get l0(): number;
    set l0(a: number);
    ej(): number;
    static readonly ml: DependencyProperty;
    get l7(): number;
    set l7(a: number);
    private lx;
    get l1(): number;
    set l1(a: number);
    protected lv(): boolean;
    protected get_a1(): AxisOrientation;
    get a1(): AxisOrientation;
    cx(): boolean;
    private ma;
    get mb(): number;
    set mb(a: number);
    jk(a: number, b: Rect, c: Rect, d?: any, e?: any): Geometry;
    get isVertical(): boolean;
    j$c(a: number, b: ScalerParams): number;
    j$b(a: number, b: ScalerParams): number;
    j$d(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$e(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$a(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class NumericAngleAxis extends NumericAxisBase implements IAngleScaler {
    static $t: Type;
    a3(): AxisView;
    ha(a: AxisView): void;
    l3: NumericAngleAxisView;
    l6: PolarAxisRenderingManager;
    protected get_b4(): boolean;
    constructor();
    au(): AxisLabelPanelBase;
    private ma;
    private mc;
    private l7;
    private l8;
    j4(): NumericAxisRenderer;
    private mj;
    d8(a: number, b: ScalerParams): number;
    getScaledAngle1(a: number, b: boolean, c: boolean): number;
    getScaledAngle(a: number): number;
    eb(a: number, b: ScalerParams): number;
    getUnscaledAngle(a: number): number;
    md: number;
    private l9;
    protected he(a: any, b: string, c: any, d: any): void;
    private mf;
    j8(): NumericAxisRenderingParameters;
    j7(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    getMinMaxAngle(a: Rect, b: number, c: number): {
        p1: number;
        p2: number;
    };
    protected hr(a: boolean): void;
    private l4;
    get l5(): NumericRadiusAxis;
    set l5(a: NumericRadiusAxis);
    aj(): Axis;
    mh(a: NumericRadiusAxis): void;
    protected h3(a: Rect, b: Rect): void;
    protected get_a1(): AxisOrientation;
    get a1(): AxisOrientation;
    jk(a: number, b: Rect, c: Rect, d?: any, e?: any): Geometry;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class NumericRadiusAxis extends NumericAxisBase {
    static $t: Type;
    a3(): AxisView;
    ha(a: AxisView): void;
    l5: NumericRadiusAxisView;
    protected get_cg(): boolean;
    d7(): number;
    private me;
    private md;
    private l6;
    constructor();
    au(): AxisLabelPanelBase;
    l7: boolean;
    private mb;
    private l8;
    j4(): NumericAxisRenderer;
    d8(a: number, b: ScalerParams): number;
    mh(a: number, b: boolean, c: boolean, d: number, e: number): number;
    mg(a: number): number;
    mi(a: number): number;
    eb(a: number, b: ScalerParams): number;
    mk: number;
    ma: number;
    mj: number;
    l9: number;
    protected he(a: any, b: string, c: any, d: any): void;
    protected mc: number;
    mp(a: Axis): void;
    private l3;
    get l4(): Axis;
    set l4(a: Axis);
    aj(): Axis;
    j8(): NumericAxisRenderingParameters;
    j7(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    private mq;
    private ml;
    mf(): number;
    lt(a: AxisRangeChangedEventArgs): void;
    protected hr(a: boolean): void;
    protected h3(a: Rect, b: Rect): void;
    mo(a: GeometryGroup, b: Rect, c: Rect, d: Rect, e: Rect): void;
    protected get_a1(): AxisOrientation;
    get a1(): AxisOrientation;
    jk(a: number, b: Rect, c: Rect, d?: any, e?: any): Geometry;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AngleAxisLabelPanelView extends AxisLabelPanelBaseView {
    static $t: Type;
    protected ax: AngleAxisLabelPanel;
    constructor(a: AngleAxisLabelPanel);
    am(): void;
    ay(a: List$1<Rect>, b: List$1<boolean>): void;
    o(): number;
    p(): number;
    q(): number;
    r(): number;
}
/**
 * @hidden
 */
export declare class CategoryAngleAxisView extends CategoryAxisBaseView {
    static $t: Type;
    protected bg: CategoryAngleAxis;
    constructor(a: CategoryAngleAxis);
    ag(): void;
}
/**
 * @hidden
 */
export declare class NumericAngleAxisView extends NumericAxisBaseView {
    static $t: Type;
    protected bg: NumericAngleAxis;
    constructor(a: NumericAngleAxis);
    ag(): void;
}
/**
 * @hidden
 */
export declare class NumericRadiusAxisView extends NumericAxisBaseView {
    static $t: Type;
    protected bg: NumericRadiusAxis;
    constructor(a: NumericRadiusAxis);
    ag(): void;
}
