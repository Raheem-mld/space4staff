import { ShapeSeriesBase } from "./ShapeSeriesBase";
import { ShapeAxisInfoCache } from "./ShapeAxisInfoCache";
import { StyleSelector } from "./StyleSelector";
import { Style } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { DataTemplate } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { MarkerFillMode } from "./MarkerFillMode";
import { Rect } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { OwnedPoint } from "./OwnedPoint";
import { ShapeSeriesViewBase } from "./ShapeSeriesViewBase";
import { Marker } from "./Marker";
import { DataContext } from "igniteui-react-core";
import { IDictionary$2 } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { FrameworkElement } from "igniteui-react-core";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { Size } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { PointCollection } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class ScatterPolygonSeries extends ShapeSeriesBase {
    static $t: Type;
    protected get_d1(): boolean;
    protected get_dw(): boolean;
    constructor();
    protected qq(): boolean;
    protected rp(a: SeriesView): void;
    s2(a: ScatterPolygonSeriesView): void;
    private sl;
    protected bu(): SeriesView;
    lh(a: SeriesView): void;
    si: ScatterPolygonSeriesView;
    sj: ShapeAxisInfoCache;
    private static tp;
    private sg;
    private sh;
    protected get_hasMarkers(): boolean;
    om(): Brush;
    on(): Brush;
    mv(): DataTemplate;
    sk: StyleSelector;
    tr: Style;
    sf: MarkerType;
    s6: DataTemplate;
    sn: number;
    ft(): number;
    s4: DataTemplate;
    s5: DataTemplate;
    tn: Brush;
    tl: Brush;
    to: Brush;
    tm: Brush;
    tq: Style;
    r6: CollisionAvoidanceType;
    private sb;
    get sc(): MarkerOutlineMode;
    set sc(a: MarkerOutlineMode);
    se(): MarkerOutlineMode;
    mh(a: MarkerOutlineMode): void;
    sd: MarkerOutlineMode;
    private r7;
    get r8(): MarkerFillMode;
    set r8(a: MarkerFillMode);
    sa(): MarkerFillMode;
    mg(a: MarkerFillMode): void;
    mi(a: number): void;
    r9: MarkerFillMode;
    protected md(): void;
    protected lc(): void;
    protected lm(a: any, b: string, c: any, d: any): void;
    at(a: Point, b: boolean): DataContext;
    s3(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    cx(a: List$1<SeriesPointOfInterest>, b: boolean, c: number): boolean;
    r5(a: ScatterPolygonSeriesView, b: HashPool$2<any, Marker>, c: Point[], d: Rect, e: Rect): Point[];
    sm(a: HashPool$2<any, Marker>, b: List$1<number>): List$1<number>;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterPolygonSeriesView extends ShapeSeriesViewBase {
    static $t: Type;
    constructor(a: ScatterPolygonSeries);
    as(): void;
    get dd(): NumericMarkerManager;
    dh: boolean;
    protected dz(a: IDictionary$2<any, OwnedPoint>): void;
    protected c7(): Point[];
    protected di(): List$1<number>;
    private c8;
    private dj;
    private de;
    private dc;
    protected c2(a: number, b: List$1<PointCollection>): PathGeometry;
    cj(a: FrameworkElement, b: any, c: boolean): void;
    protected ch(a: FrameworkElement, b: PathGeometry): void;
    private dg;
    df: HashPool$2<any, Marker>;
    dt(a: (arg1: Marker) => void): void;
    dv(a: HashPool$2<any, Marker>): void;
    db(): Marker;
    protected dk: List$1<Marker>;
    b1(a: Point): Marker;
    private da;
    dx(a: Marker): void;
    dw(a: Marker): void;
    dy(a: Marker): void;
    d0(a: boolean): void;
    protected bh(a: any, b: number): void;
    private c9;
    protected bi(a: any, b: number): void;
    protected a5(a: RenderingContext, b: boolean): void;
    ds(): void;
    dp(): void;
    dq(): void;
    dm(): void;
    dr(): void;
    dn(): void;
    dl(a: string): void;
    du(): void;
    private d1;
    d2(a: Marker): Size;
    al(a: any): void;
    getDefaultTooltipTemplate(): string;
}
