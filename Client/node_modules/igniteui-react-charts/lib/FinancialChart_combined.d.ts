import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { DomWrapper } from "igniteui-react-core";
import { EventArgs, IList, Type } from "igniteui-react-core";
import { IZoomSlider } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DomainType } from "./DomainType";
import { FinancialChartVolumeType } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode } from "./FinancialChartYAxisMode";
import { FinancialChartType } from "./FinancialChartType";
import { HorizontalAlignment } from "igniteui-react-core";
import { FinancialIndicatorTypeCollection } from "./FinancialIndicatorTypeCollection";
import { FinancialOverlayTypeCollection } from "./FinancialOverlayTypeCollection";
import { FinancialChartZoomSliderType } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { IndicatorDisplayTypeCollection } from "./IndicatorDisplayTypeCollection";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { CustomIndicatorNameCollection } from "./CustomIndicatorNameCollection";
import { IChartLegend } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { Series } from "./Series";
import { Axis } from "./Axis";
import { DataSeries } from "igniteui-react-core";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerType } from "./MarkerType";
import { TitleSettings } from "./TitleSettings";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType } from "igniteui-react-core";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorVisualData } from "./FinancialChartRangeSelectorVisualData";
/**
 * @hidden
 */
export declare class FinancialChart extends XYChart {
    static $t: Type;
    protected j8(a: string, b: any, c: any): void;
    private aao;
    private aan;
    private aak;
    private aaw;
    private un;
    provideGrid(a: DomWrapper): void;
    onDocumentClick(a: Event): void;
    private w7;
    private w5;
    private w2;
    private w4;
    private w6;
    private w3;
    getContext(): FinancialChartContext;
    provideContainer(a: any): void;
    private aa7;
    private abl;
    private z4;
    private abj;
    setGridRows(): void;
    protected jl(): void;
    private aa3;
    private aa4;
    private abd;
    private z3;
    private aau;
    protected ji(a: XamDataChart): void;
    private abo;
    private abr;
    private abp;
    private abq;
    wo(): number;
    jt(source_: any, a: number, b: any): void;
    ju(source_: any, a: number, b: any): void;
    js(source_: any): void;
    jw(source_: any, a: number, b: any, c: any): void;
    protected jo(a: Series, b: number): void;
    private tt;
    private get tu();
    private set tu(value);
    private xp;
    get xw(): any;
    set xw(a: any);
    private xq;
    get xx(): any;
    set xx(a: any);
    private xm;
    get xt(): any;
    set xt(a: any);
    private xr;
    get xy(): any;
    set xy(a: any);
    private xs;
    get xz(): any;
    set xz(a: any);
    private xn;
    get xu(): any;
    set xu(a: any);
    private xo;
    get xv(): any;
    set xv(a: any);
    private vb;
    get vc(): IZoomSlider;
    set vc(a: IZoomSlider);
    protected get_eb(): number;
    protected set_eb(a: number): void;
    protected get_cn(): boolean;
    protected set_cn(a: boolean): void;
    private wh;
    get wt(): number;
    set wt(a: number);
    constructor();
    protected ly(): Axis;
    protected lz(): Axis;
    onAttachedToUI(): void;
    onDetachedFromUI(): void;
    protected ab(a: DataSeries): DataSeriesType;
    protected get_c5(): List$1<DataSeriesType>;
    protected get c5(): List$1<DataSeriesType>;
    protected get_c4(): List$1<IDataSeriesAdapterRule>;
    protected get c4(): List$1<IDataSeriesAdapterRule>;
    private tg;
    private uu;
    private tf;
    protected i1(): void;
    protected iz(a: Series, b: number): void;
    protected a2(a: Series): MarkerType;
    protected kn(a: DataSeries): void;
    protected kq(): void;
    private ty;
    private tx;
    private t7;
    private t0;
    private x8;
    private th;
    private uv;
    private u1;
    private u2;
    private u0;
    private u3;
    private get vi();
    private uh;
    private get ui();
    private get vl();
    private uf;
    private get ug();
    private get vj();
    private uj;
    private get uk();
    private get vk();
    private uo;
    private get up();
    protected bb(a: DataSeries, b: DataSeriesType): Series;
    protected kp(): void;
    protected ra(a: (arg1: Axis) => void, b: string): void;
    protected rf(a: (arg1: Axis) => void, b: boolean): void;
    protected rd(a: (arg1: TitleSettings) => void): void;
    protected ri(a: (arg1: TitleSettings) => void): void;
    protected rg(a: (arg1: AxisLabelSettings) => void): void;
    protected rb(a: (arg1: AxisLabelSettings) => void): void;
    protected jh(a: XamDataChart): void;
    private static xk;
    private x0;
    private y3;
    private aae;
    private z0;
    private z1;
    private z6;
    private z9;
    private z7;
    private z8;
    private aaa;
    private xe;
    protected i7(a: (arg1: Series, arg2: number) => void): void;
    private u7;
    private get volumeChart();
    private set volumeChart(value);
    private aay;
    private vm;
    private vq;
    private vn;
    private vp;
    private aax;
    private u4;
    private u6;
    private abf;
    fe(): any;
    x5(): string;
    private u5;
    private abe;
    private vv;
    private abc;
    protected je(): void;
    protected get_cs(): boolean;
    protected get vz(): boolean;
    private abk;
    private aaz;
    protected j1(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    private aac;
    private aa8;
    private get vy();
    private aad;
    private vr;
    private aa2;
    private aah;
    private aam;
    private aal;
    private aaf;
    private aag;
    private aaq;
    private aat;
    private aar;
    private z2;
    private aa6;
    private abi;
    private aai;
    private abg;
    private vu;
    private aap;
    private aab;
    private aba;
    private aa9;
    private aa1;
    private aaj;
    private v0;
    private abh;
    private z5;
    private abb;
    protected ku(a: Series, b: Series, c: DataSeries): void;
    private x7;
    protected q5(a: Axis): void;
    protected q7(a: Axis): void;
    private aas;
    protected jm(a: Series, b: number): void;
    protected j6(a: string, b: any, c: any): void;
    protected get_ai(): DomainType;
    get ai(): DomainType;
    private vh;
    get vx(): boolean;
    set vx(a: boolean);
    private xd;
    get xl(): number;
    set xl(a: number);
    private wj;
    get wx(): number;
    set wx(a: number);
    private wl;
    get wz(): number;
    set wz(a: number);
    private wk;
    get wy(): number;
    set wy(a: number);
    private wm;
    get w0(): number;
    set w0(a: number);
    get ww(): number;
    get wv(): number;
    private tz;
    get t1(): FinancialChartVolumeType;
    set t1(a: FinancialChartVolumeType);
    private t2;
    get t3(): FinancialChartXAxisMode;
    set t3(a: FinancialChartXAxisMode);
    private t4;
    get t5(): FinancialChartYAxisMode;
    set t5(a: FinancialChartYAxisMode);
    private ve;
    get vs(): boolean;
    set vs(a: boolean);
    private tv;
    get tw(): FinancialChartType;
    set tw(a: FinancialChartType);
    protected get_ro(): HorizontalAlignment;
    protected set_ro(a: HorizontalAlignment): void;
    private vf;
    get vt(): boolean;
    set vt(a: boolean);
    private t9;
    get ua(): FinancialIndicatorTypeCollection;
    set ua(a: FinancialIndicatorTypeCollection);
    private ub;
    get uc(): FinancialOverlayTypeCollection;
    set uc(a: FinancialOverlayTypeCollection);
    private v2;
    private get indicatorCharts();
    private set indicatorCharts(value);
    private vg;
    get vw(): boolean;
    set vw(a: boolean);
    protected get_ej(): number;
    protected set_ej(a: number): void;
    private u8;
    get zoomSliderChart(): XamDataChart;
    set zoomSliderChart(a: XamDataChart);
    private ut;
    private get zoomSliderAxis();
    private set zoomSliderAxis(value);
    private te;
    private get zoomSliderXAxis();
    private set zoomSliderXAxis(value);
    private t6;
    get t8(): FinancialChartZoomSliderType;
    set t8(a: FinancialChartZoomSliderType);
    private sx;
    get s5(): BrushCollection;
    set s5(a: BrushCollection);
    private sy;
    get s6(): BrushCollection;
    set s6(a: BrushCollection);
    private sz;
    get s7(): BrushCollection;
    set s7(a: BrushCollection);
    private s0;
    get s8(): BrushCollection;
    set s8(a: BrushCollection);
    private s2;
    get ta(): BrushCollection;
    set ta(a: BrushCollection);
    private s1;
    get s9(): BrushCollection;
    set s9(a: BrushCollection);
    private sw;
    get s4(): BrushCollection;
    set s4(a: BrushCollection);
    private sv;
    get s3(): BrushCollection;
    set s3(a: BrushCollection);
    private wi;
    get wu(): number;
    set wu(a: number);
    private wg;
    get ws(): number;
    set ws(a: number);
    private wf;
    get wr(): number;
    set wr(a: number);
    private we;
    get wq(): number;
    set wq(a: number);
    private ul;
    get um(): IndicatorDisplayTypeCollection;
    set um(a: IndicatorDisplayTypeCollection);
    private w9;
    get xg(): number;
    set xg(a: number);
    private wd;
    get wp(): number;
    set wp(a: number);
    private xc;
    get xj(): number;
    set xj(a: number);
    private xa;
    get xh(): number;
    set xh(a: number);
    private w8;
    get xf(): number;
    set xf(a: number);
    private xb;
    get xi(): number;
    set xi(a: number);
    private tq;
    get ts(): FinancialChartRangeSelectorOptionCollection;
    set ts(a: FinancialChartRangeSelectorOptionCollection);
    tr: FinancialChartRangeSelectorOptionCollection;
    private tm;
    get customIndicatorNames(): CustomIndicatorNameCollection;
    set customIndicatorNames(a: CustomIndicatorNameCollection);
    applyCustomIndicators: (sender: any, e: FinancialChartCustomIndicatorArgs) => void;
    protected get_ct(): boolean;
    protected set_ct(a: boolean): void;
    private abm;
    get abn(): Brush;
    set abn(a: Brush);
    private wn;
    get w1(): number;
    set w1(a: number);
    private vd;
    get vo(): boolean;
    set vo(a: boolean);
    private ud;
    get ue(): IChartLegend;
    set ue(a: IChartLegend);
    private td;
    private get xAxis();
    private set xAxis(value);
    private us;
    private get yAxis();
    private set yAxis(value);
    private ur;
    private get volumeAxis();
    private set volumeAxis(value);
    private tc;
    private get volumeXAxis();
    private set volumeXAxis(value);
    private uq;
    private get indicatorAxis();
    private set indicatorAxis(value);
    private tb;
    private get indicatorXAxis();
    private set indicatorXAxis(value);
    private v1;
    private get v4();
    private set v4(value);
    private v3;
    private get v6();
    private set v6(value);
    private wa;
    get wc(): Date;
    set wc(a: Date);
    private v9;
    get wb(): Date;
    set wb(a: Date);
    private v7;
    get xAxisBreaks(): ObservableCollection$1<any>;
}
/**
 * @hidden
 */
export declare class FinancialChartToolbar extends TemplatedHtmlControl {
    static $t: Type;
    bg(a: DomWrapper): void;
    bl(a: Event): void;
    private o;
    constructor(a: FinancialChart, b: any);
    private r;
    get s(): FinancialChartRangeSelector;
    set s(a: FinancialChartRangeSelector);
    private z;
    get aa(): FinancialChartTypePicker;
    set aa(a: FinancialChartTypePicker);
    private p;
    get q(): FinancialChartIndicatorMenu;
    set q(a: FinancialChartIndicatorMenu);
    private bm;
    private bh;
    private bi;
    private bj;
    w: FinancialChartToolbarViewModel;
    v(): FinancialChartToolbarContext;
    l(a: any): void;
    private bk;
    private aq;
    get au(): Date;
    set au(a: Date);
    private ap;
    get at(): Date;
    set at(a: Date);
    private ao;
    get as(): Date;
    set as(a: Date);
    private an;
    get ar(): Date;
    set ar(a: Date);
    rangeChanged: (sender: any, e: EventArgs) => void;
    chartTypeChanged: (sender: any, e: EventArgs) => void;
    trendLineTypeChanged: (sender: any, e: EventArgs) => void;
    volumeTypeChanged: (sender: any, e: EventArgs) => void;
    indicatorTypesChanged: (sender: any, e: EventArgs) => void;
    overlayTypesChanged: (sender: any, e: EventArgs) => void;
    bn(): void;
    private x;
    get y(): FinancialChartType;
    set y(a: FinancialChartType);
    private ah;
    get ai(): TrendLineType;
    set ai(a: TrendLineType);
    private ab;
    get ac(): FinancialChartVolumeType;
    set ac(a: FinancialChartVolumeType);
    private ad;
    get ae(): FinancialIndicatorTypeCollection;
    set ae(a: FinancialIndicatorTypeCollection);
    private af;
    get ag(): FinancialOverlayTypeCollection;
    set ag(a: FinancialOverlayTypeCollection);
    static am(a: IList, b: IList): boolean;
    aj(): FinancialChartToolbarVisualData;
    private t;
    get u(): FinancialChartRangeSelectorOptionCollection;
    set u(a: FinancialChartRangeSelectorOptionCollection);
    private ak;
    get al(): boolean;
    set al(a: boolean);
}
/**
 * @hidden
 */
export declare class FinancialChartRangeSelector extends TemplatedHtmlControl {
    static $t: Type;
    private static x;
    q: FinancialChartRangeSelectorViewModel;
    get v(): Date;
    set v(a: Date);
    get u(): Date;
    set u(a: Date);
    get t(): Date;
    set t(a: Date);
    get s(): Date;
    set s(a: Date);
    ab(): void;
    constructor(a: any);
    l(a: any): void;
    private z;
    rangeChanged: (sender: any, e: EventArgs) => void;
    r(): FinancialChartRangeSelectorVisualData;
    get o(): FinancialChartRangeSelectorOptionCollection;
    set o(a: FinancialChartRangeSelectorOptionCollection);
    private aa;
    private p;
}
