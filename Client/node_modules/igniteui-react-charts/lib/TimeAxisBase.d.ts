import { CategoryAxisBase } from "./CategoryAxisBase";
import { ISortingAxis } from "./ISortingAxis";
import { IDateTimeAxis } from "./IDateTimeAxis";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { IList$1, Type } from "igniteui-react-core";
import { AxisOrientation } from "./AxisOrientation";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { CategoryMode } from "./CategoryMode";
import { SortedListView$1 } from "./SortedListView$1";
import { Series } from "./Series";
import { AxisLabelPanelBase } from "./AxisLabelPanelBase";
/**
 * @hidden
 */
export declare abstract class TimeAxisBase extends CategoryAxisBase implements ISortingAxis, IDateTimeAxis {
    static $t: Type;
    constructor();
    d8(a: number, b: ScalerParams): number;
    fg(a: any, b: string): any;
    private l4;
    private l5;
    eb(a: number, b: ScalerParams): number;
    getUnscaledValue3(a: number, b: Rect, c: Rect, d: CategoryMode): number;
    i$h(): void;
    mk(): void;
    protected mp(): void;
    dateTimeMemberPath: string;
    get lo(): IFastItemColumn$1<Date>;
    set lo(a: IFastItemColumn$1<Date>);
    private ln;
    private lw;
    protected get lx(): List$1<number>;
    protected set lx(a: List$1<number>);
    get i$b(): List$1<number>;
    protected ml(): void;
    i$e(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected l7(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected l6(a: Date): number;
    i$g(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected ma(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected l9(a: Date): number;
    i$d(a: number): number;
    i$c(a: number): number;
    protected l8(a: Date, b: SortedListView$1<Date>): number;
    i$f(a: number): number;
    i$i(): void;
    lt: boolean;
    private lr;
    protected get_ls(): boolean;
    protected set_ls(a: boolean): void;
    get ls(): boolean;
    set ls(a: boolean);
    hg(a: string): void;
    hj(a: any): void;
    hi(a: any): void;
    cx(): boolean;
    protected lv(): boolean;
    protected lu(): boolean;
    private lz;
    get actualMinimumValue(): Date;
    set actualMinimumValue(a: Date);
    private ly;
    fl(): any;
    get actualMaximumValue(): Date;
    set actualMaximumValue(a: Date);
    fk(): any;
    minimumValue: Date;
    maximumValue: Date;
    private mm;
    protected he(a: any, b: string, c: any, d: any): void;
    private mj;
    protected lp(a: string): IFastItemColumn$1<Date>;
    static lq(a: string, b: CategoryAxisBase): IFastItemColumn$1<Date>;
    au(): AxisLabelPanelBase;
    protected get_a1(): AxisOrientation;
    get a1(): AxisOrientation;
    protected hr(a: boolean): void;
    protected get_b9(): boolean;
    protected startCursor(): void;
    protected resetCursor(): void;
    StartTimeCursor(): void;
    ResetTimeCursor(): void;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    getGroupCenter(a: number, b: Rect, c: Rect, d: Rect): number;
    ki(a: Rect, b: Rect, c: Rect): number;
    protected get_ch(): boolean;
    protected mi(a: Date, b: Date): number;
    preferredCategoryMode(a: Series): CategoryMode;
    get isVertical(): boolean;
    j$c(a: number, b: ScalerParams): number;
    j$b(a: number, b: ScalerParams): number;
    j$d(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$e(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$a(): boolean;
    get i$a(): boolean;
    static $$p: string[];
}
