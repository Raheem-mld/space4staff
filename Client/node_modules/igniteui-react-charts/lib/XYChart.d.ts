import { DomainChart } from "./DomainChart";
import { IEnumerable$1, Type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { VerticalAlignment } from "igniteui-react-core";
import { Visibility } from "igniteui-react-core";
import { YAxisLabelLocation } from "./YAxisLabelLocation";
import { XAxisLabelLocation } from "./XAxisLabelLocation";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { TitleSettings } from "./TitleSettings";
import { DataSeries } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
/**
 * @hidden
 */
export declare abstract class XYChart extends DomainChart {
    static $t: Type;
    provideContainer(a: any): void;
    protected jl(): void;
    protected j7(a: string, b: any, c: any): void;
    private l0;
    get l2(): (item: any) => string;
    set l2(a: (item: any) => string);
    private l1;
    get l3(): (item: any) => string;
    set l3(a: (item: any) => string);
    private mh;
    get nj(): number;
    set nj(a: number);
    private mj;
    get nl(): number;
    set nl(a: number);
    private mi;
    get nk(): number;
    set nk(a: number);
    private mg;
    get ni(): number;
    set ni(a: number);
    private my;
    get n0(): number;
    set n0(a: number);
    private m0;
    get n2(): number;
    set n2(a: number);
    private mz;
    get n1(): number;
    set n1(a: number);
    private mx;
    get nz(): number;
    set nz(a: number);
    private rr;
    get r7(): Brush;
    set r7(a: Brush);
    private ry;
    get se(): Brush;
    set se(a: Brush);
    private rp;
    get r5(): Brush;
    set r5(a: Brush);
    private rq;
    get r6(): Brush;
    set r6(a: Brush);
    private ms;
    get nu(): number;
    set nu(a: number);
    private m9;
    get ob(): number;
    set ob(a: number);
    private mr;
    get nt(): number;
    set nt(a: number);
    private m8;
    get oa(): number;
    set oa(a: number);
    private mu;
    get nw(): number;
    set nw(a: number);
    private nb;
    get od(): number;
    set od(a: number);
    private mt;
    get nv(): number;
    set nv(a: number);
    private na;
    get oc(): number;
    set oc(a: number);
    private mq;
    get ns(): number;
    set ns(a: number);
    private m7;
    get n9(): number;
    set n9(a: number);
    private rx;
    get sd(): Brush;
    set sd(a: Brush);
    private r4;
    get sk(): Brush;
    set sk(a: Brush);
    protected j8(a: string, b: any, c: any): void;
    private oj;
    get o7(): string;
    set o7(a: string);
    private on;
    get qc(): string;
    set qc(a: string);
    private ol;
    get pv(): string;
    set pv(a: string);
    private op;
    get q0(): string;
    set q0(a: string);
    private q6;
    private q8;
    protected ko(a: DataSeries): void;
    protected abstract ly(): Axis;
    protected abstract lz(): Axis;
    protected q9(a: (arg1: Axis) => void): void;
    protected ra(a: (arg1: Axis) => void, b: string): void;
    protected rf(a: (arg1: Axis) => void, b: boolean): void;
    protected re(a: (arg1: Axis) => void): void;
    protected rd(a: (arg1: TitleSettings) => void): void;
    protected ri(a: (arg1: TitleSettings) => void): void;
    protected rg(a: (arg1: AxisLabelSettings) => void): void;
    protected rb(a: (arg1: AxisLabelSettings) => void): void;
    nc(a: number): number;
    ne(a: number): number;
    nd(a: number): number;
    nf(a: number): number;
    protected kl(a: XamDataChart): void;
    static os(a: CategoryAxisBase, b: IEnumerable$1<DataSeries>): string;
    protected jg(a: XamDataChart): void;
    protected q5(a: Axis): void;
    protected q7(a: Axis): void;
    protected jd(): void;
    protected q3(a: Axis, b: (arg1: AxisLabelSettings) => void): void;
    protected q4(a: Axis, b: (arg1: TitleSettings) => void): void;
    protected j6(a: string, b: any, c: any): void;
    rh(): void;
    rc(): void;
    l5(a: YAxisLabelLocation): AxisLabelsLocation;
    l4(a: XAxisLabelLocation): AxisLabelsLocation;
    private oe;
    get og(): any;
    set og(a: any);
    private of;
    get oh(): any;
    set oh(a: any);
    private rs;
    get r8(): Brush;
    set r8(a: Brush);
    private rz;
    get sf(): Brush;
    set sf(a: Brush);
    private mk;
    get nm(): number;
    set nm(a: number);
    private m1;
    get n3(): number;
    set n3(a: number);
    private ml;
    get nn(): number;
    set nn(a: number);
    private m2;
    get n4(): number;
    set n4(a: number);
    private ru;
    get sa(): Brush;
    set sa(a: Brush);
    private r1;
    get sh(): Brush;
    set sh(a: Brush);
    private rv;
    get sb(): Brush;
    set sb(a: Brush);
    private r2;
    get si(): Brush;
    set si(a: Brush);
    private mm;
    get no(): number;
    set no(a: number);
    private m3;
    get n5(): number;
    set n5(a: number);
    private mn;
    get np(): number;
    set np(a: number);
    private m4;
    get n6(): number;
    set n6(a: number);
    private rw;
    get sc(): Brush;
    set sc(a: Brush);
    private r3;
    get sj(): Brush;
    set sj(a: Brush);
    private mo;
    get nq(): number;
    set nq(a: number);
    private m5;
    get n7(): number;
    set n7(a: number);
    private ok;
    get pm(): string;
    set pm(a: string);
    private oo;
    get qr(): string;
    set qr(a: string);
    private rt;
    get r9(): Brush;
    set r9(a: Brush);
    private r0;
    get sg(): Brush;
    set sg(a: Brush);
    private mf;
    get nh(): number;
    set nh(a: number);
    private mw;
    get ny(): number;
    set ny(a: number);
    private me;
    get ng(): number;
    set ng(a: number);
    private mv;
    get nx(): number;
    set nx(a: number);
    private mp;
    get nr(): number;
    set nr(a: number);
    private m6;
    get n8(): number;
    set n8(a: number);
    private ma;
    get mc(): boolean;
    set mc(a: boolean);
    private mb;
    get md(): boolean;
    set md(a: boolean);
    private rk;
    get rn(): HorizontalAlignment;
    set rn(a: HorizontalAlignment);
    private sn;
    get sq(): VerticalAlignment;
    set sq(a: VerticalAlignment);
    private rj;
    get rm(): HorizontalAlignment;
    set rm(a: HorizontalAlignment);
    private rl;
    protected get_ro(): HorizontalAlignment;
    protected set_ro(a: HorizontalAlignment): void;
    get ro(): HorizontalAlignment;
    set ro(a: HorizontalAlignment);
    private sl;
    get so(): VerticalAlignment;
    set so(a: VerticalAlignment);
    private sm;
    get sp(): VerticalAlignment;
    set sp(a: VerticalAlignment);
    private sr;
    get st(): Visibility;
    set st(a: Visibility);
    private ss;
    get su(): Visibility;
    set su(a: Visibility);
    private l8;
    protected get_l9(): YAxisLabelLocation;
    protected set_l9(a: YAxisLabelLocation): void;
    get l9(): YAxisLabelLocation;
    set l9(a: YAxisLabelLocation);
    private l6;
    protected get_l7(): XAxisLabelLocation;
    protected set_l7(a: XAxisLabelLocation): void;
    get l7(): XAxisLabelLocation;
    set l7(a: XAxisLabelLocation);
    private oi;
    get oy(): string;
    set oy(a: string);
    private lu;
    get lw(): any[];
    set lw(a: any[]);
    private om;
    get p3(): string;
    set p3(a: string);
    private lv;
    get lx(): any[];
    set lx(a: any[]);
}
