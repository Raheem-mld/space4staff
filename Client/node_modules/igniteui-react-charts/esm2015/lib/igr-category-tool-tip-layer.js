import { IgrAxis } from "./igr-axis";
import { IgrAnnotationLayer } from "./igr-annotation-layer";
import { CategoryToolTipLayer } from "./CategoryToolTipLayer";
import { ensureBool } from "igniteui-react-core";
/**
 * Represents an annotation layer that displays grouped tooltips for series that use a category axis.
*/
export class IgrCategoryToolTipLayer extends IgrAnnotationLayer {
    createImplementation() {
        return new CategoryToolTipLayer();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets whether the series is an annotation layer displayed only when hovering over the chart.
    */
    get isAnnotationHoverLayer() {
        return this.i.c5;
    }
    /**
     * Gets whether the default tooltip behaviors for the chart are disabled if this layer is present.
    */
    get isDefaultTooltipBehaviorDisabled() {
        return this.i.de;
    }
    /**
     * Gets or sets the Axis to target this annotation to. If null, this annotation layer will not render content.
    */
    get targetAxis() {
        if (this.i.qm == null) {
            return null;
        }
        if (!this.i.qm.externalObject) {
            let e = IgrAxis._createFromInternal(this.i.qm);
            if (e) {
                e._implementation = this.i.qm;
            }
            this.i.qm.externalObject = e;
        }
        return this.i.qm.externalObject;
    }
    set targetAxis(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.qm = null : this.i.qm = v.i;
    }
    /**
     * Gets or sets whether to use value interpolation when drawing the tooltips.
    */
    get useInterpolation() {
        return this.i.qq;
    }
    set useInterpolation(v) {
        this.i.qq = ensureBool(v);
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.targetAxis && this.targetAxis.name && this.targetAxis.name == name) {
            return this.targetAxis;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.targetAxis && this.targetAxis._styling) {
            this.targetAxis._styling(container, component, this);
        }
        this._inStyling = false;
    }
    /**
     * Hides any tooltips presented by the layer, if any.
    
    */
    hideToolTips() {
        this.i.kx();
    }
}
//# sourceMappingURL=igr-category-tool-tip-layer.js.map
