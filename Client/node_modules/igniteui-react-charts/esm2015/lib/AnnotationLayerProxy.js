/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, typeCast, delegateCombine, delegateRemove, markType } from "igniteui-react-core";
import { IAnnotationLayerProxy_$type } from "./IAnnotationLayerProxy";
import { CalloutLayer } from "./CalloutLayer";
/**
 * @hidden
 */
export let AnnotationLayerProxy = /*@__PURE__*/ (() => {
    class AnnotationLayerProxy extends Base {
        matchesType(a) {
            if (!a.c6) {
                return false;
            }
            return true;
        }
        setCrosshairHorizontalLineVisibility(a, b) {
            a.s5 = b;
        }
        setCrosshairVerticalLineVisibility(a, b) {
            a.s6 = b;
        }
        setCrosshairHorizontalLineStroke(a, b) {
            a.sv = b;
        }
        setCrosshairVerticalLineStroke(a, b) {
            a.sw = b;
        }
        setCrosshairXAxisForeground(a, b) {
            a.sz = b;
        }
        setCrosshairYAxisForeground(a, b) {
            a.s2 = b;
        }
        setCrosshairXAxisBackground(a, b) {
            a.sx = b;
        }
        setCrosshairYAxisBackground(a, b) {
            a.s0 = b;
        }
        setCrosshairYAxisPrecision(a, b) {
            a.q8 = b;
        }
        setCrosshairXAxisPrecision(a, b) {
            a.q7 = b;
        }
        setCrosshairOnAxesEnabled(a, b) {
            a.qs = b;
        }
        setCrosshairUseInterpolation(a, b) {
            a.qu = b;
        }
        setCrosshairThickness(a, b) {
            a.gm = b;
        }
        setFinalValuePrecision(a, b) {
            a.qy = b;
        }
        setFinalValueBackground(a, b) {
            a.rq = b;
        }
        setFinalValueForeground(a, b) {
            a.rs = b;
        }
        setContentMemberPath(a, b) {
            a.sm = b;
        }
        setLabelMemberPath(a, b) {
            a.sv = b;
        }
        setXMemberPath(a, b) {
            a.s4 = b;
        }
        setYMemberPath(a, b) {
            a.s7 = b;
        }
        setTargetSeries(a, b) {
            a.qs = b;
        }
        setCollisionChannel(a, b) {
            a.sj = b;
        }
        isCalloutLayer(a) {
            if (typeCast(CalloutLayer.$, a) !== null) {
                return true;
            }
            return false;
        }
        addCalloutStyleUpdating(a, b) {
            let c = a;
            c.calloutStyleUpdating = delegateCombine(c.calloutStyleUpdating, b);
        }
        removeCalloutStyleUpdating(a, b) {
            let c = a;
            c.calloutStyleUpdating = delegateRemove(c.calloutStyleUpdating, b);
        }
        setCalloutStyleUpdatingEventEnabled(a, b) {
            a.ri = b;
        }
    }
    AnnotationLayerProxy.$t = /*@__PURE__*/ markType(AnnotationLayerProxy, 'AnnotationLayerProxy', Base.$, [IAnnotationLayerProxy_$type]);
    return AnnotationLayerProxy;
})();
//# sourceMappingURL=AnnotationLayerProxy.js.map
