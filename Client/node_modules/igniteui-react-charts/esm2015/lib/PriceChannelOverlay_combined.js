/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { FinancialOverlay } from "./FinancialOverlay";
import { DependencyProperty } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Number_$type, typeCast, runOn, markType, markDep, Point_$type, fromEnum } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { Series } from "./Series";
import { MathUtil } from "igniteui-react-core";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { ScalerParams } from "./ScalerParams";
import { ISortingAxis_$type } from "./ISortingAxis";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { Polyline } from "igniteui-react-core";
import { Polygon } from "igniteui-react-core";
import { RangeValueList } from "./RangeValueList";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { Flattener } from "igniteui-react-core";
/**
 * @hidden
 */
export let PriceChannelOverlay = /*@__PURE__*/ (() => {
    class PriceChannelOverlay extends FinancialOverlay {
        constructor() {
            super();
            this.s7 = new List$1(Number_$type, 0);
            this.s6 = new List$1(Number_$type, 0);
            this.ab = PriceChannelOverlay.$;
            this.pu = new CategoryFrame(3);
            this.pw = new CategoryFrame(3);
            this.ps = new CategoryFrame(3);
        }
        lm(a, b, c, d) {
            switch (b) {
                case "HighColumn":
                case "LowColumn":
                    this.s0 = false;
                    break;
            }
            super.lm(a, b, c, d);
            switch (b) {
                case PriceChannelOverlay.$$p[0]:
                    this.s0 = false;
                    this.l0(false);
                    break;
            }
        }
        e3(a, b, c) {
            let d = super.e3(a, b, c);
            if (this.qk == null || this.ql == null) {
                d = false;
            }
            return d;
        }
        s1() {
            this.s7.clear();
            this.s6.clear();
            let a = truncate(MathUtil.b(this.s8, 0, this.ch.count));
            let b = Math.min(this.qk.count, this.ql.count);
            let c = this.ra(this.qk);
            let d = this.ra(this.ql);
            for (let e = 0; e < b; e++) {
                let f = Math.min(a, e);
                let g = -1.7976931348623157E+308;
                let h = 1.7976931348623157E+308;
                for (let i = 0; i < f; i++) {
                    if (!isNaN_(c.item(e - i))) {
                        g = Math.max(g, c.item(e - i));
                    }
                    if (!isNaN_(d.item(e - i))) {
                        h = Math.min(h, d.item(e - i));
                    }
                }
                if (e == 0) {
                    h = d.item(0);
                    g = c.item(0);
                }
                this.s7.add(g);
                this.s6.add(h);
            }
            return true;
        }
        sh(a, b) {
            super.sh(a, b);
            let c = b.bv;
            let d = b.bu;
            let e = this.getEffectiveViewport1(b);
            let f = new ScalerParams(0, c, d, this.pq.cc, e);
            let g = new ScalerParams(0, c, d, this.qc.cc, e);
            g.b = this.f2();
            let h = this.pq;
            let i = this.qc;
            a.f.clear();
            a.m.clear();
            a.p.clear();
            let j = 0;
            let k = typeCast(ISortingAxis_$type, this.pq);
            if (k != null && k.i$b.count != this.ch.count) {
                return;
            }
            j = this.rh(c, d, e);
            if (!this.s0) {
                this.s0 = this.s1();
            }
            g.b = this.f2();
            let l = this.pq.eb(2, f) - this.pq.eb(1, f);
            for (let m = b.bx.c; m <= b.bx.d; ++m) {
                let n;
                if (k == null) {
                    n = b.bx.getBucket(m);
                }
                else {
                    let o = k.i$b._inner[m];
                    let p = k.i$d(o);
                    let q = this.s7._inner[m];
                    let r = this.s6._inner[m];
                    let s = q;
                    let t = r;
                    let u = p;
                    while (m < b.bx.d) {
                        o = k.i$b._inner[m + 1];
                        u = k.i$d(o);
                        if (u - p > l) {
                            break;
                        }
                        m++;
                        s = Math.max(q, this.s7._inner[m]);
                        t = Math.min(r, this.s6._inner[m]);
                    }
                    if (!isInfinity(t) && !isInfinity(s)) {
                        let v = NaN;
                        if (!isNaN_(p)) {
                            v = this.pq.d8(p, f);
                        }
                        n = [v, t, s];
                    }
                    else {
                        n = [NaN, NaN, NaN];
                    }
                }
                let w = Math.max(1, l);
                if (!isNaN_(n[0]) && m * w >= this.s2) {
                    if (this.pq != null && typeCast(ISortingAxis_$type, this.pq) !== null) {
                        n[0] = n[0] + j;
                    }
                    else {
                        n[0] = h.d8(n[0], f) + j;
                    }
                    n[1] = i.d8(n[1], g);
                    n[2] = i.d8(n[2], g);
                    a.f.add(n);
                }
            }
        }
        kh(a, b) {
            super.kh(a, b);
            let c = b;
            if (c != null) {
                c.b4();
            }
        }
        sj(a, b) {
            super.sj(a, b);
            let c = typeCast(PriceChannelOverlayView.$, b);
            if (c == null) {
                return;
            }
            let d = this.getEffectiveViewport1(b);
            if (b.b0(a)) {
                c.b4();
                let e = a.f.count;
                let f = (g) => a.f._inner[g][0];
                let g = (h) => a.f._inner[e - 1 - h][0];
                let h = (i) => a.f._inner[i][1];
                let i = (j) => a.f._inner[e - 1 - j][2];
                c.b5(e, f, g, h, i);
                b.b2(a);
            }
            this.pz.a0(this, this.qy(), runOn(this, this.pi), this.rn(b), this.rp(b));
            let j = false;
            let k = this.pz.b;
            let l = a.f;
            let m = this.ch.count;
            if (k != null) {
                j = true;
            }
            if (j) {
                let n = new ScalerParams(0, b.bv, b.bu, this.pq.cc, d);
                this.sg(l, -1, m, this.pq, n, b.q);
            }
            let o = c.cb;
            let p = c.cc;
            let q = c.b7;
            this.pz.ad(o, true, false, true, true);
            this.pz.ad(p, true, false, true, true);
            this.pz.ad(q, false, true, false, false);
            q._opacity = this.pz.j * this.fi;
        }
        bu() {
            return new PriceChannelOverlayView(this);
        }
        lh(a) {
            super.lh(a);
            this.s5 = typeCast(PriceChannelOverlayView.$, a);
        }
        f8(a, b, c) {
            if (this.ca == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.bx);
            let e = new ScalerParams(0, this.ca.pg, this.bx.bu, this.pq.cc, d);
            let f = this.rh(this.ca.pg, this.bx.bu, d);
            return this.ga(new RangeValueList(this.s7, this.s6), a, this.pq, e, f, runOn(this, this.rg), b, c);
        }
        g4(a, b) {
            if (this.s7 == null || this.s6 == null) {
                return super.g4(a, b);
            }
            return this.g5(a, b, this.pq, runOn(this, this.rg), new RangeValueList(this.s7, this.s6));
        }
        g6(a, b) {
            if (this.s7 == null || this.s6 == null) {
                return super.g6(a, b);
            }
            return this.g7(a, b, this.pq, runOn(this, this.rg), new RangeValueList(this.s7, this.s6));
        }
        f2() {
            return Series.f3(this.s6, null);
        }
    }
    PriceChannelOverlay.$t = /*@__PURE__*/ markType(PriceChannelOverlay, 'PriceChannelOverlay', FinancialOverlay.$);
    PriceChannelOverlay.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, PriceChannelOverlay, 'raisePropertyChanged', ['Period:s8:ta', [1, 14]]);
    return PriceChannelOverlay;
})();
/**
 * @hidden
 */
export let PriceChannelBucketCalculator = /*@__PURE__*/ (() => {
    class PriceChannelBucketCalculator extends FinancialBucketCalculator {
        constructor(a) {
            super(a);
            this.f = null;
            this.f = a;
        }
        getBucket(a) {
            let b = a * this.b;
            let c = Math.min(b + this.b - 1, this.a.bz.ch.count - 1);
            if (b <= c) {
                let d = -1.7976931348623157E+308;
                let e = 1.7976931348623157E+308;
                let f = 0;
                for (let g = b; g <= c; ++g) {
                    if (!isNaN_(this.f.b3.s7._inner[g]) && !isNaN_(this.f.b3.s6._inner[g])) {
                        d = Math.max(d, this.f.b3.s7._inner[g]);
                        e = Math.min(e, this.f.b3.s6._inner[g]);
                        ++f;
                    }
                }
                if (f > 0 && e != 1.7976931348623157E+308 && d != -1.7976931348623157E+308) {
                    return [0.5 * (b + c), e, d];
                }
            }
            return [NaN, NaN, NaN];
        }
    }
    PriceChannelBucketCalculator.$t = /*@__PURE__*/ markType(PriceChannelBucketCalculator, 'PriceChannelBucketCalculator', FinancialBucketCalculator.$);
    return PriceChannelBucketCalculator;
})();
/**
 * @hidden
 */
export let PriceChannelOverlayView = /*@__PURE__*/ (() => {
    class PriceChannelOverlayView extends FinancialSeriesView {
        constructor(a) {
            super(a);
            this.b8 = new Polygon();
            this.cd = new Polyline();
            this.ce = new Polyline();
            this.b3 = null;
            this.b6 = new Polygon();
            this.b9 = new Polyline();
            this.ca = new Polyline();
            this.b3 = a;
        }
        get b7() {
            return this.b8;
        }
        get cb() {
            return this.cd;
        }
        get cc() {
            return this.ce;
        }
        as() {
            super.as();
            if (!this.q) {
            }
        }
        by() {
            return new PriceChannelBucketCalculator(this);
        }
        b4() {
            this.b8.ak.clear();
            this.cd.ak.clear();
            this.ce.ak.clear();
            this.aq();
        }
        b5(a, b, c, d, e) {
            for (let f of fromEnum(Flattener.d(a, b, d, this.e.gh))) {
                this.b8.ak.add({ $type: Point_$type, x: b(f), y: d(f) });
                this.cd.ak.add({ $type: Point_$type, x: b(f), y: d(f) });
            }
            for (let g of fromEnum(Flattener.d(a, c, e, this.e.gh))) {
                this.b8.ak.add({ $type: Point_$type, x: c(g), y: e(g) });
                this.ce.ak.add({ $type: Point_$type, x: c(g), y: e(g) });
            }
            this.aq();
        }
        bc() {
            super.bc();
            this.b6.ak = this.b8.ak;
            this.b9.ak = this.cd.ak;
            this.ca.ak = this.ce.ak;
            let a = this.bo();
            this.b6._fill = a;
            this.b6._opacity = 1;
            this.b9._stroke = a;
            this.b9.ac = this.e.fl + 3;
            this.ca._stroke = a;
            this.ca.ac = this.e.fl + 3;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.t(this.b6);
                    a.u(this.b9);
                    a.u(this.ca);
                }
                else {
                    a.t(this.b8);
                    a.u(this.cd);
                    a.u(this.ce);
                }
            }
        }
        al(a) {
            super.al(a);
            this.e.a6.exportPolygonData(a, this.b8, "fill", ["Fill"]);
            this.e.a6.exportPolylineData(a, this.cd, "bottom", ["Lower", "Main"]);
            this.e.a6.exportPolylineData(a, this.ce, "top", ["Upper"]);
        }
    }
    PriceChannelOverlayView.$t = /*@__PURE__*/ markType(PriceChannelOverlayView, 'PriceChannelOverlayView', FinancialSeriesView.$);
    return PriceChannelOverlayView;
})();
//# sourceMappingURL=PriceChannelOverlay_combined.js.map
