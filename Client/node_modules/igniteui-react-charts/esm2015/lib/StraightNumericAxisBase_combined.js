/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { NumericAxisBase } from "./NumericAxisBase";
import { NumericScaleMode_$type } from "./NumericScaleMode";
import { DependencyProperty } from "igniteui-react-core";
import { NumericScaler } from "./NumericScaler";
import { enumGetBox, typeCast, markType, markDep } from "igniteui-react-core";
import { ArgumentNullException } from "igniteui-react-core";
import { LogarithmicScaler } from "./LogarithmicScaler";
import { PropertyMetadata } from "igniteui-react-core";
import { NumericAxisBaseView } from "./NumericAxisBaseView";
/**
 * @hidden
 */
export let StraightNumericAxisBase = /*@__PURE__*/ (() => {
    class StraightNumericAxisBase extends NumericAxisBase {
        constructor() {
            super();
            this.l5 = null;
            this.l9 = false;
            this.mj();
        }
        a3() {
            return new StraightNumericAxisBaseView(this);
        }
        ha(a) {
            super.ha(a);
            this.l8 = a;
        }
        get l7() {
            return this.c(StraightNumericAxisBase.ml);
        }
        set l7(a) {
            this.h(StraightNumericAxisBase.ml, a);
        }
        static mh(a, b) {
            let c = typeCast(StraightNumericAxisBase.$, a);
            c.mj();
            c.hk("Scaler", b.oldValue, b.newValue);
        }
        l6() {
            return null;
        }
        get_l4() {
            if (this.l5 == null) {
                this.mj();
            }
            return this.l5;
        }
        set_l4(a) {
            let b = this.l5 != a;
            if (b) {
                let c = this.l5;
                this.l5 = a;
                this.hk("ActualScaler", c, a);
            }
        }
        get l4() {
            return this.get_l4();
        }
        set l4(a) {
            this.set_l4(a);
        }
        lq(a, b, c, d, e, f, g) {
            let h = this.l4.t(a, b, c, f, g);
            f = h.p3;
            g = h.p4;
            return {
                p5: f,
                p6: g
            };
        }
        mi(a) {
            let b = this.l9;
            this.l9 = true;
            a();
            this.l9 = b;
        }
        mj() {
            let a = this.l7;
            if (a == null) {
                a = this.j9();
            }
            this.l4 = a;
            if (this.l4 == null) {
                throw new ArgumentNullException(0, "ActualScaler");
            }
            this.me();
        }
        me() {
            this.l8.bh();
        }
        he(a, b, c, d) {
            if (this.l9) {
                return;
            }
            super.he(a, b, c, d);
            switch (b) {
                case NumericAxisBase.$$p[2]:
                    this.mj();
                    break;
                case NumericAxisBase.$$p[1]:
                    this.mj();
                    break;
                case StraightNumericAxisBase.$$p[0]:
                    this.mj();
                    break;
                case "Scaler":
                    this.mj();
                    break;
                case "ActualScaler":
                    this.kg = typeCast(LogarithmicScaler.$, this.l4) !== null;
                    this.me();
                    this.cv();
                    this.hq(false);
                    break;
                case "ActualMaximumValue":
                    this.mf();
                    break;
                case "ActualMinimumValue":
                    this.mg();
                    this.mj();
                    break;
            }
        }
        mg() {
            this.l4.y(this.kv);
        }
        mf() {
            this.l4.x(this.ku);
        }
        ma(a, b) {
            if (a < this.kv) {
                a = this.kv;
            }
            else if (a > this.ku) {
                a = this.ku;
            }
            if (!b.cj) {
                return (a - this.kv) / (this.ku - this.kv);
            }
            else {
                return (a - this.ku) / (this.kv - this.ku);
            }
        }
    }
    StraightNumericAxisBase.$t = /*@__PURE__*/ markType(StraightNumericAxisBase, 'StraightNumericAxisBase', NumericAxisBase.$);
    StraightNumericAxisBase.ml = /*@__PURE__*/ DependencyProperty.i("Scaler", NumericScaler.$, StraightNumericAxisBase.$, /*@__PURE__*/ new PropertyMetadata(2, null, StraightNumericAxisBase.mh));
    StraightNumericAxisBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StraightNumericAxisBase, 'hk', ['ScaleMode:l3:mk', [NumericScaleMode_$type, /*@__PURE__*/ enumGetBox(NumericScaleMode_$type, 0)]]);
    return StraightNumericAxisBase;
})();
/**
 * @hidden
 */
export let StraightNumericAxisBaseView = /*@__PURE__*/ (() => {
    class StraightNumericAxisBaseView extends NumericAxisBaseView {
        constructor(a) {
            super(a);
            this.bg = null;
            this.bg = a;
        }
        bh() {
            this.bg.l4.x(this.bg.ku);
            this.bg.l4.y(this.bg.kv);
        }
    }
    StraightNumericAxisBaseView.$t = /*@__PURE__*/ markType(StraightNumericAxisBaseView, 'StraightNumericAxisBaseView', NumericAxisBaseView.$);
    return StraightNumericAxisBaseView;
})();
//# sourceMappingURL=StraightNumericAxisBase_combined.js.map
