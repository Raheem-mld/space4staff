/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { IUnknownValuePlotting_$type } from "igniteui-react-core";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { typeCast, runOn, enumGetBox, markType, markDep } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { PropertyMetadata } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { Defaults } from "./Defaults";
import { ISortingAxis_$type } from "./ISortingAxis";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let LineSeries = /*@__PURE__*/ (() => {
    class LineSeries extends HorizontalAnchoredCategorySeries {
        constructor() {
            super();
            this.uf = null;
            this.uf = new CategoryLineRasterizer();
            this.ab = LineSeries.$;
            this.tz = 0;
        }
        get_dv() {
            return true;
        }
        bu() {
            return new LineSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.ug = a;
        }
        get_c8() {
            return true;
        }
        preferredCategoryMode(a) {
            return this.tz;
        }
        kh(a, b) {
            super.kh(a, b);
            let c = b;
            c.db();
        }
        sl(a, b) {
            super.sl(a, b);
            let c = b.cr.d;
            let d = typeCast(LineSeriesView.$, b);
            let e = a.f;
            let f = this.getEffectiveViewport1(b);
            this.rb.a0(this, this.rv(), runOn(this, this.qw), this.r3(b), this.r4(b));
            let g = false;
            let h = this.rb.b;
            if (h != null) {
                g = true;
            }
            if (g) {
                let i = new ScalerParams(0, b.bv, b.bu, this.tw.cc, f);
                this.sh(e, -1, this.valueColumn.count, this.tw, i, b.q);
            }
            let j = d.dh;
            let k = d.di;
            let l = d.dg;
            this.rb.ad(j, true, false, true, false);
            this.rb.ad(k, true, false, true, false);
            this.rb.ad(l, false, true, false, false);
            l._opacity = 0.75 * this.rb.j;
            if (b.cv(a)) {
                d.dc(e.count, e, true, this.unknownValuePlotting, this.st(e, e.count - 1, b.bu, b.bv), c, this.gh);
                b.cy(a);
            }
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case LineSeries.$$p[0]:
                    this.q8.m = this.unknownValuePlotting == 0;
                    this.l0(false);
                    this.k7();
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    LineSeries.$t = /*@__PURE__*/ markType(LineSeries, 'LineSeries', HorizontalAnchoredCategorySeries.$, [IUnknownValuePlotting_$type]);
    LineSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, LineSeries, 'raisePropertyChanged', ['UnknownValuePlotting::ui', [UnknownValuePlotting_$type, /*@__PURE__*/ enumGetBox(UnknownValuePlotting_$type, 1)]]);
    return LineSeries;
})();
/**
 * @hidden
 */
export let LineSeriesView = /*@__PURE__*/ (() => {
    class LineSeriesView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.dk = new Path();
            this.dj = new Path();
            this.dl = new Path();
            this.df = new Path();
            this.de = new Path();
            this.dd = new Path();
            this.da = a;
        }
        as() {
            super.as();
            if (!this.q) {
                this.da.pr = Defaults.e;
            }
        }
        get dh() {
            return this.dk;
        }
        get di() {
            return this.dl;
        }
        get dg() {
            return this.dj;
        }
        db() {
            this.dj.ak = null;
            this.dk.ak = null;
            this.dl.ak = null;
            this.aq();
        }
        dc(a, b, c, d, e, f, g) {
            this.da.uf.a = typeCast(ISortingAxis_$type, this.ct.fetchXAxis()) !== null ? true : false;
            this.da.uf.m(this.dk, this.dj, this.dl, a, b, c, d, e, f, g);
            this.aq();
        }
        bb() {
            super.bb();
        }
        bc() {
            super.bc();
            this.de.ak = this.dk.ak;
            this.df.ak = this.dl.ak;
            this.dd.ak = this.dj.ak;
            let a = this.bo();
            this.de._stroke = a;
            this.de.ac = this.e.fl + 3;
            this.df._stroke = a;
            this.df.ac = this.e.fl + 3;
            this.dd._fill = a;
            this.dd._opacity = 1;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.s(this.dd);
                    a.s(this.de);
                    a.s(this.df);
                }
                else {
                    a.s(this.dj);
                    a.s(this.dk);
                    a.s(this.dl);
                }
            }
        }
        al(a) {
            super.al(a);
            this.e.a6.exportPathData(a, this.dk, "lowerShape", ["Lower", "Main"]);
            this.e.a6.exportPathData(a, this.dl, "upperShape", ["Upper"]);
            this.e.a6.exportPathData(a, this.dj, "translucentShape", ["Translucent"]);
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.or = a;
            this.e.gj = 3;
            this.e.gk = 1;
            this.e.gl = 4;
            this.e.e1 = false;
        }
    }
    LineSeriesView.$t = /*@__PURE__*/ markType(LineSeriesView, 'LineSeriesView', AnchoredCategorySeriesView.$);
    return LineSeriesView;
})();
//# sourceMappingURL=LineSeries_combined.js.map
