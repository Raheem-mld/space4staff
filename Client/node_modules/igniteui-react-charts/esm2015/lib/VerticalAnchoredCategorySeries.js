/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { CategoryYAxis } from "./CategoryYAxis";
import { IVerticalAnchoredCategorySeriesInteractionManager_$type } from "./IVerticalAnchoredCategorySeriesInteractionManager";
import { DVContainer } from "igniteui-react-core";
import { runOn, typeCast, EnumUtil, markType, markDep } from "igniteui-react-core";
import { Axis } from "./Axis";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { TrendLineType_$type } from "igniteui-react-core";
import { CategoryTrendLineManagerFactory } from "./CategoryTrendLineManagerFactory";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate } from "igniteui-react-core";
/**
 * @hidden
 */
export let VerticalAnchoredCategorySeries = /*@__PURE__*/ (() => {
    class VerticalAnchoredCategorySeries extends AnchoredCategorySeries {
        constructor() {
            super(...arguments);
            this.tx = null;
        }
        ke() {
            super.ke();
            this.xAxis = null;
            this.yAxis = null;
        }
        get ty() {
            if (this.tx == null) {
                this.tx = DVContainer.instance.createInstance(IVerticalAnchoredCategorySeriesInteractionManager_$type, () => this.ck.n);
            }
            return this.tx;
        }
        get_isVertical() {
            return true;
        }
        q2() {
            return this.yAxis;
        }
        rn() {
            return this.xAxis;
        }
        getOffsetValue() {
            return this.q8.r(this.q2(), this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        getCategoryWidth() {
            return this.yAxis.getCategorySize(this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        g4(a, b) {
            return this.g5(a, b, this.q2(), runOn(this, this.r1), this.valueColumn);
        }
        g6(a, b) {
            return this.g7(a, b, this.q2(), runOn(this, this.r1), this.valueColumn);
        }
        fu(a, b, c, d, e) {
            if (this.valueColumn == null) {
                return Number.POSITIVE_INFINITY;
            }
            return this.fv(a, b, this.yAxis, d, e, this.valueColumn.count, runOn(this, this.r1));
        }
        bo() {
            if (this.bp == 0) {
                return 1;
            }
            else {
                return super.bo();
            }
        }
        pd(a) {
            if (!this.hasMarkers || !this.pt()) {
                return Rect.empty;
            }
            return this.ty.e$b(this, this.q3.m, a, runOn(this, this.t6));
        }
        t6(a) {
            return this.sv.c9(a);
        }
        ep(a, b) {
            if (this.eo(a, b)) {
                return true;
            }
            if (this.pu(a, b)) {
                return true;
            }
            return false;
        }
        f8(a, b, c) {
            if (this.ca == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.bx);
            let e = this.q2();
            let f = new ScalerParams(0, this.ca.pg, this.bx.bu, e.cc, d);
            let g = this.q8.r(e, this.ca.pg, this.bx.bu, d);
            return this.ga(this.valueColumn, a, e, f, g, runOn(this, this.r1), b, c);
        }
        o2(a, b, c) {
            let d = this.q2();
            return this.o4(a, b, c, this.q8.r(d, this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx)), this.rn(), d, null, null, null);
        }
        fetchXAxis() {
            return this.xAxis;
        }
        fetchYAxis() {
            return this.yAxis;
        }
        te(a) {
            this.xAxis = typeCast(NumericXAxis.$, a);
        }
        tf(a) {
            this.yAxis = typeCast(CategoryYAxis.$, a);
        }
        rx() {
            return this.xAxis != null && this.xAxis.cv();
        }
        qw(a, b) {
            return this.ss(a, b, this.yAxis);
        }
        fw(a) {
            return this.ty.e$a(this, a);
        }
        r1(a) {
            return this.fy(a, this.q2());
        }
        g0(a) {
            return truncate(Math.round(this.fw(a)));
        }
        hh(a) {
            let b = this.g0(a);
            return b >= 0 && this.ch != null && b < this.ch.count ? this.ch.item(b) : null;
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case VerticalAnchoredCategorySeries.$$p[0]:
                    if (c != d) {
                        this.kl(typeCast(Axis.$, c));
                        this.lr(typeCast(Axis.$, d));
                        this.rc.cr.g(this.gh);
                        this.l0(false);
                        this.k7();
                    }
                    break;
                case VerticalAnchoredCategorySeries.$$p[1]:
                    if (c != d) {
                        this.kl(typeCast(Axis.$, c));
                        this.lr(typeCast(Axis.$, d));
                        this.rc.cr.g(this.gh);
                        this.rx();
                        this.l0(false);
                        this.k7();
                    }
                    break;
                case "TrendLineType":
                    let e = EnumUtil.getEnumValue(TrendLineType_$type, d);
                    if (e != 0) {
                        this.sv.c2 = CategoryTrendLineManagerFactory.a(this.sv.c2, this.yAxis, this.mr, this, this.ck);
                    }
                    break;
            }
        }
        t1(a) {
            if (typeCast(CategoryYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        t0(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    VerticalAnchoredCategorySeries.$t = /*@__PURE__*/ markType(VerticalAnchoredCategorySeries, 'VerticalAnchoredCategorySeries', AnchoredCategorySeries.$);
    VerticalAnchoredCategorySeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, VerticalAnchoredCategorySeries, 'raisePropertyChanged', ['XAxis::t4', [NumericXAxis.$, null], 'YAxis::t5', [CategoryYAxis.$, null]]);
    return VerticalAnchoredCategorySeries;
})();
//# sourceMappingURL=VerticalAnchoredCategorySeries.js.map
