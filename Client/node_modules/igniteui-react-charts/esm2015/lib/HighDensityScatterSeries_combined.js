/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Series } from "./Series";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Color } from "igniteui-react-core";
import { ScatterFrame } from "./ScatterFrame";
import { Defaults } from "./Defaults";
import { KDTree2D } from "./KDTree2D";
import { typeGetValue, runOn, delegateRemove, typeCast, delegateCombine, markType, markDep, toNullable } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { List$1 } from "igniteui-react-core";
import { KDPointData } from "./KDPointData";
import { ScalerParams } from "./ScalerParams";
import { ProgressiveLoadStatusEventArgs } from "./ProgressiveLoadStatusEventArgs";
import { SearchArgs } from "./SearchArgs";
import { KDTreeNode2D } from "./KDTreeNode2D";
import { AxisRange } from "./AxisRange";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity, logBase, intDivide } from "igniteui-react-core";
import { boxArray$1, arrayShallowClone } from "igniteui-react-core";
import { dateNow } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { CanvasViewRenderer } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
/**
 * @hidden
 */
export let HighDensityScatterSeries = /*@__PURE__*/ (() => {
    class HighDensityScatterSeries extends Series {
        constructor() {
            super();
            this.pv = null;
            this.px = null;
            this.q6 = 0;
            this.pz = false;
            this.ql = Defaults.aq.o;
            this.qk = Defaults.aq.n;
            this.qj = Defaults.aq.m;
            this.qi = Defaults.aq.l;
            this.qh = Defaults.ap.o;
            this.qg = Defaults.ap.n;
            this.qf = Defaults.ap.m;
            this.qe = Defaults.ap.l;
            this.pn = null;
            this.ps = null;
            this.pt = null;
            this.po = null;
            this.pq = null;
            this.p1 = false;
            this.q7 = 0;
            this.q9 = 0;
            this.q3 = 0;
            this.q2 = 0;
            this.progressiveLoadStatusChanged = null;
            this.p6 = null;
            this.qc = 0;
            this.qb = 0;
            this.qd = 0;
            this.qs = 0;
            this.qq = 0;
            this.qr = 0;
            this.qt = 0;
            this.qv = 0;
            this.qx = 0;
            this.qw = 0;
            this.qu = 0;
            this.p8 = 0;
            this.p9 = 0;
            this.qa = 0;
            this.p7 = 0;
            this.q5 = 0;
            this.q4 = 0;
            this.pk = null;
            this.q8 = 0;
            this.p0 = false;
            this._itemIndexes = null;
            this.pl = null;
            this.pi = null;
            this.pu = null;
            this.ab = HighDensityScatterSeries.$;
            this.ef = false;
        }
        get_dz() {
            return true;
        }
        get_d6() {
            return true;
        }
        get pw() {
            return this.pv;
        }
        set pw(a) {
            if (this.pv != a) {
                let b = this.pw;
                this.pv = a;
                this.raisePropertyChanged("XColumn", b, this.pw);
            }
        }
        hk(a, b) {
            let c = this.ja(b);
            if (c == HighDensityScatterSeries.$$p[8]) {
                return this.hl(a, b, this.ro);
            }
            if (c == HighDensityScatterSeries.$$p[10]) {
                return this.hl(a, b, this.rs);
            }
            return super.hk(a, b);
        }
        get py() {
            return this.px;
        }
        set py(a) {
            if (this.px != a) {
                let b = this.py;
                this.px = a;
                this.raisePropertyChanged("YColumn", b, this.py);
            }
        }
        r7() {
            if (this.pn == null) {
                return;
            }
            this.pn.s();
            let a = this.pn;
            a.progressiveThunkCompleted = delegateRemove(a.progressiveThunkCompleted, runOn(this, this.ru));
            this.pn = null;
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    if (this.ca != null) {
                        let e = this.getEffectiveViewport1(this.bx);
                        this.p0 = !e.isEmpty;
                    }
                    break;
                case "FastItemsSource":
                    this.r7();
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.pw);
                        c.deregisterColumn(this.py);
                        this.pw = null;
                        this.py = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.pw = this.ce(this.ro);
                        this.py = this.ce(this.rs);
                    }
                    if ((this.pr != null && !this.pr.cv()) || (this.pp != null && !this.pp.cv())) {
                        this.l0(false);
                    }
                    this.k8();
                    break;
                case HighDensityScatterSeries.$$p[7]:
                    let f = this.po;
                    this.po = this.pp;
                    this.r7();
                    if (f != null) {
                        f.rangeChanged = delegateRemove(f.rangeChanged, runOn(this, this.rx));
                    }
                    if (this.po != null) {
                        let g = this.po;
                        g.rangeChanged = delegateCombine(g.rangeChanged, runOn(this, this.rx));
                    }
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.cn(this);
                    }
                    if ((this.pp != null && !this.pp.cv()) || (d == null && c != null)) {
                        this.l0(false);
                    }
                    break;
                case HighDensityScatterSeries.$$p[9]:
                    let h = this.pq;
                    this.pq = this.pr;
                    this.r7();
                    if (h != null) {
                        h.rangeChanged = delegateRemove(h.rangeChanged, runOn(this, this.rx));
                    }
                    if (this.pq != null) {
                        let i = this.pq;
                        i.rangeChanged = delegateCombine(i.rangeChanged, runOn(this, this.rx));
                    }
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.cn(this);
                    }
                    if ((this.pr != null && !this.pr.cv()) || (d == null && c != null)) {
                        this.l0(false);
                    }
                    break;
                case "MouseOverEnabled":
                    this.p1 = this.ef;
                    this.l0(false);
                    break;
                case HighDensityScatterSeries.$$p[8]:
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.pw);
                        this.pw = this.ce(this.ro);
                    }
                    break;
                case "XColumn":
                    this.r7();
                    if (this.pp != null && !this.pp.cv()) {
                        this.l0(false);
                    }
                    this.k8();
                    break;
                case HighDensityScatterSeries.$$p[10]:
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.py);
                        this.py = this.ce(this.rs);
                    }
                    break;
                case "YColumn":
                    this.r7();
                    if (this.pr != null && !this.pr.cv()) {
                        this.l0(false);
                    }
                    this.k8();
                    break;
                case HighDensityScatterSeries.$$p[6]:
                    this.r7();
                    this.l0(false);
                    this.k7();
                    break;
                case HighDensityScatterSeries.$$p[3]:
                    this.l0(false);
                    this.k7();
                    break;
                case HighDensityScatterSeries.$$p[1]:
                    this.l0(false);
                    this.k7();
                    break;
                case HighDensityScatterSeries.$$p[0]:
                case HighDensityScatterSeries.$$p[2]:
                    if (!this.pm.b1(this.sm, this.sl)) {
                        return;
                    }
                    this.r1();
                    this.l0(false);
                    this.k7();
                    break;
                case HighDensityScatterSeries.$$p[4]:
                    this.q6 = Math.max(typeGetValue(d) - 1, 0);
                    this.pz = this.q6 > 0;
                    this.l0(false);
                    this.k7();
                    break;
                case HighDensityScatterSeries.$$p[5]:
                    this.l0(false);
                    this.k7();
                    break;
            }
        }
        r1() {
            this.qi = this.sm.l;
            this.ql = this.sm.o;
            this.qk = this.sm.n;
            this.qj = this.sm.m;
            this.qe = this.sl.l;
            this.qh = this.sl.o;
            this.qg = this.sl.n;
            this.qf = this.sl.m;
            this.oo = BrushUtil.g(truncate(this.qi), truncate(this.ql), truncate(this.qk), truncate(this.qj));
            this.oj = BrushUtil.g(truncate(this.qe), truncate(this.qh), truncate(this.qg), truncate(this.qf));
        }
        p3(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        p2(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        rx(a, b) {
            this.r7();
            this.l0(false);
        }
        get qp() {
            return this.qh - this.ql;
        }
        get qo() {
            return this.qg - this.qk;
        }
        get qn() {
            return this.qf - this.qj;
        }
        get qm() {
            return this.qe - this.qi;
        }
        e3(a, b, c) {
            let d = super.e3(a, b, c);
            if (this.pr == null || this.pp == null || this.pp.bh == null || this.pr.bh == null || this.py == null || this.pw == null || this.py.count < 1 || this.pw.count < 1 || this.py.count != this.pw.count || this.pp.kv == this.pp.ku || this.pr.kv == this.pr.ku || this.pf.isEmpty) {
                d = false;
            }
            return d;
        }
        get rd() {
            return this.q7;
        }
        set rd(a) {
            let b = this.q7;
            this.q7 = a;
            this.raisePropertyChanged("ProgressiveStatus", b, this.q7);
        }
        l1(a) {
            super.l1(a);
            this.rz(a, this.bx);
        }
        rz(a, b) {
            if (this.ct(b)) {
                return;
            }
            if (this.pn == null && !this.p5) {
                let c = new List$1(KDPointData.$, 2, this.pw.count);
                let d = this.pp;
                let e = this.pr;
                let f = new Rect(0, 0, 0, 1, 1);
                let g = new Rect(0, 0, 0, 1, 1);
                let h = new ScalerParams(1, f, g, d.cc);
                let i = new ScalerParams(1, f, g, e.cc);
                let j;
                let k;
                for (let l = 0; l < this.pw.count; l++) {
                    j = d.d8(this.pw.item(l), h);
                    k = e.d8(this.py.item(l), i);
                    if (!isNaN_(j) && !isNaN_(k) && !isInfinity(j) && !isInfinity(k)) {
                        c.add(((() => {
                            let $ret = new KDPointData();
                            $ret.a = j;
                            $ret.b = k;
                            $ret.c = l;
                            return $ret;
                        })()));
                    }
                }
                if (this.p4) {
                    this.q2 = 1;
                    this.q3 = truncate(logBase(c.count, 2)) + 3;
                    this.rd = truncate(((this.q2 / this.q3) * 100));
                    if (this.progressiveLoadStatusChanged != null) {
                        this.progressiveLoadStatusChanged(this, new ProgressiveLoadStatusEventArgs(this.rd));
                    }
                    this.pn = KDTree2D.b(c.toArray(), 1);
                    let m = this.pn;
                    m.progressiveThunkCompleted = delegateCombine(m.progressiveThunkCompleted, runOn(this, this.ru));
                    if (!this.pn.f(this.gw)) {
                        let n = this.pn;
                        n.progressiveThunkCompleted = delegateRemove(n.progressiveThunkCompleted, runOn(this, this.ru));
                    }
                    this.k7();
                }
                else {
                    let o = dateNow();
                    this.pn = new KDTree2D(0, c.toArray(), 1);
                    let p = dateNow();
                }
            }
            if (this.p4 && !this.p5) {
                this.r0(b);
            }
            else {
                this.r2(b);
            }
        }
        kk(a, b, c, d) {
            super.kk(a, b, c, d);
            this.r7();
            let e = false;
            if (this.pp != null && !this.pp.cv()) {
                e = true;
            }
            if (this.pr != null && !this.pr.cv()) {
                e = true;
            }
            if (e) {
                this.l0(false);
            }
            this.k8();
        }
        rw(a) {
            let b = a;
            let c = this.q5 * this.q4;
            if (this.p1) {
                if (this._itemIndexes == null || this._itemIndexes.length != c) {
                    this._itemIndexes = new Array(c);
                    for (let d = 0; d < c; d++) {
                        this._itemIndexes[d] = 0;
                    }
                }
                else {
                    for (let e = 0; e < c; e++) {
                        this._itemIndexes[e] = 0;
                    }
                }
            }
        }
        r2(a) {
            let b;
            let c;
            let d = null;
            if (a.q) {
                d = this._itemIndexes;
            }
            let e = a.getViewInfo(c, b);
            c = e.p0;
            b = e.p1;
            let f = a;
            let g = this.getEffectiveViewport1(a);
            this.ps = new ScalerParams(0, b, c, this.po.cc, g);
            this.pt = new ScalerParams(0, b, c, this.pq.cc, g);
            this.rv(a);
            this.rw(a);
            let h = this.q5 * this.q4;
            if (this.pl == null || this.pl.length != h) {
                this.pl = new Array(h);
                this.pi = new Array(h);
            }
            let i = this.pl.length;
            let j = this.pl;
            let k = this.pi;
            for (let l = 0; l < i; l++) {
                j[l] = 0;
                k[l] = 0;
            }
            this.q9 = truncate(Math.round(this.gh));
            this.pk = f.by();
            let m = this.pk.length;
            let n = this.pk;
            for (let o = 0; o < m; o++) {
                n[o] = 0;
            }
            let p = this.q0;
            let q = this.qz;
            if (isNaN_(p) || isInfinity(p)) {
                p = 0;
            }
            if (isNaN_(q) || isInfinity(q)) {
                q = 50;
            }
            this.qc = Math.min(p, q);
            this.qb = Math.max(p, q);
            if (this.qc < 0) {
                this.qc = 0;
            }
            if (this.qb < 0) {
                this.qb = 0;
            }
            this.qd = this.qb - this.qc;
            if (this.p5) {
                this.ry(a);
            }
            else {
                this.r9(a);
            }
            f.b9();
            if (a.q) {
                this._itemIndexes = d;
                this.pm.ca();
            }
        }
        r0(a) {
            if (this.pn == null) {
                return;
            }
            this.r2(a);
        }
        ru(a, b) {
            this.pm.b8(() => {
                if (this.q2 < this.q3 - 1) {
                    this.q2++;
                }
                this.rd = truncate(((this.q2 / this.q3) * 100));
                if (this.progressiveLoadStatusChanged != null) {
                    this.progressiveLoadStatusChanged(this, new ProgressiveLoadStatusEventArgs(this.rd));
                }
                this.r0(this.bx);
                this.k7();
                if (this.pn != null) {
                    if (!this.pn.f(this.gw)) {
                        let c = this.pn;
                        c.progressiveThunkCompleted = delegateRemove(c.progressiveThunkCompleted, runOn(this, this.ru));
                        this.rd = 100;
                        if (this.progressiveLoadStatusChanged != null) {
                            this.progressiveLoadStatusChanged(this, new ProgressiveLoadStatusEventArgs(this.rd));
                        }
                    }
                }
            });
        }
        ry(a) {
            let b = arrayShallowClone(this.pw.asArray());
            this.pp.g5(boxArray$1(b), 0, b.length, this.ps);
            let c = arrayShallowClone(this.py.asArray());
            this.q8 = 0;
            let d = this.q6;
            let e = this.pz;
            let f = this.pl.length;
            this.pr.g5(boxArray$1(c), 0, c.length, this.pt);
            let g = 255 << 24 | truncate(this.ql) << 16 | truncate(this.qk) << 8 | truncate(this.qj);
            for (let h = 0; h < b.length; h++) {
                let i = truncate(b[h]);
                let j = truncate(c[h]);
                i = truncate(Math.floor(i));
                j = truncate(Math.floor(j));
                if (i < 0 || i >= this.q5 || j < 0 || j >= this.q4) {
                    continue;
                }
                if (e) {
                    let k = i - d;
                    let l = i + d;
                    l = l > (this.q5 - 1) ? (this.q5 - 1) : l;
                    k = k < 0 ? 0 : k;
                    let m = j + d;
                    let n = j - d;
                    for (let o = k; o <= l; o++) {
                        for (let p = n; p <= m; p++) {
                            let q = (p * this.q5) + o;
                            if (q < 0 || q > f - 1) {
                                continue;
                            }
                            this.pl[q] = this.pl[q] + 1;
                            this.pi[q] = 1;
                            this.q8++;
                            if (this.p1) {
                                this._itemIndexes[q] = h + 1;
                            }
                        }
                    }
                }
                else {
                    let r = (j * this.q5) + i;
                    this.pl[r] = this.pl[r] + 1;
                    this.pi[r] = 1;
                    this.q8++;
                    if (this.p1) {
                        this._itemIndexes[r] = h + 1;
                    }
                }
            }
            this.r3();
        }
        r9(a) {
            let b;
            let c;
            let d = a.getViewInfo(b, c);
            b = d.p0;
            c = d.p1;
            if (this.pn == null) {
                return;
            }
            if (this.p6 == null) {
                this.p6 = new List$1(KDTreeNode2D.$, 2, truncate(Math.round(b.width * b.height)));
            }
            else {
                this.p6.clear();
            }
            let e = c.left;
            let f = c.right;
            let g = c.top;
            let h = c.bottom;
            this.qw = c.top;
            this.qu = c.height;
            this.qv = c.left;
            this.qx = c.width;
            this.qs = b.top;
            this.qq = b.height;
            this.qr = b.left;
            this.qt = b.width;
            let i = this.getEffectiveViewport1(a);
            this.p8 = (i.left - this.qr) / this.qt;
            this.p9 = (i.top - this.qs) / this.qq;
            let j = (i.right - this.qr) / this.qt;
            this.qa = j - this.p8;
            let k = (i.bottom - this.qs) / this.qq;
            this.p7 = k - this.p9;
            if (this.p0) {
                e = (e - this.p8) / this.qa;
                f = (f - this.p8) / this.qa;
                g = (g - this.p9) / this.p7;
                h = (h - this.p9) / this.p7;
            }
            let l = this.gh / b.width * c.width;
            let m = this.gh / b.height * c.height;
            let n = Math.min(l, m);
            let o = ((() => {
                let $ret = new SearchArgs();
                $ret.c = e;
                $ret.a = f;
                $ret.d = g;
                $ret.b = h;
                $ret.e = l;
                $ret.f = m;
                $ret.g = 0x7FFFFFFF;
                return $ret;
            })());
            this.pn.t(this.p6, o, 0, 1, 0, 1);
            let p;
            this.q8 = 0;
            for (let q = 0; q < this.p6.count; q++) {
                p = this.p6._inner[q];
                this.r4(p);
            }
            this.r3();
        }
        r4(a) {
            if (a.g) {
                return;
            }
            let b = a.e != null && a.e.a;
            let c = a.a == null ? 0 : a.a.length;
            let d = (a.h - c) + 1;
            if (b && d > 0) {
            }
            else {
                d = 1;
            }
            this.r6(a.b, d, b, a.e);
            if (c > 0 && !b) {
                let e;
                for (let f = 0; f < c; f++) {
                    e = a.a[f];
                    this.r6(e, d, false, a.e);
                }
            }
            if (a.e != null) {
                a.e.a = false;
            }
        }
        eh(a) {
            let b = this.ca != null ? this.ca.pg : Rect.empty;
            let c = this.ca != null ? this.ca.pv : Rect.empty;
            let d = new Rect(0, 0, 0, 1, 1);
            let e = this.o9(this.bx);
            let f = new ScalerParams(0, d, d, this.pp.cc, e);
            let g = new ScalerParams(0, d, d, this.pr.cc, e);
            let h = !b.isEmpty && !c.isEmpty && this.ch != null ? this.ch.indexOf(a) : -1;
            let i = this.pp != null && this.pw != null && h < this.pw.count ? this.pp.d8(this.pw.item(h), f) : NaN;
            let j = this.pr != null && this.py != null && h < this.py.count ? this.pr.d8(this.py.item(h), g) : NaN;
            if (!isNaN_(i)) {
                if (i < b.left + 0.1 * b.width) {
                    i = i + 0.4 * b.width;
                    b.x = i - 0.5 * b.width;
                }
                if (i > b.right - 0.1 * b.width) {
                    i = i - 0.4 * b.width;
                    b.x = i - 0.5 * b.width;
                }
            }
            if (!isNaN_(j)) {
                if (j < b.top + 0.1 * b.height) {
                    j = j + 0.4 * b.height;
                    b.y = j - 0.5 * b.height;
                }
                if (j > b.bottom - 0.1 * b.height) {
                    j = j - 0.4 * b.height;
                    b.y = j - 0.5 * b.height;
                }
            }
            if (this.b5 != null) {
                this.b5.ap(this.ca, b, true);
            }
            return h >= 0;
        }
        r6(a, b, c, d) {
            let e = this.rb(b);
            let f = a.c;
            let g = this.q6;
            if (c) {
                let h = d.d;
                let i = d.b;
                let j = d.e;
                let k = d.c;
                if (this.p0) {
                    h = this.p8 + this.qa * h;
                    i = this.p8 + this.qa * i;
                    j = this.p9 + this.p7 * j;
                    k = this.p9 + this.p7 * k;
                }
                let l = truncate((this.qr + this.qt * (h - this.qv) / this.qx));
                let m = truncate((this.qr + this.qt * (i - this.qv) / this.qx));
                let n = truncate((this.qs + this.qq * (j - this.qw) / this.qu));
                let o = truncate((this.qs + this.qq * (k - this.qw) / this.qu));
                l = truncate(Math.floor(l));
                m = truncate(Math.floor(m));
                n = truncate(Math.floor(n));
                o = truncate(Math.floor(o));
                if (this.pz) {
                    l -= g;
                    m += g;
                    n -= g;
                    o += g;
                }
                let p = ((m - l) + 1) * ((o - n) + 1);
                let q = b / p;
                let r = q;
                for (let s = l; s <= m; s++) {
                    for (let t = n; t <= o; t++) {
                        this.r5(f, s, t, q, r);
                    }
                }
            }
            else {
                let u = a.a;
                let v = a.b;
                if (this.p0) {
                    u = this.p8 + this.qa * u;
                    v = this.p9 + this.p7 * v;
                }
                let w = truncate((this.qr + this.qt * (u - this.qv) / this.qx));
                let x = truncate((this.qs + this.qq * (v - this.qw) / this.qu));
                w = truncate(Math.floor(w));
                x = truncate(Math.floor(x));
                if (this.pz) {
                    let y = w - g;
                    let z = w + g;
                    let aa = x + g;
                    let ab = x - g;
                    let ac = ((z - y) + 1) * ((aa - ab) + 1);
                    let ad = b / ac;
                    let ae = ad;
                    for (let af = y; af <= z; af++) {
                        for (let ag = ab; ag <= aa; ag++) {
                            this.r5(f, af, ag, ad, ae);
                        }
                    }
                }
                else {
                    this.r5(f, w, x, b, 1);
                }
            }
        }
        ra(a, b) {
            return truncate((Math.floor(255 * b))) << 24 | truncate(Math.floor(b * (this.ql + a * this.qp))) << 16 | truncate(Math.floor(b * (this.qk + a * this.qo))) << 8 | truncate(Math.floor(b * (this.qj + a * this.qn)));
        }
        rb(a) {
            return 255 << 24 | truncate(Math.floor((this.ql + a * this.qp))) << 16 | truncate(Math.floor((this.qk + a * this.qo))) << 8 | truncate(Math.floor((this.qj + a * this.qn)));
        }
        qy(a) {
            return (a >> 24 & 255) / 255;
        }
        r5(a, b, c, d, e) {
            if (b < 0 || b >= this.q5 || c < 0 || c >= this.q4) {
                return;
            }
            let f = (c * this.q5) + b;
            this.pl[f] = this.pl[f] + d;
            this.pi[f] = this.pi[f] + e;
            if (this.p1) {
                this._itemIndexes[f] = a + 1;
            }
            this.q8 += truncate(d);
        }
        r3() {
            let a = 0;
            let b = 0;
            let c = this.qd;
            let d = this.qc;
            let e = this.qb;
            let f = this.pl.length;
            let g = this.pl;
            let h = this.pi;
            let i = this.pk;
            let j = NaN;
            let k = NaN;
            let l = 0;
            let m = 0;
            for (let n = 0; n < f; n++) {
                a = g[n];
                if (a != 0) {
                    b = h[n];
                    if (a >= e) {
                        a = 1;
                    }
                    else if (a <= d) {
                        a = 0;
                    }
                    else {
                        a = (a - d) / (c);
                    }
                    if (b > 1) {
                        b = 1;
                    }
                    if (b < 0.2) {
                        b = 0.2;
                    }
                    if (j != a || k != b) {
                        l = this.ra(a, b);
                        j = a;
                        k = b;
                    }
                    i[m] = l >> 16 & 255;
                    i[m + 1] = l >> 8 & 255;
                    i[m + 2] = l & 255;
                    i[m + 3] = l >> 24 & 255;
                }
                m += 4;
            }
        }
        rv(a) {
            let b = a;
            b.b6();
        }
        bu() {
            return new HighDensityScatterSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.pm = a;
        }
        ap(a) {
            if (a != null && a == this.pp && this.pw != null) {
                return new AxisRange(this.pw.minimum, this.pw.maximum);
            }
            if (a != null && a == this.pr && this.py != null) {
                return new AxisRange(this.py.minimum, this.py.maximum);
            }
            return null;
        }
        mm(a, b) {
            if (this.ca != null) {
                let c = this.getEffectiveViewport1(this.bx);
                this.p0 = !c.isEmpty;
            }
            this.l0(false);
        }
        mn(a, b) {
            this.l0(false);
        }
        hh(a) {
            if (!this.p1 || this._itemIndexes == null || this.ca == null || this.ch == null || this._itemIndexes.length != (this.q5 * this.q4)) {
                return null;
            }
            let b = this.ca.pg;
            let c = (a.x - b.left) / b.width;
            let d = (a.y - b.top) / b.height;
            let e = truncate(Math.round(this.pf.left + (this.pf.width * c)));
            let f = truncate(Math.round(this.pf.top + (this.pf.height * d)));
            let g = this.re(e, f);
            if (g < 0 || g > this._itemIndexes.length - 1) {
                return null;
            }
            let h = this._itemIndexes[g] - 1;
            if (h < 0 || h > this.ch.count) {
                return null;
            }
            return this.ch.item(h);
        }
        re(a, b) {
            let c = (this.q5 * b) + a;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            let d = 1;
            c = (this.q5 * (b - d)) + a;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.q5 * (b + d)) + a;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.q5 * (b)) + a - 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.q5 * (b)) + a + 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.q5 * (b - d)) + a - 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.q5 * (b + d)) + a + 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.q5 * (b - d)) + a + 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.q5 * (b + d)) + a - 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            return 0;
        }
        r8(a, b, c) {
            this.pk = a;
            this.q5 = b;
            this.q4 = c;
        }
        get_ex() {
            return true;
        }
        set_ex(a) {
            super.set_ex(a);
        }
        kh(a, b) {
            super.kh(a, b);
            this.pm.b7();
            if (this.bw != null) {
                this.bw.b7();
            }
            this.k7();
        }
        l2(a, b) {
            super.l2(a, b);
            if (!this.et) {
                this.bx.a2(b);
                return;
            }
            this.bx.a2(b);
            if (this.ct(this.bw)) {
                return;
            }
            let c = typeCast(HighDensityScatterSeriesView.$, this.bw);
            let d = new ScatterFrame();
            this.rz(false, c);
            this.et = false;
        }
        lz(a, b, c, d, e) {
            super.lz(a, b, c, d, e);
            let f = this.a4.a$h.item(d);
            let g = f;
            f.a1(c);
            if (this.ct(g)) {
                return;
            }
            if (this.pu == null) {
                this.pu = new ScatterFrame();
            }
            this.rz(false, f);
        }
        ke() {
            super.ke();
            this.pp = null;
            this.pr = null;
        }
    }
    HighDensityScatterSeries.$t = /*@__PURE__*/ markType(HighDensityScatterSeries, 'HighDensityScatterSeries', Series.$);
    HighDensityScatterSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, HighDensityScatterSeries, 'raisePropertyChanged', ['HeatMaximumColor:sl:sa', [Color.$, Defaults.ap], 'HeatMaximum:qz:sb', [1, 50], 'HeatMinimumColor:sm:sc', [Color.$, Defaults.aq], 'HeatMinimum:q0:sd', [1, 0], 'PointExtent:rc:se', [1, 1], 'ProgressiveLoad:p4:sf', [0, true], 'UseBruteForce:p5:sg', [0, false], 'XAxis:pp:sh', [NumericXAxis.$, null], 'XMemberPath:ro:si', [2, null], 'YAxis:pr:sj', [NumericYAxis.$, null], 'YMemberPath:rs:sk', [2, null]]);
    return HighDensityScatterSeries;
})();
/**
 * @hidden
 */
export let HighDensityScatterSeriesView = /*@__PURE__*/ (() => {
    class HighDensityScatterSeriesView extends SeriesView {
        constructor(a) {
            super(a);
            this.bz = null;
            this.bx = null;
            this.b5 = 0;
            this.b4 = 0;
            this.b2 = null;
            this.b3 = null;
            this.b0 = null;
            this.bz = a;
        }
        as() {
            super.as();
            if (!this.q) {
                this.bz.gh = Defaults.q;
                this.bz.sm = Defaults.aq;
                this.bz.sl = Defaults.ap;
                this.bz.oj = Defaults.al;
                this.bz.oo = Defaults.ak;
            }
        }
        ca() {
            this.bz.r8(this.bx, this.b5, this.b4);
        }
        b6() {
            if (this.b2 == null) {
                this.b2 = this.e.gw.createElement("canvas");
                let a = this.e.gw.get2DCanvasContext(this.b2);
                this.b0 = new RenderingContext(new CanvasViewRenderer(), a);
            }
            let b;
            if (this.p) {
                b = this.bu;
            }
            else {
                b = this.e.ca.pl();
            }
            let c = truncate(Math.round(b.left));
            let d = truncate(Math.round(b.top));
            let e = truncate(Math.round(b.width));
            let f = truncate(Math.round(b.height));
            let g = this.b5;
            let h = this.b4;
            this.b5 = e;
            this.b4 = f;
            if (g != this.b5 || h != this.b4 || this.bx == null) {
                this.b2.setAttribute("width", e.toString());
                this.b2.setAttribute("height", f.toString());
                this.b3 = this.b0.g().getImageData(0, 0, e, f);
                let imageDataArray_ = this.b3.data;
                this.bx = imageDataArray_;
            }
            this.bz.r8(this.bx, this.b5, this.b4);
        }
        by() {
            return this.bx;
        }
        b9() {
            let a = truncate(Math.round(this.bu.left));
            let b = truncate(Math.round(this.bu.left));
            let c = truncate(Math.round(this.bu.width));
            let d = truncate(Math.round(this.bu.height));
            this.b0.g().putImageData(this.b3, 0, 0);
            this.aq();
        }
        b8(a) {
            if (this.e.gw != null) {
                this.e.gw.setTimeout(a, 0);
            }
            else {
                window.setTimeout(a, 0);
            }
        }
        a6(a, b) {
            super.a6(a, b);
            if (b) {
                if (!this.bz.ef) {
                    return;
                }
                let c = new Rectangle();
                c.n = this.bu.left;
                c.o = this.bu.top;
                c.width = this.bu.width;
                c.height = this.bu.height;
                c._fill = this.bo();
                a.v(c);
                return;
            }
            if (this.b2 == null) {
                return;
            }
            let d = truncate(Math.round(this.bu.left));
            let e = truncate(Math.round(this.bu.top));
            let f = truncate(Math.round(this.bu.width));
            let g = truncate(Math.round(this.bu.height));
            this.k.n(this.b2.getNativeElement(), this.e._opacity, d, e, f, g, d, e, f, g);
        }
        b1(a, b) {
            return Color.e(toNullable(Color.$, a), toNullable(Color.$, null)) && Color.e(toNullable(Color.$, b), toNullable(Color.$, null));
        }
        b7() {
            if (this.bx != null) {
                for (let a = 0; a < this.bx.length; a++) {
                    this.bx[a] = 0;
                }
                this.b9();
            }
        }
        al(a) {
            super.al(a);
            if (this.bx == null) {
                this.e.a6.exportSeriesPixelsData(a, null, this.b5, this.b4);
                return;
            }
            let b = new Array(intDivide(this.bx.length, 4));
            let c;
            for (let d = 0; d < intDivide(this.bx.length, 4); d++) {
                c = d * 4;
                b[d] = this.bx[c + 3] << 24 | this.bx[c] << 16 | this.bx[c + 1] << 8 | this.bx[c + 2];
            }
            this.e.a6.exportSeriesPixelsData(a, b, this.b5, this.b4);
        }
    }
    HighDensityScatterSeriesView.$t = /*@__PURE__*/ markType(HighDensityScatterSeriesView, 'HighDensityScatterSeriesView', SeriesView.$);
    return HighDensityScatterSeriesView;
})();
//# sourceMappingURL=HighDensityScatterSeries_combined.js.map
