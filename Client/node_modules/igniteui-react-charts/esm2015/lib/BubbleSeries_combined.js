/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ScatterBase } from "./ScatterBase";
import { IScaleLegendSeries_$type } from "igniteui-react-core";
import { ISupportsSizeScale_$type } from "./ISupportsSizeScale";
import { ISupportsFillScale_$type } from "./ISupportsFillScale";
import { List$1 } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { Base, typeCast, Point_$type, fromEnum, markType, markDep, enumGetBox, runOn } from "igniteui-react-core";
import { ActualRange } from "./ActualRange";
import { DependencyProperty } from "igniteui-react-core";
import { SizeScale } from "./SizeScale";
import { BrushScale } from "./BrushScale";
import { ScatterFrame } from "./ScatterFrame";
import { IChartLegend_$type } from "igniteui-react-core";
import { ValueBrushScale } from "./ValueBrushScale";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { ScatterBaseView } from "./ScatterBaseView";
import { ScalerParams } from "./ScalerParams";
import { OwnedPoint } from "./OwnedPoint";
import { Dictionary$2 } from "igniteui-react-core";
import { BubbleMarkerManager } from "./BubbleMarkerManager";
import { IChartItemLegend_$type } from "igniteui-react-core";
import { IChartScaleLegend_$type } from "igniteui-react-core";
import { ContentControl } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, isInfinity, logBase } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { BrushSelectionMode_$type } from "./BrushSelectionMode";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Defaults } from "./Defaults";
/**
 * @hidden
 */
export let BubbleSeries = /*@__PURE__*/ (() => {
    class BubbleSeries extends ScatterBase {
        constructor() {
            super();
            this.vk = null;
            this.vj = null;
            this.uj = null;
            this.ub = null;
            this.ua = null;
            this.t9 = null;
            this.ab = BubbleSeries.$;
            this.rh = new ScatterFrame();
            this.rj = new ScatterFrame();
            this.rf = new ScatterFrame();
        }
        get_c0() {
            return true;
        }
        bu() {
            return new BubbleSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.t7 = a;
        }
        gi() {
            return 0.7;
        }
        pl() {
            if (this.pk == 0) {
                return 2;
            }
            return super.pl();
        }
        isAttachedTo(a) {
            return this.a0 == a;
        }
        cz() {
            return true;
        }
        kt(a) {
            super.kt(a);
            if (this.ue != null && this.uj != null && this.uj.count > 0) {
                for (let b = 0; b < this.uj.count; b++) {
                    a(this.uj._inner[b]);
                }
            }
        }
        get ud() {
            return this.uf;
        }
        vi(a) {
            let b = typeCast(CustomPaletteBrushScale.$, this.t6);
            let c = typeCast(ValueBrushScale.$, this.t6);
            let d = this.t6;
            if (b != null && this.ch != null) {
                return b.getBrush1(a, this.ch.count);
            }
            else if (c != null) {
                return c.getBrushByIndex(a, this.uc);
            }
            else if (d != null) {
                return d.getBrush(a);
            }
            return null;
        }
        get legendReady() {
            return this.uf != null && this.uf.count != 0;
        }
        get minScaleText() {
            let a = this.t5(this.t8).b;
            return (Math.round(a * 1000) / 1000).toString();
        }
        get maxScaleText() {
            let a = this.t5(this.t8).a;
            return (Math.round(a * 1000) / 1000).toString();
        }
        forScaleColors(a) {
            for (let b = 0; b < this.uf.count; b++) {
                if (this.t6 == null || !this.t6.isReady) {
                    return false;
                }
                let c = NaN;
                if (this.uc != null) {
                    c = (this.uc.item(b) - this.uc.minimum) / (this.uc.maximum - this.uc.minimum);
                }
                let d = (this.uf.item(b) - this.uf.minimum) / (this.uf.maximum - this.uf.minimum);
                if (isNaN_(c)) {
                    c = 0;
                }
                if (isNaN_(d)) {
                    d = c;
                }
                let e = this.qr;
                let f = this.vi(b);
                let g = f != null ? f : e;
                a(g, d);
            }
            return true;
        }
        hk(a, b) {
            let c = this.ja(b);
            if (c == BubbleSeries.$$p[3]) {
                return this.hl(a, b, this.uu);
            }
            if (c == BubbleSeries.$$p[7]) {
                return this.hl(a, b, this.u0);
            }
            if (c == ScatterBase.$$p[8]) {
                return this.hl(a, b, this.so);
            }
            if (c == ScatterBase.$$p[10]) {
                return this.hl(a, b, this.ss);
            }
            if (c == BubbleSeries.$$p[0]) {
                return this.hl(a, b, this.up);
            }
            return super.hk(a, b);
        }
        get uf() {
            return this.ub;
        }
        set uf(a) {
            if (this.ub != a) {
                let b = this.uf;
                this.ub = a;
                this.raisePropertyChanged("RadiusColumn", b, this.uf);
            }
        }
        get ue() {
            return this.ua;
        }
        set ue(a) {
            if (this.ua != a) {
                let b = this.ue;
                this.ua = a;
                this.raisePropertyChanged("LabelColumn", b, this.ue);
            }
        }
        get uc() {
            return this.t9;
        }
        set uc(a) {
            if (this.t9 != a) {
                let b = this.uc;
                this.t9 = a;
                this.raisePropertyChanged("FillColumn", b, this.uc);
            }
        }
        sv(a, b, c, d, e) {
            if (c <= this.sc) {
                b.g = new Dictionary$2(Base.$, OwnedPoint.$, 1, c);
            }
            let f = this.sc;
            let g = this.ch;
            let h;
            let i;
            let j = this.getEffectiveViewport1(a);
            let k = new ScalerParams(0, d, e, this.rb.d, j);
            let l = new ScalerParams(0, d, e, this.rb.e, j);
            let m = false;
            let n = 0;
            if (this.ca != null) {
                if (this.ca.ei()) {
                    let o = this.ca.i1(d, k);
                    m = o.c;
                    n = o.d;
                }
            }
            for (let p = 0; p < c; p++) {
                h = this.rr.item(p);
                i = this.rs.item(p);
                let q = { $type: Point_$type, x: this.rb.a.d8(h, k), y: this.rb.b.d8(i, l) };
                if (m) {
                    if (q.x < e.left || q.x > e.right) {
                        if (q.x + n >= e.left && q.x + n <= e.right) {
                            q = { $type: Point_$type, x: q.x + n, y: i };
                        }
                    }
                }
                if (!isInfinity(q.x) && !isInfinity(q.y)) {
                    let r = g.item(p);
                    if (c <= f) {
                        if (!b.g.containsKey(r)) {
                            let s = { $type: Point_$type, x: h, y: i };
                            b.g.addItem(r, ((() => {
                                let $ret = new OwnedPoint();
                                $ret.a = r;
                                $ret.b = s;
                                $ret.c = q;
                                return $ret;
                            })()));
                        }
                    }
                }
            }
        }
        s3(a, b) {
            let c = typeCast(BubbleSeriesView.$, b);
            let d = c.cv;
            d.m = this.uf;
            super.s3(a, b);
            let e = Math.min(this.rr != null ? this.rr.count : 0, this.rs != null ? this.rs.count : 0);
            if (e < 1) {
                return;
            }
            c.dh();
            c.di();
        }
        u5() {
            if (this.ca == null) {
                return;
            }
            if (this.a0 == null) {
                return;
            }
            if (this.a0.isItemwise) {
                let a = this.a0;
                this.a0.clearLegendItemsForSeries(this);
                this.u4();
                a.renderItemwiseContent(this);
            }
            if (this.a0.isScale) {
                let b = this.a0;
                b.restoreOriginalState();
                b.initializeLegend(this);
            }
        }
        static uk(a, b, c, d, e) {
            if (e <= a || isNaN_(e) || isInfinity(e)) {
                return c;
            }
            if (e >= b) {
                return d;
            }
            let f = c + ((d - c) / (b - a)) * (e - a);
            return f;
        }
        static ul(a, b, c, d, logBase_, e) {
            let f = logBase(e, logBase_);
            let g = logBase(a, logBase_);
            let h = logBase(b, logBase_);
            return BubbleSeries.uk(g, h, c, d, f);
        }
        e3(a, b, c) {
            let d = super.e3(a, b, c);
            if (this.uf == null || this.ch == null || this.uf.count == 0 || this.ch.count != this.uf.count) {
                d = false;
            }
            return d;
        }
        r0(a, b) {
            if (b != 3) {
                return true;
            }
            if (a == null) {
                return true;
            }
            if (this.so == a || this.ss == a || this.u0 == a) {
                return true;
            }
            return false;
        }
        u4() {
            let a = typeCast(IChartLegend_$type, this.a0);
            if (a == null || this.ch == null) {
                return;
            }
            this.uj = new List$1(UIElement.$, 0);
            let b = typeCast(CustomPaletteBrushScale.$, this.t6);
            let c = typeCast(ValueBrushScale.$, this.t6);
            let d = this.t6;
            let e = this.t4();
            let f = e.b;
            let g = e.a;
            let h = this.ch;
            for (let i = 0; i < h.count; i++) {
                let j = null;
                if (c != null && this.uc != null) {
                    let k = this.uc.item(i);
                    j = c.getBrushByRange(k, f, g);
                }
                else if (b != null) {
                    j = b.getBrush1(i, h.count);
                }
                else if (d != null) {
                    j = d.getBrush(i);
                }
                let l = new ContentControl();
                let m = this.ue != null && this.ue.item(i) != null ? this.ue.item(i).toString() : "";
                l.content = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this;
                    $ret.item = h.item(i);
                    $ret.itemBrush = j;
                    $ret.itemLabel = m;
                    return $ret;
                })());
                let n = this.mt;
                if (n == null) {
                    n = this.bx.bl(this.b2);
                }
                l.ah = n;
                this.uj.add(l);
            }
        }
        kk(a, b, c, d) {
            super.kk(a, b, c, d);
            if (this.t8 != null) {
                this.t8.aa();
            }
            if (this.t6 != null) {
                this.t6.x();
            }
            this.u5();
        }
        k0() {
            super.k0();
            this.u5();
        }
        k6() {
            super.k6();
            this.u5();
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case "FastItemsSource":
                    if (this.t8 != null) {
                        this.t8.aa();
                    }
                    if (this.t6 != null) {
                        this.t6.x();
                    }
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.uf);
                        c.deregisterColumn(this.uc);
                        c.deregisterColumn(this.ue);
                        this.uf = null;
                        this.uc = null;
                        this.ue = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.uf = this.ce(this.u0);
                        if (!stringIsNullOrEmpty(this.up)) {
                            this.uc = this.ce(this.up);
                        }
                        this.ue = this.cg(this.uu);
                    }
                    this.l0(false);
                    this.u5();
                    break;
                case BubbleSeries.$$p[7]:
                    if (this.t8 != null) {
                        this.t8.aa();
                    }
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.uf);
                        this.uf = this.ce(this.u0);
                        this.u5();
                    }
                    break;
                case "RadiusColumn":
                    if (this.t8 != null) {
                        this.t8.aa();
                    }
                    this.rc.cx.g$i();
                    this.l0(false);
                    this.k8();
                    break;
                case BubbleSeries.$$p[8]:
                    if (c != null) {
                        c.l.remove(this);
                        c.aa();
                    }
                    if (d != null) {
                        d.l.add(this);
                        d.aa();
                    }
                    this.l0(false);
                    this.k7();
                    break;
                case BubbleSeries.$$p[9]:
                    this.l0(false);
                    this.k7();
                    break;
                case "DiscreteLegendItemTemplate":
                    this.u5();
                    break;
                case BubbleSeries.$$p[1]:
                    if (c != null) {
                        c.o.remove(this);
                        c.x();
                    }
                    if (d != null) {
                        d.o.add(this);
                        d.x();
                    }
                    this.l0(false);
                    this.u5();
                    this.k7();
                    break;
                case BubbleSeries.$$p[2]:
                case BubbleSeries.$$p[6]:
                case BubbleSeries.$$p[5]:
                case BubbleSeries.$$p[4]:
                    this.l0(false);
                    this.u5();
                    this.k7();
                    break;
                case "FillColumn":
                    this.l0(false);
                    this.k7();
                    break;
                case BubbleSeries.$$p[0]:
                    if (this.t6 != null) {
                        this.t6.x();
                    }
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.uc);
                        this.uc = this.ce(this.up);
                        this.u5();
                    }
                    break;
                case BubbleSeries.$$p[3]:
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.ue);
                        this.ue = this.cg(this.uu);
                        this.u5();
                    }
                    break;
                case "ActualLegend":
                    let e = typeCast(IChartLegend_$type, c);
                    if (e != null && e.isItemwise) {
                        let f = typeCast(IChartItemLegend_$type, e);
                        f.clearLegendItemsForSeries(this);
                    }
                    if (e != null && e.isScale) {
                        let g = typeCast(IChartScaleLegend_$type, e);
                        let h = true;
                        let i = null;
                        if (this.ca != null) {
                            for (let j of fromEnum(this.ca.series)) {
                                if (j.legend == g) {
                                    i = j;
                                    h = false;
                                }
                            }
                        }
                        if (h) {
                            g.restoreOriginalState();
                        }
                        else {
                            g.initializeLegend(typeCast(IScaleLegendSeries_$type, i));
                        }
                    }
                    this.u5();
                    break;
                case "SeriesViewer":
                    this.u5();
                    break;
            }
        }
        updateSizeScaleGlobals() {
            let a = new ActualRange();
            a.b = NaN;
            a.a = NaN;
            if (this.uf != null) {
                a.b = this.uf.minimum;
                a.a = this.uf.maximum;
            }
            if (this.t8 != null) {
                this.t8.ab(a.b, a.a);
            }
        }
        updateFillScaleGlobals() {
            let a = new ActualRange();
            a.b = NaN;
            a.a = NaN;
            if (this.uc != null) {
                a.b = this.uc.minimum;
                a.a = this.uc.maximum;
            }
            if (this.t6 != null) {
                this.t6.z(a.b, a.a);
            }
        }
        t5(a) {
            let b = new ActualRange();
            b.b = NaN;
            b.a = NaN;
            if (this.uf != null) {
                b.b = this.uf.minimum;
                b.a = this.uf.maximum;
            }
            if (a != null) {
                a.x();
                if (this.ui) {
                    b.b = a.globalMinimum;
                    b.a = a.globalMaximum;
                }
            }
            return b;
        }
        t4() {
            let a = new ActualRange();
            a.b = NaN;
            a.a = NaN;
            if (this.uc != null) {
                a.b = this.uc.minimum;
                a.a = this.uc.maximum;
            }
            let b = typeCast(ValueBrushScale.$, this.t6);
            if (b != null) {
                b.s();
                if (this.ug && this.t6.o.count > 1) {
                    a.b = b.q;
                    a.a = b.p;
                }
            }
            return a;
        }
        u7(a, b, c, d) {
            let e = c.width;
            if (!this.bx.bu.isEmpty) {
                e = this.bx.bu.width;
            }
            else if (this.ca != null && !this.ca.pv.isEmpty) {
                e = this.ca.pv.width;
            }
            let f = DeviceUtils.c(e);
            let g = this.t8 || ((() => {
                let $ret = new SizeScale();
                $ret.minimumValue = f / 10;
                $ret.maximumValue = f / 5;
                return $ret;
            })());
            if (g != null) {
                let h = g.minimumValue;
                let i = g.maximumValue;
                let j = g.logarithmBase;
                let k = this.t5(g);
                let l = k.b;
                let m = k.a;
                if (g.isLogarithmic) {
                    for (let n = 0; n < b.count; n++) {
                        b._inner[n] = BubbleSeries.ul(l, m, h, i, j, b._inner[n]);
                    }
                }
                else {
                    for (let o = 0; o < b.count; o++) {
                        b._inner[o] = BubbleSeries.uk(l, m, h, i, b._inner[o]);
                    }
                }
            }
            let p = 1;
            p = DeviceUtils.d();
            let q = this.t8 == null;
            if (d) {
                let r = c.width / e;
                for (let s = 0; s < b.count; s++) {
                    if (q) {
                        b._inner[s] = b._inner[s] / p;
                    }
                    b._inner[s] = b._inner[s] * r;
                }
            }
            for (let t = 0; t < a.count; t++) {
                let u = a._inner[t];
                if (q && !d) {
                    u.width = Math.max(0, b._inner[t] / p);
                    u.height = Math.max(0, b._inner[t] / p);
                }
                else {
                    u.width = Math.max(0, b._inner[t]);
                    u.height = Math.max(0, b._inner[t]);
                }
            }
        }
        u6(a) {
            let b = typeCast(BubbleSeriesView.$, this.bw);
            this.t7.b3 = false;
            if (b != null) {
                b.b3 = false;
            }
            let c = typeCast(CustomPaletteBrushScale.$, this.t6);
            let d = typeCast(ValueBrushScale.$, this.t6);
            let e = this.t6;
            let f = this.t4();
            let g = f.b;
            let h = f.a;
            let i = this.t6 == null || !this.t6.isReady || (d != null && this.up == null);
            if (i) {
                this.t7.dg();
                if (b != null) {
                    b.dg();
                }
                return;
            }
            this.t7.b3 = true;
            if (b != null) {
                b.b3 = true;
            }
            let j = a.count;
            let k = this.ch;
            for (let l = 0; l < j; l++) {
                let m = a._inner[l];
                let n = typeCast(DataContext.$, m.content);
                if (n != null) {
                    let o = null;
                    let p = k.indexOf(n.item);
                    if (c != null) {
                        o = c.getBrush1(p, k.count);
                    }
                    else if (d != null && this.uc != null) {
                        let q = this.uc.item(p);
                        o = d.getBrushByRange(q, g, h);
                    }
                    else if (e != null) {
                        o = e.getBrush(p);
                    }
                    else {
                        if (this.qt == null) {
                            o = this.qr;
                        }
                        else {
                            o = this.qt;
                        }
                    }
                    let r = null;
                    if (this.qu == null) {
                        r = this.qs;
                    }
                    else {
                        r = this.qu;
                    }
                    if (this.uh && o != null) {
                        r = o;
                    }
                    if (r != null && !isNaN_(this.un)) {
                        r = BrushUtil.l(r, this.un);
                    }
                    if (o != null && !isNaN_(this.um)) {
                        o = BrushUtil.l(o, this.um);
                    }
                    n.itemBrush = o;
                    n.actualItemBrush = o;
                    n.outline = r;
                }
            }
        }
        get actualMarkerBrush() {
            return this.qr;
        }
    }
    BubbleSeries.$t = /*@__PURE__*/ markType(BubbleSeries, 'BubbleSeries', ScatterBase.$, [IScaleLegendSeries_$type, ISupportsSizeScale_$type, ISupportsFillScale_$type]);
    BubbleSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, BubbleSeries, 'raisePropertyChanged', ['FillMemberPath:up:u8', [2], 'FillScale:t6:u9', [BrushScale.$], 'FillScaleUseGlobalValues:ug:va', [0, false], 'LabelMemberPath:uu:vb', [2], 'MarkerBrushBrightness:um:vc', [1, NaN], 'MarkerOutlineBrightness:un:vd', [1, NaN], 'MarkerOutlineUsesFillScale:uh:ve', [0, false], 'RadiusMemberPath:u0:vf', [2, null], 'RadiusScale:t8:vg', [SizeScale.$], 'RadiusScaleUseGlobalValues:ui:vh', [0, false]]);
    return BubbleSeries;
})();
/**
 * @hidden
 */
export let CustomPaletteBrushScale = /*@__PURE__*/ (() => {
    class CustomPaletteBrushScale extends BrushScale {
        constructor() {
            super();
        }
        getBrush1(a, b) {
            if (this.brushes == null || this.brushes.count == 0) {
                return null;
            }
            if (this.brushSelectionMode == 0) {
                return super.getBrush(a % this.brushes.count);
            }
            let c = BubbleSeries.uk(0, b - 1, 0, this.brushes.count - 1, a);
            return this.ab(c);
        }
        get_isReady() {
            return this.brushes != null && this.brushes.count > 0;
        }
    }
    CustomPaletteBrushScale.$t = /*@__PURE__*/ markType(CustomPaletteBrushScale, 'CustomPaletteBrushScale', BrushScale.$);
    CustomPaletteBrushScale.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CustomPaletteBrushScale, 'v', ['BrushSelectionMode', [BrushSelectionMode_$type, /*@__PURE__*/ enumGetBox(BrushSelectionMode_$type, 0)]]);
    return CustomPaletteBrushScale;
})();
/**
 * @hidden
 */
export let BubbleSeriesView = /*@__PURE__*/ (() => {
    class BubbleSeriesView extends ScatterBaseView {
        constructor(a) {
            super(a);
            this.df = null;
            this.df = a;
            this.cx = new ScatterTrendLineManager();
        }
        as() {
            super.as();
            if (!this.q) {
                this.b1.pr = Defaults.e;
            }
        }
        cu() {
            return new BubbleMarkerManager((a) => this.cy.item(a), (a) => this.cw.rb.c.item(a), runOn(this, this.c9), runOn(this, this.cr), runOn(this, this.cz));
        }
        dh() {
            let a = this.cv;
            this.df.u7(a.n, a.o, this.bu, this == this.e.bw);
            this.aq();
        }
        di() {
            let a = this.cv;
            this.df.u6(a.n);
        }
        dg() {
            let a = this.cv;
            for (let b of fromEnum(a.n)) {
                let c = typeCast(DataContext.$, b.content);
                if (c != null) {
                    c.itemBrush = null;
                    c.outline = null;
                }
            }
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'><span";
            let b = this.e.a4.a$r(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.df.hp + "</span><br/><span>" + "(${item." + this.df.so + "}, ${item." + this.df.ss + "})</span>";
            if (!stringIsNullOrEmpty(this.df.u0)) {
                a += "<span>, Radius: ${item." + this.df.u0 + "}</span>";
            }
            a += "</div>";
            return a;
        }
    }
    BubbleSeriesView.$t = /*@__PURE__*/ markType(BubbleSeriesView, 'BubbleSeriesView', ScatterBaseView.$);
    return BubbleSeriesView;
})();
//# sourceMappingURL=BubbleSeries_combined.js.map
