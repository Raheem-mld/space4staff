/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { RadialBucketCalculator } from "./RadialBucketCalculator";
import { markType, Point_$type, enumGetBox, typeCast, runOn, markDep } from "igniteui-react-core";
import { isNaN_, intDivide, isInfinity } from "igniteui-react-core";
import { RadialBase } from "./RadialBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { RadialFrame } from "./RadialFrame";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { NumericAxisBase } from "./NumericAxisBase";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { RadialBaseView } from "./RadialBaseView";
import { CollisionAvoider } from "./CollisionAvoider";
import { Clipper } from "igniteui-react-core";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { RadialTrendLineManager } from "./RadialTrendLineManager";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { PropertyMetadata } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let AnchoredRadialBucketCalculator = /*@__PURE__*/ (() => {
    class AnchoredRadialBucketCalculator extends RadialBucketCalculator {
        constructor(a) {
            super(a);
            this.f = null;
            this.f = a;
        }
        getBucket(a) {
            let b = this.f.cw.si;
            let c = Math.min(a * this.b, b.count - 1);
            let d = Math.min(c + this.b - 1, b.count - 1);
            let e = NaN;
            let f = NaN;
            for (let g = c; g <= d; ++g) {
                let h = b.item(g);
                if (!isNaN_(e)) {
                    if (!isNaN_(h)) {
                        e = Math.min(e, h);
                        f = Math.max(f, h);
                    }
                }
                else {
                    e = h;
                    f = h;
                }
            }
            if (!isNaN_(e)) {
                return [0.5 * (c + d), e, f];
            }
            return [0.5 * (c + d), NaN, NaN];
        }
    }
    AnchoredRadialBucketCalculator.$t = /*@__PURE__*/ markType(AnchoredRadialBucketCalculator, 'AnchoredRadialBucketCalculator', RadialBucketCalculator.$);
    return AnchoredRadialBucketCalculator;
})();
/**
 * @hidden
 */
export let AnchoredRadialSeries = /*@__PURE__*/ (() => {
    class AnchoredRadialSeries extends RadialBase {
        constructor() {
            super();
            this.sd = null;
            this.sh = null;
            this.te = { $type: Point_$type, x: 0, y: 0 };
            this.sf = null;
            this.se = null;
            this.sf = new RadialFrame(3);
            this.sd = new CategoryLineRasterizer();
        }
        bu() {
            return new AnchoredRadialSeriesView(this);
        }
        ke() {
            super.ke();
            this.qz = null;
            this.q6 = null;
        }
        hk(a, b) {
            let c = this.ja(b);
            if (c == AnchoredRadialSeries.$$p[0]) {
                return this.hl(a, b, this.su);
            }
            return super.hk(a, b);
        }
        lh(a) {
            super.lh(a);
            this.sc = a;
        }
        g6(a, b) {
            return this.g7(a, b, this.qz, null, this.si);
        }
        g4(a, b) {
            return this.g5(a, b, this.qz, null, this.si);
        }
        fu(a, b, c, d, e) {
            if (this.si == null) {
                return Number.POSITIVE_INFINITY;
            }
            return this.fv(a, b, this.qz, d, e, this.si.count, null);
        }
        f8(a, b, c) {
            let d = this.getEffectiveViewport1(this.bx);
            let e = this.sn(this.qz, this.bx.bv, this.bx.bu, d);
            let f = new ScalerParams(0, this.bx.bv, this.bx.bu, this.qz.cc, d);
            f.c = this.ca.pv;
            return this.ga(this.si, a, this.qz, f, e, null, b, c);
        }
        o2(a, b, c) {
            if (this.q6 == null || this.qz == null || this.bx == null || this.bx.bv.isEmpty || this.bx.bu.isEmpty) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            let d = this.getEffectiveViewport1(this.bx);
            let e = new ScalerParams(0, this.bx.bv, this.bx.bu, this.q6.cc, d);
            e.c = this.getEffectiveViewport1(this.bx);
            let f = this.f8(a, b, c);
            f = this.q6.d8(f, e);
            let g = this.q7.c(a);
            if (!b && this.qz != null) {
                let h = this.g6(a, c);
                let i = this.g4(a, c);
                let j = this.sn(this.qz, this.bx.bv, this.bx.bu, d);
                let k = new ScalerParams(0, this.bx.bv, this.bx.bu, this.qz.cc, d);
                k.c = this.ca.pv;
                let l = this.fu(a, h, this.qz, k, j);
                let m = this.fu(a, i, this.qz, k, j);
                if (m <= l) {
                    g = this.qz.d8(i, k) + j;
                }
                else {
                    g = this.qz.d8(h, k) + j;
                }
            }
            let n = this.q7.d(g, f, this.bx.bv, this.bx.bu);
            let o = this.q7.e(g, f, this.bx.bv, this.bx.bu);
            return { $type: Point_$type, x: n, y: o };
        }
        get si() {
            return this.sh;
        }
        set si(a) {
            if (this.sh != a) {
                let b = this.sh;
                this.sh = a;
                this.raisePropertyChanged("ValueColumn", b, this.sh);
            }
        }
        get ta() {
            return this.c(AnchoredRadialSeries.s1);
        }
        set ta(a) {
            this.h(AnchoredRadialSeries.s1, a);
        }
        ap(a) {
            if (a != null && a == this.qz && this.si != null && this.si.count > 0) {
                return new AxisRange(0, this.si.count - 1);
            }
            if (a != null && a == this.q6 && this.si != null && this.si.count > 0) {
                return new AxisRange(this.si.minimum, this.si.maximum);
            }
            return null;
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            if (this.sc.cx.g$b(a, b, c, d)) {
                this.l0(false);
                this.k7();
            }
            let e = typeCast(NumericAxisBase.$, this.q6);
            switch (b) {
                case "FastItemsSource":
                    if (typeCast(IFastItemsSource_$type, c) !== null) {
                        c.deregisterColumn(this.si);
                        this.si = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) !== null) {
                        this.si = this.ce(this.su);
                        this.sc.cs.e(this.gh);
                    }
                    if (e != null && !e.cv()) {
                        this.sc.cs.e(this.gh);
                        this.l0(false);
                    }
                    break;
                case AnchoredRadialSeries.$$p[0]:
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.si);
                        this.si = this.ce(this.su);
                    }
                    break;
                case "ValueColumn":
                    if (e != null && !e.cv()) {
                        this.sc.cs.e(this.gh);
                        this.l0(false);
                    }
                    break;
                case "TrendLineBrush":
                    this.md();
                    break;
                case "TrendLineType":
                    this.k7();
                    break;
            }
        }
        kk(a, b, c, d) {
            switch (a) {
                case 4:
                case 1:
                case 0:
                    this.sc.cs.e(this.gh);
                    break;
            }
            this.sc.cx.g$e(a, b, c, d);
            switch (a) {
                case 4:
                    if (this.q6 != null && !this.q6.cv()) {
                        this.l0(true);
                    }
                    break;
                case 1:
                    if (this.q6 != null && !this.q6.cv()) {
                        this.l0(true);
                    }
                    break;
                case 0:
                    if (this.q6 != null && !this.q6.cv()) {
                        this.l0(true);
                    }
                    break;
                case 2:
                    if (this.su != null && this.sc.cs.b > 0 && this.q6 != null && !this.q6.cv()) {
                        this.l0(true);
                    }
                    break;
                case 3:
                    if (d == this.su) {
                        if (this.q6 != null && !this.q6.cv()) {
                            this.l0(true);
                        }
                    }
                    break;
            }
        }
        e3(a, b, c) {
            let d = super.e3(a, b, c);
            let e = c;
            if (this.ch == null || this.ch.count == 0 || this.qz == null || this.si == null || this.qz.kq == 0 || this.q6 == null || isInfinity(this.q6.kv) || isInfinity(this.q6.ku) || e.cs.b < 1) {
                d = false;
            }
            return d;
        }
        getOffsetValue() {
            return this.sn(this.qz, this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        getCategoryWidth() {
            return this.qz.getCategorySize(this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        get_sl() {
            return false;
        }
        get sl() {
            return this.get_sl();
        }
        sn(a, b, c, d) {
            let e = 0;
            let f = this.preferredCategoryMode(a);
            if (f == 0 && a.categoryMode != 0) {
                f = 1;
            }
            switch (f) {
                case 0:
                    e = 0;
                    break;
                case 1:
                    e = 0.5 * a.getCategorySize(b, c, d);
                    break;
                case 2:
                    e = a.getGroupCenter(this.rt(), b, c, d);
                    break;
            }
            if (a.cc) {
                e = -e;
            }
            return e;
        }
        r1(a, b) {
            let c = b.bv;
            let d = b.bu;
            let e = this.getEffectiveViewport1(b);
            let f = this.qz;
            let g = this.q6;
            let h = g.kv;
            let i = g.ku;
            a.f.clear();
            a.m.clear();
            a.p.clear();
            let j = this.pt();
            let k = 0;
            let l = b;
            let m = new CollisionAvoider();
            let n = 0;
            let o = b.cs.d;
            n = this.sn(f, c, d, e);
            l.cx.i = this.q6.ma;
            l.cx.h = this.q6.l9;
            l.cx.j = (p, q) => this.so(p, q, c, d);
            l.cx.k = (p, q) => this.sp(p, q, c, d);
            let p = ((() => {
                let $ret = new Clipper(0, d, false);
                $ret.i = a.p;
                return $ret;
            })());
            let q = ((() => {
                let $ret = new TrendResolutionParams();
                $ret.c = b.cs.b;
                $ret.d = b.cs.c;
                $ret.e = o;
                $ret.a = n;
                $ret.b = this.gh;
                $ret.f = d;
                $ret.g = c;
                return $ret;
            })());
            l.cx.l(a.p, this.sg, this.si, this.sr, (r) => this.qz.getScaledAngle(r), (r) => this.q6.mg(r), q, p);
            let r = true;
            if (this.sm(b)) {
                o--;
            }
            for (let s = b.cs.c; s <= o; ++s) {
                let t = s;
                if (t * b.cs.b >= this.qz.kq) {
                    t -= intDivide((this.qz.kq), b.cs.b);
                }
                let u = b.cs.getBucket(t);
                if (!isNaN_(u[0])) {
                    u[0] = f.getScaledAngle(u[0]) + n;
                    if (u[1] < h || u[1] > i) {
                        continue;
                    }
                    u[1] = g.mg(u[1]);
                    if (b.cs.b > 1) {
                        if (u[2] < h || u[2] > i) {
                            continue;
                        }
                        u[2] = g.mg(u[2]);
                    }
                    else {
                        u[2] = u[1];
                    }
                    if ((isNaN_(u[1]) || isNaN_(u[2])) && r && this.sl && this.sk()) {
                        o++;
                    }
                    else {
                        r = false;
                    }
                    a.f.add(u);
                    if (j) {
                        let v = Math.min(t * b.cs.b, this.ch.count - 1);
                        let w = this.q7.d(u[0], u[1], c, d);
                        let x = this.q7.e(u[0], u[1], c, d);
                        let y = new Rect(0, w - 5, x - 5, 11, 11);
                        if (!isNaN_(w) && !isNaN_(x) && !isInfinity(w) && !isInfinity(x) && m.tryAdd(y)) {
                            a.m.add({ $type: Point_$type, x: w, y: x });
                            let z = b.ct.item(k);
                            z.al = t;
                            z.ak = v;
                            z.content.item = this.ch.item(v);
                            ++k;
                        }
                    }
                }
                else {
                    if (r && this.sl && this.sk()) {
                        o++;
                    }
                }
            }
            b.ct.count = k;
            return;
        }
        so(a, b, c, d) {
            return this.q7.d(a, b, c, d);
        }
        sp(a, b, c, d) {
            return this.q7.e(a, b, c, d);
        }
        sm(a) {
            let b = a;
            return !this.sl && b.cs.c == 0 && b.cs.d == this.qz.kq;
        }
        sb(a, b, c) {
            let d = null;
            let e = c.bv;
            let f = c.bu;
            if (b > -1 && !e.isEmpty && !f.isEmpty) {
                let g = a._inner[0][0] < f.left - 2000 ? f.left - 10 : NaN;
                let h = f.bottom + 10;
                let i = a._inner[b][0] > f.right + 2000 ? f.right + 10 : NaN;
                let j = f.top - 10;
                d = new Clipper(1, g, h, i, j, false);
            }
            return d;
        }
        s0(a, b, c, d, e) {
            if (a.count > 0 && d.count > 0) {
                if (!e || this.sj()) {
                    a.add(this.te);
                    a.add(a._inner[0]);
                    d.add(this.te);
                    d.add(d._inner[0]);
                }
            }
        }
        sk() {
            return !this.sj();
        }
        sj() {
            let a = this.bx.bv;
            return !a.containsPoint({ $type: Point_$type, x: 0.5, y: 0.5 });
        }
        kh(a, b) {
            super.kh(a, b);
            let c = b;
            if (a) {
                c.ct.clear();
            }
            c.cx.g$d();
        }
        r4(a, b) {
            let c = b.bv;
            let d = b.bu;
            let e = this.getEffectiveViewport1(b);
            let f = this.o7(b);
            let g = b;
            g.cx.g$g(a.p);
            CategoryMarkerManager.e(this, a.m, g.ct, this.pv);
            this.sx(b, a);
            g.cm();
            this.sw(d, c, e, f, g);
        }
        sa(a, b, c) {
            if (b < a || a < 0 || a > this.si.count || b < 0 || b > this.si.count || c == null) {
                return null;
            }
            let d = new Array((b - a) + 1);
            let e = c.ch;
            let f = null;
            if (e) {
                f = c.i$b;
            }
            for (let g = a; g <= b; g++) {
                let h = g;
                if (e) {
                    h = f._inner[h];
                }
                d[g - a] = this.ch.item(g);
            }
            return d;
        }
        sy(a, b, c, d, e, f) {
            let g = this.bj != 1;
            this.rd.a1(this.rd.d, d.ch, a, b, c, d, e, f, true);
            this.rd.aa(this.fj);
            let h = this.rd.av;
            let i = null;
            let j = this.ch;
            let k = null;
            if (g && this.ca != null) {
                i = this.ca.a3.getHighlightingInfo(this, j, h.o, h.n, true);
                if (this.ca.a3.isCrossSeriesHighlight(this)) {
                    k = this.ca.a3.getHighlightingInfo(this, j, h.o, h.n, true);
                }
                h.b = i;
            }
            h.f = f;
            this.r2(h);
            this.rd.y(this, i, f, g, h.m, this.ca.a3.totalHighlightingProgress);
        }
        sz(a, b, c, d, e, f) {
            let g = this.bj != 1;
            this.rd.a1(this.rd.b, d.ch, a, b, c, d, e, f, false);
            this.rd.ab(this.fj);
            let h = this.rd.aw;
            let i = null;
            let j = this.ch;
            if (g && this.ca != null) {
                i = this.ca.a3.getHighlightingInfo(this, j, h.o, h.n, false);
                h.b = i;
            }
            h.f = f;
            this.r3(h);
            this.rd.z(this, i, f, g, b < 0);
        }
        sx(a, b) {
            a.b3 = true;
            this.rd.az(this, this.ro(), runOn(this, this.qw), this.rr(a), this.rs(a));
            let c = this.rd.d;
            let d = c != null;
            let e = this.qz;
            if (e == null) {
                return;
            }
            let f = this.getEffectiveViewport1(a);
            let g = new ScalerParams(0, a.bv, a.bu, e.cc, f);
            let h = this.ch == null ? 0 : this.ch.count;
            let i = a;
            let j = b.f;
            let k = i.cs.c;
            let l = i.cs.d;
            let m = i.cs.b;
            let n = k * m;
            for (let o = 0; o < a.ct.count; o++) {
                let p = a.ct.item(o);
                let q = p.content;
                if (d) {
                    let r = p.al;
                    this.sy(j, r, h, e, g, a.q);
                }
                this.rd.ac(p, q);
            }
        }
        sw(a, b, c, d, e) {
            e.cy(a, b, c, d);
        }
        md() {
            super.md();
            if (this.g9 < 0) {
                return;
            }
            this.sc.cz();
        }
        hn(a, b) {
            if (a == this.sc.cx.g$j) {
                return null;
            }
            return super.hn(a, b);
        }
        eh(a) {
            let b = this.bx.bv;
            b = b.copy();
            let c = this.bx.bu;
            let d = !b.isEmpty && !c.isEmpty && this.ch != null ? this.ch.indexOf(a) : -1;
            if (this.qz == null || this.si == null || this.q6 == null) {
                return false;
            }
            if (d < 0 || d > this.si.count - 1) {
                return false;
            }
            let e = this.qz.getScaledAngle(d);
            let f = this.q6.mg(this.si.item(d));
            if (isNaN_(f)) {
                f = (this.q6.l9 + this.q6.ma) / 2;
            }
            let g = 0.5 + (Math.cos(e) * f);
            let h = 0.5 + (Math.sin(e) * f);
            if (!isNaN_(g)) {
                if (g < b.left + 0.1 * b.width) {
                    g = g + 0.4 * b.width;
                    b.x = g - 0.5 * b.width;
                }
                if (g > b.right - 0.1 * b.width) {
                    g = g - 0.4 * b.width;
                    b.x = g - 0.5 * b.width;
                }
            }
            if (!isNaN_(h)) {
                if (h < b.top + 0.1 * b.height) {
                    h = h + 0.4 * b.height;
                    b.y = h - 0.5 * b.height;
                }
                if (h > b.bottom - 0.1 * b.height) {
                    h = h - 0.4 * b.height;
                    b.y = h - 0.5 * b.height;
                }
            }
            if (this.b5 != null) {
                this.b5.ap(this.ca, b, true);
            }
            return d >= 0;
        }
        l2(a, b) {
            super.l2(a, b);
            if (!this.et) {
                this.bx.a2(b);
                return;
            }
            this.bx.a2(b);
            let c = typeCast(AnchoredRadialSeriesView.$, this.bw);
            c.cs.e(this.gh);
            if (this.ct(this.bw)) {
                return;
            }
            if (!this.en) {
                this.sf = new RadialFrame(3);
                this.r1(this.sf, c);
            }
            this.en = false;
            this.r4(this.sf, c);
            this.et = false;
        }
        lz(a, b, c, d, e) {
            super.lz(a, b, c, d, e);
            let f = this.a4.a$h.item(d);
            let g = f;
            g.cs.e(this.gh);
            f.a1(c);
            if (this.ct(g)) {
                return;
            }
            if (this.se == null) {
                this.se = new RadialFrame(3);
            }
            this.se.u();
            this.r1(this.se, g);
            this.r4(this.se, g);
        }
        kr(a) {
            super.kr(a);
            this.a6.exportTrendlineData(this, a, this.sc.cx.g$j);
        }
    }
    AnchoredRadialSeries.$t = /*@__PURE__*/ markType(AnchoredRadialSeries, 'AnchoredRadialSeries', RadialBase.$);
    AnchoredRadialSeries.s1 = /*@__PURE__*/ DependencyProperty.i("ActualTrendLineBrush", Brush.$, AnchoredRadialSeries.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    AnchoredRadialSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, AnchoredRadialSeries, 'raisePropertyChanged', ['ValueMemberPath:su:s9', [2, null], 'TrendLineType:sg:s7', [TrendLineType_$type, /*@__PURE__*/ enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness:sq:s6', [1, 1.5], 'TrendLinePeriod:sr:s5', [1, 7], 'TrendLineZIndex:ss:s8', [1, 1], 'TrendLineBrush:tb:s2', [Brush.$, null], 'TrendLineDashArray:tc:s3', [DoubleCollection.$], 'TrendLineDashCap:td:s4', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)]]);
    return AnchoredRadialSeries;
})();
/**
 * @hidden
 */
export let AnchoredRadialSeriesView = /*@__PURE__*/ (() => {
    class AnchoredRadialSeriesView extends RadialBaseView {
        constructor(a) {
            super(a);
            this.cw = null;
            this.cx = null;
            this.cs = new AnchoredRadialBucketCalculator(this);
            this.cw = a;
            this.cx = new RadialTrendLineManager();
        }
        cy(a, b, c, d) {
        }
        cz() {
            this.cw.ta = null;
            if (this.cw.tb != null) {
                this.cw.ta = this.cw.tb;
            }
            else {
                this.cw.ta = this.cw.of;
            }
        }
        a5(a, b) {
            if (a.d) {
                if (!b) {
                }
                if (this.cw.sg != 0 && !b) {
                    let c = this.cx.g$j;
                    c.ac = this.cw.sq;
                    c._stroke = this.cw.ta;
                    c.ai = this.cw.tc;
                    c.ad = this.cw.td;
                    a.u(c);
                }
            }
            super.a5(a, b);
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'>";
            if (this.cw.qz.fj != null) {
                a += "<span>${item." + this.cw.qz.fj + "}</span><br/>";
            }
            a += "<span";
            let b = this.e.a4.a$r(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.cw.hp + ": </span><span class='ui-priority-primary'>" + "${item." + this.cw.su + "}</span></div>";
            return a;
        }
    }
    AnchoredRadialSeriesView.$t = /*@__PURE__*/ markType(AnchoredRadialSeriesView, 'AnchoredRadialSeriesView', RadialBaseView.$);
    return AnchoredRadialSeriesView;
})();
//# sourceMappingURL=AnchoredRadialBucketCalculator_combined.js.map
