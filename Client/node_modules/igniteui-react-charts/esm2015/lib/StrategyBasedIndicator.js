/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { FinancialIndicator } from "./FinancialIndicator";
import { String_$type, Number_$type, typeCast, fromEnum, markType } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
export let StrategyBasedIndicator = /*@__PURE__*/ (() => {
    class StrategyBasedIndicator extends FinancialIndicator {
        constructor() {
            super();
            this.t9();
        }
        t9() {
            this.tu = this.tv;
            this.ab = this.t8;
        }
        t1() {
            return -2147483648;
        }
        ua(a) {
        }
        t3() {
            return -2147483648;
        }
        t0() {
            return -2147483648;
        }
        static ue(a, b, c) {
            let d = DependencyProperty.i(c, Number_$type, b, new PropertyMetadata(2, a, (e, f) => (typeCast(StrategyBasedIndicator.$, e)).raisePropertyChanged(c, f.oldValue, f.newValue)));
            StrategyBasedIndicator.ty.add(c);
            return d;
        }
        static ud(a, b) {
            return StrategyBasedIndicator.ue(a, b, "Period");
        }
        static ub(a, b) {
            return StrategyBasedIndicator.ue(a, b, "LongPeriod");
        }
        static uf(a, b) {
            return StrategyBasedIndicator.ue(a, b, "ShortPeriod");
        }
        s7(a, b) {
            let c = this.p3(a, b);
            let d = this.p4(c);
            return this.tu.b(c, d);
        }
        s4(a, b) {
            let c = this.p3(a, b);
            if (b == 0) {
                return false;
            }
            if (!this.qz(this.s7(a, b))) {
                return false;
            }
            let d = this.p4(c);
            if (this.s0 != null) {
                c.minimumValue = this.s0.c;
                c.maximumValue = this.s0.b;
            }
            let e = this.tu.a(c, d);
            for (let f = 0; f < this.s9 && f < c.indicatorColumn.count; f++) {
                c.indicatorColumn.item(f, NaN);
            }
            if (this.qc != null && this.tx(c)) {
                this.qc.cv();
            }
            return e;
        }
        tx(a) {
            if (!isNaN_(a.minimumValue) && !isNaN_(a.maximumValue) && a.specifiesRange) {
                let b = this.s0;
                this.s0 = new AxisRange(a.minimumValue, a.maximumValue);
                return this.tw(b, this.s0);
            }
            let c = 1.7976931348623157E+308;
            let d = -1.7976931348623157E+308;
            for (let e of fromEnum(a.indicatorColumn)) {
                if (!isNaN_(e)) {
                    c = Math.min(c, e);
                    d = Math.max(d, e);
                }
            }
            let f = this.s0;
            this.s0 = new AxisRange(c, d);
            return this.tw(f, this.s0);
        }
        tw(a, b) {
            if (a == null || b == null) {
                return true;
            }
            if (a.c != b.c) {
                return true;
            }
            if (a.b != b.b) {
                return true;
            }
            return false;
        }
        t2(a) {
            if (a == -2147483648) {
                return 0;
            }
            if (a > this.indicatorColumn.count && this.indicatorColumn.count > 0) {
                a = this.indicatorColumn.count - 1;
            }
            if (a < 1) {
                return 1;
            }
            return a;
        }
        p3(a, b) {
            let c = super.p3(a, b);
            c.indicatorColumn = this.indicatorColumn;
            c.period = this.t2(this.t1());
            c.shortPeriod = this.t2(this.t3());
            c.longPeriod = this.t2(this.t0());
            c.multiplier = this.tz();
            return c;
        }
        tz() {
            return 1;
        }
        static uc(a, b) {
            let c = DependencyProperty.i("Multiplier", Number_$type, b, new PropertyMetadata(2, a, (d, e) => (typeCast(StrategyBasedIndicator.$, d)).raisePropertyChanged("Multiplier", e.oldValue, e.newValue)));
            StrategyBasedIndicator.ty.add("Multiplier");
            return c;
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            if (StrategyBasedIndicator.ty.contains(b)) {
                if (this.qc != null && !this.qc.cv()) {
                    this.p7.bx.e(this.gh);
                    this.s4(0, this.indicatorColumn.count);
                    if (this.s1.b7) {
                        this.s1.b5.g$i();
                    }
                    this.l0(false);
                }
            }
        }
    }
    StrategyBasedIndicator.$t = /*@__PURE__*/ markType(StrategyBasedIndicator, 'StrategyBasedIndicator', FinancialIndicator.$);
    StrategyBasedIndicator.ty = /*@__PURE__*/ new List$1(String_$type, 0);
    return StrategyBasedIndicator;
})();
//# sourceMappingURL=StrategyBasedIndicator.js.map
