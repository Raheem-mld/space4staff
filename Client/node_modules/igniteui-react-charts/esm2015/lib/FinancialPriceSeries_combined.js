/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { FinancialSeries } from "./FinancialSeries";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { TrendLineType_$type } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { PriceDisplayType_$type } from "./PriceDisplayType";
import { enumGetBox, EnumUtil, typeCast, fromEnum, runOn, Point_$type, markType, markDep } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { ISortingAxis_$type } from "./ISortingAxis";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { RectUtil } from "igniteui-react-core";
import { CategoryTrendLineManagerFactory } from "./CategoryTrendLineManagerFactory";
import { AxisRange } from "./AxisRange";
import { ScalerParams } from "./ScalerParams";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { Pool$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { LineSegment } from "igniteui-react-core";
import { GeometryGroup } from "igniteui-react-core";
import { LineGeometry } from "igniteui-react-core";
import { RectangleGeometry } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { boxArray$1 } from "igniteui-react-core";
import { FinancialPriceBucketCalculator } from "./FinancialPriceBucketCalculator";
import { Defaults } from "./Defaults";
import { Extensions } from "igniteui-react-core";
/**
 * @hidden
 */
export let FinancialPriceSeries = /*@__PURE__*/ (() => {
    class FinancialPriceSeries extends FinancialSeries {
        constructor() {
            super();
            this.ab = FinancialPriceSeries.$;
            this.pu = new CategoryFrame(5);
            this.pw = new CategoryFrame(5);
            this.ps = new CategoryFrame(5);
        }
        get_dl() {
            return true;
        }
        bu() {
            return new FinancialPriceSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.s1 = a;
        }
        get tl() {
            return this.c(FinancialPriceSeries.tb);
        }
        set tl(a) {
            this.h(FinancialPriceSeries.tb, a);
        }
        kk(a, b, c, d) {
            super.kk(a, b, c, d);
            if (this.pq != null && typeCast(ISortingAxis_$type, this.pq) !== null) {
                this.pq.i$i();
            }
            this.s1.bx.e(this.gh);
            if (this.s1.b7) {
                this.s1.b5.g$e(a, b, c, d);
            }
            if (this.qc != null) {
                this.qc.cv();
            }
            this.l0(true);
        }
        bo() {
            if (this.bp == 0) {
                return 1;
            }
            else {
                return super.bo();
            }
        }
        pb(a) {
            if (this.ps == null || this.ps.f.count == 0) {
                return Rect.empty;
            }
            let b = this.ox(a);
            let c = this.bx.bv;
            let d = this.bx.bu;
            let e = this.getEffectiveViewport1(this.bx);
            let f = this.aj(this.pq, this.ps.f, this.rn(this.bx), this.rp(this.bx), a, true);
            let g = f[0];
            let h = f[1];
            let i = Math.abs(b.x - g[0]);
            let j = Math.abs(b.x - h[0]);
            let k = this.s3(this.p7, e);
            k = Math.max(k, 3);
            let l = (k - 1) / 2;
            if (i < j) {
                let m = g[0] - l;
                let n = g[0];
                let o = g[0] + l;
                let p = g[1];
                let q = g[2];
                let r = g[3];
                let s = g[4];
                let t = Math.min(Math.min(Math.min(p, q), r), s);
                let u = Math.max(Math.max(Math.max(p, q), r), s);
                return new Rect(0, m, t, Math.abs(o - m), u - t);
            }
            else {
                let v = h[0] - l;
                let w = h[0];
                let x = h[0] + l;
                let y = h[1];
                let z = h[2];
                let aa = h[3];
                let ab = h[4];
                let ac = Math.min(Math.min(Math.min(y, z), aa), ab);
                let ad = Math.max(Math.max(Math.max(y, z), aa), ab);
                return new Rect(0, v, ac, Math.abs(x - v), ad - ac);
            }
        }
        s0(a, b) {
            let c = a[0] - b;
            let d = a[0];
            let e = a[0] + b;
            let f = a[1];
            let g = a[2];
            let h = a[3];
            let i = a[4];
            let j = Math.min(Math.min(Math.min(f, g), h), i);
            let k = Math.max(Math.max(Math.max(f, g), h), i);
            let l = Math.min(g, h);
            let m = Math.max(g, h);
            let n = Math.min(f, i);
            let o = Math.max(f, i);
            if (this.s2 == 1) {
                let p = new Array(3);
                let q = new Rect(0, c, f, b, 0);
                let r = new Rect(0, d, i, b, 0);
                let s = new Rect(0, d, l, 0, m - l);
                p[0] = q;
                p[1] = r;
                p[2] = s;
                return p;
            }
            else {
                let t = new Array(2);
                let u = new Rect(0, d, l, 0, m - l);
                let v = new Rect(0, c, n, b * 2, o - n);
                t[0] = u;
                t[1] = v;
                return t;
            }
        }
        ak(a) {
            let b = new List$1(Rect.$, 0);
            let c = this.ox(a);
            let d = this.bx.bv;
            let e = this.bx.bu;
            let f = this.getEffectiveViewport1(this.bx);
            let g = this.aj(this.pq, this.ps.f, this.rn(this.bx), this.rp(this.bx), a, true);
            let h = g[0];
            let i = g[1];
            let j = Math.abs(c.x - h[0]);
            let k = Math.abs(c.x - i[0]);
            let l = this.s3(this.p7, f);
            l = Math.max(l, 3);
            let m = (l - 1) / 2;
            if (j < k) {
                return this.s0(h, m);
            }
            else {
                return this.s0(i, m);
            }
        }
        ep(a, b) {
            if (this.es(a, b)) {
                return true;
            }
            return false;
        }
        es(a, b) {
            let c = this.pc(a);
            if (c.isEmpty) {
                return false;
            }
            let d = RectUtil.r(c, (this.fl / 2) + this.fz(b));
            if (d.containsPoint(a)) {
                let e = this.al(a);
                if (e != null) {
                    for (let f = 0; f < e.length; f++) {
                        let g = e[f];
                        let h = RectUtil.r(g, (this.fl / 2) + this.fz(b));
                        if (h.containsPoint(a)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        lm(a, b, c, d) {
            switch (b) {
                case FinancialSeries.$$p[9]:
                    this.s1.cd();
                    if (this.ca != null) {
                        this.ca.jp();
                    }
                    break;
                case "TrendLineType":
                    let e = EnumUtil.getEnumValue(TrendLineType_$type, d);
                    if (e != 0) {
                        this.s1.b5 = CategoryTrendLineManagerFactory.a(this.s1.b5, this.pq, this.mr, this, this.ck);
                    }
                    break;
            }
            super.lm(a, b, c, d);
            if (this.s1.b7 && this.s1.b5 != null && this.s1.b5.g$b(a, b, c, d)) {
                this.l0(false);
                this.k7();
            }
            switch (b) {
                case FinancialPriceSeries.$$p[0]:
                    if (this.mr != null) {
                        this.ta();
                        this.me();
                        this.ps.w();
                        this.sj(this.ps, this.s1);
                    }
                    this.k7();
                    break;
                case "ActualHighlightingMode":
                    this.l0(true);
                    break;
                case "TrendLineBrush":
                    this.md();
                    break;
                case "TrendLineType":
                    this.k7();
                    break;
                case FinancialSeries.$$p[5]:
                case FinancialPriceSeries.$$p[1]:
                    this.lj();
                    break;
            }
        }
        ta() {
            this.s1.ch();
            if (this.bw != null) {
                this.bw.ch();
            }
        }
        ap(a) {
            if (a != null && a == this.qc && this.ql != null && !isNaN_(this.ql.minimum) && this.qk != null && !isNaN_(this.qk.maximum)) {
                return new AxisRange(this.ql.minimum, this.qk.maximum);
            }
            return null;
        }
        aq(a) {
            if (a.isEmpty && this.ca != null) {
                a = this.ca.pg;
            }
            if (this.ql == null || this.qk == null) {
                return null;
            }
            let b = this.o7(this.bx);
            let c = new ScalerParams(0, a, this.ca.pv, this.pq.cc, this.getEffectiveViewport());
            let d = (this.pq.eb(b.left, c));
            let e = (this.pq.eb(b.right, c));
            if (this.pq.cc) {
                let f = d;
                d = e;
                e = f;
            }
            let g = null;
            if (this.pq.ch) {
                g = this.pq;
                d = g.i$f(d);
                e = g.i$f(e);
            }
            else {
                d = Math.floor(d);
                e = Math.ceil(e);
            }
            d = Math.max(0, Math.min(this.ql.count - 1, d));
            e = Math.max(0, Math.min(this.ql.count - 1, e));
            let h = 1.7976931348623157E+308;
            let i = -1.7976931348623157E+308;
            for (let j = truncate(d); j <= truncate(e); j++) {
                let k = j;
                if (g != null) {
                    k = g.i$b._inner[j];
                }
                let l = this.ql.item(k);
                if (this.ql.mayContainUnknowns) {
                    if (isInfinity(l) || isNaN_(l)) {
                        continue;
                    }
                }
                let m = this.qk.item(k);
                if (this.qk.mayContainUnknowns) {
                    if (isInfinity(m) || isNaN_(m)) {
                        continue;
                    }
                }
                h = Math.min(h, l);
                i = Math.max(i, m);
            }
            let n = new AxisRange(h, i);
            n = this.ao(n, this.qc, a);
            return n;
        }
        f2() {
            return Series.f3(this.qm, typeCast(ISortingAxis_$type, this.pq));
        }
        eh(a) {
            let b = this.ch != null ? this.ch.indexOf(a) : -1;
            let c = this.bx.bv;
            c = c.copy();
            let d = this.bx.bu;
            let e = new Rect(0, 0, 0, 1, 1);
            let f = this.o9(this.bx);
            if (b >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                if (this.pq != null) {
                    let g = new ScalerParams(0, e, e, this.pq.cc, f);
                    let h = this.pq.d8(b, g);
                    if (h < c.left + 0.1 * c.width) {
                        h = h + 0.4 * c.width;
                    }
                    if (h > c.right - 0.1 * c.width) {
                        h = h - 0.4 * c.width;
                    }
                    c.x = h - 0.5 * c.width;
                }
                if (this.qc != null && this.ql != null && this.qk != null && b < this.ql.count && b < this.qk.count) {
                    let i = new ScalerParams(0, e, e, this.qc.cc, f);
                    i.b = this.f2();
                    let j = this.qc.d8(this.ql.item(b), i);
                    let k = this.qc.d8(this.qk.item(b), i);
                    if (!isNaN_(j) && !isNaN_(k)) {
                        let l = Math.abs(j - k);
                        if (c.height < l) {
                            c.height = l;
                            c.y = Math.min(j, k);
                        }
                        else {
                            if (j < c.top + 0.1 * c.height) {
                                j = j + 0.4 * c.height;
                            }
                            if (j > c.bottom - 0.1 * c.height) {
                                j = j - 0.4 * c.height;
                            }
                            c.y = j - 0.5 * c.height;
                        }
                    }
                }
                this.b5.ap(this.ca, c, true);
            }
            return b >= 0;
        }
        e3(a, b, c) {
            let d = super.e3(a, b, c);
            if (this.qm == null || this.qj == null || this.qk == null || this.ql == null) {
                d = false;
            }
            return d;
        }
        sh(a, b) {
            super.sh(a, b);
            let c = b.bv;
            let d = b.bu;
            let e = this.getEffectiveViewport1(b);
            let f = this.pq;
            let g = this.qc;
            let h = new ScalerParams(0, c, d, f.cc, e);
            let i = ((() => {
                let $ret = new ScalerParams(0, c, d, g.cc, e);
                $ret.b = this.f2();
                return $ret;
            })());
            a.f.clear();
            a.m.clear();
            a.p.clear();
            let j = 0;
            let k = typeCast(ISortingAxis_$type, this.pq);
            if (k != null && (k.i$b == null || k.i$b.count != this.ch.count)) {
                return;
            }
            j = this.rh(c, d, e);
            let l = typeCast(FinancialPriceSeriesView.$, b);
            let m = this.gh;
            if (this.trendLineType != 0) {
                let n = new Array(this.ch.count);
                let o = 0;
                for (let p of fromEnum(this.q8)) {
                    n[o] = p;
                    o++;
                }
                if (this.s1.b7) {
                    this.s1.b5.prepareLineCore(a.p, this.trendLineType, boxArray$1(n), this.trendLinePeriod, (q) => this.pq.d8(q, h), (q) => this.qc.d8(q, i), ((() => {
                        let $ret = new TrendResolutionParams();
                        $ret.c = b.bx.b;
                        $ret.d = b.bx.c;
                        $ret.e = b.bx.d;
                        $ret.a = j;
                        $ret.b = m;
                        $ret.f = d;
                        return $ret;
                    })()));
                }
            }
            let q = this.pq.eb(2, h) - this.pq.eb(1, h);
            for (let r = b.bx.c; r <= b.bx.d; ++r) {
                let s;
                if (k == null) {
                    s = b.bx.getBucket(r);
                }
                else {
                    let t = k.i$b._inner[r];
                    let u = k.i$d(t);
                    let v = this.qm.item(t);
                    let w = this.qk.item(t);
                    let x = this.ql.item(t);
                    let y = this.qj.item(t);
                    let z = v;
                    let aa = w;
                    let ab = x;
                    let ac = y;
                    let ad = u;
                    while (r < b.bx.d) {
                        t = k.i$b._inner[r + 1];
                        ad = k.i$d(t);
                        if (ad - u > q * m) {
                            break;
                        }
                        r++;
                        aa = Math.max(aa, this.qk.item(t));
                        ab = Math.min(ab, this.ql.item(t));
                        ac = this.qj.item(t);
                    }
                    let ae = NaN;
                    if (!isNaN_(u)) {
                        ae = this.pq.d8(u, h);
                    }
                    s = [ae, z, aa, ab, ac];
                }
                if (!isNaN_(s[0])) {
                    if (k != null) {
                        s[0] = s[0] + j;
                    }
                    else {
                        s[0] = f.d8(s[0], h) + j;
                    }
                    s[1] = g.d8(s[1], i);
                    s[2] = g.d8(s[2], i);
                    s[3] = g.d8(s[3], i);
                    s[4] = g.d8(s[4], i);
                    a.f.add(s);
                }
            }
            return;
        }
        kh(a, b) {
            super.kh(a, b);
            let c = typeCast(FinancialPriceSeriesView.$, b);
            c.cb();
            if (a) {
                c.b6.count = 0;
            }
            if (c.b7 && c.b5 != null) {
                c.b5.g$d();
            }
        }
        mm(a, b) {
            super.mm(a, b);
            if (this.ca != null) {
                this.ca.jp();
            }
        }
        pg() {
            if (this.pq != null && this.pq.categoryMode == 0) {
                let a = this.getEffectiveViewport1(this.bx);
                let b = this.s3(this.p7, a) / 2;
                return new Thickness(1, b, 0, b, 0);
            }
            return super.pg();
        }
        get_cy() {
            return true;
        }
        sj(a, b) {
            super.sj(a, b);
            if (this.pq == null || this.qc == null) {
                return;
            }
            let c = false;
            if (b.b0(a)) {
                c = true;
                b.b2(a);
            }
            this.pz.a0(this, this.qy(), runOn(this, this.pi), this.rn(b), this.rp(b));
            let d = false;
            let e = this.pz.b;
            if (e != null) {
                d = true;
            }
            let f = typeCast(FinancialPriceSeriesView.$, b);
            f.ca();
            f.b8 = false;
            if (f.b7) {
                f.b5.g$d();
            }
            if (this.trendLineType != 0) {
                f.b5.g$g(a.p);
            }
            if (d) {
                this.s9(a, b, c);
            }
            else {
                f.b6.count = 0;
                this.s8(a, b);
            }
        }
        f1() {
            let a = this.getEffectiveViewport1(this.bx);
            return this.s3(this.p7, a);
        }
        s9(a, b, c) {
            let d = this.s2;
            let e = this.getEffectiveViewport1(b);
            let f = this.s3(b, e);
            let g = (f - 1) / 2;
            let h = typeCast(FinancialPriceSeriesView.$, b);
            h.b8 = true;
            let i = a.f;
            let j = 0;
            let k = this.ch.count;
            let l = this.pq;
            let m = new ScalerParams(0, b.bv, b.bu, l.cc, e);
            let n = this.of;
            let o = this.sw;
            if (o == null) {
                o = n;
            }
            let p = this.oi;
            let q = this.tm;
            if (q == null) {
                q = p;
            }
            for (let r = 0; r < i.count; ++r) {
                let s = i._inner[r][0] - g;
                let t = i._inner[r][0];
                let u = i._inner[r][0] + g;
                let v = i._inner[r][1];
                let w = i._inner[r][2];
                let x = i._inner[r][3];
                let y = i._inner[r][4];
                if (isNaN_(v) || isNaN_(w) || isNaN_(x) || isNaN_(y)) {
                    continue;
                }
                let z = h.b6.item(j);
                j++;
                let aa = v < y;
                let ab = new PathGeometry();
                if (c) {
                    switch (d) {
                        case 0:
                            if (aa) {
                                let ac = v;
                                v = y;
                                y = ac;
                            }
                            let ad = new PathFigure();
                            ad._startPoint = { $type: Point_$type, x: t, y: x };
                            ad._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: t, y: v };
                                return $ret;
                            })()));
                            let ae = new PathFigure();
                            ae._startPoint = { $type: Point_$type, x: s, y: y };
                            ae._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: u, y: y };
                                return $ret;
                            })()));
                            ae._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: u, y: v };
                                return $ret;
                            })()));
                            ae._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: s, y: v };
                                return $ret;
                            })()));
                            ae._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: s, y: y };
                                return $ret;
                            })()));
                            let af = new PathFigure();
                            af._startPoint = { $type: Point_$type, x: t, y: y };
                            af._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: t, y: w };
                                return $ret;
                            })()));
                            ab.c.add(ad);
                            ab.c.add(ae);
                            ab.c.add(af);
                            break;
                        case 1:
                            let ag = new PathFigure();
                            ag._startPoint = { $type: Point_$type, x: s, y: v };
                            ag._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: t, y: v };
                                return $ret;
                            })()));
                            let ah = new PathFigure();
                            ah._startPoint = { $type: Point_$type, x: t, y: x };
                            ah._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: t, y: w };
                                return $ret;
                            })()));
                            let ai = new PathFigure();
                            ai._startPoint = { $type: Point_$type, x: t, y: y };
                            ai._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: u, y: y };
                                return $ret;
                            })()));
                            ab.c.add(ag);
                            ab.c.add(ah);
                            ab.c.add(ai);
                            break;
                    }
                }
                if (aa) {
                    this.pz.ak = o;
                    this.pz.ag = o;
                    this.pz.ah = q;
                    this.pz.al = q;
                    this.pz.f = true;
                }
                else {
                    this.pz.ak = n;
                    this.pz.ag = n;
                    this.pz.ah = p;
                    this.pz.al = p;
                    this.pz.f = false;
                }
                this.sg(i, r, k, l, m, b.q);
                if (d == 1) {
                    this.pz.ad(z, true, false, false, false);
                }
                else {
                    this.pz.ad(z, false, false, false, false);
                }
                if (c) {
                    z.ak = ab;
                }
            }
            h.b6.count = j;
            h.cc();
        }
        s3(a, b) {
            let c = this.pq.ki(a.bv, a.bu, b);
            c = Math.max(c, this.gh * 0.9);
            c = Math.max(c, 3);
            return c;
        }
        s8(a, b) {
            let c = this.s2;
            let d = this.getEffectiveViewport1(b);
            let e = this.s3(b, d);
            let f = (e - 1) / 2;
            let g = typeCast(FinancialPriceSeriesView.$, b);
            let h = g.ck();
            let i = g.cj();
            let j = a.f;
            for (let k = 0; k < j.count; ++k) {
                let l = j._inner[k][0] - f;
                let m = j._inner[k][0];
                let n = j._inner[k][0] + f;
                let o = j._inner[k][1];
                let p = j._inner[k][2];
                let q = j._inner[k][3];
                let r = j._inner[k][4];
                if (isNaN_(o) || isNaN_(p) || isNaN_(q) || isNaN_(r)) {
                    continue;
                }
                let s = o < r;
                let t = s ? i : h;
                switch (c) {
                    case 0:
                        if (s) {
                            let u = o;
                            o = r;
                            r = u;
                        }
                        t.d.add(((() => {
                            let $ret = new LineGeometry();
                            $ret.d = { $type: Point_$type, x: m, y: q };
                            $ret.c = { $type: Point_$type, x: m, y: o };
                            return $ret;
                        })()));
                        t.d.add(((() => {
                            let $ret = new RectangleGeometry();
                            $ret.e = new Rect(0, l, r, n - l, o - r);
                            return $ret;
                        })()));
                        t.d.add(((() => {
                            let $ret = new LineGeometry();
                            $ret.d = { $type: Point_$type, x: m, y: r };
                            $ret.c = { $type: Point_$type, x: m, y: p };
                            return $ret;
                        })()));
                        break;
                    case 1:
                        t.d.add(((() => {
                            let $ret = new LineGeometry();
                            $ret.d = { $type: Point_$type, x: l, y: o };
                            $ret.c = { $type: Point_$type, x: m, y: o };
                            return $ret;
                        })()));
                        t.d.add(((() => {
                            let $ret = new LineGeometry();
                            $ret.d = { $type: Point_$type, x: m, y: q };
                            $ret.c = { $type: Point_$type, x: m, y: p };
                            return $ret;
                        })()));
                        t.d.add(((() => {
                            let $ret = new LineGeometry();
                            $ret.d = { $type: Point_$type, x: m, y: r };
                            $ret.c = { $type: Point_$type, x: n, y: r };
                            return $ret;
                        })()));
                        break;
                }
            }
        }
        hn(a, b) {
            if (this.s1.b7 && a == this.s1.b5.g$j) {
                return null;
            }
            return super.hn(a, b);
        }
        md() {
            super.md();
            if (this.g9 < 0) {
                return;
            }
            this.s1.ci();
        }
        kr(a) {
            super.kr(a);
            if (this.s1.b7) {
                this.a6.exportTrendlineData(this, a, this.s1.b5.g$j);
            }
        }
        oq() {
            return this.tm;
        }
        l5(a, b) {
            super.l5(a, b);
            this.tm = b;
        }
        a8(a) {
            if (this.s2 == 0) {
                return 3;
            }
            else if (this.s2 == 1) {
                return 2;
            }
            return a;
        }
    }
    FinancialPriceSeries.$t = /*@__PURE__*/ markType(FinancialPriceSeries, 'FinancialPriceSeries', FinancialSeries.$, [ITrendLineSeries_$type]);
    FinancialPriceSeries.tb = /*@__PURE__*/ DependencyProperty.i("ActualTrendLineBrush", Brush.$, FinancialPriceSeries.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    FinancialPriceSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, FinancialPriceSeries, 'raisePropertyChanged', ['DisplayType:s2:tc', [PriceDisplayType_$type, /*@__PURE__*/ enumGetBox(PriceDisplayType_$type, 0)], 'NegativeOutline:tm:td', [Brush.$, null], 'TrendLineType::tj', [TrendLineType_$type, /*@__PURE__*/ enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness::ti', [1, 1.5], 'TrendLinePeriod::th', [1, 7], 'TrendLineBrush::te', [Brush.$, null], 'TrendLineZIndex:s5:tk', [1, 1001], 'TrendLineDashArray:tn:tf', [DoubleCollection.$], 'TrendLineDashCap:to:tg', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)]]);
    return FinancialPriceSeries;
})();
/**
 * @hidden
 */
export let FinancialPriceSeriesView = /*@__PURE__*/ (() => {
    class FinancialPriceSeriesView extends FinancialSeriesView {
        constructor(a) {
            super(a);
            this.b3 = null;
            this.b6 = null;
            this.b9 = null;
            this.cn = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                return $ret;
            })());
            this.cm = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                return $ret;
            })());
            this.b4 = null;
            this.cl = new Path();
            this.b8 = false;
            this.b3 = a;
            this.b9 = new List$1(Path.$, 0);
            this.b6 = ((() => {
                let $ret = new Pool$1(Path.$);
                $ret.create = runOn(this, this.co);
                $ret.activate = runOn(this, this.ce);
                $ret.disactivate = runOn(this, this.cg);
                $ret.destroy = runOn(this, this.cf);
                return $ret;
            })());
        }
        co() {
            let a = new Path();
            this.b9.add(a);
            a._visibility = 1;
            return a;
        }
        ce(a) {
            a._visibility = 0;
        }
        cg(a) {
            a._visibility = 1;
        }
        cf(a) {
            this.b9.remove(a);
        }
        by() {
            return new FinancialPriceBucketCalculator(this);
        }
        as() {
            super.as();
            if (!this.q) {
                this.b3.s2 = Defaults.g;
                this.b3.sw = Defaults.ah;
                this.b3.tm = Defaults.ai;
                this.b3.gh = Defaults.k;
                this.b3.gm = Defaults.l;
                this.b3.oo = this.b3.oi;
            }
        }
        get b5() {
            if (this.b4 == null) {
                this.b4 = CategoryTrendLineManagerFactory.a(this.b4, this.e.ar(), this.e.mr, this.e, this.e.ck);
            }
            return this.b4;
        }
        set b5(a) {
            this.b4 = a;
        }
        get b7() {
            return this.b4 != null;
        }
        ch() {
            if (this.b3.s2 == 1) {
                this.cn._stroke = this.e.of;
            }
            else {
                this.cn._stroke = this.e.oi;
            }
            if (this.b3.s2 == 1) {
                this.cm._stroke = this.bz.sw;
            }
            else {
                this.cm._stroke = this.b3.tm;
            }
        }
        cb() {
            this.aq();
            this.b6.count = 0;
            this.ca();
        }
        ca() {
            let a = typeCast(GeometryGroup.$, this.cn.ak);
            let b = typeCast(GeometryGroup.$, this.cm.ak);
            Extensions.d(a);
            Extensions.d(b);
        }
        ck() {
            this.aq();
            return typeCast(GeometryGroup.$, this.cn.ak);
        }
        cj() {
            this.aq();
            return typeCast(GeometryGroup.$, this.cm.ak);
        }
        ci() {
            this.b3.tl = null;
            if (this.b3.trendLineBrush != null) {
                this.b3.tl = this.b3.trendLineBrush;
            }
            else {
                this.b3.tl = this.b3.of;
            }
        }
        bb() {
            super.bb();
            this.cn.ac = this.e.fl;
            this.cn.ai = this.e.os;
            this.cn.ad = this.e.ot;
            if (this.b3.s2 == 1) {
                this.cn._stroke = this.e.of;
            }
            else {
                this.cn._stroke = this.e.oi;
                this.cn._fill = this.e.of;
            }
            this.cm.ac = this.e.fl;
            this.cm.ai = this.e.os;
            this.cm.ad = this.e.ot;
            if (this.b3.s2 == 1) {
                this.cm._stroke = this.bz.sw;
            }
            else {
                this.cm._stroke = this.b3.tm;
                this.cm._fill = this.bz.sw;
            }
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.cn.ac = this.e.fl + 3;
            if (this.b3.s2 == 1) {
                this.cn._stroke = a;
            }
            else {
                this.cn._stroke = a;
                this.cn._fill = a;
            }
            this.cm.ac = this.e.fl + 3;
            if (this.b3.s2 == 1) {
                this.cm._stroke = a;
            }
            else {
                this.cm._stroke = a;
                this.cm._fill = a;
            }
        }
        ac(a) {
            return this.b9._inner[a];
        }
        ab(a) {
            let b = this.b9._inner[a];
            this.cl._visibility = b._visibility;
            this.cl.ak = b.ak;
            let c = this.bp(a);
            this.cl._fill = c;
            this.cl._stroke = c;
            this.cl.ac = this.e.fl + 3;
            return this.cl;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (this.b8) {
                    for (let c = 0; c < this.b9.count; c++) {
                        let d = this.aa(c, b);
                        if (d._visibility == 0) {
                            a.s(d);
                        }
                    }
                }
                else {
                    a.s(this.cn);
                    a.s(this.cm);
                }
            }
        }
        a5(a, b) {
            if (a.d) {
                if (this.b3.trendLineType != 0 && !b) {
                    let c = this.b5.g$j;
                    c.ac = this.b3.trendLineThickness;
                    c._stroke = this.b3.tl;
                    c.ai = this.b3.tn;
                    c.ad = this.b3.to;
                    a.u(c);
                }
            }
            super.a5(a, b);
        }
        al(a) {
            super.al(a);
            if (this.b3.qy()) {
                for (let b = 0; b < this.b9.count; b++) {
                    let c = this.b9._inner[b];
                    if (c._fill == this.b3.sw) {
                        this.e.a6.exportPathData(a, c, "negativePathShape" + b, ["Negative"]);
                    }
                    else {
                        this.e.a6.exportPathData(a, c, "positivePathShape" + b, ["Positive", "Main"]);
                    }
                }
            }
            else {
                this.e.a6.exportPathData(a, this.cn, "positivePathShape", ["Positive", "Main"]);
                this.e.a6.exportPathData(a, this.cm, "negativePathShape", ["Negative"]);
            }
        }
        cc() {
            this.aq();
        }
        cd() {
            if (this.b7) {
                this.b4 = CategoryTrendLineManagerFactory.a(this.b4, this.e.ar(), this.e.mr, this.e, this.e.ck);
            }
        }
    }
    FinancialPriceSeriesView.$t = /*@__PURE__*/ markType(FinancialPriceSeriesView, 'FinancialPriceSeriesView', FinancialSeriesView.$);
    return FinancialPriceSeriesView;
})();
//# sourceMappingURL=FinancialPriceSeries_combined.js.map
