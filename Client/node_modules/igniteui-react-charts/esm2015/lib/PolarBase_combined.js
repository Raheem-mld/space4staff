/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { MarkerSeries } from "./MarkerSeries";
import { Base, runOn, Number_$type, enumGetBox, Point_$type, typeCast, fromEnum, markType, markDep } from "igniteui-react-core";
import { PolarAxisInfoCache } from "./PolarAxisInfoCache";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { PolarFrame } from "./PolarFrame";
import { DependencyProperty } from "igniteui-react-core";
import { NumericAngleAxis } from "./NumericAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { TrendLineType_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { ScatterItemSearchMode_$type } from "./ScatterItemSearchMode";
import { HighlightingInfo } from "./HighlightingInfo";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { PolarAxes } from "./PolarAxes";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { SeriesRenderingArguments } from "./SeriesRenderingArguments";
import { AxisRange } from "./AxisRange";
import { Dictionary$2 } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { GeometryUtil } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { PolarTrendLineManager } from "./PolarTrendLineManager";
import { AssigningPolarStyleEventArgs } from "./AssigningPolarStyleEventArgs";
import { AssigningPolarMarkerStyleEventArgs } from "./AssigningPolarMarkerStyleEventArgs";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { Defaults } from "./Defaults";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { GeometryGroup } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let PolarBase = /*@__PURE__*/ (() => {
    class PolarBase extends MarkerSeries {
        constructor() {
            super();
            this.rd = null;
            this.qz = null;
            this.rb = null;
            this.t3 = null;
            this.t2 = null;
            this.rp = null;
            this.rr = null;
            this.rs = null;
            this.rh = new PolarFrame();
            this.rj = new PolarFrame();
            this.rf = new PolarFrame();
            this.ra = null;
            this.r9 = null;
            this.rl = 1;
            this.rw = false;
            this.rv = false;
            this.q6 = null;
            this.q7 = null;
            this.assigningPolarStyle = null;
            this.assigningPolarMarkerStyle = null;
            this.rk = null;
            this.ri = null;
            this.re = null;
            this.rk = new PolarSeriesRenderManager();
            this.rm = this.rn();
            this.ri = new PolarFrame();
            this.rj.x = runOn(this, this.t1);
            this.rh.x = runOn(this, this.t1);
            this.rf.x = runOn(this, this.t1);
            this.rp = new SeriesRenderer$2(PolarFrame.$, PolarBaseView.$, 0, runOn(this, this.s8), runOn(this, this.tc), runOn(this, this.cr), runOn(this, this.l8), runOn(this, this.s3));
        }
        bu() {
            return new PolarBaseView(this);
        }
        lh(a) {
            super.lh(a);
            this.rc = a;
        }
        ke() {
            super.ke();
            this.q8 = null;
            this.q9 = null;
        }
        get_d0() {
            return true;
        }
        cx(a, b, c) {
            if (!this.hasMarkers) {
                return false;
            }
            let d = this.q8;
            let e = new ScalerParams(1, this.ca.pg, this.pf, d.cc);
            e.c = this.getEffectiveViewport1(this.bx);
            let f = this.q9;
            let g = new ScalerParams(1, this.ca.pg, this.pf, f.cc);
            g.c = this.getEffectiveViewport1(this.bx);
            a.clear();
            this.pq.cf((h) => {
                if (h._visibility == 0) {
                    let i = new SeriesPointOfInterest();
                    let j = h.n;
                    let k = h.o;
                    if (j < this.pf.left || j > this.pf.right || k < this.pf.top || k > this.pf.bottom) {
                        return;
                    }
                    let l;
                    let m;
                    let n = this.ra.f(j, k, this.bx.bv, this.bx.bu, l, m);
                    l = n.p4;
                    m = n.p5;
                    i.b = l;
                    i.c = m;
                    i.a = h.content;
                    a.add(i);
                }
            });
            return true;
        }
        s3() {
            if (this.cb.g) {
                this.cb.t();
            }
        }
        s5() {
            this.ra.e(this.rd.w, this.rt, this.ru, this.t3, this.t2, (a, b) => Math.cos(b), (a, b) => Math.sin(b), true);
        }
        get rt() {
            return this.rr;
        }
        set rt(a) {
            if (this.rr != a) {
                let b = this.rt;
                this.rr = a;
                this.raisePropertyChanged("AngleColumn", b, this.rt);
            }
        }
        get ru() {
            return this.rs;
        }
        set ru(a) {
            if (this.rs != a) {
                let b = this.ru;
                this.rs = a;
                this.raisePropertyChanged("RadiusColumn", b, this.ru);
            }
        }
        get tw() {
            return this.c(PolarBase.td);
        }
        set tw(a) {
            this.h(PolarBase.td, a);
        }
        rg() {
            let a = this.rf;
            if (this.cr()) {
                if (this.cb.g) {
                    this.cb.t();
                }
                a = this.rj;
            }
            return a;
        }
        ky() {
            super.ky();
            if (this.q9 != null) {
                this.q9.hq(false);
            }
            if (this.q8 != null) {
                this.q8.hq(false);
            }
        }
        kk(a, b, c, d) {
            let e = false;
            this.rc.cv.g$e(a, b, c, d);
            if (this.q8 != null && !this.q8.cv()) {
                e = true;
            }
            if (this.q9 != null && !this.q9.cv()) {
                e = true;
            }
            if (e) {
                this.l0(true);
            }
        }
        mm(a, b) {
            this.l0(false);
        }
        mn(a, b) {
            this.l0(false);
        }
        e3(a, b, c) {
            let d = true;
            if (!super.e3(a, b, c) || !c.o() || b.isEmpty || a.isEmpty || this.q8 == null || this.q9 == null || this.rt == null || this.ru == null || this.rt.count == 0 || this.ru.count == 0 || this.ch == null || this.ch.count != this.rt.count || this.ch.count != this.ru.count || this.ra == null || this.q8.bh == null || this.q9.bh == null || this.q8.kv == this.q8.ku || this.q9.kv == this.q9.ku) {
                d = false;
            }
            return d;
        }
        l1(a) {
            let b;
            let c;
            let d = this.getViewInfo(c, b);
            c = d.p0;
            b = d.p1;
            if (!this.e3(c, b, this.bx)) {
                this.kh(true, this.bx);
                return;
            }
            this.t3 = b;
            this.t2 = c;
            this.rb = new PolarAxisInfoCache(this.q8, this.q9, this.ch);
            let e = new SeriesRenderingArguments(this, c, b, a, this.em);
            let f = this.rp.g(e, this.rh, this.rf, this.rj, this.rc);
            this.rh = f.p1;
            this.rf = f.p2;
            this.rj = f.p3;
        }
        t1(a) {
            let b = this.ra.h(a.x, a.y, this.t3, this.t2, this.rb.e, this.rb.d, this.rb.g, this.rb.f, this.rb.i, this.rb.h);
            return b;
        }
        ap(a) {
            if (a != null && a == this.q8 && this.rt != null) {
                return new AxisRange(this.rt.minimum, this.rt.maximum);
            }
            if (a != null && a == this.q9 && this.ru != null) {
                return new AxisRange(this.ru.minimum, this.ru.maximum);
            }
            return null;
        }
        eh(a) {
            let b = this.bx.bv;
            b = b.copy();
            let c = this.bx.bu;
            let d = !b.isEmpty && !c.isEmpty && this.ch != null ? this.ch.indexOf(a) : -1;
            if (this.q8 == null || this.rt == null || this.q9 == null || this.ru == null) {
                return false;
            }
            if (d < 0 || d > this.rt.count - 1 || d > this.ru.count - 1) {
                return false;
            }
            let e = this.q8.getScaledAngle(this.rt.item(d));
            let f = this.q9.mg(this.ru.item(d));
            let g = 0.5 + (Math.cos(e) * f);
            let h = 0.5 + (Math.sin(e) * f);
            if (!isNaN_(g)) {
                if (g < b.left + 0.1 * b.width) {
                    g = g + 0.4 * b.width;
                    b.x = g - 0.5 * b.width;
                }
                if (g > b.right - 0.1 * b.width) {
                    g = g - 0.4 * b.width;
                    b.x = g - 0.5 * b.width;
                }
            }
            if (!isNaN_(h)) {
                if (h < b.top + 0.1 * b.height) {
                    h = h + 0.4 * b.height;
                    b.y = h - 0.5 * b.height;
                }
                if (h > b.bottom - 0.1 * b.height) {
                    h = h - 0.4 * b.height;
                    b.y = h - 0.5 * b.height;
                }
            }
            if (this.b5 != null) {
                this.b5.ap(this.ca, b, true);
            }
            return d >= 0;
        }
        hh(a) {
            let b = this.g0(a);
            if (this.ch != null && b >= 0 && b < this.ch.count) {
                return this.ch.item(b);
            }
            return null;
        }
        g0(a) {
            let b = truncate(Math.round(this.fw(a)));
            return b;
        }
        fw(a) {
            switch (this.rm) {
                case 1: return this.sd(a);
                case 3: return this.se(a);
                case 2: return this.sb(a);
                case 4: return this.sc(a);
            }
            return -1;
        }
        sc(a) {
            return this.sf(a, false);
        }
        sb(a) {
            let b = this.ox(a);
            let c = b.x;
            let d = b.y;
            if (this.ch == null || this.q8 == null || this.q9 == null || this.rt == null || this.ru == null) {
                return -1;
            }
            if (this.ch.count > this.sh) {
                return -1;
            }
            this.r0();
            let e = this.r9;
            let f = 1.7976931348623157E+308;
            let g = -1;
            for (let h = 0; h < this.rt.count; h++) {
                let i = e._inner[h].x;
                let j = e._inner[h].y;
                let k = (c - i) * (c - i) + (d - j) * (d - j);
                if (k < f) {
                    f = k;
                    g = h;
                }
            }
            return g;
        }
        r0() {
            let a = this.rf;
            if (this.cr()) {
                a = this.rj;
            }
            if (a == null || a.w.count == 0) {
                return false;
            }
            this.r9 = a.w;
            return true;
        }
        sf(a, b) {
            if (!this.r3) {
                return -1;
            }
            let c = { $type: Point_$type, x: 0, y: 0 };
            let d = true;
            let e = this.rf;
            if (this.cr()) {
                e = this.rj;
            }
            if (e == null) {
                return -1;
            }
            if (e.m == null) {
                return -1;
            }
            if (this.ch.count > this.sh) {
                return -1;
            }
            this.r0();
            let f = this.r9;
            let g = this.ox(a);
            let h = 1.7976931348623157E+308;
            let i = -1;
            for (let j = 0; j < f.count; j++) {
                let k = f._inner[j];
                if (j > 0) {
                    if (isNaN_(k.x) || isNaN_(k.y) || isNaN_(c.x) || isNaN_(c.y)) {
                        c = k;
                        continue;
                    }
                    if (!b || e.j.containsKey(this.ch.item(j)) || e.j.containsKey(this.ch.item(j - 1))) {
                        let l = GeometryUtil.d(g, c, k);
                        if (l < h) {
                            h = l;
                            i = j;
                        }
                    }
                }
                c = k;
            }
            if (i >= 0) {
                let m = f._inner[i];
                let n = f._inner[i - 1];
                if (!b || (e.j.containsKey(this.ch.item(i)) && e.j.containsKey(this.ch.item(i - 1)))) {
                    let o = GeometryUtil.h(g, n, m);
                    return (i - 1) + o;
                }
                else if (e.j.containsKey(this.ch.item(i))) {
                    return i;
                }
                else {
                    return i - 1;
                }
            }
            return -1;
        }
        se(a) {
            return this.sf(a, true);
        }
        sd(a) {
            let b = null;
            let c = 1.7976931348623157E+308;
            let d = this.ox(a);
            let e = d.x;
            let f = d.y;
            if (this.rc.cw.e > this.sh) {
                return -1;
            }
            this.rc.cz((g) => {
                if (g._visibility == 0) {
                    let h = this.rc.cp(g);
                    let i = h.left + h.width / 2;
                    let j = h.top + h.height / 2;
                    let k = (e - i) * (e - i) + (f - j) * (f - j);
                    if (k < c) {
                        c = k;
                        b = g;
                    }
                }
            });
            if (b != null) {
                return b.ak;
            }
            return -1;
        }
        o2(a, b, c) {
            if (this.q8 == null || this.q9 == null || this.rt == null || this.ru == null) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            let d = this.bx.bv;
            let e = this.bx.bu;
            let f = this.getEffectiveViewport();
            let g = new ScalerParams(0, d, e, this.q8.cc, f);
            let h = ((() => {
                let $ret = new ScalerParams(0, d, e, this.q9.cc, f);
                $ret.b = this.f2();
                return $ret;
            })());
            if (b) {
                let i = this.fw(a);
                if (i == -1) {
                    return { $type: Point_$type, x: NaN, y: NaN };
                }
                let j = truncate(Math.floor(i));
                let k = truncate(Math.ceil(i));
                if (j < 0) {
                    j = 0;
                }
                if (k < 0) {
                    k = 0;
                }
                if (k > this.ch.count - 1) {
                    k = this.ch.count - 1;
                }
                if (j > this.ch.count - 1) {
                    j = this.ch.count - 1;
                }
                if (k == j) {
                    return this.ra.h(this.rt.item(j), this.ru.item(j), d, e, this.rb.e, this.rb.d, this.rb.g, this.rb.f, this.rb.i, this.rb.h);
                }
                let l = i - Math.floor(i);
                let m = this.ra.h(this.rt.item(j), this.ru.item(j), d, e, this.rb.e, this.rb.d, this.rb.g, this.rb.f, this.rb.i, this.rb.h);
                let n = this.ra.h(this.rt.item(k), this.ru.item(k), d, e, this.rb.e, this.rb.d, this.rb.g, this.rb.f, this.rb.i, this.rb.h);
                let o = m.x;
                let p = m.y;
                let q = n.x;
                let r = n.y;
                let s = q - o;
                let t = r - p;
                return { $type: Point_$type, x: o + s * l, y: p + t * l };
            }
            else {
                let u = this.g0(a);
                if (u == -1) {
                    return { $type: Point_$type, x: NaN, y: NaN };
                }
                return this.ra.h(this.rt.item(u), this.ru.item(u), d, e, this.rb.e, this.rb.d, this.rb.g, this.rb.f, this.rb.i, this.rb.h);
            }
        }
        ag() {
            return [this.q8, this.q9];
        }
        hk(a, b) {
            let c = this.ja(b);
            if (c == PolarBase.$$p[1]) {
                return this.hl(a, b, this.so);
            }
            if (c == PolarBase.$$p[9]) {
                return this.hl(a, b, this.sy);
            }
            return super.hk(a, b);
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            if (this.rc.cv.g$b(a, b, c, d)) {
                this.l0(false);
                this.k7();
            }
            switch (b) {
                case "FastItemsSource":
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.rt);
                        c.deregisterColumn(this.ru);
                        this.rt = null;
                        this.ru = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.rt = this.ce(this.so);
                        this.ru = this.ce(this.sy);
                    }
                    if ((this.q9 != null && !this.q9.cv()) || (this.q8 != null && !this.q8.cv())) {
                        this.l0(false);
                    }
                    break;
                case PolarBase.$$p[0]:
                    if (this.q8 != null && this.q9 != null) {
                        this.ra = new PolarAxes(this.q9, this.q8);
                    }
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.cn(this);
                    }
                    if (this.q8 != null && !this.q8.cv()) {
                        this.l0(false);
                    }
                    else if (c != null && d == null) {
                        this.kh(true, this.bx);
                    }
                    break;
                case PolarBase.$$p[8]:
                    if (this.q8 != null && this.q9 != null) {
                        this.ra = new PolarAxes(this.q9, this.q8);
                    }
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.cn(this);
                    }
                    if (this.q9 != null && !this.q9.cv()) {
                        this.l0(false);
                    }
                    else if (c != null && d == null) {
                        this.kh(true, this.bx);
                    }
                    if (this.q8 != null && !this.q8.cv()) {
                        this.q8.hm();
                    }
                    break;
                case PolarBase.$$p[1]:
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.rt);
                        this.rt = this.ce(this.so);
                    }
                    break;
                case "AngleColumn":
                    this.rc.cv.g$i();
                    if (this.q8 != null && !this.q8.cv()) {
                        this.l0(false);
                    }
                    break;
                case PolarBase.$$p[9]:
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.ru);
                        this.ru = this.ce(this.sy);
                    }
                    break;
                case "RadiusColumn":
                    this.rc.cv.g$i();
                    if (this.q9 != null && !this.q9.cv()) {
                        this.l0(false);
                    }
                    break;
                case PolarBase.$$p[10]:
                    this.l0(false);
                    this.k7();
                    break;
                case PolarBase.$$p[7]:
                    this.l0(false);
                    this.k7();
                    break;
                case "TransitionProgress":
                    this.rb = new PolarAxisInfoCache(this.q8, this.q9, this.ch);
                    this.t3 = this.bx.bv;
                    this.t2 = this.bx.bu;
                    this.rj.v = this.r8;
                    this.rj.c(this.gn, this.rh, this.rf);
                    if (this.ct(this.bx)) {
                        return;
                    }
                    if (this.gn == 1) {
                        this.tc(this.rf, this.rc);
                    }
                    else {
                        this.tc(this.rj, this.rc);
                    }
                    if (this.ca != null) {
                        this.ca.ln(this);
                    }
                    break;
                case "TrendLineBrush":
                    this.md();
                    break;
                case PolarBase.$$p[2]:
                    this.l0(false);
                    this.k7();
                    break;
                case "TrendLineType":
                    this.k7();
                    break;
                case PolarBase.$$p[4]:
                    this.rw = this.r5();
                    this.l0(false);
                    break;
                case PolarBase.$$p[3]:
                    this.rv = this.r4();
                    this.l0(false);
                    break;
                case PolarBase.$$p[5]:
                    this.rm = this.rn();
                    break;
            }
        }
        get rm() {
            return this.rl;
        }
        set rm(a) {
            let b = this.rl;
            this.rl = a;
            if (b != this.rl) {
                this.raisePropertyChanged("ActualItemSearchMode", enumGetBox(ScatterItemSearchMode_$type, b), enumGetBox(ScatterItemSearchMode_$type, this.rl));
            }
        }
        rn() {
            if (this.ro != 0) {
                return this.ro;
            }
            return this.r3 ? 4 : 1;
        }
        get_r3() {
            return false;
        }
        get r3() {
            return this.get_r3();
        }
        r5() {
            return this.r2;
        }
        r4() {
            return this.r1;
        }
        ry(a) {
            if (typeCast(NumericRadiusAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        rx(a) {
            if (typeCast(NumericAngleAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        kh(a, b) {
            super.kh(a, b);
            let c = b;
            if (a) {
                c.cw.clear();
            }
            c.cv.g$d();
        }
        q0(a, b) {
            let c = a.top - 10;
            let d = a.bottom + 10;
            let e = a.left - 10;
            let f = a.right + 10;
            let g = ((() => {
                let $ret = new Clipper(1, e, d, f, c, false);
                $ret.i = b;
                return $ret;
            })());
            return g;
        }
        s2(a, b, c, d) {
            a.g = new Dictionary$2(Base.$, OwnedPoint.$, 1, b);
            let e = this.ch;
            for (let f = 0; f < b; f++) {
                let g = a.w._inner[f];
                if (!isInfinity(g.x) && !isInfinity(g.y)) {
                    let h = { $type: Point_$type, x: this.rt.item(f), y: this.ru.item(f) };
                    let i = { $type: Point_$type, x: g.x, y: g.y };
                    a.g.addItem(e.item(f), ((() => {
                        let $ret = new OwnedPoint();
                        $ret.a = e.item(f);
                        $ret.b = h;
                        $ret.c = i;
                        return $ret;
                    })()));
                }
            }
        }
        s8(a, b) {
            let c = b.bv;
            let d = b.bu;
            a.j.clear();
            a.n.clear();
            let e = Math.min(this.rt != null ? this.rt.count : 0, this.ru != null ? this.ru.count : 0);
            if (e < 1) {
                return;
            }
            this.rb = new PolarAxisInfoCache(this.q8, this.q9, this.ch);
            this.rd = a;
            this.t2 = d;
            this.t3 = c;
            b.ct.l(a.j, this.si, c, d, this.gh);
            if (e <= this.si) {
                this.s2(a, e, c, d);
            }
            let f = this.q0(d, a.n);
            let g = Math.min(this.q8.kv, this.q8.ku);
            let h = Math.max(this.q8.ku, this.q8.kv);
            b.cv.i = this.r8;
            b.cv.h = 0;
            b.cv.k = this.q9.ma;
            b.cv.j = this.q9.l9;
            b.cv.l = (i, j) => this.ra.c(i, j, c, d, Math.cos);
            b.cv.m = (i, j) => this.ra.d(i, j, c, d, Math.sin);
            let i = new List$1(Number_$type, 0);
            for (let j = 0; j < this.rt.count; j++) {
                if (this.rt.item(j) >= g && this.rt.item(j) <= h) {
                    i.add(this.rt.item(j));
                }
            }
            let k = this.ru;
            if (i.count != this.rt.count) {
                k = new List$1(Number_$type, 0);
                for (let l = 0; l < this.rt.count; l++) {
                    if (this.rt.item(l) >= g && this.rt.item(l) <= h) {
                        k.add(this.ru.item(l));
                    }
                }
            }
            b.cv.n(a.n, this.rq, i, k, this.sj, runOn(this.q8, this.q8.getScaledAngle), runOn(this.q9, this.q9.mg), ((() => {
                let $ret = new TrendResolutionParams();
                $ret.b = this.gh;
                $ret.f = d;
                $ret.g = c;
                return $ret;
            })()), f, g, h);
        }
        get_dr() {
            return true;
        }
        q4(a, b, c) {
            return null;
        }
        q5(a, b, c) {
            let d = this.rg();
            let e = this.rc.by(this.ox(b));
            let f = -1;
            if (e == null) {
                if (a != null) {
                    f = this.ch.indexOf(a);
                }
                else {
                    return null;
                }
            }
            else {
                f = e.ak;
            }
            if (f == -1) {
                return null;
            }
            let g = new HighlightingInfo();
            g.b = this;
            g.h = f;
            g.g = f;
            g.d = false;
            g.e = true;
            if (c != null && c.h == g.h && c.g == g.g) {
                return c;
            }
            return g;
        }
        q3(a, b, c) {
            let d = new HighlightingInfo();
            d.b = this;
            d.h = 0;
            d.g = this.ch.count - 1;
            d.d = true;
            if (c != null && c.h == d.h && c.g == d.g) {
                return c;
            }
            return d;
        }
        av(a, b, c) {
            if (this.cy && this.d9(this.bj) && !c) {
                let d = this.q4(a, b, this.q6);
                this.q6 = d;
                return d;
            }
            else {
                let e = this.q3(a, b, this.q6);
                this.q6 = e;
                return e;
            }
        }
        aw(a, b, c) {
            if (this.d9(this.bj) && !c) {
                let d = this.q5(a, b, this.q7);
                this.q7 = d;
                return d;
            }
            else {
                let e = this.q3(a, b, this.q7);
                e.e = true;
                this.q7 = e;
                return e;
            }
        }
        r7() {
            return (this.assigningPolarStyle != null && this.rw) || (this.bj != 1);
        }
        r6() {
            return (this.assigningPolarMarkerStyle != null && this.rv) || (this.bj != 1);
        }
        tc(a, b) {
            let c = b.bv;
            let d = b.bu;
            let e = this.getEffectiveViewport1(b);
            let f = this.o7(b);
            this.rb = new PolarAxisInfoCache(this.q8, this.q9, this.ch);
            if (this.pt()) {
                b.ct.j(a.j, this.pv);
                if (this.r6()) {
                    this.s4(b, a);
                }
            }
            b.cm();
            let g = this.q0(d, b.cv.g$j.ak);
            b.cv.g$h(a.n, g);
            this.s1(d, c, e, f, b);
        }
        qx(a, b) {
            return this.qy(a, b);
        }
        qy(a, b) {
            if (b < a || a < 0 || a > this.rt.count || b < 0 || b > this.rt.count) {
                return null;
            }
            let c = new Array((b - a) + 1);
            for (let d = a; d <= b; d++) {
                let e = d;
                c[d - a] = this.ch.item(d);
            }
            return c;
        }
        s4(a, b) {
            a.b3 = true;
            this.rk.aw(this, this.r6(), runOn(this, this.qx));
            let c = this.rk.d;
            let d = c != null;
            let e = this.getEffectiveViewport1(a);
            let f = this.ch == null ? 0 : this.ch.count;
            this.rc.cf((g) => {
                if (g._visibility == 0) {
                    let h = g.ak;
                    let i = g.content;
                    if (i == null) {
                        i = new DataContext();
                        g.content = i;
                    }
                    if (d) {
                        this.s6(h, f, a.q);
                    }
                    this.rk.ac(g, i);
                }
            });
        }
        s7(a, b, c) {
            let d = this.bj != 1;
            this.rk.ay(this.rk.b, a, b, false);
            this.rk.ab(this.fj);
            let e = this.rk.av;
            let f = null;
            let g = this.ch;
            if (d && this.ca != null) {
                f = this.ca.a3.getHighlightingInfo(this, g, e.o, e.n, false);
                e.b = f;
            }
            e.f = c;
            this.ta(e);
            this.rk.z(this, f, c, d, a < 0);
        }
        s6(a, b, c) {
            let d = this.bj != 1;
            this.rk.ay(this.rk.d, a, b, true);
            this.rk.aa(this.fj);
            let e = this.rk.au;
            let f = null;
            let g = this.ch;
            let h = null;
            if (d && this.ca != null) {
                f = this.ca.a3.getHighlightingInfo(this, g, e.o, e.n, true);
                if (this.ca.a3.isCrossSeriesHighlight(this)) {
                    h = this.ca.a3.getHighlightingInfo(this, g, e.o, e.n, true);
                }
                e.b = f;
            }
            e.f = c;
            this.s9(e);
            this.rk.y(this, f, c, d, e.l, this.ca.a3.sumHighlightingProgress);
        }
        ta(a) {
            if (this.assigningPolarStyle != null && this.rw) {
                this.assigningPolarStyle(this, a);
            }
        }
        s9(a) {
            if (this.assigningPolarMarkerStyle != null && this.rv) {
                this.assigningPolarMarkerStyle(this, a);
            }
        }
        s1(a, b, c, d, e) {
            e.cy(a, b, c, d);
        }
        md() {
            super.md();
            if (this.g9 < 0) {
                return;
            }
            this.rc.c1();
        }
        l2(a, b) {
            super.l2(a, b);
            if (!this.et) {
                this.bx.a2(b);
                return;
            }
            this.bx.a2(b);
            if (this.ct(this.bw)) {
                return;
            }
            let c = this.bw;
            if (!this.en) {
                this.ri = new PolarFrame();
                this.s8(this.ri, c);
            }
            this.en = false;
            this.tc(this.ri, c);
            this.et = false;
        }
        lz(a, b, c, d, e) {
            super.lz(a, b, c, d, e);
            let f = this.a4.a$h.item(d);
            let g = f;
            f.a1(c);
            if (this.ct(g)) {
                return;
            }
            if (this.re == null) {
                this.re = new PolarFrame();
            }
            this.s8(this.re, g);
            this.tc(this.re, g);
        }
        tb(a, b) {
            let c = new List$1(Base.$, 0);
            for (let d of fromEnum(b.c)) {
                if (!a.containsKey(d)) {
                    c.add1(d);
                }
            }
            for (let e of fromEnum(c)) {
                b.h(e);
            }
        }
        qw(a, b, c) {
            this.s5();
            return this.rd.w.toArray();
        }
        sa(a) {
            let b = new List$1(Number_$type, 0);
            let c = this.ch;
            for (let d of fromEnum(this.rc.cw.c)) {
                b.add(c.indexOf(d));
            }
            return b;
        }
        t0(a) {
            return { $type: Point_$type, x: this.rt.item(a), y: this.ru.item(a) };
        }
        kr(a) {
            super.kr(a);
            this.a6.exportTrendlineData(this, a, this.rc.cv.g$j);
        }
    }
    PolarBase.$t = /*@__PURE__*/ markType(PolarBase, 'PolarBase', MarkerSeries.$);
    PolarBase.td = /*@__PURE__*/ DependencyProperty.i("ActualTrendLineBrush", Brush.$, PolarBase.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    PolarBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, PolarBase, 'raisePropertyChanged', ['AngleAxis:q8:te', [NumericAngleAxis.$, null], 'AngleMemberPath:so:tf', [2], 'ClipSeriesToBounds:rz:tg', [0, false], 'IsCustomPolarMarkerStyleAllowed:r1:th', [0, false], 'IsCustomPolarStyleAllowed:r2:ti', [0, false], 'ItemSearchMode:ro:tj', [ScatterItemSearchMode_$type, /*@__PURE__*/ enumGetBox(ScatterItemSearchMode_$type, 0)], 'ItemSearchThreshold:sh:tk', [1, 10000], 'MaximumMarkers:si:tl', [1, 400], 'RadiusAxis:q9:tm', [NumericRadiusAxis.$, null], 'RadiusMemberPath:sy:tn', [2], 'UseCartesianInterpolation:r8:tv', [0, true], 'TrendLineType:rq:tt', [TrendLineType_$type, /*@__PURE__*/ enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness:sg:ts', [1, 1.5], 'TrendLinePeriod:sj:tr', [1, 7], 'TrendLineZIndex:sk:tu', [1, 1], 'TrendLineBrush:tx:to', [Brush.$, null], 'TrendLineDashArray:ty:tp', [DoubleCollection.$], 'TrendLineDashCap:tz:tq', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)]]);
    return PolarBase;
})();
/**
 * @hidden
 */
export let PolarSeriesRenderManager = /*@__PURE__*/ (() => {
    class PolarSeriesRenderManager extends SeriesRenderManager {
        constructor() {
            super(...arguments);
            this.au = null;
            this.av = null;
        }
        c() {
            this.au = new AssigningPolarMarkerStyleEventArgs();
            return this.au;
        }
        a() {
            this.av = new AssigningPolarStyleEventArgs();
            return this.av;
        }
        aw(a, b, c) {
            this.w(a, b, c);
        }
        ax(a, b, c) {
            this.x(a, b, c);
        }
        ay(a, b, c, d) {
            if (b == -1) {
                a.c = false;
                a.o = 0;
                a.n = c - 1;
            }
            else {
                if (d) {
                    a.o = b;
                    a.n = b;
                }
                else {
                    a.c = false;
                    a.o = b;
                    a.n = b;
                }
            }
        }
    }
    PolarSeriesRenderManager.$t = /*@__PURE__*/ markType(PolarSeriesRenderManager, 'PolarSeriesRenderManager', SeriesRenderManager.$);
    return PolarSeriesRenderManager;
})();
/**
 * @hidden
 */
export let PolarBaseView = /*@__PURE__*/ (() => {
    class PolarBaseView extends MarkerSeriesView {
        constructor(a) {
            super(a);
            this.cu = null;
            this.ct = null;
            this.cv = null;
            this.cw = null;
            this.cu = a;
            this.cw = new HashPool$2(Base.$, Marker.$);
            this.ch(this.cw);
            this.cv = new PolarTrendLineManager();
        }
        as() {
            super.as();
            this.ct = this.cs();
            if (!this.q) {
                this.cu.si = 1000;
                this.b1.pr = Defaults.e;
            }
        }
        cz(a) {
            this.cw.g(a);
        }
        cs() {
            let a = new NumericMarkerManager(0, (b) => this.cw.item(b), (b) => this.cu.rb.c.item(b), runOn(this, this.c0), runOn(this, this.cr), runOn(this, this.cx));
            a.n = true;
            a.p = runOn(this.cu, this.cu.t0);
            return a;
        }
        c0(a) {
            this.cu.tb(a, this.cw);
        }
        cr() {
            return this.cu.qw(this.cw, this.bv, this.bu);
        }
        cx() {
            return this.cu.sa(this.cw);
        }
        cy(a, b, c, d) {
            if (this.cu.rz) {
                let e = new GeometryGroup();
                this.cu.q9.mo(e, a, b, c, d);
            }
            else {
            }
        }
        c1() {
            if (this.cu.tx != null) {
                this.cu.tw = this.cu.tx;
            }
            else {
                this.cu.tw = this.cu.of;
            }
        }
        cf(a) {
            this.cw.f(a);
        }
        a5(a, b) {
            if (a.d) {
                if (this.cu.rq != 0 && !b) {
                    let c = this.cv.g$j;
                    c.ac = this.cu.sg;
                    c._stroke = this.cu.tw;
                    c.ad = this.cu.tz;
                    c.ai = this.cu.ty;
                    a.u(c);
                }
            }
            super.a5(a, b);
        }
        c2() {
            return Rect.empty;
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'><span>" + "${item." + this.cu.so + "}" + "</span><br/><span";
            let b = this.e.a4.a$r(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.cu.hp + ": </span><span class='ui-priority-primary'>" + "${item." + this.cu.sy + "}</span></div>";
            return a;
        }
    }
    PolarBaseView.$t = /*@__PURE__*/ markType(PolarBaseView, 'PolarBaseView', MarkerSeriesView.$);
    return PolarBaseView;
})();
//# sourceMappingURL=PolarBase_combined.js.map
