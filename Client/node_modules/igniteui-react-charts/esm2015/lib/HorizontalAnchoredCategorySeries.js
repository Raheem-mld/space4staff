/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { IHorizontalAnchoredCategorySeriesInteractionManager_$type } from "./IHorizontalAnchoredCategorySeriesInteractionManager";
import { DVContainer } from "igniteui-react-core";
import { runOn, Point_$type, typeCast, EnumUtil, enumGetBox, markType, markDep } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { CategoryMode_$type } from "./CategoryMode";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { Axis } from "./Axis";
import { TrendLineType_$type } from "igniteui-react-core";
import { CategoryTrendLineManagerFactory } from "./CategoryTrendLineManagerFactory";
import { ISortingAxis_$type } from "./ISortingAxis";
import { CategoryXAxis } from "./CategoryXAxis";
import { PropertyMetadata } from "igniteui-react-core";
/**
 * @hidden
 */
export let HorizontalAnchoredCategorySeries = /*@__PURE__*/ (() => {
    class HorizontalAnchoredCategorySeries extends AnchoredCategorySeries {
        constructor() {
            super(...arguments);
            this.t0 = null;
            this.tw = null;
            this.t2 = null;
            this.ty = 0;
        }
        get t1() {
            if (this.t0 == null) {
                this.t0 = DVContainer.instance.createInstance(IHorizontalAnchoredCategorySeriesInteractionManager_$type, () => this.ck.n);
            }
            return this.t0;
        }
        ke() {
            super.ke();
            this.xAxis = null;
            this.yAxis = null;
        }
        bo() {
            if (this.bp == 0) {
                return 1;
            }
            else {
                return super.bo();
            }
        }
        q2() {
            return this.tw;
        }
        rn() {
            return this.t2;
        }
        pd(a) {
            if (this.q3 == null || this.q3.m.count == 0 || !this.hasMarkers || !this.pt()) {
                return Rect.empty;
            }
            return this.t1.d$d(this, this.q3.m, a, runOn(this, this.ue));
        }
        ue(a) {
            return this.sv.c9(a);
        }
        t6(a, b, c) {
            return this.t1.d$c(this, this.rn(), a, b, c);
        }
        ah(a) {
            return this.t1.d$a(this, this.q3.f, this.r3(this.bx), this.r4(this.bx), a);
        }
        ai(a) {
            return this.t1.d$b(this, this.q3.f, this.r3(this.bx), this.r4(this.bx), a);
        }
        ep(a, b) {
            if (this.eo(a, b)) {
                return true;
            }
            if (this.pu(a, b)) {
                return true;
            }
            return false;
        }
        getOffsetValue() {
            return this.q8.r(this.q2(), this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        getCategoryWidth() {
            let a = this.getEffectiveViewport1(this.bx);
            return this.q2().getCategorySize(this.bx.bv, this.bx.bu, a);
        }
        f8(a, b, c) {
            if (this.ca == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.bx);
            let e = this.q2();
            let f = new ScalerParams(0, this.ca.pg, this.bx.bu, e.cc, d);
            let g = this.q8.r(e, this.ca.pg, this.bx.bu, d);
            return this.ga(this.valueColumn, a, e, f, g, runOn(this, this.r1), b, c);
        }
        g6(a, b) {
            return this.g7(a, b, this.q2(), runOn(this, this.r1), this.valueColumn);
        }
        g4(a, b) {
            return this.g5(a, b, this.q2(), runOn(this, this.r1), this.valueColumn);
        }
        fu(a, b, c, d, e) {
            if (this.valueColumn == null) {
                return Number.POSITIVE_INFINITY;
            }
            return this.fv(a, b, this.q2(), d, e, this.valueColumn.count, runOn(this, this.r1));
        }
        o2(a, b, c) {
            if (this.q2() == null || this.rn() == null) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            return this.o4(a, b, c, this.q8.r(this.q2(), this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx)), this.rn(), this.q2(), null, null, null);
        }
        fetchXAxis() {
            return this.tw;
        }
        fetchYAxis() {
            return this.t2;
        }
        te(a) {
            this.xAxis = typeCast(CategoryAxisBase.$, a);
        }
        tf(a) {
            this.yAxis = typeCast(NumericYAxis.$, a);
        }
        rx() {
            return this.t2 != null && this.t2.cv();
        }
        ua(a) {
            this.tw = a;
        }
        ub(a) {
            this.t2 = a;
        }
        qw(a, b) {
            return this.ss(a, b, this.tw);
        }
        lm(a, b, c, d) {
            switch (b) {
                case HorizontalAnchoredCategorySeries.$$p[0]:
                    this.ua(this.xAxis);
                    if (this.sv.c3) {
                        this.sv.c2 = CategoryTrendLineManagerFactory.a(this.sv.c2, this.tw, this.mr, this, this.ck);
                    }
                    break;
                case "TrendLineType":
                    let e = EnumUtil.getEnumValue(TrendLineType_$type, d);
                    if (e != 0) {
                        this.sv.c2 = CategoryTrendLineManagerFactory.a(this.sv.c2, this.tw, this.mr, this, this.ck);
                    }
                    break;
            }
            super.lm(a, b, c, d);
            switch (b) {
                case HorizontalAnchoredCategorySeries.$$p[0]:
                    if (c != d) {
                        this.kl(typeCast(Axis.$, c));
                        this.lr(typeCast(Axis.$, d));
                        this.ua(this.xAxis);
                        this.rc.cr.g(this.gh);
                        this.l0(false);
                        this.k7();
                    }
                    break;
                case HorizontalAnchoredCategorySeries.$$p[1]:
                    if (c != d) {
                        this.kl(typeCast(Axis.$, c));
                        this.lr(typeCast(Axis.$, d));
                        this.ub(this.yAxis);
                        this.rc.cr.g(this.gh);
                        this.rx();
                        this.l0(false);
                        this.k7();
                    }
                    break;
                case "CategoryMode":
                    if (this.xAxis != null) {
                        this.xAxis.le(true);
                    }
                    break;
            }
        }
        kk(a, b, c, d) {
            super.kk(a, b, c, d);
            if (this.tw != null && typeCast(ISortingAxis_$type, this.tw) !== null) {
                this.tw.i$i();
            }
            switch (a) {
                case 4:
                    if (this.tw != null) {
                        this.tw.cv();
                    }
                    if (this.t2 != null && !this.t2.cv()) {
                        this.l0(true);
                    }
                    break;
                case 1:
                    if (this.tw != null) {
                        this.tw.cv();
                    }
                    if (this.t2 != null && !this.t2.cv()) {
                        this.l0(true);
                    }
                    break;
                case 0:
                    if (this.tw != null) {
                        this.tw.cv();
                    }
                    if (this.t2 != null && !this.t2.cv()) {
                        this.l0(true);
                    }
                    break;
                case 2:
                    if (this.s7 != null && this.sv.cr.d > 0 && this.t2 != null && !this.t2.cv()) {
                        this.l0(true);
                    }
                    break;
                case 3:
                    if (d == this.s7) {
                        if (this.tw != null) {
                            this.tw.cv();
                        }
                        if (this.t2 != null && !this.t2.cv()) {
                            this.l0(true);
                        }
                    }
                    break;
            }
        }
        t4(a) {
            if (typeCast(CategoryXAxis.$, a) !== null || a.b9) {
                return true;
            }
            return false;
        }
        t5(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        get tz() {
            return this.ty;
        }
        set tz(a) {
            let b = this.tz;
            if (a != b) {
                this.ty = a;
                this.raisePropertyChanged("CategoryMode", enumGetBox(CategoryMode_$type, b), enumGetBox(CategoryMode_$type, this.tz));
            }
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    HorizontalAnchoredCategorySeries.$t = /*@__PURE__*/ markType(HorizontalAnchoredCategorySeries, 'HorizontalAnchoredCategorySeries', AnchoredCategorySeries.$);
    HorizontalAnchoredCategorySeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, HorizontalAnchoredCategorySeries, 'raisePropertyChanged', ['XAxis::uc', [CategoryAxisBase.$, null], 'YAxis::ud', [NumericYAxis.$, null]]);
    return HorizontalAnchoredCategorySeries;
})();
//# sourceMappingURL=HorizontalAnchoredCategorySeries.js.map
