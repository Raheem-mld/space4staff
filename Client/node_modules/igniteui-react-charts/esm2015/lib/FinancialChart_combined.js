/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { IndicatorPane } from "./IndicatorPane";
import { Base, BaseError, EventArgs, runOn, delegateRemove, delegateCombine, fromEnum, typeCast, EnumUtil, Number_$type, String_$type, enumGetBox, markType, TypeRegistrar, fromEn } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleFinancialPriceSeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { FinancialChartVolumeType_$type } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode_$type } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode_$type } from "./FinancialChartYAxisMode";
import { FinancialChartType_$type } from "./FinancialChartType";
import { NumericYAxis } from "./NumericYAxis";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { FinancialChartZoomSliderType_$type } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartViewModel } from "./FinancialChartViewModel";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { BrushUtil } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerSeries } from "./MarkerSeries";
import { SyncSettings } from "./SyncSettings";
import { SyncManager } from "./SyncManager";
import { FinancialOverlayType_$type } from "./FinancialOverlayType";
import { ArrayExtension } from "igniteui-react-core";
import { FinancialIndicatorType_$type } from "./FinancialIndicatorType";
import { IndicatorDisplayType_$type } from "./IndicatorDisplayType";
import { ITimeRangeSelectorAxis_$type } from "./ITimeRangeSelectorAxis";
import { FinancialChartVisualData } from "./FinancialChartVisualData";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { ScalerParams } from "./ScalerParams";
import { stringReplace, stringJoin, stringIsNullOrEmpty } from "igniteui-react-core";
import { timeSpanFromDays } from "igniteui-react-core";
import { dateMaxValue, dateMinValue } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType_$type } from "igniteui-react-core";
import { FinancialChartIndicatorMenuContext } from "./FinancialChartIndicatorMenuContext";
import { FinancialChartTypePickerContext } from "./FinancialChartTypePickerContext";
import { FinancialChartRangeSelectorContext } from "./FinancialChartRangeSelectorContext";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorView } from "./FinancialChartRangeSelectorView";
/**
 * @hidden
 */
export let FinancialChart = /*@__PURE__*/ (() => {
    class FinancialChart extends XYChart {
        constructor() {
            super();
            this.un = null;
            this.w7 = null;
            this.w5 = null;
            this.w2 = null;
            this.w4 = null;
            this.w6 = null;
            this.w3 = null;
            this.tt = null;
            this.xp = null;
            this.xq = null;
            this.xm = null;
            this.xr = null;
            this.xs = null;
            this.xn = null;
            this.xo = null;
            this.vb = null;
            this.wh = 40;
            this.uh = null;
            this.uf = null;
            this.uj = null;
            this.uo = null;
            this.x0 = null;
            this.u7 = null;
            this.vv = false;
            this.vu = false;
            this.v0 = false;
            this.vh = false;
            this.xd = 10;
            this.wj = NaN;
            this.wl = NaN;
            this.wk = NaN;
            this.wm = 0;
            this.tz = 0;
            this.t2 = 0;
            this.t4 = 0;
            this.ve = true;
            this.tv = 0;
            this.vf = false;
            this.t9 = null;
            this.ub = null;
            this.v2 = null;
            this.vg = true;
            this.u8 = null;
            this.t6 = 1;
            this.sx = null;
            this.sy = null;
            this.sz = null;
            this.s0 = null;
            this.s2 = null;
            this.s1 = null;
            this.sw = null;
            this.sv = null;
            this.wi = 1;
            this.wg = 1;
            this.wf = 2;
            this.we = 1;
            this.ul = null;
            this.w9 = -2147483648;
            this.wd = 2;
            this.xc = 3;
            this.xa = 10;
            this.w8 = 30;
            this.xb = 9;
            this.tq = null;
            this.tr = null;
            this.tm = null;
            this.applyCustomIndicators = null;
            this.abm = null;
            this.wn = 1;
            this.vd = false;
            this.ud = null;
            this.wa = dateMinValue();
            this.v9 = dateMaxValue();
            this.v7 = null;
            this.i4();
            this.v7 = new ObservableCollection$1(Base.$, 0);
            if (this.xAxisBreaks != null) {
                let a = this.xAxisBreaks;
                a.collectionChanged = delegateCombine(a.collectionChanged, (a, b) => this.abb());
            }
            this.aaw();
        }
        j8(a, b, c) {
            super.j8(a, b, c);
            switch (a) {
                case "ToolbarTemplate":
                case "RangeSelectorTemplate":
                    this.tu = new FinancialChartToolbar(this, this.xx);
                    break;
                case "Toolbar":
                    let d = b;
                    if (d != null) {
                        d.chartTypeChanged = delegateRemove(d.chartTypeChanged, runOn(this, this.aak));
                        d.trendLineTypeChanged = delegateRemove(d.trendLineTypeChanged, runOn(this, this.aan));
                        d.volumeTypeChanged = delegateRemove(d.volumeTypeChanged, runOn(this, this.aao));
                        d.l(null);
                    }
                    if (this.tu != null) {
                        this.tu.ac = this.t1;
                        this.tu.ai = this.bm;
                        this.tu.y = this.tw;
                        this.tu.al = this.vs;
                        if (this.w4 != null) {
                            this.tu.l(this.w4);
                        }
                        let e = this.tu;
                        e.chartTypeChanged = delegateCombine(e.chartTypeChanged, runOn(this, this.aak));
                        ;
                        let f = this.tu;
                        f.trendLineTypeChanged = delegateCombine(f.trendLineTypeChanged, runOn(this, this.aan));
                        let g = this.tu;
                        g.volumeTypeChanged = delegateCombine(g.volumeTypeChanged, runOn(this, this.aao));
                    }
                    break;
                case "ChartType":
                    if (this.tu != null) {
                        this.tu.y = this.tw;
                    }
                    break;
                case "VolumeType":
                    if (this.tu != null) {
                        this.tu.ac = this.t1;
                    }
                    break;
                case "TrendLineType":
                    if (this.tu != null) {
                        this.tu.ai = this.bm;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.tu == null) {
                        break;
                    }
                    this.tu.al = this.vs;
                    this.setGridRows();
                    break;
            }
        }
        aao(a, b) {
            this.t1 = this.tu.ac;
        }
        aan(a, b) {
            this.bm = this.tu.ai;
        }
        aak(a, b) {
            this.tw = this.tu.y;
        }
        aaw() {
            this.un = new IndicatorPane();
            this.ue = TypeRegistrar.create("FinancialLegend");
        }
        provideGrid(a) {
            this.w7 = a;
            this.abh();
            this.setGridRows();
            if (this.tu != null) {
                this.tu.bg(a);
            }
        }
        onDocumentClick(a) {
            if (this.tu != null) {
                this.tu.bl(a);
            }
        }
        getContext() {
            let a = this.tu.v();
            let b = new FinancialChartContext();
            b.vm = new FinancialChartViewModel();
            b.vm.toolbar = a;
            b.container = this.fd;
            b.toolbarContainer = this.w4;
            b.legendContainer = this.w3;
            b.indicatorsContainer = this.w2;
            b.volumeContainer = this.w5;
            b.zoomContainer = this.w6;
            return b;
        }
        provideContainer(a) {
            let b = a;
            if (b != null) {
                let c = "financialChartMainGrid";
                let d = b.createElement("div");
                d.setStyleProperty("width", "100%");
                d.setStyleProperty("height", "100%");
                if (this.tu == null) {
                    this.tu = new FinancialChartToolbar(this, this.xx);
                }
                this.tu.w.isIndicatorMenuVisible = this.vj && this.vk;
                this.w4 = b.getSubRenderer(d);
                this.tu.l(this.w4);
                let e = b.createElement("div");
                e.setStyleProperty("width", "100%");
                e.setStyleProperty("height", "100%");
                let f = b.createElement("div");
                f.setStyleProperty("width", "100%");
                f.setStyleProperty("height", "100%");
                this.w3 = b.getSubRenderer(f);
                let g = b.createElement("div");
                g.setStyleProperty("width", "100%");
                g.setStyleProperty("height", "100%");
                this.w2 = b.getSubRenderer(g);
                let h = b.createElement("div");
                h.setStyleProperty("width", "100%");
                h.setStyleProperty("height", "100%");
                this.w5 = b.getSubRenderer(h);
                let i = b.createElement("div");
                i.setStyleProperty("width", "100%");
                i.setStyleProperty("height", "100%");
                this.w6 = b.getSubRenderer(i);
                a = b.getSubRenderer(e);
            }
            else {
                this.w4 = null;
                if (this.tu != null) {
                    this.tu.l(null);
                }
                if (this.vc != null) {
                    this.vc.provideContainer(null);
                    this.vc = null;
                }
                if (this.ue != null) {
                    this.ue.provideContainer(null);
                }
            }
            super.provideContainer(a);
            if (b != null) {
                if (this.volumeChart != null) {
                    this.volumeChart.provideContainer(this.w5);
                }
                if (this.un != null) {
                    this.un.h(this.w2);
                }
                if (this.zoomSliderChart != null) {
                    this.zoomSliderChart.provideContainer(this.w6);
                    if (a != null) {
                        this.z4();
                    }
                    else {
                        this.vc = null;
                    }
                }
                if (this.ue != null) {
                    this.ue.provideContainer(this.w3);
                }
                this.setGridRows();
            }
        }
        aa7(a, b, c) {
            if (a != null) {
                a.provideContainer(null);
            }
            if (b != null) {
                b.provideContainer(c);
            }
            this.setGridRows();
        }
        abl(a, b) {
            this.aa7(a, b, this.w6);
            if (b == null) {
                return;
            }
            this.z4();
        }
        z4() {
            if (this.w6 == null) {
                return;
            }
            if (this.vc != null) {
                this.vc.provideContainer(null);
            }
            this.vc = TypeRegistrar.create("ZoomSlider");
            this.vc.provideContainer(this.w6);
            let a = this.vc;
            a.windowRectChanged = delegateCombine(a.windowRectChanged, (a, b) => {
                if (this.dataChart != null) {
                    this.dataChart.pw = new Rect(0, this.vc.windowRect.left, this.dataChart.pg.top, this.vc.windowRect.width, this.dataChart.pg.height);
                }
            });
            this.z5();
        }
        abj(a, b) {
            this.aa7(a, b, this.w5);
        }
        setGridRows() {
            if (this.w7 == null) {
                return;
            }
            let a = new Array(6);
            a[0] = (this.vs ? this.wt : 0) + "px";
            a[1] = this.vo ? "min-content" : "0px";
            a[2] = "auto";
            a[3] = this.indicatorCharts == null || this.indicatorCharts.count == 0 ? "0px" : this.indicatorCharts.count * 150 + "px";
            a[4] = this.volumeChart == null ? "0px" : "100px";
            a[5] = this.zoomSliderChart == null ? "0px" : "100px";
            if (this.vc != null) {
                if (a[5] == "0px") {
                    this.vc.hide();
                }
                else {
                    this.vc.show();
                }
            }
            this.w7.setStyleProperty("-ms-grid-rows", stringReplace(stringJoin(" ", ...a), "auto", "1fr"));
            this.w7.setStyleProperty("grid-template-rows", stringJoin(" ", ...a));
            if (this.fd == null) {
                return;
            }
            if (this.dataChart != null) {
                this.dataChart.notifyContainerResized();
            }
            if (this.un != null) {
                this.un.f();
            }
            if (this.volumeChart != null) {
                this.volumeChart.notifyContainerResized();
            }
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.notifyContainerResized();
            }
            if (this.vc != null) {
                this.vc.notifySizeChanged();
            }
        }
        jl() {
            super.jl();
            this.l9 = 1;
            this.ro = 0;
            this.n6 = 0;
            this.si = null;
            this.sb = AxisDefaults.g;
            this.nq = AxisDefaults.e;
            this.np = AxisDefaults.f;
            this.sc = AxisDefaults.j;
            this.r8 = null;
            this.abn = AxisDefaults.h;
            this.w1 = AxisDefaults.b;
            this.cg = true;
            this.ce = true;
            this.cf = false;
            this.aa = 0;
            this.ea = Defaults.j;
            this.lg = Defaults.ae;
            this.lb = Defaults.af;
            this.lc = Defaults.ag;
            this.ej = NaN;
            this.eb = 30;
            this.cn = true;
            this.ct = false;
            if (this.dataChart != null) {
                let a = this.dataChart.cf.j.e();
                this.s5 = a.d;
                this.s6 = a.e;
                this.s4 = a.d;
                this.abn = this.dataChart.s1;
            }
            let b = new BrushCollection();
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#8BDC5C";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#8961A9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#6DB1FF";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#82E9D9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#EA3C63";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#735656";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#F8CE4F";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#A8A8B7";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#E051A9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#FF903B";
                return $ret;
            })()));
            let c = new BrushCollection();
            for (let d of fromEnum(b)) {
                c.add(BrushUtil.m(d, 0.3));
            }
            this.s7 = c;
            this.s8 = b;
        }
        aa3() {
            if (this.un != null) {
                this.un.b = null;
                this.un.b = this.indicatorCharts;
            }
            this.setGridRows();
        }
        aa4() {
            this.setGridRows();
        }
        abd() {
            this.aa3();
        }
        z3() {
            if (this.vc == null || this.zoomSliderChart == null || this.dataChart == null || this.dataChart.series.count == 0) {
                return;
            }
            let a = this.fd.rootWrapper.width();
            let b = this.dataChart.pv.left + this.dataChart.pv.width;
            let c = this.dataChart.pv.left;
            let d = a - b;
            this.vc.startInset = c - this.vc.trackStartInset;
            this.vc.endInset = d - this.vc.trackEndInset;
            if (this.vc.endInset < 0) {
                let e = this.vc.endInset;
                this.vc.endInset = 0;
                this.dataChart.ft += (e * -1);
            }
            if (this.vc.startInset < 0) {
                let f = this.vc.startInset;
                this.vc.startInset = 0;
                this.dataChart.fq += (f * -1);
            }
            this.zoomSliderChart.fq = c;
            this.zoomSliderChart.ft = d;
            this.zoomSliderChart.fm = this.vc.barExtent;
        }
        aau() {
            this.z3();
        }
        ji(a) {
            super.ji(a);
            if (a != null) {
                a.fl = 0;
            }
        }
        abo(a) {
            return a.o9();
        }
        abr() {
            return this.w3 == null ? null : this.abq(this.w3.rootWrapper);
        }
        abp(a) {
            if (a == null || a.d == null) {
                return null;
            }
            return this.abq(a.d.rootWrapper);
        }
        abq(a) {
            if (a == null) {
                return null;
            }
            let b = a.getOffset();
            return new Rect(0, b.left, b.top, a.width(), a.height());
        }
        wo() {
            if (this.w7 == null) {
                return NaN;
            }
            let a = this.w7.getOffset();
            return this.w7.width() + (a == null ? 0 : a.left);
        }
        jt(source_, a, b) {
            super.jt(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.jw(source_, a, b);
            }
        }
        ju(source_, a, b) {
            super.ju(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.jx(source_, a, b);
            }
        }
        js(source_) {
            super.js(source_);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.jt(source_);
            }
        }
        jw(source_, a, b, c) {
            super.jw(source_, a, b, c);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.jy(source_, a, b, c);
            }
        }
        jo(a, b) {
            super.jo(a, b);
            if (this.vp(a)) {
                a.toolTip = null;
            }
        }
        get tu() {
            return this.tt;
        }
        set tu(a) {
            let b = this.tu;
            if (a != b) {
                this.tt = a;
                this.j6("Toolbar", b, this.tu);
            }
        }
        get xw() {
            return this.xp;
        }
        set xw(a) {
            let b = this.xw;
            if (a != b) {
                this.xp = a;
                this.j6("RangeSelectorTemplate", b, this.xw);
            }
        }
        get xx() {
            return this.xq;
        }
        set xx(a) {
            let b = this.xx;
            if (a != b) {
                this.xq = a;
                this.j6("ToolbarTemplate", b, this.xx);
            }
        }
        get xt() {
            return this.xm;
        }
        set xt(a) {
            let b = this.xt;
            if (a != b) {
                this.xm = a;
                this.j6("ChartTypePickerTemplate", b, this.xt);
            }
        }
        get xy() {
            return this.xr;
        }
        set xy(a) {
            let b = this.xy;
            if (a != b) {
                this.xr = a;
                this.j6("TrendLineTypePickerTemplate", b, this.xy);
            }
        }
        get xz() {
            return this.xs;
        }
        set xz(a) {
            let b = this.xz;
            if (a != b) {
                this.xs = a;
                this.j6("VolumeTypePickerTemplate", b, this.xz);
            }
        }
        get xu() {
            return this.xn;
        }
        set xu(a) {
            let b = this.xu;
            if (a != b) {
                this.xn = a;
                this.j6("IndicatorMenuTemplate", b, this.xu);
            }
        }
        get xv() {
            return this.xo;
        }
        set xv(a) {
            let b = this.xv;
            if (a != b) {
                this.xo = a;
                this.j6("OverlayPickerTemplate", b, this.xv);
            }
        }
        get vc() {
            return this.vb;
        }
        set vc(a) {
            let b = this.vc;
            if (a != b) {
                this.vb = a;
                this.j6("ZoomSlider", b, this.vc);
            }
        }
        get_eb() {
            return super.get_eb();
        }
        set_eb(a) {
            super.set_eb(a);
        }
        get_cn() {
            return super.get_cn();
        }
        set_cn(a) {
            super.set_cn(a);
        }
        get wt() {
            return this.wh;
        }
        set wt(a) {
            let b = this.wt;
            if (a != b) {
                this.wh = a;
                this.j6("ToolbarHeight", b, this.wt);
            }
        }
        ly() {
            return this.xAxis;
        }
        lz() {
            return this.yAxis;
        }
        onAttachedToUI() {
            super.onAttachedToUI();
            if (this.vc != null) {
                this.vc.onAttachedToUI();
            }
        }
        onDetachedFromUI() {
            super.onDetachedFromUI();
            if (this.vc != null) {
                this.vc.onDetachedFromUI();
            }
        }
        ab(a) {
            return 20;
        }
        get_c5() {
            return ((() => {
                let $ret = new List$1(DataSeriesType_$type, 0);
                $ret.add(20);
                return $ret;
            })());
        }
        get c5() {
            return this.get_c5();
        }
        get_c4() {
            return ((() => {
                let $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
                $ret.add(new SimpleFinancialPriceSeriesRule());
                $ret.add(new SubCollectionsRule());
                return $ret;
            })());
        }
        get c4() {
            return this.get_c4();
        }
        tg(a) {
            return this.th(a);
        }
        uu(a) {
            return this.uv(a);
        }
        tf(a) {
            let b = this.tg(0);
            b.name = a;
            return b;
        }
        i1() {
            this.xAxis = this.tf("xAxis");
            this.yAxis = this.uu(0);
            this.yAxis.name = "yAxis";
            this.volumeAxis = this.uu(0);
            this.volumeAxis.name = "volumeAxis";
            this.volumeXAxis = this.tf("volumeXAxis");
            this.v4 = new List$1(NumericYAxis.$, 0);
            this.v6 = new List$1(CategoryAxisBase.$, 0);
            this.indicatorAxis = this.uu(0);
            this.indicatorAxis.name = "indicatorAxis";
            this.indicatorXAxis = this.tf("indicatorXAxis_0");
            this.v4.add(this.indicatorAxis);
            this.v6.add(this.indicatorXAxis);
            if (this.xAxis.ay == null) {
                this.xAxis.ay = new AxisLabelSettings();
            }
            if (this.yAxis.ay == null) {
                this.yAxis.ay = new AxisLabelSettings();
            }
            if (this.volumeAxis.ay == null) {
                this.volumeAxis.ay = new AxisLabelSettings();
            }
            if (this.volumeXAxis.ay == null) {
                this.volumeAxis.ay = new AxisLabelSettings();
            }
            if (this.indicatorAxis.ay == null) {
                this.indicatorAxis.ay = new AxisLabelSettings();
            }
            if (this.indicatorXAxis.ay == null) {
                this.indicatorXAxis.ay = new AxisLabelSettings();
            }
            this.zoomSliderAxis = this.uu(0);
            this.zoomSliderAxis.name = "zoomSliderAxis";
            this.zoomSliderXAxis = this.tf("zoomSliderXAxis");
            if (this.zoomSliderAxis.ay == null) {
                this.zoomSliderAxis.ay = new AxisLabelSettings();
            }
            if (this.zoomSliderXAxis.ay == null) {
                this.zoomSliderXAxis.ay = new AxisLabelSettings();
            }
        }
        iz(a, b) {
            let c = typeCast(MarkerSeries.$, a);
            if (c != null) {
                c.pr = this.a3(a, b);
            }
        }
        a2(a) {
            if (a != null) {
                return 1;
            }
            return super.a2(a);
        }
        kn(a) {
            if (a.suggestedSecondaryAxis == 2) {
                this.yAxis.kk = true;
                this.yAxis.k7 = 10;
            }
        }
        kq() {
            this.yAxis.kk = this.vx;
            this.yAxis.k7 = this.xl;
        }
        ty(a) {
            let b;
            if (this.tw == 0) {
                if (a == null || a.index > 0 || stringIsNullOrEmpty(a.getMemberPathFor(12))) {
                    b = 4;
                }
                else {
                    b = 2;
                }
            }
            else {
                b = this.tw;
            }
            b = this.tx(b);
            return b;
        }
        tx(a) {
            if ((a == 1 || a == 2)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        t7(a) {
            if ((a == 2 || a == 3)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 5;
            }
            if (a == 5) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 6;
            }
            if (a == 6) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        t0(a) {
            if (a == 2) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 1;
            }
            if (a == 1) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        x8(a) {
            let b = a.getMemberPathFor(14);
            if (stringIsNullOrEmpty(b)) {
                b = a.getMemberPathFor(11);
            }
            return b;
        }
        th(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createXAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        uv(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createYAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        u1() {
            return this.bc(1);
        }
        u2() {
            return this.bc(0);
        }
        u0() {
            return this.bc(2);
        }
        u3() {
            return this.bc(20);
        }
        get vi() {
            return (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy"));
        }
        get ui() {
            if (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy")) {
                return TypeRegistrar.create("HorizontalAnchoredCategorySeriesProxy");
            }
            else {
                throw new BaseError(1, "horizontal series module is not loaded, but is required.");
            }
        }
        get vl() {
            return (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy"));
        }
        get ug() {
            if (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy")) {
                return TypeRegistrar.create("FinancialPriceSeriesProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get vj() {
            return (TypeRegistrar.isRegistered("IndicatorProxy"));
        }
        get uk() {
            if (TypeRegistrar.isRegistered("IndicatorProxy")) {
                return TypeRegistrar.create("IndicatorProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get vk() {
            return (TypeRegistrar.isRegistered("OverlayProxy"));
        }
        get up() {
            if (TypeRegistrar.isRegistered("OverlayProxy")) {
                return TypeRegistrar.create("OverlayProxy");
            }
            else {
                throw new BaseError(1, "overlay series module is not loaded, but is required.");
            }
        }
        bb(a, b) {
            let c = this.x8(a);
            switch (this.ty(a)) {
                case 3:
                    let d = this.u1();
                    this.ui.setValueMemberPath(d, c);
                    this.ui.setXAxis(d, this.xAxis);
                    this.ui.setYAxis(d, this.yAxis);
                    this.ui.setCategoryMode(d, 1);
                    return d;
                case 4:
                    let e = this.u2();
                    this.ui.setValueMemberPath(e, c);
                    this.ui.setXAxis(e, this.xAxis);
                    this.ui.setYAxis(e, this.yAxis);
                    this.ui.setCategoryMode(e, 1);
                    return e;
                default:
                case 1:
                case 2:
                    let f = this.u3();
                    this.ug.setOpenMemberPath(f, a.getMemberPathFor(11));
                    this.ug.setHighMemberPath(f, a.getMemberPathFor(12));
                    this.ug.setLowMemberPath(f, a.getMemberPathFor(13));
                    this.ug.setCloseMemberPath(f, a.getMemberPathFor(14));
                    this.ug.setVolumeMemberPath(f, a.getMemberPathFor(15));
                    this.ug.setXAxis(f, this.xAxis);
                    this.ug.setYAxis(f, this.yAxis);
                    this.ug.setDisplayType(f, this.tw == 1 ? 1 : 0);
                    this.ug.setCategoryMode(f, 1);
                    return f;
            }
        }
        kp() {
            super.kp();
            this.aas(this.xAxis);
            this.abf(false);
            if (this.t1 != 0 && this.volumeChart != null) {
                this.aay();
            }
            this.aas(this.volumeXAxis);
            this.aas(this.indicatorXAxis);
            this.abc();
            this.abe();
            if (this.t8 != 0) {
                this.aaz();
                this.aas(this.zoomSliderXAxis);
            }
        }
        ra(a, b) {
            super.ra(a, b);
            a(this.volumeXAxis);
            if (this.v6 != null) {
                for (let c of fromEnum(this.v6)) {
                    a(c);
                }
            }
            let d = true;
            switch (b) {
                case "XAxisMajorStroke":
                case "XAxisMajorStrokeThickness":
                    d = false;
                    break;
            }
            if (d) {
                a(this.zoomSliderXAxis);
            }
        }
        rf(a, b) {
            super.rf(a, b);
            if (b) {
                a(this.volumeAxis);
                if (this.v4 != null) {
                    for (let c of fromEnum(this.v4)) {
                        a(c);
                    }
                }
                a(this.zoomSliderAxis);
            }
        }
        rd(a) {
            super.rd(a);
            this.q4(this.volumeXAxis, a);
            this.q4(this.indicatorXAxis, a);
            this.q4(this.zoomSliderXAxis, a);
        }
        ri(a) {
            super.ri(a);
            this.q4(this.volumeAxis, a);
            this.q4(this.indicatorAxis, a);
            this.q4(this.zoomSliderAxis, a);
        }
        rg(a) {
            super.rg(a);
            this.q3(this.volumeAxis, a);
            this.q3(this.indicatorAxis, a);
            this.q3(this.zoomSliderAxis, a);
        }
        rb(a) {
            super.rb(a);
            this.q3(this.volumeXAxis, a);
            this.q3(this.indicatorXAxis, a);
            this.q3(this.zoomSliderXAxis, a);
        }
        jh(a) {
            super.jh(a);
            if (a == null) {
                return;
            }
            if (a == this.zoomSliderChart) {
                a.qi = a.ql = false;
                a.legend = null;
                if (this.dataChart != null) {
                    a.ag = this.dataChart.ag;
                    a.aj = this.dataChart.aj;
                }
            }
            else {
                SyncManager.d(a, ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = this.y3();
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })()));
                SyncManager.c(a);
            }
            a.b3 = 2;
        }
        y3() {
            if (this.x0 == null) {
                FinancialChart.xk++;
                this.x0 = FinancialChart.xk.toString();
            }
            return this.x0;
        }
        aae(a, b) {
            this.z0();
            this.aau();
        }
        z0() {
            if (this.yAxis.b3()) {
                return;
            }
            let a = this.yAxis.av.a9;
            if (this.t1 != 0) {
                a = Math.max(a, this.volumeAxis.av.a9);
            }
            for (let b of fromEnum(this.v4)) {
                a = Math.max(a, b.av.a9);
            }
            this.z1(a);
        }
        z1(a) {
            if (this.yAxis.b3()) {
                return;
            }
            this.yAxis.eg = this.volumeAxis.eg = a;
            for (let b of fromEnum(this.v4)) {
                b.eg = a;
            }
            this.zoomSliderAxis.eg = this.yAxis.eg;
        }
        z6(a) {
            if (this.indicatorCharts == null) {
                return;
            }
            for (let b = 0; b < this.indicatorCharts.count; b++) {
                let c = this.indicatorCharts._inner[b];
                for (let d = 0; d < c.series.count; d++) {
                    let e = c.series._inner[d];
                    if (!(this.vn(e))) {
                        continue;
                    }
                    a(c.series._inner[d], b);
                }
            }
        }
        z9(a) {
            if (this.volumeChart == null) {
                return;
            }
            for (let b = 0; b < this.volumeChart.series.count; b++) {
                let c = this.volumeChart.series._inner[b];
                if (c.c6) {
                    continue;
                }
                a(this.volumeChart.series._inner[b], b);
            }
        }
        z7(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!this.vp(c)) {
                    continue;
                }
                a(c, b);
            }
        }
        z8(a, b) {
            if (this.dataChart == null) {
                return;
            }
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.vp(d)) {
                    continue;
                }
                let e = this.xe(d, c);
                a(d, e);
            }
            if (b) {
                this.aaa(a);
            }
        }
        aaa(a) {
            if (this.zoomSliderChart == null) {
                return;
            }
            for (let b = 0; b < this.zoomSliderChart.series.count; b++) {
                let c = this.zoomSliderChart.series._inner[b];
                if (c.c6) {
                    continue;
                }
                a(this.zoomSliderChart.series._inner[b], b);
            }
        }
        xe(a, b) {
            if (a.b8 != this.dataChart) {
                return b;
            }
            let c = this.ac == null || this.ac.dataSeries == null ? 0 : this.ac.dataSeries.count;
            let d = this.uc == null ? 0 : this.uc.count;
            return b - (c * d);
        }
        i7(a) {
            super.i7(a);
            this.z9(a);
            this.z6(a);
            this.aaa(a);
        }
        get volumeChart() {
            return this.u7;
        }
        set volumeChart(a) {
            let b = this.volumeChart;
            if (a != b) {
                this.u7 = a;
                this.j6("VolumeChart", b, this.volumeChart);
            }
        }
        aay() {
            if (this.dataChart == null) {
                return;
            }
            this.volumeChart.series.clear();
            let a = new List$1(Series.$, 0);
            let b = -1;
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.vp(d) || d.c6) {
                    continue;
                }
                b++;
                let e;
                let f = this.t1;
                f = this.t0(f);
                switch (f) {
                    case 2:
                        e = this.u2();
                        break;
                    case 3:
                        e = this.u0();
                        break;
                    default:
                    case 1:
                        e = this.u1();
                        break;
                }
                this.ui.setCategoryMode(e, 1);
                e.name = "volumeSeries_" + b;
                e.itemsSource = d.itemsSource;
                this.ui.setXAxis(e, this.volumeXAxis);
                this.ui.setYAxis(e, this.volumeAxis);
                this.ui.setValueMemberPath(e, this.ac != null && this.ac.dataSeries != null && this.ac.dataSeries.count > b ? this.ac.dataSeries._inner[b].getMemberPathFor(15) : null);
                e.hp = d.hp + " Volume";
                e.oj = ArrayExtension.getModulus$1(Brush.$, this.s9, b);
                e.oo = ArrayExtension.getModulus$1(Brush.$, this.ta, b);
                e.gm = this.wu;
                a.add(e);
            }
            let g = this.c1("volume", false);
            if (g != null) {
                a.o(g);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.volumeChart.series.add(i);
                this.jm(i, h);
            }
        }
        vm(a) {
            if (!this.vi) {
                return false;
            }
            return this.ui.matchesType(a);
        }
        vq(a) {
            if (!this.vl) {
                return false;
            }
            return this.ug.matchesType(a);
        }
        vn(a) {
            if (!this.vj) {
                return false;
            }
            return this.uk.matchesType(a);
        }
        vp(a) {
            if (!this.vk) {
                return false;
            }
            return this.up.matchesType(a);
        }
        aax() {
            if (this.dataChart == null) {
                return;
            }
            let a = 0;
            let b = this.ua == null ? 0 : this.ua.count;
            let c = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let d = b + c;
            for (let e = 0; e < d; e++) {
                let f = new List$1(Series.$, 0);
                let g = this.indicatorCharts._inner[e];
                let h = e >= b;
                let i = h ? this.customIndicatorNames._inner[e - b] : EnumUtil.getName(FinancialIndicatorType_$type, this.ua._inner[e]);
                let j = -1;
                for (let k = 0; k < this.dataChart.series.count; k++) {
                    let l = this.dataChart.series._inner[k];
                    if (this.vp(l) || l.c6) {
                        continue;
                    }
                    j++;
                    let m;
                    if (h) {
                        let n = this.u4("Custom");
                        this.uk.handleCustomIndicatorEvent(n, runOn(this, this.aac));
                        m = n;
                    }
                    else {
                        m = this.u6(this.ua._inner[e]);
                    }
                    if (m == null) {
                        continue;
                    }
                    m.name = "indicator_" + a++;
                    this.uk.setXAxis(m, this.v6._inner[e]);
                    this.uk.setYAxis(m, this.v4._inner[e]);
                    m.itemsSource = l.itemsSource;
                    this.uk.setOpenMemberPath(m, this.ac.dataSeries._inner[j].getMemberPathFor(11));
                    this.uk.setHighMemberPath(m, this.ac.dataSeries._inner[j].getMemberPathFor(12));
                    this.uk.setLowMemberPath(m, this.ac.dataSeries._inner[j].getMemberPathFor(13));
                    this.uk.setCloseMemberPath(m, this.ac.dataSeries._inner[j].getMemberPathFor(14));
                    this.uk.setVolumeMemberPath(m, this.ac.dataSeries._inner[j].getMemberPathFor(15));
                    m.hp = l.hp + " " + i;
                    m.oj = ArrayExtension.getModulus$1(Brush.$, this.s3, e);
                    m.gm = this.wq;
                    if (this.vn(m)) {
                        this.uk.setNegativeBrush(m, ArrayExtension.getModulus$1(Brush.$, this.s4, e));
                        this.uk.setDisplayType(m, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.um, e));
                    }
                    if (this.xg != -2147483648 && this.vn(m)) {
                        this.uk.setPeriodOverride(m, this.xg);
                    }
                    if (this.vn(m)) {
                        this.uk.setSmoothingPeriod(m, this.xj);
                    }
                    if (this.vn(m)) {
                        this.uk.setSignalPeriod(m, this.xi);
                    }
                    if (this.vn(m)) {
                        this.uk.setShortPeriod(m, this.xh);
                        this.uk.setLongPeriod(m, this.xf);
                    }
                    this.jm(m, e);
                    f.add(m);
                }
                let o = this.c1(i, false);
                for (let p = 0; p < f.count; p++) {
                    let q = f._inner[p];
                    g.series.add(q);
                }
                if (o != null) {
                    for (let r = 0; r < o.count; r++) {
                        let s = o._inner[r];
                        g.series.add(s);
                        this.jm(s, r);
                    }
                }
            }
        }
        u4(indicatorName_) {
            return (this.externalObject.createIndicator(indicatorName_ + 'Indicator').i);
        }
        u6(a) {
            return this.u4(EnumUtil.getName(FinancialIndicatorType_$type, a));
        }
        abf(a) {
            if (this.tu == null) {
                return;
            }
            let b = this.xAxis;
            if (b.actualMinimumValue > b.actualMaximumValue) {
                return;
            }
            this.tu.as = b.actualMinimumValue;
            this.tu.ar = b.actualMaximumValue;
            if (a) {
                this.tu.au = b.visibleMinimum;
                this.tu.at = b.visibleMaximum;
            }
            this.tu.bn();
        }
        fe() {
            let a = ((() => {
                let $ret = new FinancialChartVisualData();
                $ret.mainChart = super.fe();
                $ret.volumeChart = this.volumeChart == null ? null : this.volumeChart.rm();
                $ret.toolbar = this.tu == null ? null : this.tu.aj();
                $ret.zoomChart = this.zoomSliderChart == null ? null : this.zoomSliderChart.rm();
                return $ret;
            })());
            if (this.indicatorCharts != null) {
                a.indicatorCharts = new List$1(Base.$, 0);
                for (let b of fromEnum(this.indicatorCharts)) {
                    a.indicatorCharts.add1(b.rm());
                }
            }
            if (this.dataChart != null) {
                a.mainChartLeft = this.abo(this.dataChart).x;
                a.mainChartTop = this.abo(this.dataChart).y;
            }
            if (this.volumeChart != null) {
                a.volumeChartLeft = this.abo(this.volumeChart).x;
                a.volumeChartTop = this.abo(this.volumeChart).y;
            }
            if (this.zoomSliderChart != null) {
                a.zoomChartLeft = this.abo(this.zoomSliderChart).x;
                a.zoomChartTop = this.abo(this.zoomSliderChart).y;
            }
            if (this.tu != null) {
                let c = this.abp(this.tu);
                a.toolbarLeft = c.left;
                a.toolbarTop = c.top;
                a.toolbarWidth = c.width;
                a.toolbarHeight = c.height;
            }
            if (this.indicatorCharts != null) {
                a.indicatorChartLefts = new List$1(Number_$type, 0);
                a.indicatorChartTops = new List$1(Number_$type, 0);
                for (let d of fromEnum(this.indicatorCharts)) {
                    a.indicatorChartLefts.add(this.abo(d).x);
                    a.indicatorChartTops.add(this.abo(d).y);
                }
            }
            let e = this.abr();
            a.legendLeft = e.left;
            a.legendTop = e.top;
            a.legendWidth = e.width;
            a.legendHeight = e.height;
            a.legend = this.ue == null ? null : this.ue.exportVisualData();
            return a;
        }
        x5() {
            let a = this.fe();
            a.scaleByViewport();
            return a.serialize();
        }
        u5(overlayName_) {
            return (this.externalObject.createOverlay(overlayName_ + 'Overlay').i);
        }
        abe() {
            if (this.dataChart == null) {
                return;
            }
            let a = new List$1(Series.$, 0);
            for (let b of fromEnum(this.dataChart.series)) {
                if (this.vp(b)) {
                    a.add(b);
                }
            }
            for (let c of fromEnum(a)) {
                this.dataChart.series.remove(c);
            }
            if (this.uc == null) {
                return;
            }
            let d = new List$1(Series.$, 0);
            let e = -1;
            for (let f = 0; f < this.dataChart.series.count; f++) {
                let g = this.dataChart.series._inner[f];
                if (this.vp(g) || g.c6) {
                    continue;
                }
                e++;
                for (let h = 0; h < this.uc.count; h++) {
                    let i = this.uc._inner[h];
                    let j;
                    switch (i) {
                        case 1:
                            j = this.u5(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                        default:
                        case 0:
                            j = this.u5(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                    }
                    j.name = g.name + "_" + EnumUtil.getName(FinancialOverlayType_$type, i);
                    this.up.setXAxis(j, this.xAxis);
                    this.up.setYAxis(j, this.yAxis);
                    j.itemsSource = g.itemsSource;
                    let k = e * this.uc.count + h;
                    j.oj = ArrayExtension.getModulus$1(Brush.$, this.s7, k);
                    j.oo = ArrayExtension.getModulus$1(Brush.$, this.s8, k);
                    j.gm = this.ws;
                    j.hp = g.hp + " " + EnumUtil.getName(FinancialOverlayType_$type, i);
                    let l = g;
                    if (l == null) {
                        continue;
                    }
                    let m = this.ac.dataSeries._inner[e];
                    this.up.setOpenMemberPath(j, m.getMemberPathFor(11));
                    this.up.setHighMemberPath(j, m.getMemberPathFor(12));
                    this.up.setLowMemberPath(j, m.getMemberPathFor(13));
                    this.up.setCloseMemberPath(j, m.getMemberPathFor(14));
                    this.up.setVolumeMemberPath(j, m.getMemberPathFor(15));
                    d.add(j);
                }
            }
            let n = new Array(this.dataChart.series.count);
            this.dataChart.series.copyTo(n, 0);
            this.dataChart.skipDataCleanup = true;
            this.dataChart.series.clear();
            this.dataChart.skipDataCleanup = false;
            for (let o = 0; o < n.length; o++) {
                n[o].g9 = -1;
            }
            d.o(n);
            for (let p = 0; p < d.count; p++) {
                let q = d._inner[p];
                this.dataChart.series.add(q);
                this.jm(q, p);
            }
        }
        abc() {
            if (this.vv) {
                return;
            }
            this.vv = true;
            if (this.indicatorCharts != null) {
                let a = this.indicatorCharts;
                this.indicatorCharts = null;
                for (let b of fromEnum(a)) {
                    this.aat(b);
                }
            }
            if ((this.ua == null || this.ua.count == 0) && (this.customIndicatorNames == null || this.customIndicatorNames.count == 0)) {
                this.indicatorCharts = null;
                if (this.v4 != null) {
                    this.v4.clear();
                }
                if (this.v6 != null) {
                    this.v6.clear();
                }
                this.aa3();
                this.abd();
                this.vv = false;
                return;
            }
            if (this.indicatorCharts == null) {
                this.indicatorCharts = new List$1(XamDataChart.$, 0);
            }
            this.indicatorCharts.clear();
            this.v4.clear();
            this.v6.clear();
            let c = this.ua == null ? 0 : this.ua.count;
            let d = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let e = c + d;
            for (let f = 0; f < e; f++) {
                let g = new XamDataChart();
                this.indicatorCharts.add(g);
                this.aar(g);
                let h = f >= c;
                if (h) {
                    g.ie = this.customIndicatorNames._inner[f - c];
                }
                else {
                    g.ie = this.x7(this.ua._inner[f]);
                }
                if (this.indicatorAxis != null) {
                    let i;
                    let j;
                    if (f == 0) {
                        i = this.indicatorAxis;
                        j = this.indicatorXAxis;
                    }
                    else {
                        i = new NumericYAxis();
                        if (!this.indicatorXAxis.b9) {
                            j = this.tg(0);
                        }
                        else {
                            j = this.tg(1);
                        }
                    }
                    j.name = "indicatorXAxis_" + f;
                    i.name = "indicatorAxis_" + f;
                    g.axes.add(i);
                    g.axes.add(j);
                    this.v4.add(i);
                    this.v6.add(j);
                    if (this.cb) {
                        this.q7(i);
                    }
                    if (this.cb) {
                        this.q5(j);
                    }
                }
            }
            this.aax();
            this.aa3();
            if (this.tu != null) {
                this.tu.ae = this.ua;
            }
            this.z2();
            this.abd();
            this.vv = false;
        }
        je() {
            super.je();
            this.q5(this.xAxis);
            this.q5(this.volumeXAxis);
            if (this.v6 != null) {
                for (let a of fromEnum(this.v6)) {
                    this.q5(a);
                }
            }
            this.q7(this.yAxis);
            this.q7(this.volumeAxis);
            if (this.v4 != null) {
                for (let b of fromEnum(this.v4)) {
                    this.q7(b);
                }
            }
            this.q5(this.zoomSliderXAxis);
            this.q7(this.zoomSliderAxis);
        }
        get_cs() {
            return !this.vt;
        }
        get vz() {
            return (this.externalObject._dynamicContent);
        }
        abk(a, b) {
            this.aa6(a, b);
            this.z2();
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                this.zoomSliderChart.axes.add(this.zoomSliderXAxis);
            }
            this.aaz();
            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
            this.aa4();
            this.abl(a, b);
        }
        aaz() {
            if (this.dataChart == null || this.zoomSliderChart == null) {
                return;
            }
            this.zoomSliderChart.series.clear();
            let a = new List$1(Series.$, 0);
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (this.vp(c) || c.c6) {
                    continue;
                }
                let d;
                let e = this.t8;
                e = this.t7(e);
                let f = this.xe(c, b);
                if (e == 1) {
                    switch (this.ty(this.ac != null && this.ac.dataSeries != null && this.ac.dataSeries.count > f ? this.ac.dataSeries._inner[f] : null)) {
                        case 1:
                            e = 2;
                            break;
                        case 2:
                            e = 3;
                            break;
                        case 3:
                            e = 4;
                            break;
                        case 4:
                            e = 5;
                            break;
                    }
                }
                switch (e) {
                    case 2:
                        d = this.u3();
                        this.ug.setDisplayType(d, 1);
                        break;
                    case 3:
                        d = this.u3();
                        this.ug.setDisplayType(d, 0);
                        break;
                    case 5:
                        d = this.u2();
                        break;
                    case 6:
                        d = this.u0();
                        break;
                    default:
                    case 4:
                        d = this.u1();
                        break;
                }
                let g = this.ac != null && this.ac.dataSeries != null && this.ac.dataSeries.count > f ? this.ac.dataSeries._inner[f] : null;
                if (d.da && !d.di) {
                    this.ui.setCategoryMode(d, 1);
                    this.ui.setXAxis(d, this.zoomSliderXAxis);
                    this.ui.setYAxis(d, this.zoomSliderAxis);
                    this.ui.setValueMemberPath(d, g == null ? null : this.x8(g));
                }
                else if (d.di) {
                    this.ug.setCategoryMode(d, 1);
                    this.ug.setXAxis(d, this.zoomSliderXAxis);
                    this.ug.setYAxis(d, this.zoomSliderAxis);
                    if (g != null) {
                        this.ug.setOpenMemberPath(d, g.getMemberPathFor(11));
                        this.ug.setHighMemberPath(d, g.getMemberPathFor(12));
                        this.ug.setLowMemberPath(d, g.getMemberPathFor(13));
                        this.ug.setCloseMemberPath(d, g.getMemberPathFor(14));
                        this.ug.setVolumeMemberPath(d, g.getMemberPathFor(15));
                    }
                }
                d.name = "zoomSliderSeries_" + f;
                d.itemsSource = c.itemsSource;
                d.hp = c.hp;
                d.gm = this.ep;
                a.add(d);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.zoomSliderChart.series.add(i);
                this.jm(i, h);
            }
        }
        j1(a, b, c) {
            super.j1(a, b, c);
            if (a == null || !b) {
                return;
            }
            let d = true;
            let e = true;
            switch (c) {
                case "Brushes":
                case "Outlines":
                    d = e = false;
                    break;
            }
            if (this.indicatorCharts != null && d) {
                for (let f of fromEnum(this.indicatorCharts)) {
                    a(f);
                }
            }
            if (this.volumeChart != null && e) {
                a(this.volumeChart);
            }
            if (this.zoomSliderChart != null) {
                a(this.zoomSliderChart);
            }
        }
        aac(a, b) {
            let c = b;
            let d = a;
            let e = -1;
            if (this.indicatorCharts != null) {
                e = this.indicatorCharts.indexOf(d.b8);
            }
            e -= this.ua == null ? 0 : this.ua.count;
            if (this.applyCustomIndicators != null) {
                this.applyCustomIndicators(this, new FinancialChartCustomIndicatorArgs(c, d, e));
            }
        }
        aa8(a, b, c) {
            if (a != null) {
                if (b != null) {
                    a.axes.remove(b);
                }
                a.axes.add(c);
            }
            if (this.cb) {
                this.q5(c);
            }
        }
        get vy() {
            return TypeRegistrar.isRegistered("IgxZoomSliderComponent");
        }
        aad(a, b) {
            this.abc();
        }
        vr(a, b) {
            if (b <= (0)) {
                return false;
            }
            switch (a) {
                case 5: return true;
                case 4:
                case 3: return b >= timeSpanFromDays(365);
                case 2: return b >= timeSpanFromDays(180);
                case 1: return b >= timeSpanFromDays(90);
                case 0: return b >= timeSpanFromDays(30);
            }
            return false;
        }
        aa2() {
            let a = this.ts != null ? this.ts : new FinancialChartRangeSelectorOptionCollection(1, [5, 4, 3, 2, 1, 0]);
            let b = new FinancialChartRangeSelectorOptionCollection(0);
            let c = this.xAxis;
            let d = +(c.actualMaximumValue) - +(c.actualMinimumValue);
            for (let e of fromEnum(a)) {
                if (this.vr(e, d)) {
                    b.add(e);
                }
            }
            this.tr = b;
            if (this.tu != null) {
                this.tu.u = this.tr;
            }
        }
        aah(a, b) {
            this.aa2();
        }
        aam(a, b) {
            this.uc = this.tu.ag;
        }
        aal(a, b) {
            this.ua = this.tu.ae;
        }
        aaf(a, b) {
            this.abc();
        }
        aag(a, b) {
            this.abe();
        }
        aaq(a, b) {
            let c = a;
            if (c.bf == null) {
                return;
            }
            if (this.vt) {
                this.aa1(c.bf);
            }
        }
        aat(a) {
            SyncManager.e(a);
            a.axes.clear();
            a.series.clear();
            a.gridAreaRectChanged = delegateRemove(a.gridAreaRectChanged, runOn(this, this.aae));
            a.provideContainer(null);
            if (this.volumeChart == null && this.indicatorCharts == null) {
                this.yAxis.eg = this.volumeAxis.eg = this.indicatorAxis.eg = 0;
                this.xAxis.ay.visibility = this.st;
            }
        }
        aar(a) {
            let b = a != this.zoomSliderChart;
            if (b) {
                if (this.dataChart != null) {
                    a.pw = new Rect(0, this.dataChart.pg.x, a.pw.y, this.dataChart.pg.width, a.pw.height);
                }
                let c = ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = "one";
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })());
                SyncManager.d(a, c);
                SyncManager.c(a);
            }
            a.gridAreaRectChanged = delegateCombine(a.gridAreaRectChanged, runOn(this, this.aae));
            this.jg(a);
        }
        z2() {
            if (this.indicatorCharts != null || this.volumeChart != null) {
                this.q3(this.xAxis, (a) => a.visibility = 1);
            }
            for (let a = 0; a < this.v6.count; a++) {
                let b = this.v6._inner[a];
                let c = a < this.v6.count - 1 || this.volumeChart != null;
                this.q3(b, (d) => d.visibility = c ? 1 : 0);
            }
        }
        aa6(a, b) {
            if (a != null) {
                this.aat(a);
            }
            if (b != null) {
                this.aar(b);
            }
        }
        abi(a, b) {
            this.aa6(a, b);
            this.z2();
            if (this.volumeChart != null) {
                if (this.volumeAxis != null) {
                    this.volumeChart.axes.add(this.volumeAxis);
                    this.volumeChart.axes.add(this.volumeXAxis);
                }
                this.aay();
                this.volumeXAxis.itemsSource = this.xAxis.itemsSource;
            }
            this.abj(a, b);
        }
        aai(a, b) {
            this.abg();
        }
        abg() {
            if (this.tu == null || +(this.tu.au) == +(dateMaxValue()) || +(this.tu.at) == +(dateMinValue()) || this.dataChart == null) {
                return;
            }
            let a = this.xAxis;
            let b = a.getWindowRectForSelection(this.tu.au, this.tu.at);
            if (b.width == 0 || isNaN_(b.width) || isInfinity(b.width)) {
                return;
            }
            this.vu = true;
            this.dataChart.pw = new Rect(0, b.left, this.dataChart.pw.top, b.width, this.dataChart.pw.height);
            if (this.vc != null) {
                this.vc.windowRect = this.dataChart.pg;
            }
            if (this.vt) {
                this.aa1(this.dataChart);
            }
            this.vu = false;
        }
        aap(a, b) {
            this.aa2();
            this.abf(!this.vu);
        }
        aab(a, b) {
            if (!this.vu) {
                if (this.vt) {
                    this.aa1(a);
                }
                let c = false;
                let d = this.kb(() => this.abf(true), c);
                c = d.p1;
                if (this.vc != null) {
                    this.vc.windowRect = this.dataChart.pg;
                }
            }
        }
        aba(a, b, c, d) {
            if (a == null || b == null) {
                return;
            }
            if (c != -1) {
                this.vu = true;
                a.pw = new Rect(0, d, a.pg.top, c, a.pg.height);
                this.vu = false;
            }
            let e = 1.7976931348623157E+308;
            let f = -1.7976931348623157E+308;
            let g = new Rect(0, 0, 0, 1, 1);
            let h = new ScalerParams(0, g, g, this.yAxis.cc, a.pk);
            for (let i of fromEnum(a.series)) {
                h.b = i.f2();
                let j = i.aq(a.pg);
                let k = j == null || j.c == 1.7976931348623157E+308 || isNaN_(j.c);
                if (k) {
                    continue;
                }
                let l = b.d8(j.c, h);
                let m = b.d8(j.b, h);
                f = Math.max(f, l);
                e = Math.min(e, m);
            }
            let n = a.pg.width;
            if (c != -1) {
                n = c;
            }
            let o = a.pg.left;
            if (d != -1) {
                o = d;
            }
            if (e == 1.7976931348623157E+308 || f == -1.7976931348623157E+308 || isNaN_(e) || isNaN_(f)) {
                return;
            }
            this.vu = true;
            let p = new Rect(0, o, e, n, f - e);
            a.pw = p;
            this.vu = false;
        }
        aa9(a) {
            if (a == null) {
                return;
            }
            if (a == this.dataChart) {
                this.aba(this.dataChart, this.yAxis, -1, -1);
                if (this.volumeChart != null) {
                    this.aba(this.volumeChart, this.volumeAxis, this.dataChart.pg.width, this.dataChart.pg.left);
                }
            }
            else if (a == this.volumeChart) {
                this.aba(this.volumeChart, this.volumeAxis, -1, -1);
                this.aba(this.dataChart, this.yAxis, this.volumeChart.pg.width, this.volumeChart.pg.left);
            }
        }
        aa1(a) {
            this.ka(() => this.aa9(a));
        }
        aaj(a, b) {
            if (this.vt) {
                this.aa1(a);
            }
        }
        abh() {
            if (!this.vz) {
                return;
            }
            this.z5();
            if (this.t8 == 0) {
                this.zoomSliderChart = null;
            }
            else if (this.zoomSliderChart == null) {
                this.zoomSliderChart = ((() => {
                    let $ret = new XamDataChart();
                    $ret.name = "ZoomSliderChart";
                    return $ret;
                })());
            }
            else {
                this.aaz();
            }
        }
        z5() {
            let container_ = this.w6.rootWrapper.getNativeElement();
            let containerParent_ = container_.parentElement;
            if (this.vc != null && containerParent_ != null && !this.v0) {
                this.v0 = true;
                if (TypeRegistrar.isRegistered("IgxZoomSliderComponent")) {
                    let z_ = this.vc;
                    let f_ = this.externalObject;
                    let sliderComponent_ = TypeRegistrar.get("IgxZoomSliderComponent");
                    let sliderInstance_ = TypeRegistrar.create("IgxZoomSliderComponent");
                    sliderInstance_._implementation = z_;
                    sliderComponent_._staticStyling(container_, sliderInstance_, f_);
                }
            }
        }
        abb() {
            if (this.t3 != 1) {
                return;
            }
            this.q9((a) => {
                let b;
                b = a.breaks;
                b.clear();
                if (this.xAxisBreaks == null) {
                    return;
                }
                for (let c of fromEnum(this.xAxisBreaks)) {
                    b.add(c);
                }
            });
        }
        ku(a, b, c) {
            super.ku(a, b, c);
            if (this.ac.dataSeries.count > 0) {
                if (this.t3 == 1 && stringIsNullOrEmpty(this.gb)) {
                    this.ak.setXMemberPath(a, c.getMemberPathFor(17));
                }
                if (stringIsNullOrEmpty(this.gd)) {
                    this.ak.setYMemberPath(a, this.x8(c));
                }
                if (stringIsNullOrEmpty(this.f7)) {
                    this.ak.setLabelMemberPath(a, this.x8(c));
                }
                if (stringIsNullOrEmpty(this.f4)) {
                    this.ak.setContentMemberPath(a, this.x8(c));
                }
            }
        }
        x7(a) {
            switch (a) {
                case 0: return "Absolute Volume Oscillator";
                case 1: return "Accumulation/Distribution Indicator";
                case 2: return "Average Directional Index";
                case 3: return "Average True Range Indicator";
                case 4: return "Bollinger Bandwidth";
                case 5: return "Chaikin Oscillator";
                case 6: return "Chaikin Volatility Indicator";
                case 7: return "Commodity Channel Index";
                case 8: return "Detrended Price Oscillator";
                case 9: return "Ease of Movement Indicator";
                case 10: return "Fast Stochastic Oscillator";
                case 11: return "Force Index Indicator";
                case 12: return "Full Stochastic Oscillator";
                case 13: return "Market Facilitation Index";
                case 14: return "Mass Index Indicator";
                case 15: return "Median Price Indicator";
                case 16: return "Money Flow Index";
                case 17: return "MACD Indicator";
                case 18: return "Negative Volume Index";
                case 19: return "On Balance Volume Indicator";
                case 20: return "Percentage Price Oscillator";
                case 21: return "Percentage Volume Oscillator";
                case 22: return "Positive Volume Index";
                case 23: return "Price Volume Trend";
                case 24: return "ROC - Rate of Change Indicator";
                case 25: return "RSI - Relative Strength Index";
                case 26: return "Slow Stochastic Oscillator";
                case 27: return "Standard Deviation Indicator";
                case 28: return "Stoch RSI";
                case 29: return "TRIX Indicator";
                case 30: return "Typical Price Indicator";
                case 31: return "Ultimate Oscillator";
                case 32: return "Weighted Close Indicator";
                case 33: return "Williams %R Indicator";
                default: return "Unknown";
            }
        }
        q5(a) {
            super.q5(a);
            let b = a;
            this.aas(b);
            if (a.bf != null) {
                for (let c of fromEnum(a.bf.series)) {
                    if (this.vm(c)) {
                        this.ui.setXAxis(c, b);
                    }
                    else if (this.vq(c)) {
                        this.ug.setXAxis(c, b);
                    }
                    else if (this.vn(c)) {
                        this.uk.setXAxis(c, b);
                    }
                    else if (this.vp(c)) {
                        this.up.setXAxis(c, b);
                    }
                }
            }
            let d = a == this.zoomSliderXAxis;
            if (d) {
                a.jb = this.abn;
                a.ef = this.w1;
                this.q3(a, (e) => e.visibility = 1);
            }
            let e = a;
            e.minimumValue = this.wc;
            e.maximumValue = this.wb;
        }
        q7(a) {
            super.q7(a);
            if (a.bf != null && a == this.yAxis) {
                for (let b of fromEnum(a.bf.series)) {
                    if (this.vm(b)) {
                        this.ui.setYAxis(b, this.yAxis);
                    }
                    else if (this.vq(b)) {
                        this.ug.setYAxis(b, this.yAxis);
                    }
                    else if (this.vn(b)) {
                        this.uk.setYAxis(b, this.yAxis);
                    }
                    else if (this.vp(b)) {
                        this.up.setYAxis(b, this.yAxis);
                    }
                }
            }
            a.kf = this.vw;
            a.k3 = this.wz;
            a.k2 = this.wy;
            if (a == this.yAxis) {
                a.kz = this.wx;
            }
            let c = a == this.zoomSliderAxis;
            if (c) {
                this.q3(a, (d) => d.visibility = 1);
            }
        }
        aas(a) {
            a.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
            a.fj = XYChart.os(a, this.ac.dataSeries);
            if (this.ac.dataSeries.count > 0) {
                let b = this.ac.dataSeries._inner[0].getMemberPathFor(17);
                a.hg(b);
            }
        }
        jm(a, b) {
            super.jm(a, b);
            if (a == null) {
                return;
            }
            let c = this.zoomSliderChart == a.b8;
            let d = this.dataChart != null && this.dataChart.series.contains(a);
            if ((d || c) && a.dx) {
                a.l5(this.s5 != null ? ArrayExtension.getModulus$1(Brush.$, this.s5, b) : null, this.s6 != null ? ArrayExtension.getModulus$1(Brush.$, this.s6, b) : null);
            }
            let e = this.vn(a);
            if (this.vp(a)) {
                a.oj = this.s7 != null ? ArrayExtension.getModulus$1(Brush.$, this.s7, b) : null;
                a.oo = this.s8 != null ? ArrayExtension.getModulus$1(Brush.$, this.s8, b) : null;
                a.gm = this.ws;
            }
            else if (e) {
                a.oj = this.s3 != null ? ArrayExtension.getModulus$1(Brush.$, this.s3, b) : null;
                a.gm = this.wq;
            }
            else if (!a.c6 && (d || c)) {
                a.oj = this.n != null ? ArrayExtension.getModulus$1(Brush.$, this.n, b) : null;
                a.oo = this.r != null ? ArrayExtension.getModulus$1(Brush.$, this.r, b) : null;
            }
            let f = this.volumeChart != null && this.volumeChart == a.b8;
            if (f) {
                a.gm = this.wu;
            }
            a.legend = c || f || e || !a.isUsableInLegend ? null : this.legend != null ? this.legend : this.vo ? this.ue : null;
        }
        j6(a, b, c) {
            super.j6(a, b, c);
            switch (a) {
                case "YAxisIsLogarithmic":
                    this.yAxis.kk = this.vx;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.kk = this.vx;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.kk = this.vx;
                    }
                    break;
                case "YAxisLogarithmBase":
                    this.yAxis.k7 = this.xl;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.k7 = this.xl;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.k7 = this.xl;
                    }
                    break;
                case "VolumeType":
                    let d = EnumUtil.getEnumValue(FinancialChartVolumeType_$type, b);
                    if (this.t1 == 0) {
                        this.volumeChart = null;
                    }
                    else if (this.volumeChart == null) {
                        this.volumeChart = ((() => {
                            let $ret = new XamDataChart();
                            $ret.name = "VolumeChart";
                            return $ret;
                        })());
                    }
                    else {
                        this.aay();
                    }
                    break;
                case "VolumeChart":
                    this.abi(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "DataChart":
                    if (typeCast(XamDataChart.$, b) !== null) {
                        let e = b;
                        e.gridAreaRectChanged = delegateRemove(e.gridAreaRectChanged, runOn(this, this.aae));
                        e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, runOn(this, this.aab));
                        e.seriesDataUpdated = delegateRemove(e.seriesDataUpdated, runOn(this, this.aaj));
                    }
                    if (this.dataChart != null) {
                        let f = this.dataChart;
                        f.gridAreaRectChanged = delegateCombine(f.gridAreaRectChanged, runOn(this, this.aae));
                        let g = this.dataChart;
                        g.actualWindowRectChanged = delegateCombine(g.actualWindowRectChanged, runOn(this, this.aab));
                        let h = this.dataChart;
                        h.seriesDataUpdated = delegateCombine(h.seriesDataUpdated, runOn(this, this.aaj));
                    }
                    this.abh();
                    break;
                case "XAxisMode":
                    this.xAxis = this.tg(this.t3);
                    this.xAxis.name = "xAxis";
                    this.volumeXAxis = this.tg(this.t3);
                    this.volumeXAxis.name = "volumeXAxis";
                    this.indicatorXAxis = this.tg(this.t3);
                    this.indicatorXAxis.name = "indicatorXAxis_0";
                    this.zoomSliderXAxis = this.tg(this.t3);
                    this.zoomSliderXAxis.name = "zoomSliderXAxis";
                    this.q3(this.zoomSliderXAxis, (i) => i.visibility = 1);
                    this.z2();
                    if (this.t3 == 1) {
                        this.abb();
                    }
                    break;
                case "YAxisMode":
                    this.yAxis = this.uu(this.t5);
                    this.yAxis.name = "yAxis";
                    this.zoomSliderAxis = this.uu(this.t5);
                    this.zoomSliderAxis.name = "zoomSliderAxis";
                    this.volumeAxis = this.uu(this.t5);
                    this.volumeAxis.name = "volumeAxis";
                    break;
                case "Toolbar":
                    let i = typeCast(FinancialChartToolbar.$, b);
                    if (i != null) {
                        i.rangeChanged = delegateRemove(i.rangeChanged, runOn(this, this.aai));
                        i.indicatorTypesChanged = delegateRemove(i.indicatorTypesChanged, runOn(this, this.aal));
                        i.overlayTypesChanged = delegateRemove(i.overlayTypesChanged, runOn(this, this.aam));
                    }
                    if (this.tu != null) {
                        this.tu.ae = this.ua;
                        this.tu.ag = this.uc;
                        this.tu.u = this.tr;
                        this.abf(true);
                        let j = this.tu;
                        j.rangeChanged = delegateCombine(j.rangeChanged, runOn(this, this.aai));
                        let k = this.tu;
                        k.indicatorTypesChanged = delegateCombine(k.indicatorTypesChanged, runOn(this, this.aal));
                        let l = this.tu;
                        l.overlayTypesChanged = delegateCombine(l.overlayTypesChanged, runOn(this, this.aam));
                    }
                    break;
                case "XAxis":
                    let m = typeCast(CategoryAxisBase.$, b);
                    if (m != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(m);
                        }
                    }
                    let n = typeCast(ITimeRangeSelectorAxis_$type, b);
                    if (n != null) {
                        n.visibleRangeChanged = delegateRemove(n.visibleRangeChanged, runOn(this, this.aap));
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.xAxis);
                    }
                    if (this.cb) {
                        this.q5(this.xAxis);
                        this.i5();
                    }
                    this.abf(false);
                    this.abg();
                    this.aa2();
                    let o = this.xAxis;
                    o.visibleRangeChanged = delegateCombine(o.visibleRangeChanged, runOn(this, this.aap));
                    break;
                case "ChartType":
                    this.kp();
                    break;
                case "VolumeXAxis":
                    this.aa8(this.volumeChart, typeCast(Axis.$, b), this.volumeXAxis);
                    break;
                case "ZoomSliderXAxis":
                    this.aa8(this.zoomSliderChart, typeCast(Axis.$, b), this.zoomSliderXAxis);
                    break;
                case "IndicatorXAxis":
                    this.abc();
                    break;
                case "YAxis":
                    let p = typeCast(NumericYAxis.$, b);
                    if (p != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(p);
                        }
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.yAxis);
                    }
                    if (this.cb) {
                        this.q7(this.yAxis);
                        this.q7(this.yAxis);
                    }
                    let q = this.yAxis;
                    q.rangeChanged = delegateCombine(q.rangeChanged, runOn(this, this.aaq));
                    break;
                case "VolumeAxis":
                    let r = typeCast(Axis.$, b);
                    if (this.volumeChart != null && r != null) {
                        this.volumeChart.axes.remove(r);
                    }
                    if (this.volumeChart != null && this.volumeAxis != null) {
                        this.volumeChart.axes.add(this.volumeAxis);
                        this.aay();
                    }
                    if (this.cb) {
                        this.q7(this.volumeAxis);
                    }
                    let s = this.volumeAxis;
                    s.rangeChanged = delegateCombine(s.rangeChanged, runOn(this, this.aaq));
                    break;
                case "IndicatorAxis":
                    if (this.indicatorCharts != null) {
                        for (let t = 0; t < this.indicatorCharts.count; t++) {
                            let u = this.indicatorCharts._inner[t];
                            let v = new List$1(Axis.$, 0);
                            for (let w of fromEnum(u.axes)) {
                                if (typeCast(NumericYAxis.$, w) !== null) {
                                    v.add(w);
                                }
                            }
                            for (let x of fromEnum(v)) {
                                u.axes.remove(x);
                            }
                            let y = null;
                            if (t == 0) {
                                y = this.indicatorAxis;
                            }
                            else if (this.t5 == 1) {
                                y = this.uu(this.t5);
                            }
                            else if (typeCast(NumericYAxis.$, this.indicatorAxis) !== null) {
                                y = new NumericYAxis();
                            }
                            if (y != null) {
                                u.axes.add(y);
                            }
                            if (this.cb) {
                                this.q7(y);
                            }
                        }
                    }
                    break;
                case "IsWindowSyncedToVisibleRange":
                    if (this.dataChart != null) {
                        this.dataChart.ql = this.ct && this.cs;
                    }
                    if (this.volumeChart != null) {
                        this.volumeChart.ql = this.ct && this.cs;
                    }
                    if (this.vt) {
                        this.aa9(this.dataChart);
                    }
                    else {
                        this.volumeChart.rk = 1;
                    }
                    break;
                case "IndicatorTypes":
                    let z = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), b);
                    if (z != null) {
                        z.collectionChanged = delegateRemove(z.collectionChanged, runOn(this, this.aaf));
                    }
                    let aa = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), c);
                    if (aa != null) {
                        aa.collectionChanged = delegateCombine(aa.collectionChanged, runOn(this, this.aaf));
                    }
                    this.abc();
                    break;
                case "OverlayTypes":
                    let ab = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), b);
                    if (ab != null) {
                        ab.collectionChanged = delegateRemove(ab.collectionChanged, runOn(this, this.aag));
                    }
                    let ac = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), c);
                    if (ac != null) {
                        ac.collectionChanged = delegateCombine(ac.collectionChanged, runOn(this, this.aag));
                    }
                    this.abe();
                    break;
                case "YAxisAbbreviateLargeNumbers":
                    this.re((ad) => ad.kf = this.vw);
                    break;
                case "YAxisMinimumValue":
                    this.rf((ad) => ad.k3 = this.wz, false);
                    break;
                case "YAxisMaximumValue":
                    this.rf((ad) => ad.k2 = this.wy, false);
                    break;
                case "YAxisInterval":
                    this.rf((ad) => ad.kz = this.wx, false);
                    break;
                case "Thickness":
                case "ZoomSliderType":
                    this.abh();
                    break;
                case "ZoomSliderChart":
                    if (!this.vy) {
                        return;
                    }
                    this.abk(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "NegativeBrushes":
                case "NegativeOutlines":
                    this.z8((ad, ae) => {
                        if (ad.dx) {
                            ad.l5(this.s5 != null ? ArrayExtension.getModulus$1(Brush.$, this.s5, ae) : null, this.s6 != null ? ArrayExtension.getModulus$1(Brush.$, this.s6, ae) : null);
                        }
                    }, true);
                    break;
                case "OverlayBrushes":
                    this.z7((ad, ae) => ad.oj = this.s7 != null ? ArrayExtension.getModulus$1(Brush.$, this.s7, ae) : null);
                    break;
                case "OverlayOutlines":
                    this.z7((ad, ae) => ad.oo = this.s8 != null ? ArrayExtension.getModulus$1(Brush.$, this.s8, ae) : null);
                    break;
                case "OverlayThickness":
                    this.z7((ad, ae) => ad.gm = this.ws);
                    break;
                case "OverlayMultiplier":
                    this.z7((ad, ae) => this.up.setMultiplier(ad, this.wr));
                    break;
                case "VolumeBrushes":
                    this.z9((ad, ae) => ad.oj = ArrayExtension.getModulus$1(Brush.$, this.s9, ae));
                    break;
                case "VolumeOutlines":
                    this.z9((ad, ae) => ad.oo = ArrayExtension.getModulus$1(Brush.$, this.ta, ae));
                    break;
                case "VolumeThickness":
                    this.z9((ad, ae) => ad.gm = this.wu);
                    break;
                case "IndicatorNegativeBrushes":
                    this.z6((ad, ae) => this.uk.setNegativeBrush(ad, ArrayExtension.getModulus$1(Brush.$, this.s4, ae)));
                    break;
                case "IndicatorBrushes":
                    this.z6((ad, ae) => ad.oj = ArrayExtension.getModulus$1(Brush.$, this.s3, ae));
                    break;
                case "IndicatorThickness":
                    this.z6((ad, ae) => ad.gm = this.wq);
                    break;
                case "IndicatorDisplayTypes":
                    this.z6((ad, ae) => this.uk.setDisplayType(ad, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.um, ae)));
                    break;
                case "IndicatorPeriod":
                    this.z6((ad, ae) => {
                        if (this.xg == -2147483648) {
                            return;
                        }
                        this.uk.setPeriodOverride(ad, this.xg);
                    });
                    break;
                case "IndicatorMultiplier":
                    this.z6((ad, ae) => this.uk.setMultiplier(ad, this.wp));
                    break;
                case "IndicatorSmoothingPeriod":
                    this.z6((ad, ae) => this.uk.setSmoothingPeriod(ad, this.xj));
                    break;
                case "IndicatorShortPeriod":
                    this.z6((ad, ae) => this.uk.setShortPeriod(ad, this.xh));
                    break;
                case "IndicatorLongPeriod":
                    this.z6((ad, ae) => this.uk.setLongPeriod(ad, this.xf));
                    break;
                case "IndicatorSignalPeriod":
                    this.z6((ad, ae) => this.uk.setSignalPeriod(ad, this.xi));
                    break;
                case "RangeSelectorOptions":
                    let ad = typeCast(FinancialChartRangeSelectorOptionCollection.$, b);
                    if (ad != null) {
                        ad.collectionChanged = delegateRemove(ad.collectionChanged, runOn(this, this.aah));
                    }
                    if (this.ts != null) {
                        let ae = this.ts;
                        ae.collectionChanged = delegateCombine(ae.collectionChanged, runOn(this, this.aah));
                    }
                    this.aa2();
                    break;
                case "CustomIndicatorNames":
                    let af = typeCast(ObservableCollection$1.$.specialize(String_$type), b);
                    if (af != null) {
                        af.collectionChanged = delegateRemove(af.collectionChanged, runOn(this, this.aad));
                    }
                    if (this.customIndicatorNames != null) {
                        let ag = this.customIndicatorNames;
                        ag.collectionChanged = delegateCombine(ag.collectionChanged, runOn(this, this.aad));
                    }
                    this.abc();
                    break;
                case "Legend":
                    if (this.zoomSliderChart != null) {
                        this.zoomSliderChart.legend = null;
                    }
                    break;
                case "Brushes":
                    this.z8((ah, ai) => ah.oj = this.n != null ? ArrayExtension.getModulus$1(Brush.$, this.n, ai) : null, true);
                    break;
                case "Outlines":
                    this.z8((ah, ai) => ah.oo = this.r != null ? ArrayExtension.getModulus$1(Brush.$, this.r, ai) : null, true);
                    break;
                case "XAxisLabelVisibility":
                    if (this.st == 0 && this.zoomSliderXAxis != null) {
                        this.q3(this.zoomSliderXAxis, (ah) => ah.visibility = 1);
                    }
                    this.z2();
                    break;
                case "YAxisLabelVisibility":
                    if (this.su != 0 || this.zoomSliderAxis == null) {
                        break;
                    }
                    this.q3(this.zoomSliderAxis, (ah) => ah.visibility = 1);
                    break;
                case "ZoomSliderXAxisMajorStroke":
                    this.zoomSliderXAxis.jb = this.abn;
                    break;
                case "ZoomSliderXAxisMajorStrokeThickness":
                    this.zoomSliderXAxis.ef = this.w1;
                    break;
                case "FinancialChartLegend":
                case "IsLegendVisible":
                    let ah = this.vo && this.legend == null;
                    {
                        let ai = (aj, ak) => {
                            if (aj.isUsableInLegend) {
                                aj.legend = ah ? this.ue : null;
                            }
                        };
                        this.z8(ai, false);
                        this.z7(ai);
                    }
                    break;
                case "ZoomSliderAxis":
                    let aj = typeCast(Axis.$, b);
                    if (aj != null && this.zoomSliderChart != null) {
                        this.zoomSliderChart.axes.remove(aj);
                    }
                    if (this.zoomSliderAxis != null) {
                        if (this.zoomSliderChart != null) {
                            this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                            this.aaz();
                            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
                        }
                        if (this.cb) {
                            this.q7(this.zoomSliderAxis);
                        }
                        this.q3(this.zoomSliderAxis, (ak) => ak.visibility = 1);
                    }
                    break;
                case "XAxisMinimumValue":
                    this.q9((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.minimumValue = this.wc;
                        }
                    });
                    break;
                case "XAxisMaximumValue":
                    this.q9((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.maximumValue = this.wb;
                        }
                    });
                    break;
            }
        }
        get_ai() {
            return 1;
        }
        get ai() {
            return this.get_ai();
        }
        get vx() {
            return this.vh;
        }
        set vx(a) {
            let b = this.vx;
            if (a != b) {
                this.vh = a;
                this.j6("YAxisIsLogarithmic", b, this.vx);
            }
        }
        get xl() {
            return this.xd;
        }
        set xl(a) {
            let b = this.xl;
            if (a != b) {
                this.xd = a;
                this.j6("YAxisLogarithmBase", b, this.xl);
            }
        }
        get wx() {
            return this.wj;
        }
        set wx(a) {
            let b = this.wx;
            if (a != b) {
                this.wj = a;
                this.j6("YAxisInterval", b, this.wx);
            }
        }
        get wz() {
            return this.wl;
        }
        set wz(a) {
            let b = this.wz;
            if (a != b) {
                this.wl = a;
                this.j6("YAxisMinimumValue", b, this.wz);
            }
        }
        get wy() {
            return this.wk;
        }
        set wy(a) {
            let b = this.wy;
            if (a != b) {
                this.wk = a;
                this.j6("YAxisMaximumValue", b, this.wy);
            }
        }
        get w0() {
            return this.wm;
        }
        set w0(a) {
            let b = this.w0;
            if (a != b) {
                this.wm = a;
                this.j6("YAxisMinorInterval", b, this.w0);
            }
        }
        get ww() {
            return this.yAxis.kv;
        }
        get wv() {
            return this.yAxis.ku;
        }
        get t1() {
            return this.tz;
        }
        set t1(a) {
            let b = this.t1;
            if (a != b) {
                this.tz = a;
                this.j6("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.t1));
            }
        }
        get t3() {
            return this.t2;
        }
        set t3(a) {
            let b = this.t3;
            if (a != b) {
                this.t2 = a;
                this.j6("XAxisMode", enumGetBox(FinancialChartXAxisMode_$type, b), enumGetBox(FinancialChartXAxisMode_$type, this.t3));
            }
        }
        get t5() {
            return this.t4;
        }
        set t5(a) {
            let b = this.t5;
            if (a != b) {
                this.t4 = a;
                this.j6("YAxisMode", enumGetBox(FinancialChartYAxisMode_$type, b), enumGetBox(FinancialChartYAxisMode_$type, this.t5));
            }
        }
        get vs() {
            return this.ve;
        }
        set vs(a) {
            let b = this.vs;
            if (a != b) {
                this.ve = a;
                this.j6("IsToolbarVisible", b, this.vs);
            }
        }
        get tw() {
            return this.tv;
        }
        set tw(a) {
            let b = this.tw;
            if (a != b) {
                this.tv = a;
                this.j6("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.tw));
            }
        }
        get_ro() {
            return super.get_ro();
        }
        set_ro(a) {
            super.set_ro(a);
        }
        get vt() {
            return this.vf;
        }
        set vt(a) {
            let b = this.vt;
            if (a != b) {
                this.vf = a;
                this.j6("IsWindowSyncedToVisibleRange", b, this.vt);
            }
        }
        get ua() {
            return this.t9;
        }
        set ua(a) {
            let b = this.ua;
            if (a != b) {
                this.t9 = a;
                this.j6("IndicatorTypes", b, this.ua);
            }
        }
        get uc() {
            return this.ub;
        }
        set uc(a) {
            let b = this.uc;
            if (a != b) {
                this.ub = a;
                this.j6("OverlayTypes", b, this.uc);
            }
        }
        get indicatorCharts() {
            return this.v2;
        }
        set indicatorCharts(a) {
            let b = this.indicatorCharts;
            if (a != b) {
                this.v2 = a;
                this.j6("IndicatorCharts", b, this.indicatorCharts);
            }
        }
        get vw() {
            return this.vg;
        }
        set vw(a) {
            let b = this.vw;
            if (a != b) {
                this.vg = a;
                this.j6("YAxisAbbreviateLargeNumbers", b, this.vw);
            }
        }
        get_ej() {
            return super.get_ej();
        }
        set_ej(a) {
            super.set_ej(a);
        }
        get zoomSliderChart() {
            return this.u8;
        }
        set zoomSliderChart(a) {
            let b = this.zoomSliderChart;
            if (a != b) {
                this.u8 = a;
                this.j6("ZoomSliderChart", b, this.zoomSliderChart);
            }
        }
        get zoomSliderAxis() {
            return this.ut;
        }
        set zoomSliderAxis(a) {
            let b = this.zoomSliderAxis;
            if (a != b) {
                this.ut = a;
                this.j6("ZoomSliderAxis", b, this.zoomSliderAxis);
            }
        }
        get zoomSliderXAxis() {
            return this.te;
        }
        set zoomSliderXAxis(a) {
            let b = this.zoomSliderXAxis;
            if (a != b) {
                this.te = a;
                this.j6("ZoomSliderXAxis", b, this.zoomSliderXAxis);
            }
        }
        get t8() {
            return this.t6;
        }
        set t8(a) {
            let b = this.t8;
            if (a != b) {
                this.t6 = a;
                this.j6("ZoomSliderType", enumGetBox(FinancialChartZoomSliderType_$type, b), enumGetBox(FinancialChartZoomSliderType_$type, this.t8));
            }
        }
        get s5() {
            return this.sx;
        }
        set s5(a) {
            let b = this.s5;
            if (a != b) {
                this.sx = a;
                this.j6("NegativeBrushes", b, this.s5);
            }
        }
        get s6() {
            return this.sy;
        }
        set s6(a) {
            let b = this.s6;
            if (a != b) {
                this.sy = a;
                this.j6("NegativeOutlines", b, this.s6);
            }
        }
        get s7() {
            return this.sz;
        }
        set s7(a) {
            let b = this.s7;
            if (a != b) {
                this.sz = a;
                this.j6("OverlayBrushes", b, this.s7);
            }
        }
        get s8() {
            return this.s0;
        }
        set s8(a) {
            let b = this.s8;
            if (a != b) {
                this.s0 = a;
                this.j6("OverlayOutlines", b, this.s8);
            }
        }
        get ta() {
            return this.s2;
        }
        set ta(a) {
            let b = this.ta;
            if (a != b) {
                this.s2 = a;
                this.j6("VolumeOutlines", b, this.ta);
            }
        }
        get s9() {
            return this.s1;
        }
        set s9(a) {
            let b = this.s9;
            if (a != b) {
                this.s1 = a;
                this.j6("VolumeBrushes", b, this.s9);
            }
        }
        get s4() {
            return this.sw;
        }
        set s4(a) {
            let b = this.s4;
            if (a != b) {
                this.sw = a;
                this.j6("IndicatorNegativeBrushes", b, this.s4);
            }
        }
        get s3() {
            return this.sv;
        }
        set s3(a) {
            let b = this.s3;
            if (a != b) {
                this.sv = a;
                this.j6("IndicatorBrushes", b, this.s3);
            }
        }
        get wu() {
            return this.wi;
        }
        set wu(a) {
            let b = this.wu;
            if (a != b) {
                this.wi = a;
                this.j6("VolumeThickness", b, this.wu);
            }
        }
        get ws() {
            return this.wg;
        }
        set ws(a) {
            let b = this.ws;
            if (a != b) {
                this.wg = a;
                this.j6("OverlayThickness", b, this.ws);
            }
        }
        get wr() {
            return this.wf;
        }
        set wr(a) {
            let b = this.wr;
            if (a != b) {
                this.wf = a;
                this.j6("OverlayMultiplier", b, this.wr);
            }
        }
        get wq() {
            return this.we;
        }
        set wq(a) {
            let b = this.wq;
            if (a != b) {
                this.we = a;
                this.j6("IndicatorThickness", b, this.wq);
            }
        }
        get um() {
            return this.ul;
        }
        set um(a) {
            let b = this.um;
            if (a != b) {
                this.ul = a;
                this.j6("IndicatorDisplayTypes", b, this.um);
            }
        }
        get xg() {
            return this.w9;
        }
        set xg(a) {
            let b = this.xg;
            if (a != b) {
                this.w9 = a;
                this.j6("IndicatorPeriod", b, this.xg);
            }
        }
        get wp() {
            return this.wd;
        }
        set wp(a) {
            let b = this.wp;
            if (a != b) {
                this.wd = a;
                this.j6("IndicatorMultiplier", b, this.wp);
            }
        }
        get xj() {
            return this.xc;
        }
        set xj(a) {
            let b = this.xj;
            if (a != b) {
                this.xc = a;
                this.j6("IndicatorSmoothingPeriod", b, this.xj);
            }
        }
        get xh() {
            return this.xa;
        }
        set xh(a) {
            let b = this.xh;
            if (a != b) {
                this.xa = a;
                this.j6("IndicatorShortPeriod", b, this.xh);
            }
        }
        get xf() {
            return this.w8;
        }
        set xf(a) {
            let b = this.xf;
            if (a != b) {
                this.w8 = a;
                this.j6("IndicatorLongPeriod", b, this.xf);
            }
        }
        get xi() {
            return this.xb;
        }
        set xi(a) {
            let b = this.xi;
            if (a != b) {
                this.xb = a;
                this.j6("IndicatorSignalPeriod", b, this.xi);
            }
        }
        get ts() {
            return this.tq;
        }
        set ts(a) {
            let b = this.ts;
            if (a != b) {
                this.tq = a;
                this.j6("RangeSelectorOptions", b, this.ts);
            }
        }
        get customIndicatorNames() {
            return this.tm;
        }
        set customIndicatorNames(a) {
            let b = this.tm;
            if (a != b) {
                this.tm = a;
                this.j6("CustomIndicatorNames", b, this.customIndicatorNames);
            }
        }
        get_ct() {
            return super.get_ct();
        }
        set_ct(a) {
            super.set_ct(a);
        }
        get abn() {
            return this.abm;
        }
        set abn(a) {
            let b = this.abn;
            if (a != b) {
                this.abm = a;
                this.j6("ZoomSliderXAxisMajorStroke", b, this.abn);
            }
        }
        get w1() {
            return this.wn;
        }
        set w1(a) {
            let b = this.w1;
            if (a != b) {
                this.wn = a;
                this.j6("ZoomSliderXAxisMajorStrokeThickness", b, this.w1);
            }
        }
        get vo() {
            return this.vd;
        }
        set vo(a) {
            let b = this.vo;
            if (a != b) {
                this.vd = a;
                this.j6("IsLegendVisible", b, this.vo);
            }
        }
        get ue() {
            return this.ud;
        }
        set ue(a) {
            let b = this.ue;
            if (a != b) {
                this.ud = a;
                this.j6("FinancialChartLegend", b, this.ue);
            }
        }
        get xAxis() {
            return this.td;
        }
        set xAxis(a) {
            let b = this.xAxis;
            if (a != b) {
                this.td = a;
                this.j6("XAxis", b, this.xAxis);
            }
        }
        get yAxis() {
            return this.us;
        }
        set yAxis(a) {
            let b = this.yAxis;
            if (a != b) {
                this.us = a;
                this.j6("YAxis", b, this.yAxis);
            }
        }
        get volumeAxis() {
            return this.ur;
        }
        set volumeAxis(a) {
            let b = this.volumeAxis;
            if (a != b) {
                this.ur = a;
                this.j6("VolumeAxis", b, this.volumeAxis);
            }
        }
        get volumeXAxis() {
            return this.tc;
        }
        set volumeXAxis(a) {
            let b = this.volumeXAxis;
            if (a != b) {
                this.tc = a;
                this.j6("VolumeXAxis", b, this.volumeXAxis);
            }
        }
        get indicatorAxis() {
            return this.uq;
        }
        set indicatorAxis(a) {
            let b = this.indicatorAxis;
            if (a != b) {
                this.uq = a;
                this.j6("IndicatorAxis", b, this.indicatorAxis);
            }
        }
        get indicatorXAxis() {
            return this.tb;
        }
        set indicatorXAxis(a) {
            let b = this.indicatorXAxis;
            if (a != b) {
                this.tb = a;
                this.j6("IndicatorXAxis", b, this.indicatorXAxis);
            }
        }
        get v4() {
            return this.v1;
        }
        set v4(a) {
            let b = this.v4;
            if (a != b) {
                this.v1 = a;
                this.j6("IndicatorAxes", b, this.v4);
            }
        }
        get v6() {
            return this.v3;
        }
        set v6(a) {
            let b = this.v6;
            if (a != b) {
                this.v3 = a;
                this.j6("IndicatorXAxes", b, this.v6);
            }
        }
        get wc() {
            return this.wa;
        }
        set wc(a) {
            let b = this.wc;
            if (+a != +b) {
                this.wa = a;
                this.j6("XAxisMinimumValue", b, this.wc);
            }
        }
        get wb() {
            return this.v9;
        }
        set wb(a) {
            let b = this.wb;
            if (+a != +b) {
                this.v9 = a;
                this.j6("XAxisMaximumValue", b, this.wb);
            }
        }
        get xAxisBreaks() {
            return this.v7;
        }
    }
    FinancialChart.$t = /*@__PURE__*/ markType(FinancialChart, 'FinancialChart', XYChart.$);
    FinancialChart.xk = 0;
    return FinancialChart;
})();
/**
 * @hidden
 */
export let FinancialChartToolbar = /*@__PURE__*/ (() => {
    class FinancialChartToolbar extends TemplatedHtmlControl {
        constructor(a, b) {
            super("financialChartToolbar", b, "");
            this.o = null;
            this.r = null;
            this.z = null;
            this.p = null;
            this.w = null;
            this.aq = dateMaxValue();
            this.ap = dateMinValue();
            this.ao = dateMaxValue();
            this.an = dateMinValue();
            this.rangeChanged = null;
            this.chartTypeChanged = null;
            this.trendLineTypeChanged = null;
            this.volumeTypeChanged = null;
            this.indicatorTypesChanged = null;
            this.overlayTypesChanged = null;
            this.x = 0;
            this.ah = 0;
            this.ab = 0;
            this.ad = null;
            this.af = null;
            this.t = null;
            this.ak = false;
            this.o = a;
            this.w = new FinancialChartToolbarViewModel();
            this.s = new FinancialChartRangeSelector(a != null ? a.xw : null);
            this.aa = new FinancialChartTypePicker(a != null ? a.xt : null);
            this.q = new FinancialChartIndicatorMenu(1, a != null ? a.xu : null);
        }
        bg(a) {
            let b = a.querySelectorAll(".financialChartToolbarArea");
            if (b != null && b.length > 0) {
                this.g = b[0];
                if (!this.al) {
                    this.g.hide();
                }
            }
            let c = a.querySelectorAll(".financialChartIndicatorMenu");
            if (c != null && c.length > 0) {
                this.q.g = c[0];
            }
            let d = a.querySelectorAll(".financialChartRangeSelector");
            if (d != null && d.length > 0) {
                this.s.g = d[0];
            }
            let e = a.querySelectorAll(".financialChartTypePicker");
            if (e != null && e.length > 0) {
                this.aa.g = e[0];
            }
        }
        bl(a) {
            this.q.u(a);
            this.aa.u(a);
        }
        get s() {
            return this.r;
        }
        set s(a) {
            let b = this.s;
            if (a != b) {
                this.r = a;
                this.bm("RangeSelector", b, this.s);
            }
        }
        get aa() {
            return this.z;
        }
        set aa(a) {
            let b = this.aa;
            if (a != b) {
                this.z = a;
                this.bm("ChartTypePicker", b, this.aa);
            }
        }
        get q() {
            return this.p;
        }
        set q(a) {
            let b = this.q;
            if (a != b) {
                this.p = a;
                this.bm("IndicatorMenu", b, this.q);
            }
        }
        bm(a, b, c) {
            switch (a) {
                case "RangeStart":
                    if (this.s != null) {
                        this.s.t = this.as;
                    }
                    break;
                case "RangeEnd":
                    if (this.s != null) {
                        this.s.s = this.ar;
                    }
                    break;
                case "SelectionStart":
                    if (this.s != null) {
                        this.s.v = this.au;
                    }
                    break;
                case "SelectionEnd":
                    if (this.s != null) {
                        this.s.u = this.at;
                    }
                    break;
                case "RangeSelector":
                    let d = b;
                    if (d != null) {
                        d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.bj));
                    }
                    if (this.s != null) {
                        this.s.t = this.as;
                        this.s.s = this.ar;
                        this.s.o = this.u;
                        this.s.v = this.au;
                        this.s.u = this.at;
                        let e = this.s;
                        e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.bj));
                    }
                    break;
                case "ChartTypePicker":
                    let f = b;
                    if (f != null) {
                        f.selectionChanged = delegateRemove(f.selectionChanged, runOn(this, this.bi));
                    }
                    if (this.aa != null) {
                        this.aa.w = this.y;
                        let g = this.aa;
                        g.selectionChanged = delegateCombine(g.selectionChanged, runOn(this, this.bi));
                    }
                    break;
                case "ChartType":
                    if (this.aa != null) {
                        this.aa.w = this.y;
                    }
                    break;
                case "RangeSelectorOptions":
                    if (this.s != null) {
                        this.s.o = this.u;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.g == null) {
                        break;
                    }
                    if (this.al) {
                        this.g.show();
                    }
                    else {
                        this.g.hide();
                    }
                    break;
                case "IndicatorMenu":
                    let h = typeCast(FinancialChartIndicatorMenu.$, b);
                    if (h != null) {
                        h.selectionChanged = delegateRemove(h.selectionChanged, runOn(this, this.bh));
                    }
                    if (this.q != null) {
                        let i = this.q;
                        i.selectionChanged = delegateCombine(i.selectionChanged, runOn(this, this.bh));
                    }
                    break;
                case "IndicatorTypes":
                    if (this.indicatorTypesChanged != null) {
                        this.indicatorTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "OverlayTypes":
                    if (this.overlayTypesChanged != null) {
                        this.overlayTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "TrendLineType":
                    if (this.trendLineTypeChanged != null) {
                        this.trendLineTypeChanged(this, EventArgs.empty);
                    }
                    break;
                case "VolumeType":
                    if (this.volumeTypeChanged != null) {
                        this.volumeTypeChanged(this, EventArgs.empty);
                    }
                    break;
            }
        }
        bh(a, b) {
            this.ag = this.q.z;
            this.ae = this.q.y;
            this.ai = this.q.aa;
            this.ac = this.q.x;
        }
        bi(a, b) {
            this.y = this.aa.w;
            if (this.chartTypeChanged != null) {
                this.chartTypeChanged(this, b);
            }
        }
        bj(a, b) {
            this.au = this.s.v;
            this.at = this.s.u;
            if (this.rangeChanged != null) {
                this.rangeChanged(this, b);
            }
        }
        v() {
            let a = new FinancialChartToolbarContext();
            a.container = this.d;
            a.vm = this.w;
            a.vm.financialChartIndicatorMenu = ((() => {
                let $ret = new FinancialChartIndicatorMenuContext();
                $ret.vm = this.q.p;
                return $ret;
            })());
            a.vm.financialChartTypePicker = ((() => {
                let $ret = new FinancialChartTypePickerContext();
                $ret.vm = this.aa.p;
                return $ret;
            })());
            a.vm.financialChartRangeSelector = ((() => {
                let $ret = new FinancialChartRangeSelectorContext();
                $ret.vm = this.s.q;
                return $ret;
            })());
            return a;
        }
        l(a) {
            super.l(a);
            if (a == null) {
                return;
            }
            this.s.l(a);
            this.aa.l(a);
            this.q.l(a);
            this.bk();
        }
        bk() {
        }
        get au() {
            return this.aq;
        }
        set au(a) {
            let b = this.au;
            if (+a != +b) {
                this.aq = a;
                this.bm("SelectionStart", b, this.au);
            }
        }
        get at() {
            return this.ap;
        }
        set at(a) {
            let b = this.at;
            if (+a != +b) {
                this.ap = a;
                this.bm("SelectionEnd", b, this.at);
            }
        }
        get as() {
            return this.ao;
        }
        set as(a) {
            let b = this.as;
            if (+a != +b) {
                this.ao = a;
                this.bm("RangeStart", b, this.as);
            }
        }
        get ar() {
            return this.an;
        }
        set ar(a) {
            let b = this.ar;
            if (+a != +b) {
                this.an = a;
                this.bm("RangeEnd", b, this.ar);
            }
        }
        bn() {
            if (this.s != null) {
                this.s.ab();
            }
        }
        get y() {
            return this.x;
        }
        set y(a) {
            let b = this.y;
            if (a != b) {
                this.x = a;
                this.bm("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.y));
            }
        }
        get ai() {
            return this.ah;
        }
        set ai(a) {
            let b = this.ai;
            if (a != b) {
                this.ah = a;
                this.bm("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.ai));
            }
        }
        get ac() {
            return this.ab;
        }
        set ac(a) {
            let b = this.ac;
            if (a != b) {
                this.ab = a;
                this.bm("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.ac));
            }
        }
        get ae() {
            return this.ad;
        }
        set ae(a) {
            let b = this.ae;
            if (!FinancialChartToolbar.am(b, a)) {
                this.ad = a;
                this.bm("IndicatorTypes", b, this.ae);
            }
        }
        get ag() {
            return this.af;
        }
        set ag(a) {
            let b = this.ag;
            if (!FinancialChartToolbar.am(b, a)) {
                this.af = a;
                this.bm("OverlayTypes", b, this.ag);
            }
        }
        static am(a, b) {
            if (a == b) {
                return true;
            }
            if ((a == null && b != null) || (a != null && b == null)) {
                return false;
            }
            if (a.count != b.count) {
                return false;
            }
            for (let c of fromEn(a)) {
                if (!b.contains(c)) {
                    return false;
                }
            }
            return true;
        }
        aj() {
            return ((() => {
                let $ret = new FinancialChartToolbarVisualData();
                $ret.rangeSelector = this.s == null ? null : this.s.r();
                return $ret;
            })());
        }
        get u() {
            return this.t;
        }
        set u(a) {
            let b = this.u;
            if (a != b) {
                this.t = a;
                this.bm("RangeSelectorOptions", b, this.u);
            }
        }
        get al() {
            return this.ak;
        }
        set al(a) {
            let b = this.al;
            if (a != b) {
                this.ak = a;
                this.bm("IsToolbarVisible", b, this.al);
            }
        }
    }
    FinancialChartToolbar.$t = /*@__PURE__*/ markType(FinancialChartToolbar, 'FinancialChartToolbar', TemplatedHtmlControl.$);
    return FinancialChartToolbar;
})();
/**
 * @hidden
 */
export let FinancialChartRangeSelector = /*@__PURE__*/ (() => {
    class FinancialChartRangeSelector extends TemplatedHtmlControl {
        constructor(a) {
            super("financialChartRangeSelector", a, "");
            this.q = null;
            this.rangeChanged = null;
            this.p = null;
            this.p = new FinancialChartRangeSelectorView();
            this.q = new FinancialChartRangeSelectorViewModel();
            this.q.onRangeChanged = runOn(this, this.z);
            this.p.c = this.q;
        }
        get v() {
            return this.q.selectionStart;
        }
        set v(a) {
            this.q.selectionStart = a;
        }
        get u() {
            return this.q.selectionEnd;
        }
        set u(a) {
            this.q.selectionEnd = a;
        }
        get t() {
            return this.q.rangeStart;
        }
        set t(a) {
            this.q.rangeStart = a;
        }
        get s() {
            return this.q.rangeEnd;
        }
        set s(a) {
            this.q.rangeEnd = a;
        }
        ab() {
            if (this.q.onPropertiesChanged()) {
                this.p.g(this.q);
            }
        }
        l(a) {
            super.l(a);
            this.p.f(this.d, this.q);
        }
        z() {
            if (this.rangeChanged != null) {
                this.rangeChanged(this, EventArgs.empty);
            }
        }
        r() {
            return this.p.d(this.g);
        }
        get o() {
            return this.q.options;
        }
        set o(a) {
            let b = !FinancialChartToolbar.am(this.q.options, a);
            if (b) {
                this.q.options = a;
                this.aa();
            }
        }
        aa() {
            if (this.q != null) {
                this.q.ao();
            }
            if (this.p != null) {
                this.p.i(this.o);
            }
        }
    }
    FinancialChartRangeSelector.$t = /*@__PURE__*/ markType(FinancialChartRangeSelector, 'FinancialChartRangeSelector', TemplatedHtmlControl.$);
    FinancialChartRangeSelector.x = 0;
    return FinancialChartRangeSelector;
})();
//# sourceMappingURL=FinancialChart_combined.js.map
