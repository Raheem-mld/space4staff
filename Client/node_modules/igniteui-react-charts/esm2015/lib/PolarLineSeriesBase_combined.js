/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { PolarBase } from "./PolarBase";
import { PathRenderer } from "./PathRenderer";
import { DefaultFlattener } from "./DefaultFlattener";
import { PolarBaseView } from "./PolarBaseView";
import { Number_$type, Point_$type, markType } from "igniteui-react-core";
import { PolarLinePlanner } from "./PolarLinePlanner";
import { List$1 } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let PolarLineSeriesBase = /*@__PURE__*/ (() => {
    class PolarLineSeriesBase extends PolarBase {
        constructor() {
            super();
            this.t4 = null;
            this.t6 = null;
            this.t5 = null;
            this.t4 = new PathRenderer(1, new DefaultFlattener());
            this.t6 = new PathRenderer(0);
        }
        get_r3() {
            return true;
        }
        bu() {
            return new PolarLineSeriesBaseView(this);
        }
        lh(a) {
            super.lh(a);
            this.t7 = a;
        }
        t8() {
            return 1;
        }
        get_ub() {
            return false;
        }
        get ub() {
            return this.get_ub();
        }
        get_ud() {
            return false;
        }
        get ud() {
            return this.get_ud();
        }
        s8(a, b) {
            super.s8(a, b);
            a.m.clear();
            let c = b.bv;
            let d = b.bu;
            let e = this.rt != null ? this.rt.count : 0;
            let f = this.ru != null ? this.ru.count : 0;
            let g = Math.min(e, f);
            let h = ((() => {
                let $ret = new PolarLinePlanner();
                $ret.m = (i) => this.rb.a.getScaledAngle1(this.rt.item(i), this.rb.e, this.rb.d);
                $ret.q = g;
                $ret.n = (i) => this.q9.mh(this.ru.item(i), this.rb.g, this.rb.f, this.rb.i, this.rb.h);
                $ret.l = this.gh;
                $ret.f = this.r8;
                $ret.b = this.t8();
                $ret.o = (i) => this.ue(a, i);
                $ret.p = (i) => this.uf(a, i);
                $ret.ab = d;
                $ret.ac = c;
                $ret.d = this.ud;
                $ret.c = this.ub;
                return $ret;
            })());
            let i = new List$1(Number_$type, 0);
            for (let j = 0; j < g; j++) {
                if (this.uc(j)) {
                    i.add(j);
                }
            }
            if (this.ud && i.count > 0) {
                i.add(i._inner[0]);
            }
            h.x(a.m, i);
        }
        ue(a, b) {
            return a.w._inner[b].x;
        }
        uf(a, b) {
            return a.w._inner[b].y;
        }
        ua() {
            return !this.t9();
        }
        t9() {
            let a = this.ca.pg;
            return !a.containsPoint({ $type: Point_$type, x: 0.5, y: 0.5 });
        }
        uc(a) {
            return (this.rt.item(a) >= this.rb.a.kv && this.rt.item(a) <= this.rb.a.ku && this.ru.item(a) >= this.rb.b.kv && this.ru.item(a) <= this.rb.b.ku) || (isNaN_(this.rt.item(a)) || isNaN_(this.ru.item(a)));
        }
        kh(a, b) {
            super.kh(a, b);
            this.ug(b);
        }
        tc(a, b) {
            super.tc(a, b);
            if (this.r8) {
                this.t5 = this.t4;
            }
            else {
                this.t5 = this.t6;
            }
            this.t5.b = this.t8();
            this.ug(b);
            this.uh(a, b);
        }
    }
    PolarLineSeriesBase.$t = /*@__PURE__*/ markType(PolarLineSeriesBase, 'PolarLineSeriesBase', PolarBase.$);
    return PolarLineSeriesBase;
})();
/**
 * @hidden
 */
export let PolarLineSeriesBaseView = /*@__PURE__*/ (() => {
    class PolarLineSeriesBaseView extends PolarBaseView {
        constructor(a) {
            super(a);
            this.c3 = null;
            this.c3 = a;
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.or = a;
            this.e.gj = 3;
            this.e.gk = 1;
            this.e.gl = 4;
            this.e.e1 = false;
        }
    }
    PolarLineSeriesBaseView.$t = /*@__PURE__*/ markType(PolarLineSeriesBaseView, 'PolarLineSeriesBaseView', PolarBaseView.$);
    return PolarLineSeriesBaseView;
})();
//# sourceMappingURL=PolarLineSeriesBase_combined.js.map
