/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { DependencyProperty } from "igniteui-react-core";
import { ConsolidatedItemsPosition_$type } from "./ConsolidatedItemsPosition";
import { runOn, enumGetBox, markType, markDep, fromEnum } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { Defaults } from "./Defaults";
/**
 * @hidden
 */
export let ColumnSeries = /*@__PURE__*/ (() => {
    class ColumnSeries extends HorizontalAnchoredCategorySeries {
        constructor() {
            super();
            this.ul = null;
            this.ug = 0;
            this.ab = ColumnSeries.$;
            this.tz = 2;
        }
        get_db() {
            return true;
        }
        get_dw() {
            return true;
        }
        bu() {
            return new ColumnSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.uf = a;
        }
        b0() {
            if (this.b1 == 0) {
                return 2;
            }
            return super.b0();
        }
        rd() {
            return 1;
        }
        get_cy() {
            return true;
        }
        preferredCategoryMode(a) {
            return this.tz;
        }
        pb(a) {
            if (this.ul == null) {
                this.ul = runOn(this, this.ui);
            }
            let b = this.t2 != null ? this.t2 : this.yAxis;
            let c = this.tw;
            return this.s0.c$d(this, a, c, b, this.q3, this.r3(this.bx), this.r4(this.bx), this.ul);
        }
        ep(a, b) {
            if (this.es(a, b)) {
                return true;
            }
            if (this.pu(a, b)) {
                return true;
            }
            return false;
        }
        kh(a, b) {
            super.kh(a, b);
            let c = b;
            if (a && c.db != null) {
                c.db.count = 0;
            }
        }
        f1() {
            return this.tw.ki(this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        sl(a, b) {
            super.sl(a, b);
            let c = a.f;
            if (!b.t()) {
                return;
            }
            let d = b.bv;
            let e = b.bu;
            let f = this.getEffectiveViewport1(b);
            let g = new ScalerParams(0, d, e, this.t2.cc, f);
            g.b = this.f2();
            let h = new ScalerParams(0, d, e, this.tw.cc, f);
            let i = this.t2;
            let j = i.d8(i.k5, g);
            let k = this.tw.ki(d, e, f);
            let l = this.tw;
            let m = b;
            if (isNaN_(k) || isInfinity(k)) {
                m.db.count = 0;
                return;
            }
            this.rb.a0(this, this.rv(), runOn(this, this.qw), this.r3(b), this.r4(b));
            this.rb.r = this.uj;
            this.rb.s = this.uk;
            this.rb.k = this.uj;
            this.rb.l = this.uk;
            let n = false;
            let o = this.rb.b;
            if (o != null) {
                n = true;
            }
            let p = this.tw.ch;
            let q = p ? this.tw : null;
            let r = this.valueColumn.count;
            let s = this.r3(b);
            let t = 0;
            for (let u = 0; u < c.count; ++u) {
                let v = c._inner[u][0] - 0.5 * k;
                let w = this.ui(c._inner[u]);
                let x = j;
                w = Math.max(w, -100);
                x = Math.min(x, e.bottom + 100);
                let y = Math.abs(x - w);
                if (isInfinity(y)) {
                    continue;
                }
                let z = m.db.item(t);
                t++;
                z.width = k;
                z.height = y;
                if (n) {
                    this.sh(c, u, r, l, h, b.q);
                }
                if (z.dataContext != null) {
                    let aa = z.dataContext;
                    if (s == 1) {
                        let ab = this.rb.au(r, u)[0];
                        if (ab >= 0 && ab < this.ch.count) {
                            if (q != null && q.i$b != null && q.i$b.count > ab) {
                                ab = q.i$b._inner[ab];
                            }
                            aa.item = this.ch.item(ab);
                        }
                    }
                    else {
                        aa.item = null;
                    }
                }
                this.rb.ad(z, false, false, false, false);
                z.am = this.rb.k;
                z.an = this.rb.l;
                m.dg(z, v, Math.min(x, w));
            }
            m.db.count = t;
            b.cy(a);
        }
        get uh() {
            return this.ug;
        }
        set uh(a) {
            if (this.uh != a) {
                let b = this.uh;
                this.ug = a;
                this.raisePropertyChanged("ConsolidatedColumnVerticalPosition", enumGetBox(ConsolidatedItemsPosition_$type, b), enumGetBox(ConsolidatedItemsPosition_$type, this.uh));
            }
        }
        ui(a) {
            if (a == null || a.length < 3) {
                return NaN;
            }
            switch (this.uh) {
                case 0: return a[1];
                case 1: return a[2];
                case 2: return (a[1] + a[2]) / 2;
                case 3:
                    let b = (a[1] + a[2]) / 2;
                    if (this.yAxis == null) {
                        return b;
                    }
                    let c = this.yAxis.eb(b, new ScalerParams(1, this.ca.pw, this.ca.pv, this.yAxis.cc));
                    if (c < this.yAxis.k5) {
                        return a[2];
                    }
                    else {
                        return a[1];
                    }
                case 4:
                    let d = (a[1] + a[2]) / 2;
                    let e = this.yAxis.eb(d, new ScalerParams(1, this.ca.pw, this.ca.pv, this.yAxis.cc));
                    if (this.yAxis == null) {
                        return d;
                    }
                    if (e < this.yAxis.k5) {
                        return a[1];
                    }
                    else {
                        return a[2];
                    }
                default: return (a[1] + a[2]) / 2;
            }
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    ColumnSeries.$t = /*@__PURE__*/ markType(ColumnSeries, 'ColumnSeries', HorizontalAnchoredCategorySeries.$);
    ColumnSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ColumnSeries, 'raisePropertyChanged', ['RadiusX:uj:up', [1, 0], 'RadiusY:uk:uq', [1, 0]]);
    return ColumnSeries;
})();
/**
 * @hidden
 */
export let ColumnSeriesView = /*@__PURE__*/ (() => {
    class ColumnSeriesView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.dc = null;
            this.dh = new Rectangle();
            this.db = null;
            this.da = a;
            this.db = ((() => {
                let $ret = new Pool$1(Rectangle.$);
                $ret.create = runOn(this, this.di);
                $ret.activate = runOn(this, this.dd);
                $ret.disactivate = runOn(this, this.df);
                $ret.destroy = runOn(this, this.de);
                return $ret;
            })());
        }
        as() {
            super.as();
            this.dc = new List$1(Rectangle.$, 0);
            if (!this.q) {
                this.da.gh = Defaults.h;
                this.da.gm = Defaults.i;
                this.da.pr = Defaults.c;
            }
        }
        di() {
            let a = new Rectangle();
            this.dc.add(a);
            a._visibility = 1;
            return a;
        }
        dd(a) {
            a._visibility = 0;
        }
        df(a) {
            a._visibility = 1;
        }
        de(a) {
            this.dc.remove(a);
        }
        dg(a, b, c) {
            if (!this.isDirty) {
                this.aq();
            }
            a.o = c;
            a.n = b;
        }
        ac(a) {
            return this.dc._inner[a];
        }
        ab(a) {
            let b = this.dc._inner[a];
            this.dh._visibility = b._visibility;
            this.dh.n = b.n;
            this.dh.o = b.o;
            this.dh.width = b.width;
            this.dh.height = b.height;
            let c = this.bp(a);
            this.dh._fill = c;
            this.dh._stroke = c;
            this.dh.ac = this.e.fl + 3;
            return this.dh;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                for (let c = 0; c < this.dc.count; c++) {
                    let d = this.aa(c, b);
                    this.bd(d, c, b);
                    a.v(d);
                }
            }
        }
        al(a) {
            super.al(a);
            let b = 0;
            let c = new List$1(Rectangle.$, 0);
            for (let d of fromEnum(this.db.a)) {
                c.add(d);
            }
            c.aa((e, f) => {
                if (e.n < f.n) {
                    return -1;
                }
                else if (e.n > f.n) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            for (let e of fromEnum(c)) {
                this.e.a6.exportRectangleData(a, e, "column" + b, ["Main", "Fill"]);
            }
            b++;
        }
    }
    ColumnSeriesView.$t = /*@__PURE__*/ markType(ColumnSeriesView, 'ColumnSeriesView', AnchoredCategorySeriesView.$);
    return ColumnSeriesView;
})();
//# sourceMappingURL=ColumnSeries_combined.js.map
