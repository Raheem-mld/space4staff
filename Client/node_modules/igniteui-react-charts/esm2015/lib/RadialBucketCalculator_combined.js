/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType, runOn, EnumUtil, typeCast, fromEnum, markDep } from "igniteui-react-core";
import { IBucketizer_$type } from "./IBucketizer";
import { NotImplementedException } from "igniteui-react-core";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { truncate, intDivide } from "igniteui-react-core";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference_$type } from "./IHasCategoryModePreference";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { RadialFrame } from "./RadialFrame";
import { DependencyProperty } from "igniteui-react-core";
import { HighlightingInfo } from "./HighlightingInfo";
import { RadialSeriesRenderManager } from "./RadialSeriesRenderManager";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { ScalerParams } from "./ScalerParams";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { RadialAxes } from "./RadialAxes";
import { Visibility_$type } from "igniteui-react-core";
import { SeriesRenderingArguments } from "./SeriesRenderingArguments";
import { PropertyMetadata } from "igniteui-react-core";
import { round10N } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let RadialBucketCalculator = /*@__PURE__*/ (() => {
    class RadialBucketCalculator extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.c = 0;
            this.d = 0;
            this.b = 0;
            this.a = a;
        }
        getBucket(a) {
            throw new NotImplementedException(0);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getErrorBucket(a, b) {
            return NaN;
        }
        getBucketInfo(a, b, c, d) {
            a = this.c;
            b = this.d;
            c = this.b;
            d = this.a.cr.gh;
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d
            };
        }
        e(a) {
            let b = this.a.bv;
            let c = this.a.bu;
            let d = this.a.cr.qz;
            if (b.isEmpty || c.isEmpty || d == null || this.a.cr.ch == null || this.a.cr.ch.count == 0) {
                this.b = 0;
                return;
            }
            let e = Math.floor(d.l4(c, b));
            let f = Math.ceil(d.l3(c, b));
            if (d.cc) {
                f = Math.ceil(d.l4(c, b));
                e = Math.floor(d.l3(c, b));
            }
            if (f < e) {
                f = d.kq + f;
            }
            let g = this.a.cr.q6;
            let h = g != null ? g.ma : 0.75;
            let i = Math.min(c.width, c.height) * 0.5 * (h) * 2 * Math.PI;
            let j = Math.floor((f - e + 1) * a / i);
            this.b = truncate(Math.max(1, j));
            this.c = truncate(Math.max(0, Math.floor(e / this.b) - 1));
            this.d = truncate(Math.ceil(f / this.b));
        }
        cacheValues() {
        }
        unCacheValues() {
        }
    }
    RadialBucketCalculator.$t = /*@__PURE__*/ markType(RadialBucketCalculator, 'RadialBucketCalculator', Base.$, [IBucketizer_$type]);
    return RadialBucketCalculator;
})();
/**
 * @hidden
 */
export let RadialBase = /*@__PURE__*/ (() => {
    class RadialBase extends MarkerSeries {
        constructor() {
            super();
            this.rd = null;
            this.re = null;
            this.rg = false;
            this.rf = false;
            this.q4 = null;
            this.q5 = null;
            this.assigningRadialStyle = null;
            this.assigningRadialMarkerStyle = null;
            this.rb = new RadialFrame(3);
            this.rc = new RadialFrame(3);
            this.q9 = new RadialFrame(3);
            this.q7 = null;
            this.rd = new RadialSeriesRenderManager();
            this.re = new SeriesRenderer$2(RadialFrame.$, RadialBaseView.$, 1, runOn(this, this.r1), runOn(this, this.r4), runOn(this, this.cr), runOn(this, this.l8), runOn(this, this.r0), (a) => this.q8.cs.e(this.gh));
        }
        lh(a) {
            super.lh(a);
            this.q8 = a;
        }
        r0() {
            if (this.cb.g) {
                this.cb.t();
            }
        }
        get categoryAxis() {
            return this.qz;
        }
        ar() {
            return this.qz;
        }
        qw(a, b) {
            return null;
        }
        cx(a, b, c) {
            if (!this.hasMarkers) {
                return false;
            }
            let d = this.qz;
            let e = new ScalerParams(1, this.ca.pg, this.pf, d.cc);
            e.c = this.getEffectiveViewport1(this.bx);
            let f = this.q6;
            let g = new ScalerParams(1, this.ca.pg, this.pf, f.cc);
            g.c = this.getEffectiveViewport1(this.bx);
            a.clear();
            this.pq.cf((h) => {
                if (h._visibility == 0) {
                    let i = new SeriesPointOfInterest();
                    let j = h.n;
                    let k = h.o;
                    if (j < this.pf.left || j > this.pf.right || k < this.pf.top || k > this.pf.bottom) {
                        return;
                    }
                    let l;
                    let m;
                    let n = this.q7.g(j, k, this.bx.bv, this.bx.bu, l, m);
                    l = n.p4;
                    m = n.p5;
                    i.b = l;
                    i.c = m;
                    if (b) {
                        i.d = this.rv(i.c, c);
                    }
                    else {
                        i.d = d.fw(h.ak);
                    }
                    i.a = h.content;
                    a.add(i);
                }
            });
            return true;
        }
        rv(a, b) {
            if (b >= 0) {
                return round10N(a, b).toString();
            }
            else {
                return a.toString();
            }
        }
        get_d4() {
            return true;
        }
        get_dr() {
            return true;
        }
        q1(a, b, c) {
            let d = new HighlightingInfo();
            d.b = this;
            d.h = 0;
            d.g = this.ch.count - 1;
            d.d = true;
            if (c != null && c.h == d.h && c.g == d.g) {
                return c;
            }
            return d;
        }
        q2(a, b, c) {
            let d = this.q8.cs.c;
            let e = this.q8.cs.d;
            let f = this.q8.cs.b;
            let g = this.ra();
            let h = this.ch.count;
            let i = this.qz;
            let j = -1;
            let k = -1;
            let l = this.g0(b);
            j = truncate(Math.floor((intDivide(l, f)))) * f;
            k = j + (f - 1);
            if (c != null && c.h == j && c.g == k) {
                return c;
            }
            let m = new HighlightingInfo();
            m.b = this;
            m.h = j;
            m.g = k;
            return m;
        }
        q3(a, b, c) {
            let d = this.q8.cs.c;
            let e = this.q8.cs.d;
            let f = this.q8.cs.b;
            let g = this.ra();
            let h = this.ch.count;
            let i = this.qz;
            let j = -1;
            let k = -1;
            let l = this.g0(b);
            j = truncate(Math.floor((intDivide(l, f)))) * f;
            k = j + (f - 1);
            if (c != null && c.h == j && c.g == k) {
                return c;
            }
            let m = new HighlightingInfo();
            m.e = true;
            m.b = this;
            m.h = j;
            m.g = k;
            return m;
        }
        av(a, b, c) {
            if (this.cy && this.d9(this.bj) && !c) {
                let d = this.q2(a, b, this.q4);
                this.q4 = d;
                return d;
            }
            else {
                let e = this.q1(a, b, this.q4);
                this.q4 = e;
                return e;
            }
        }
        aw(a, b, c) {
            if (this.d9(this.bj) && !c) {
                let d = this.q3(a, b, this.q5);
                this.q5 = d;
                return d;
            }
            else {
                let e = this.q1(a, b, this.q5);
                e.e = true;
                this.q5 = e;
                return e;
            }
        }
        rp() {
            return (this.assigningRadialStyle != null && this.rg) || (this.bj != 1);
        }
        ro() {
            return (this.assigningRadialMarkerStyle != null && this.rf) || (this.bj != 1);
        }
        r3(a) {
            if (this.assigningRadialStyle != null && this.rg) {
                this.assigningRadialStyle(this, a);
            }
        }
        r2(a) {
            if (this.assigningRadialMarkerStyle != null && this.rf) {
                this.assigningRadialMarkerStyle(this, a);
            }
        }
        rr(a) {
            return a.cs.b;
        }
        rs(a) {
            return a.cs.c;
        }
        ag() {
            return [this.qz, this.q6];
        }
        mn(a, b) {
            this.q8.cs.e(this.gh);
            this.l0(false);
        }
        mm(a, b) {
            this.q8.cs.e(this.gh);
            this.l0(false);
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    if (c != null && d == null) {
                        if (this.qz != null) {
                            this.qz.bx(this);
                        }
                        if (this.q6 != null) {
                            this.q6.bx(this);
                        }
                    }
                    if (c == null && d != null) {
                        if (this.qz != null) {
                            this.qz.cn(this);
                        }
                        if (this.q6 != null) {
                            this.q6.cn(this);
                        }
                    }
                    this.q8.cs.e(this.gh);
                    this.l0(false);
                    break;
                case RadialBase.$$p[0]:
                    if (this.qz != null && this.q6 != null) {
                        this.q7 = new RadialAxes(this.q6, this.qz);
                    }
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.cn(this);
                    }
                    this.q8.cs.e(this.gh);
                    this.l0(false);
                    break;
                case RadialBase.$$p[4]:
                    if (this.qz != null && this.q6 != null) {
                        this.q7 = new RadialAxes(this.q6, this.qz);
                    }
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.cn(this);
                    }
                    this.q8.cs.e(this.gh);
                    if (this.q6 == null || !this.q6.cv()) {
                        this.l0(false);
                    }
                    break;
                case "SyncLink":
                    if (this.b5 != null && this.ca != null) {
                        this.q8.cs.e(this.gh);
                        this.l0(false);
                    }
                    break;
                case "TransitionProgress":
                    this.rc.c(this.gn, this.rb, this.q9);
                    if (this.ct(this.bx)) {
                        return;
                    }
                    if (this.gn == 1) {
                        this.r4(this.q9, this.q8);
                    }
                    else {
                        this.r4(this.rc, this.q8);
                    }
                    if (this.ca != null) {
                        this.ca.ln(this);
                    }
                    break;
                case RadialBase.$$p[1]:
                    this.l0(false);
                    this.k7();
                    break;
                case "VisibilityProxy":
                    if (EnumUtil.getEnumValue(Visibility_$type, c) != 0 && EnumUtil.getEnumValue(Visibility_$type, d) == 0) {
                        this.q8.cs.e(this.gh);
                    }
                    break;
                case RadialBase.$$p[3]:
                    this.rg = this.rn();
                    this.l0(false);
                    break;
                case RadialBase.$$p[2]:
                    this.rf = this.rm();
                    this.l0(false);
                    break;
            }
        }
        rn() {
            return this.rl;
        }
        rm() {
            return this.rk;
        }
        ri(a) {
            if (typeCast(NumericRadiusAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        rh(a) {
            if (typeCast(CategoryAngleAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        hh(a) {
            let b = this.g0(a);
            return b >= 0 && this.ch != null && b < this.ch.count ? this.ch.item(b) : null;
        }
        rq(a) {
            let b = this.bx.bv;
            let c = this.bx.bu;
            if (this.qz != null && !b.isEmpty && !c.isEmpty && this.q7 != null) {
                let d = this.q7.c(a);
                if (d < 0) {
                    d += Math.PI * 2;
                }
                if (d > Math.PI * 2) {
                    d -= Math.PI * 2;
                }
                return d;
            }
            return NaN;
        }
        fw(a) {
            let b = this.bx.bv;
            let c = this.bx.bu;
            let d = -1;
            if (this.qz != null && !b.isEmpty && !c.isEmpty && this.q7 != null) {
                let e = this.q7.c(a);
                if (e < 0) {
                    e += Math.PI * 2;
                }
                if (e > Math.PI * 2) {
                    e -= Math.PI * 2;
                }
                let f = this.qz.getUnscaledAngle(e);
                if (this.qz.categoryMode != 0) {
                    f -= 0.5;
                }
                d = f;
            }
            return d;
        }
        g0(a) {
            let b = truncate(Math.round(this.fw(a)));
            if (this.ch != null && b == this.ch.count) {
                b = 0;
            }
            return b;
        }
        eh(a) {
            return false;
        }
        ra() {
            let a = this.q9;
            if (this.cr()) {
                if (this.cb.g) {
                    this.cb.t();
                }
                a = this.rc;
            }
            return a;
        }
        ky() {
            super.ky();
            if (this.qz != null) {
                this.qz.hq(false);
            }
            if (this.q6 != null) {
                this.q6.hq(false);
            }
        }
        e3(a, b, c) {
            let d = true;
            let e = c;
            if (!super.e3(a, b, c) || !c.o() || b.isEmpty || a.isEmpty || this.qz == null || this.qz.itemsSource == null || this.q6 == null || this.q7 == null || this.ch == null || this.qz.bh == null || this.q6.bh == null || this.q6.kv == this.q6.ku) {
                e.cs.b = 0;
                d = false;
            }
            return d;
        }
        l1(a) {
            let b;
            let c;
            let d = this.getViewInfo(c, b);
            c = d.p0;
            b = d.p1;
            if (!this.e3(c, b, this.bx)) {
                this.kh(true, this.bx);
                return;
            }
            let e = new SeriesRenderingArguments(this, c, b, a, this.em);
            let f = this.re.g(e, this.rb, this.q9, this.rc, this.q8);
            this.rb = f.p1;
            this.q9 = f.p2;
            this.rc = f.p3;
        }
        rt() {
            let a = 0;
            for (let b of fromEnum(this.ca.series)) {
                if (b == this) {
                    return a;
                }
                let c = typeCast(RadialBase.$, b);
                if (c != null && c.qz == this.qz && c.preferredCategoryMode(c.qz) == 2) {
                    a++;
                }
            }
            return -1;
        }
    }
    RadialBase.$t = /*@__PURE__*/ markType(RadialBase, 'RadialBase', MarkerSeries.$, [IHasCategoryModePreference_$type]);
    RadialBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, RadialBase, 'raisePropertyChanged', ['AngleAxis:qz:r5', [CategoryAngleAxis.$, null], 'ClipSeriesToBounds:rj:r6', [0, false], 'IsCustomRadialMarkerStyleAllowed:rk:r7', [0, false], 'IsCustomRadialStyleAllowed:rl:r8', [0, false], 'ValueAxis:q6:r9', [NumericRadiusAxis.$, null]]);
    return RadialBase;
})();
/**
 * @hidden
 */
export let RadialBaseView = /*@__PURE__*/ (() => {
    class RadialBaseView extends MarkerSeriesView {
        constructor(a) {
            super(a);
            this.cs = null;
            this.cr = null;
            this.ct = null;
            this.cu = 0;
            this.cv = null;
            this.cr = a;
            this.ct = new Pool$1(Marker.$);
            this.ci(this.ct);
        }
        cf(a) {
            this.ct.c(a);
        }
    }
    RadialBaseView.$t = /*@__PURE__*/ markType(RadialBaseView, 'RadialBaseView', MarkerSeriesView.$);
    return RadialBaseView;
})();
//# sourceMappingURL=RadialBucketCalculator_combined.js.map
