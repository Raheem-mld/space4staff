/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { EventArgs, Base, markType, Point_$type, runOn, typeCast, IList$1_$type, Number_$type, markDep, IEnumerable_$type, Array_$type, delegateCombine, fromEnum, Boolean_$type, enumGetBox, fromEn, String_$type, getInstanceType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, toNullable, TypeRegistrar } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { DataTemplate } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { Style } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { List$1 } from "igniteui-react-core";
import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategorySeries } from "./CategorySeries";
import { CategoryFramePreparer } from "./CategoryFramePreparer";
import { NumericAxisBase } from "./NumericAxisBase";
import { ISupportsMarkers_$type } from "./ISupportsMarkers";
import { CategoryFrame } from "./CategoryFrame";
import { Rect } from "igniteui-react-core";
import { CategorySeriesView } from "./CategorySeriesView";
import { Axis } from "./Axis";
import { ScalerParams } from "./ScalerParams";
import { ObservableCollection$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { isNaN_, isInfinity, truncate } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { ISortingAxis_$type } from "./ISortingAxis";
import { FrameworkElement } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DependencyProperty } from "igniteui-react-core";
import { DependencyObject } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { IScaler_$type } from "./IScaler";
import { IIsCategoryBased_$type } from "./IIsCategoryBased";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { PropertyMetadata } from "igniteui-react-core";
import { dateMinValue, dateMaxValue } from "igniteui-react-core";
import { NumericXAxis } from "./NumericXAxis";
import { CategoryYAxis } from "./CategoryYAxis";
import { AnchoredCategoryBucketCalculator } from "./AnchoredCategoryBucketCalculator";
import { IStacked100Series_$type } from "./IStacked100Series";
import { NotImplementedException } from "igniteui-react-core";
import { SplineSeriesBase } from "./SplineSeriesBase";
import { CollisionAvoider } from "./CollisionAvoider";
import { SafeSortedReadOnlyDoubleCollection } from "./SafeSortedReadOnlyDoubleCollection";
import { Numeric } from "igniteui-react-core";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { CategoryXAxis } from "./CategoryXAxis";
import { IBarSeries_$type } from "./IBarSeries";
import { Color } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "./LegendItemBadgeShape";
import { LegendItemBadgeMode_$type } from "./LegendItemBadgeMode";
import { SeriesOutlineMode_$type } from "./SeriesOutlineMode";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { SingleValuesHolder } from "./SingleValuesHolder";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { SplineSeriesBaseView } from "./SplineSeriesBaseView";
import { Canvas } from "igniteui-react-core";
import { Panel } from "igniteui-react-core";
import { Defaults } from "./Defaults";
import { PlatformConstants } from "igniteui-react-core";
/**
 * @hidden
 */
export let StackedSeriesCreatedEventArgs = /*@__PURE__*/ (() => {
    class StackedSeriesCreatedEventArgs extends EventArgs {
        constructor(a) {
            super();
            this.c = null;
            this.c = a;
        }
        get brush() {
            return this.c.hx;
        }
        set brush(a) {
            this.c.hx = a;
        }
        get legendItemTemplate() {
            return this.c.fj;
        }
        set legendItemTemplate(a) {
            this.c.fj = a;
        }
        get legendItemBadgeTemplate() {
            return this.c.fi;
        }
        set legendItemBadgeTemplate(a) {
            this.c.fi = a;
        }
        get legendItemVisibility() {
            return this.c.iw;
        }
        set legendItemVisibility(a) {
            this.c.iw = a;
        }
        get outline() {
            return this.c.h1;
        }
        set outline(a) {
            this.c.h1 = a;
        }
        get dashArray() {
            return this.c.h6;
        }
        set dashArray(a) {
            this.c.h6 = a;
        }
        get dashCap() {
            return this.c.ia;
        }
        set dashCap(a) {
            this.c.ia = a;
        }
        get index() {
            return this.c.br;
        }
        get thickness() {
            return this.c.bl;
        }
        set thickness(a) {
            this.c.bl = a;
        }
        get title() {
            return this.c.bv;
        }
        set title(a) {
            this.c.bv = a;
        }
        get markerBrush() {
            return this.c.hy;
        }
        set markerBrush(a) {
            this.c.hy = a;
        }
        get markerOutline() {
            return this.c.hz;
        }
        set markerOutline(a) {
            this.c.hz = a;
        }
        get markerStyle() {
            return this.c.it;
        }
        set markerStyle(a) {
            this.c.it = a;
        }
        get markerTemplate() {
            return this.c.fk;
        }
        set markerTemplate(a) {
            this.c.fk = a;
        }
        get markerType() {
            return this.c.r;
        }
        set markerType(a) {
            this.c.r = a;
        }
        get markerThickness() {
            return this.c.be;
        }
        set markerThickness(a) {
            this.c.be = a;
        }
        get startCap() {
            return this.c.h9;
        }
        set startCap(a) {
            this.c.ic = a;
        }
        get endCap() {
            return this.c.h8;
        }
        set endCap(a) {
            this.c.ib = a;
        }
    }
    StackedSeriesCreatedEventArgs.$t = /*@__PURE__*/ markType(StackedSeriesCreatedEventArgs, 'StackedSeriesCreatedEventArgs', EventArgs.$);
    return StackedSeriesCreatedEventArgs;
})();
/**
 * @hidden
 */
export let FragmentBase = /*@__PURE__*/ (() => {
    class FragmentBase extends HorizontalAnchoredCategorySeries {
        constructor() {
            super();
            this.ug = null;
            this._logicalSeriesLink = null;
            this.ui = null;
            this.ug = new CategoryLineRasterizer();
        }
        get logicalSeriesLink() {
            return this._logicalSeriesLink;
        }
        set logicalSeriesLink(a) {
            this._logicalSeriesLink = a;
        }
        get parentSeries() {
            return this.ui;
        }
        set parentSeries(a) {
            this.ui = a;
        }
        get_dh() {
            return false;
        }
        get_dn() {
            return true;
        }
        i9() {
            if (this.logicalSeriesLink != null) {
                return this.logicalSeriesLink.dk;
            }
            return null;
        }
        gz() {
            let a = this.parentSeries;
            if (a.g9 == -1 || a.s0 == null || a.s0.f.indexOf(this) == -1) {
                return -1;
            }
            return a.s0.f.indexOf(this);
        }
        g3() {
            let a = this.parentSeries;
            if (a.g9 == -1 || a.series.count == 0 || a.series.indexOf(this.logicalSeriesLink) == -1) {
                return -1;
            }
            return a.series.indexOf(this.logicalSeriesLink);
        }
        resolveLegendIndex() {
            let a = this.parentSeries;
            if (a.s4) {
                return -1 + a.g9 + a.sw.count - a.s0.f.indexOf(this);
            }
            return super.resolveLegendIndex();
        }
        be() {
            return this.parentSeries;
        }
        q2() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchXAxis();
        }
        uf() {
            if (this.parentSeries == null) {
                return this.q8;
            }
            return this.parentSeries.q8;
        }
        rn() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchYAxis();
        }
        uk(a, b, c, d, e, f, g, h) {
            let i = c[0];
            let j = c[1];
            let k = new Rect(0, i - 5, j - 5, 11, 11);
            if (!isNaN_(i) && !isNaN_(j) && !isInfinity(i) && !isInfinity(j) && d.tryAdd(k)) {
                b.m.add({ $type: Point_$type, x: i, y: j });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        si(a, b) {
            a.u();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null) {
                return;
            }
            if (this.logicalSeriesLink.aq.count == 0 || this.logicalSeriesLink.ap.count == 0) {
                return;
            }
            this.q9(b).d(a, b);
        }
        o2(a, b, c) {
            return this.o4(a, b, c, this.uf().r(this.q2(), this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx)), this.rn(), this.q2(), runOn(this, this.ul), (d, e) => this.g7(d, e, this.q2(), runOn(this, this.r1), this.valueColumn != null ? new FragmentBaseValueList(this) : null), (d, e) => this.g5(d, e, this.q2(), runOn(this, this.r1), this.valueColumn != null ? new FragmentBaseValueList(this) : null));
        }
        ag() {
            return [this.q2(), this.rn()];
        }
        ul(a, b, c) {
            if (this.ca == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.bx);
            let e = new ScalerParams(0, this.ca.pg, this.bx.bu, this.q2().cc, d);
            let f = this.q8.r(this.q2(), this.ca.pg, this.bx.bu, d);
            return this.ga(this.valueColumn != null ? new FragmentBaseValueList(this) : null, a, this.q2(), e, f, runOn(this, this.r1), b, c);
        }
        un(a, b, c) {
            let d = this.s4(c);
            let e = d;
            let f = this.logicalSeriesLink.aj;
            let g = f ? this.parentSeries.s0.e : this.parentSeries.s0.d;
            let h = g.indexOf(this);
            if (a.count == 0) {
                return;
            }
            if (h == -1) {
                return;
            }
            let i = false;
            for (let j = h; j >= 0; j--) {
                if (i) {
                    break;
                }
                if (j == 0) {
                    a.add({ $type: Point_$type, x: a._inner[a.count - 1].x, y: e });
                    a.add({ $type: Point_$type, x: a._inner[0].x, y: e });
                    break;
                }
                let k = typeCast(FragmentBase.$, g._inner[j - 1]);
                if (k != null && k.ug != null && k.ug.o.count > 0 && this.bx != null && k.e3(this.bx.bu, this.bx.bv, this.bx)) {
                    i = true;
                    for (let l = k.ug.o.count - 1; l >= 0; l--) {
                        a.add(k.ug.o._inner[l]);
                    }
                }
            }
        }
        e3(a, b, c) {
            let d = super.e3(a, b, c);
            let e = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let f = this.parentSeries.fetchYAxis();
            if (this.parentSeries == null || e == null || e.itemsSource == null || f == null || this.parentSeries.ch == null || e.bh == null || f.bh == null) {
                d = false;
            }
            if (this.valueColumn == null) {
                return false;
            }
            if (isInfinity(this.valueColumn.minimum) && isInfinity(this.valueColumn.maximum)) {
                d = false;
            }
            if (isNaN_(this.valueColumn.minimum) && isNaN_(this.valueColumn.maximum)) {
                d = false;
            }
            return d;
        }
        s4(a) {
            let b = 0;
            let c = a.bv;
            let d = a.bu;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.yAxis.cc, e);
            f.b = this.f2();
            if (!c.isEmpty && !d.isEmpty && this.yAxis != null) {
                b = this.yAxis.d8(0, f);
            }
            return b;
        }
        ap(a) {
            return null;
        }
        um() {
            if (this.parentSeries == null) {
                return -1;
            }
            let a = this.parentSeries.g9;
            let b = 0;
            let c = 1;
            if (this.parentSeries.s4) {
                b = this.parentSeries.sw.count - 1;
                c = -1;
            }
            for (let d = b; this.parentSeries.s4 ? d >= 0 : d < this.parentSeries.sw.count; d += c) {
                let e = this.parentSeries.sw._inner[d];
                if (e.visualSeriesLink == this) {
                    return a;
                }
                if (this.parentSeries.a0 == null || e.iv != 0 || e.iu != 0) {
                    continue;
                }
                a++;
            }
            return -1;
        }
        uo(a) {
            if (a == null) {
            }
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            if (this.parentSeries == null) {
                return;
            }
            let e = typeCast(NumericAxisBase.$, this.parentSeries.fetchYAxis());
            if (e == null) {
                return;
            }
            switch (b) {
                case "ValueColumn":
                    if (this.sv.c3) {
                        this.sv.c2.g$i();
                    }
                    if (e != null && !e.cv()) {
                        this.parentSeries.sv().cr.g(this.gh);
                        this.l0(false);
                    }
                    break;
                case "ActualBrush":
                    if (this.logicalSeriesLink != null) {
                        this.logicalSeriesLink.hs = this.of;
                    }
                    break;
            }
        }
        l2(a, b) {
            super.l2(a, b);
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    FragmentBase.$t = /*@__PURE__*/ markType(FragmentBase, 'FragmentBase', HorizontalAnchoredCategorySeries.$);
    return FragmentBase;
})();
/**
 * @hidden
 */
export let AreaFragment = /*@__PURE__*/ (() => {
    class AreaFragment extends FragmentBase {
        constructor() {
            super();
            this.ab = AreaFragment.$;
        }
        bu() {
            return new AreaFragmentView(this);
        }
        lh(a) {
            super.lh(a);
            this.up = a;
        }
        get_c8() {
            return true;
        }
        get_c7() {
            return true;
        }
        ur(a, b) {
            let c = this.up.dg.ak;
            if (this.er(a, c)) {
                return true;
            }
            let d = this.up.dh.ak;
            if (this.er(a, d)) {
                return true;
            }
            return false;
        }
        ep(a, b) {
            if (this.uq(a, b)) {
                return true;
            }
            if (this.ur(a, b)) {
                return true;
            }
            if (this.pu(a, b)) {
                return true;
            }
            return false;
        }
        uq(a, b) {
            let c = this.up.di.ak;
            if (this.eq(a, b, c)) {
                return true;
            }
            let d = this.up.dj.ak;
            if (this.eq(a, b, d)) {
                return true;
            }
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        kh(a, b) {
            super.kh(a, b);
            let c = b;
            c.db();
        }
        sl(a, b) {
            super.sl(a, b);
            this.ug.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = typeCast(AreaFragmentView.$, b);
            let d = a.f;
            let e = this.getEffectiveViewport1(c);
            this.rb.a0(this, this.rv(), runOn(this, this.qw), this.r3(b), this.r4(b));
            let f = false;
            let g = this.rb.b;
            if (g != null) {
                f = true;
            }
            if (f) {
                let h = new ScalerParams(0, b.bv, b.bu, this.tw.cc, e);
                this.sh(d, -1, this.valueColumn.count, this.tw, h, b.q);
            }
            this.rb.ad(c.di, true, false, true, true);
            this.rb.ad(c.dj, true, false, true, true);
            this.rb.ad(c.dg, false, true, false, false);
            this.rb.ad(c.dh, false, true, false, false);
            let i = c.cr.d;
            this.ug.i(c.dg, c.di, c.dh, c.dj, a.f.count, a.f, true, i, this.gh, (j, k, l, m, n) => this.un(j, a.f, b), 0);
            c.dg._opacity = this.rb.j * this.fi;
            c.dh._opacity = 0.5 * this.rb.j * this.fi;
        }
        ma() {
            let a = (typeCast(XamDataChart.$, this.ca));
            if (a != null) {
                this.fi = isNaN_(this.fq) ? this.parentSeries.fi : this.fq;
            }
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    AreaFragment.$t = /*@__PURE__*/ markType(AreaFragment, 'AreaFragment', FragmentBase.$);
    return AreaFragment;
})();
/**
 * @hidden
 */
export let ColumnFragment = /*@__PURE__*/ (() => {
    class ColumnFragment extends FragmentBase {
        constructor() {
            super();
            this.ab = ColumnFragment.$;
        }
        get_db() {
            return true;
        }
        get_dw() {
            return true;
        }
        bu() {
            return new ColumnFragmentView(this);
        }
        lh(a) {
            super.lh(a);
            this.uq = a;
        }
        get fragmentXAxis() {
            return this.parentSeries != null ? typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis()) : null;
        }
        get fragmentYAxis() {
            return this.parentSeries != null ? typeCast(NumericYAxis.$, this.parentSeries.fetchYAxis()) : null;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        q2() {
            return this.fragmentXAxis;
        }
        rn() {
            return this.fragmentYAxis;
        }
        get_cy() {
            return true;
        }
        fetchXAxis() {
            return null;
        }
        fetchYAxis() {
            return null;
        }
        kh(a, b) {
            super.kh(a, b);
            let c = b;
            if (a && c.db != null) {
                this.q3.m.clear();
                c.db.count = 0;
            }
        }
        ap(a) {
            if (this.valueColumn == null || this.valueColumn.count == 0) {
                return null;
            }
            return new AxisRange(this.valueColumn.minimum, this.valueColumn.maximum);
        }
        e3(a, b, c) {
            if (this.parentSeries == null) {
                return false;
            }
            return this.parentSeries.s5(this, a, b, this.us(c));
        }
        e0() {
            return true;
        }
        r3(a) {
            if (this.parentSeries != null) {
                return this.parentSeries.r3(this.parentSeries.bx);
            }
            return super.r3(a);
        }
        r4(a) {
            if (this.parentSeries != null) {
                return this.parentSeries.r4(this.parentSeries.bx);
            }
            return super.r3(a);
        }
        r5(a) {
            if (this.parentSeries != null) {
                return this.parentSeries.r5(this.parentSeries.bx);
            }
            return super.r5(a);
        }
        pb(a) {
            if (this.q2() == null || this.fragmentYAxis == null) {
                return Rect.empty;
            }
            let b = this.ox(a);
            let c = this.bx.bv;
            let d = this.bx.bu;
            let e = this.getEffectiveViewport1(this.bx);
            let f = new ScalerParams(0, c, d, this.fragmentYAxis.cc, e);
            let g = this.aj(this.q2(), this.q3.f, this.r3(this.bx), this.r4(this.bx), a, true);
            if (g == null) {
                return Rect.empty;
            }
            let h = g[0];
            let i = g[1];
            let j = Math.abs(b.x - h[0]);
            let k = Math.abs(b.x - i[0]);
            let l = this.q2().ki(c, d, e);
            if (j < k) {
                let m = h[0] - 0.5 * l;
                let n = h[1];
                let o = h[2];
                return new Rect(0, m, Math.min(n, o), l, Math.max(n, o) - Math.min(n, o));
            }
            else {
                let p = i[0] - 0.5 * l;
                let q = i[1];
                let r = i[2];
                return new Rect(0, p, Math.min(q, r), l, Math.max(q, r) - Math.min(q, r));
            }
        }
        ep(a, b) {
            if (this.es(a, b)) {
                return true;
            }
            if (this.pu(a, b)) {
                return true;
            }
            return false;
        }
        es(a, b) {
            let c = this.pc(a);
            if (c.isEmpty) {
                return false;
            }
            let d = this.uz(c, this.fz(b));
            return d.containsPoint(a);
        }
        uz(a, b) {
            let c = a.left + a.width / 2;
            let d = a.top + a.height / 2;
            let e = c - ((a.width / 2) + b);
            let f = d - (a.height / 2);
            let g = a.height;
            let h = a.width + b * 2;
            return new Rect(0, e, f, h, g);
        }
        hn(a, b) {
            let c = typeCast(FrameworkElement.$, a);
            let d = c != null ? typeCast(DataContext.$, c.dataContext) : null;
            let e = d != null ? d.item : null;
            if (e == null) {
                let f = this.bx.bu;
                let g = this.ca != null ? this.ca.pg : Rect.empty;
                let h = { $type: Point_$type, x: g.left + g.width * (b.x - f.left) / f.width, y: g.top + g.height * (b.y - f.top) / f.height };
                e = this.hh(h);
            }
            return e;
        }
        hh(a) {
            let b = 0;
            if (typeCast(ISortingAxis_$type, this.q2()) !== null) {
                b = this.g2(a);
                if (b == -1) {
                    return null;
                }
            }
            else {
                b = this.g0(a);
            }
            return b >= 0 && this.ch != null && b < this.ch.count ? this.ch.item(b) : null;
        }
        g2(a) {
            let b = this.bx.bv;
            let c = this.bx.bu;
            let d = this.getEffectiveViewport1(this.bx);
            if (b.isEmpty || c.isEmpty) {
                return -1;
            }
            let e = this.q2();
            let f = new ScalerParams(0, b, c, e.cc, d);
            let g = typeCast(ISortingAxis_$type, this.fragmentXAxis);
            let h = this.o7(this.bx);
            let i = e.eb(h.left, f);
            let j = e.eb(h.right, f);
            let k = (a.x - b.left) / b.width;
            let l = i + ((j - i) * k);
            if (truncate(l) <= dateMinValue().getTime() || truncate(l) >= dateMaxValue().getTime()) {
                return -1;
            }
            let m = g.i$f(l);
            return m;
        }
        g0(a) {
            if (this.parentSeries == null) {
                return -1;
            }
            return this.parentSeries.tb(a);
        }
        uk(a, b, c, d, e, f, g, h) {
            let i = 0;
            let j = c[0];
            let k = e < i ? c[2] : c[1];
            let l = new Rect(0, j - 5, k - 5, 11, 11);
            if (!isNaN_(j) && !isNaN_(k) && !isInfinity(j) && !isInfinity(k) && d.tryAdd(l)) {
                b.m.add({ $type: Point_$type, x: j, y: k });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        us(a) {
            if (a.p) {
                return this.parentSeries.a4.a$h.item(a.ad);
            }
            else if (a == this.bw) {
                return this.parentSeries.bw;
            }
            else {
                return this.parentSeries.rc;
            }
        }
        lz(a, b, c, d, e) {
            this.a4.a$t(this, a, b, d, e);
            let f = this.a4.a$h.item(d);
            let g = f;
            f.a1(c);
            let h = this.us(f);
            h.cr.g(this.gh);
            if (this.ct(g)) {
                return;
            }
            if (this.sw == null) {
                this.sw = new CategoryFrame(3);
            }
            this.sw.u();
            this.si(this.sw, g);
            this.sl(this.sw, g);
        }
        si(a, b) {
            a.u();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null || this.logicalSeriesLink.ap.count == 0 || this.logicalSeriesLink.aq.count == 0) {
                return;
            }
            let c;
            if (b.p) {
                c = this.parentSeries.su;
            }
            else if (b == this.bw) {
                c = this.parentSeries.q6;
            }
            else {
                c = this.parentSeries.q3;
            }
            let d = typeCast(CategorySeriesView.$, this.us(b));
            a.f.clear();
            a.m.clear();
            let e = d.cr.e;
            let f = d.cr.f;
            let g = this.parentSeries.q8.h.yScaler;
            let h = typeCast(ISortingAxis_$type, this.parentSeries.q8.h.scaler);
            let i = typeCast(NumericAxisBase.$, g) !== null && g.kl;
            let j = typeCast(StackedBucketCalculator.$, d.cr);
            let k = d.cr.d;
            let l = 0;
            for (let m = e; m <= f; m++) {
                let n = m * k;
                if (this._visibility != 0) {
                    break;
                }
                if (m >= this.valueColumn.count || m >= c.f.count + e) {
                    continue;
                }
                let o = this.valueColumn.item(m);
                let p = !i || (i && o > 0);
                let q;
                if (h == null) {
                    q = j.getBucket1(this, m, m, b.bv, b.bu, c);
                }
                else {
                    q = j.getBucket1(this, m, h.i$b._inner[m], b.bv, b.bu, c);
                }
                a.f.add(q);
                if (p) {
                    if (this.uk(b, a, q, this.q8.h.provideCollisionDetector(), o, n, l, a.f.count - 1)) {
                        l++;
                    }
                }
            }
            b.cu.count = l;
        }
        sl(a, b) {
            super.sl(a, b);
            if (this.parentSeries == null) {
                return;
            }
            this.parentSeries.tk(this, a, b);
            CategoryMarkerManager.e(this, a.m, b.cu, this.pv);
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    ColumnFragment.$t = /*@__PURE__*/ markType(ColumnFragment, 'ColumnFragment', FragmentBase.$);
    ColumnFragment.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ColumnFragment, 'raisePropertyChanged', ['RadiusX:ut:ux', [1, 0], 'RadiusY:uu:uy', [1, 0]]);
    return ColumnFragment;
})();
/**
 * @hidden
 */
export let BarFragment = /*@__PURE__*/ (() => {
    class BarFragment extends ColumnFragment {
        constructor() {
            super();
            this.ab = BarFragment.$;
        }
        get_c9() {
            return true;
        }
        get_dw() {
            return true;
        }
        get_db() {
            return false;
        }
        get barFragmentXAxis() {
            return this.parentSeries != null ? this.parentSeries.xAxis : null;
        }
        get barFragmentYAxis() {
            return this.parentSeries != null ? this.parentSeries.yAxis : null;
        }
        q2() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchYAxis();
        }
        get_isVertical() {
            return true;
        }
        fw(a) {
            let b = this.ca != null ? this.ca.pg : Rect.empty;
            let c = this.bx.bu;
            let d = this.o7(this.bx);
            let e = this.getEffectiveViewport1(this.bx);
            let f = this.q2();
            let g = -1;
            if (f != null && !b.isEmpty && !c.isEmpty) {
                let h = new ScalerParams(0, b, c, f.cc, e);
                let i = f.eb(d.top, h);
                let j = f.eb(d.bottom, h);
                let k = (a.y - b.top) / b.height;
                let l = i + (k * (j - i));
                if (f.categoryMode != 0) {
                    l -= 0.5;
                }
                g = l;
            }
            return g;
        }
        rn() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.rn();
        }
        uz(a, b) {
            let c = a.left + a.width / 2;
            let d = a.top + a.height / 2;
            let e = c - (a.width / 2);
            let f = d - ((a.height / 2) + b);
            let g = a.height + b * 2;
            let h = a.width;
            return new Rect(0, e, f, h, g);
        }
        pb(a) {
            if (this.q2() == null) {
                return Rect.empty;
            }
            let b = this.ox(a);
            let c = this.bx.bv;
            let d = this.bx.bu;
            let e = this.getEffectiveViewport1(this.bx);
            let f = this.q2();
            let g = new ScalerParams(0, c, d, f.cc, e);
            let h = this.aj(this.q2(), this.q3.f, this.r3(this.bx), this.r4(this.bx), a, true);
            if (h == null) {
                return Rect.empty;
            }
            let i = h[0];
            let j = h[1];
            let k = Math.abs(b.y - i[0]);
            let l = Math.abs(b.y - j[0]);
            let m = f.ki(c, d, e);
            if (k < l) {
                let n = i[0] - 0.5 * m;
                let o = i[2];
                let p = i[1];
                return new Rect(0, o, n, Math.max(p, o) - Math.min(p, o), m);
            }
            else {
                let q = j[0] - 0.5 * m;
                let r = j[2];
                let s = j[1];
                return new Rect(0, r, q, Math.max(s, r) - Math.min(s, r), m);
            }
        }
        ep(a, b) {
            if (this.es(a, b)) {
                return true;
            }
            if (this.pu(a, b)) {
                return true;
            }
            return false;
        }
        uk(a, b, c, d, e, f, g, h) {
            let i = c[0];
            let j = e < 0 ? c[2] : c[1];
            let k = new Rect(0, j - 5, i - 5, 11, 11);
            if (!isNaN_(j) && !isNaN_(i) && !isInfinity(j) && !isInfinity(i) && d.tryAdd(k)) {
                b.m.add({ $type: Point_$type, x: j, y: i });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        hh(a) {
            let b = 0;
            if (typeCast(ISortingAxis_$type, this.barFragmentYAxis) !== null) {
                b = this.g2(a);
                if (b == -1) {
                    return null;
                }
            }
            else {
                b = this.g0(a);
            }
            return b >= 0 && this.ch != null && b < this.ch.count ? this.ch.item(b) : null;
        }
        g2(a) {
            let b = this.bx.bv;
            let c = this.bx.bu;
            if (b.isEmpty || c.isEmpty) {
                return -1;
            }
            let d = this.getEffectiveViewport1(this.bx);
            let e = new ScalerParams(0, b, c, this.barFragmentYAxis.cc, d);
            let f = typeCast(ISortingAxis_$type, this.barFragmentYAxis);
            let g = this.o7(this.bx);
            let h = this.barFragmentYAxis.eb(g.top, e);
            let i = this.barFragmentYAxis.eb(g.bottom, e);
            let j = (a.y - b.top) / b.height;
            let k = h + ((i - h) * j);
            if (truncate(k) <= dateMinValue().getTime() || truncate(k) >= dateMaxValue().getTime()) {
                return -1;
            }
            let l = f.i$f(k);
            return l;
        }
        s4(a) {
            let b = 0;
            let c = a.bv;
            let d = a.bu;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.barFragmentXAxis.cc, e);
            if (!c.isEmpty && !d.isEmpty && this.barFragmentXAxis != null) {
                b = this.barFragmentXAxis.d8(0, f);
            }
            return b;
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            if (this.parentSeries == null || this.barFragmentXAxis == null) {
                return;
            }
            let e = this.barFragmentXAxis;
            switch (b) {
                case "ValueColumn":
                    if (this.sv.c3) {
                        this.sv.c2.g$i();
                    }
                    if (e != null && !e.cv()) {
                        this.parentSeries.sv().cr.g(this.gh);
                        this.l0(false);
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    BarFragment.$t = /*@__PURE__*/ markType(BarFragment, 'BarFragment', ColumnFragment.$);
    return BarFragment;
})();
/**
 * @hidden
 */
export let AreaFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class AreaFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.c0.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.c0.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = this.i.c0;
            let g = f.parentSeries;
            let h = typeCast(IStacked100Series_$type, g) !== null;
            let i = this.i.c0.valueColumn;
            let j = g.ss;
            let k = g.st;
            let l = f.logicalSeriesLink.aq;
            let m = f.logicalSeriesLink.ap;
            for (let n = b; n <= c; ++n) {
                let o = i.item(n);
                if (isNaN_(o) || isInfinity(o)) {
                    o = 0;
                }
                let p = Math.abs(k[n]) + j[n];
                if (h) {
                    if (p == 0) {
                        o = 0;
                    }
                    else if (o < 0) {
                        o = (l._inner[n] + o) / p * 100;
                    }
                    else {
                        o = (m._inner[n] + o) / p * 100;
                    }
                }
                else {
                    o = o < 0 ? l._inner[n] + o : m._inner[n] + o;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(o)) {
                        d = Math.min(d, o);
                        e = Math.max(e, o);
                    }
                }
                else {
                    d = o;
                    e = o;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    AreaFragmentBucketCalculator.$t = /*@__PURE__*/ markType(AreaFragmentBucketCalculator, 'AreaFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return AreaFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let LineFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class LineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.c0.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.c0.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = typeCast(FragmentBase.$, this.i.c0);
            let g = f.parentSeries;
            for (let h = b; h <= c; ++h) {
                let i = this.i.c0.valueColumn.item(h);
                let j = Math.abs(g.st[h]) + g.ss[h];
                if (isNaN_(i) || isInfinity(i)) {
                    i = 0;
                }
                if (typeCast(IStacked100Series_$type, g) !== null) {
                    if (j == 0) {
                        i = 0;
                    }
                    else if (i < 0) {
                        i = (f.logicalSeriesLink.aq._inner[h] + i) / j * 100;
                    }
                    else {
                        i = (f.logicalSeriesLink.ap._inner[h] + i) / j * 100;
                    }
                }
                else {
                    i = i < 0 ? f.logicalSeriesLink.aq._inner[h] + i : f.logicalSeriesLink.ap._inner[h] + i;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(i)) {
                        d = Math.min(d, i);
                        e = Math.max(e, i);
                    }
                }
                else {
                    d = i;
                    e = i;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    LineFragmentBucketCalculator.$t = /*@__PURE__*/ markType(LineFragmentBucketCalculator, 'LineFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return LineFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let SplineFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class SplineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.c0.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.c0.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = typeCast(SplineFragmentBase.$, this.i.c0);
            let g = f.parentSeries;
            for (let h = b; h <= c; ++h) {
                let i = this.i.c0.valueColumn.item(h);
                let j = Math.abs(g.st[h]) + g.ss[h];
                if (isNaN_(i) || isInfinity(i)) {
                    i = 0;
                }
                if (typeCast(IStacked100Series_$type, g) !== null) {
                    if (j == 0) {
                        i = 0;
                    }
                    else if (i < 0) {
                        i = (f.logicalSeriesLink.aq._inner[h] + i) / j * 100;
                    }
                    else {
                        i = (f.logicalSeriesLink.ap._inner[h] + i) / j * 100;
                    }
                }
                else {
                    i = i < 0 ? f.logicalSeriesLink.aq._inner[h] + i : f.logicalSeriesLink.ap._inner[h] + i;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(i)) {
                        d = Math.min(d, i);
                        e = Math.max(e, i);
                    }
                }
                else {
                    d = i;
                    e = i;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    SplineFragmentBucketCalculator.$t = /*@__PURE__*/ markType(SplineFragmentBucketCalculator, 'SplineFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return SplineFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedBucketCalculator = /*@__PURE__*/ (() => {
    class StackedBucketCalculator extends CategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            let b = typeCast(StackedSeriesBase.$, this.c.ct);
            let c = Math.min(b.st != null ? b.st.length : 0, b.ss != null ? b.ss.length : 0);
            let d = Math.min(a * this.d, c - 1);
            let e = Math.min(d + this.d - 1, c - 1);
            let f = NaN;
            let g = NaN;
            for (let h = d; h <= e; ++h) {
                let i = Math.min(b.st[h], b.ss[h]);
                let j = Math.max(b.st[h], b.ss[h]);
                if (!isNaN_(f)) {
                    if (!isNaN_(i)) {
                        f = Math.min(f, i);
                        g = Math.max(g, i);
                    }
                    if (!isNaN_(j)) {
                        f = Math.min(f, j);
                        g = Math.max(g, j);
                    }
                }
                else {
                    f = i;
                    g = j;
                }
            }
            if (!isNaN_(f) && !isNaN_(g)) {
                return [0.5 * (d + e), f, g];
            }
            return [NaN, NaN, NaN];
        }
        getBucket1(a, b, c, d, e, f) {
            return null;
        }
    }
    StackedBucketCalculator.$t = /*@__PURE__*/ markType(StackedBucketCalculator, 'StackedBucketCalculator', CategoryBucketCalculator.$);
    return StackedBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedBarBucketCalculator = /*@__PURE__*/ (() => {
    class StackedBarBucketCalculator extends StackedBucketCalculator {
        constructor(a) {
            super(a);
        }
        g(a) {
            let b = this.c.bv;
            let c = this.c.bu;
            let d = typeCast(StackedBarSeries.$, this.c.ct);
            let e = this.c.ct.ch;
            if (b.isEmpty || c.isEmpty || d.yAxis == null || e == null || e.count == 0) {
                this.d = 0;
                return;
            }
            let f = d.getEffectiveViewport1(this.c);
            let g = new ScalerParams(0, b, c, d.yAxis.cc, f);
            let h = d.o7(this.c);
            let i = Math.floor(d.yAxis.ec(h.top, g, 0));
            let j = Math.ceil(d.yAxis.ec(h.bottom, g, 0));
            if (!d.yAxis.cc) {
                j = Math.ceil(d.yAxis.ec(h.top, g, 0));
                i = Math.floor(d.yAxis.ec(h.bottom, g, 0));
            }
            let k = Math.floor((j - i + 1) * a / h.height);
            this.d = truncate(Math.max(1, k));
            this.e = truncate(Math.max(0, Math.floor(i / this.d) - 1));
            this.f = truncate(Math.ceil(j / this.d));
        }
        getBucket(a) {
            return super.getBucket(a);
        }
        getBucket1(a, b, c, d, e, f) {
            let g = [NaN, NaN, NaN];
            let h = typeCast(BarFragment.$, a);
            if (h == null || h.logicalSeriesLink == null) {
                return g;
            }
            let i = typeCast(StackedBarSeries.$, this.c.ct);
            let j = a.valueColumn.item(c);
            let k = 0;
            let l = NaN;
            let m = NaN;
            let n = Number.NEGATIVE_INFINITY;
            let o = Number.POSITIVE_INFINITY;
            let p = i.getEffectiveViewport1(this.c);
            let q = Math.min(i.st != null ? i.st.length : 0, i.ss != null ? i.ss.length : 0);
            let r = c * this.d;
            let s = Math.min(r + this.d - 1, q - 1);
            for (let t = r; t <= s; ++t) {
                j = a.valueColumn.item(t);
                if (j < k) {
                    o = Math.min(o, h.logicalSeriesLink.aq._inner[t] + j);
                    n = Math.max(n, h.logicalSeriesLink.aq._inner[t]);
                }
                else {
                    o = Math.min(o, h.logicalSeriesLink.ap._inner[t]);
                    n = Math.max(n, h.logicalSeriesLink.ap._inner[t] + j);
                }
                if (!isNaN_(l)) {
                    if (!isNaN_(o)) {
                        l = Math.min(l, o);
                        m = Math.max(m, o);
                    }
                    if (!isNaN_(n)) {
                        l = Math.min(l, n);
                        m = Math.max(m, n);
                    }
                }
                else {
                    l = o;
                    m = n;
                }
            }
            let u = new ScalerParams(0, d, e, i.xAxis.cc, p);
            g = [f.f._inner[b - this.e][0], i.xAxis.d8(m, u), i.xAxis.d8(l, u)];
            return g;
        }
    }
    StackedBarBucketCalculator.$t = /*@__PURE__*/ markType(StackedBarBucketCalculator, 'StackedBarBucketCalculator', StackedBucketCalculator.$);
    return StackedBarBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedColumnBucketCalculator = /*@__PURE__*/ (() => {
    class StackedColumnBucketCalculator extends StackedBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            return super.getBucket(a);
        }
        getBucket1(a, b, c, d, e, f) {
            let g = [NaN, NaN, NaN];
            let h = typeCast(ColumnFragment.$, a);
            if (h == null || h.logicalSeriesLink == null) {
                return g;
            }
            let i = typeCast(StackedColumnSeries.$, this.c.ct);
            let j = a.valueColumn.item(c);
            let k = 0;
            let l = NaN;
            let m = NaN;
            let n = Number.NEGATIVE_INFINITY;
            let o = Number.POSITIVE_INFINITY;
            let p = i.getEffectiveViewport1(this.c);
            let q = Math.min(i.st != null ? i.st.length : 0, i.ss != null ? i.ss.length : 0);
            let r = c * this.d;
            let s = Math.min(r + this.d - 1, q - 1);
            for (let t = r; t <= s; ++t) {
                j = a.valueColumn.item(t);
                if (j < k) {
                    o = Math.min(o, h.logicalSeriesLink.aq._inner[t] + j);
                    n = Math.max(n, h.logicalSeriesLink.aq._inner[t]);
                }
                else {
                    o = Math.min(o, h.logicalSeriesLink.ap._inner[t]);
                    n = Math.max(n, h.logicalSeriesLink.ap._inner[t] + j);
                }
                if (!isNaN_(l)) {
                    if (!isNaN_(o)) {
                        l = Math.min(l, o);
                        m = Math.max(m, o);
                    }
                    if (!isNaN_(n)) {
                        l = Math.min(l, n);
                        m = Math.max(m, n);
                    }
                }
                else {
                    l = o;
                    m = n;
                }
            }
            let u = new ScalerParams(0, d, e, i.yAxis.cc, p);
            g = [f.f._inner[b - this.e][0], i.yAxis.d8(m, u), i.yAxis.d8(l, u)];
            return g;
        }
    }
    StackedColumnBucketCalculator.$t = /*@__PURE__*/ markType(StackedColumnBucketCalculator, 'StackedColumnBucketCalculator', StackedBucketCalculator.$);
    return StackedColumnBucketCalculator;
})();
/**
 * @hidden
 */
export let FragmentBaseValueList = /*@__PURE__*/ (() => {
    class FragmentBaseValueList extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        indexOf(a) {
            throw new NotImplementedException(0);
        }
        insert(a, b) {
            throw new NotImplementedException(0);
        }
        removeAt(a) {
            throw new NotImplementedException(0);
        }
        item(a, b) {
            if (arguments.length === 2) {
                throw new NotImplementedException(0);
                return b;
            }
            else {
                let b = false;
                if (this.a.parentSeries != null) {
                    b = this.a.parentSeries.s3;
                }
                let c = this.a.parentSeries;
                if (c == null) {
                    return NaN;
                }
                if (c.st == null || c.ss == null || c.st.length == 0 || c.ss.length == 0) {
                    return NaN;
                }
                let d = this.a.valueColumn.item(a);
                let e = Math.abs(c.st[a]) + c.ss[a];
                let f = this.a.logicalSeriesLink.ap;
                let g = this.a.logicalSeriesLink.aq;
                if (isNaN_(d) || isInfinity(d)) {
                    d = 0;
                }
                if (b) {
                    if (e == 0) {
                        d = 0;
                    }
                    else if (d < 0) {
                        d = (g._inner[a] + d) / e * 100;
                    }
                    else {
                        d = (f._inner[a] + d) / e * 100;
                    }
                }
                else {
                    d = d < 0 ? g._inner[a] + d : f._inner[a] + d;
                }
                return d;
            }
        }
        add(a) {
            throw new NotImplementedException(0);
        }
        clear() {
            throw new NotImplementedException(0);
        }
        contains(a) {
            throw new NotImplementedException(0);
        }
        copyTo(a, b) {
            throw new NotImplementedException(0);
        }
        get count() {
            return this.a.valueColumn.count;
        }
        get isReadOnly() {
            throw new NotImplementedException(0);
        }
        remove(a) {
            throw new NotImplementedException(0);
        }
        getEnumerator() {
            throw new NotImplementedException(0);
        }
        getEnumeratorObject() {
            throw new NotImplementedException(0);
        }
    }
    FragmentBaseValueList.$t = /*@__PURE__*/ markType(FragmentBaseValueList, 'FragmentBaseValueList', Base.$, [/*@__PURE__*/ IList$1_$type.specialize(Number_$type)]);
    return FragmentBaseValueList;
})();
/**
 * @hidden
 */
export let LineFragment = /*@__PURE__*/ (() => {
    class LineFragment extends FragmentBase {
        constructor() {
            super();
            this.ab = LineFragment.$;
        }
        get_dv() {
            return true;
        }
        bu() {
            return new LineFragmentView(this);
        }
        lh(a) {
            super.lh(a);
            this.up = a;
        }
        ur(a, b) {
            let c = this.up.df.ak;
            if (this.er(a, c)) {
                return true;
            }
            return false;
        }
        get_c8() {
            return true;
        }
        ep(a, b) {
            if (this.uq(a, b)) {
                return true;
            }
            if (this.ur(a, b)) {
                return true;
            }
            if (this.pu(a, b)) {
                return true;
            }
            return false;
        }
        uq(a, b) {
            let c = this.up.dg.ak;
            if (this.eq(a, b, c)) {
                return true;
            }
            let d = this.up.dh.ak;
            if (this.eq(a, b, d)) {
                return true;
            }
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        kh(a, b) {
            super.kh(a, b);
            let c = b;
            c.db();
        }
        sl(a, b) {
            super.sl(a, b);
            let c = (d) => a.f._inner[d][0];
            let d = (e) => a.f._inner[e][1];
            let e = (f) => a.f._inner[f][0];
            let f = (g) => a.f._inner[g][2];
            this.ug.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let g = b.cr.d;
            let h = typeCast(LineFragmentView.$, b);
            let i = this.getEffectiveViewport1(b);
            let j = a.f;
            this.rb.a0(this, this.rv(), runOn(this, this.qw), this.r3(b), this.r4(b));
            let k = false;
            let l = this.rb.b;
            if (l != null) {
                k = true;
            }
            if (k) {
                let m = new ScalerParams(0, b.bv, b.bu, this.tw.cc, i);
                this.sh(j, -1, this.valueColumn.count, this.tw, m, b.q);
            }
            this.rb.ad(h.dg, true, false, true, false);
            this.rb.ad(h.dh, true, false, true, false);
            this.rb.ad(h.df, false, true, false, false);
            h.df._opacity = 0.75 * this.rb.j;
            this.ug.m(h.dg, h.df, h.dh, a.f.count, a.f, true, 0, this.st(a.f, a.f.count - 1, b.bu, b.bv), g, this.gh);
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    LineFragment.$t = /*@__PURE__*/ markType(LineFragment, 'LineFragment', FragmentBase.$);
    return LineFragment;
})();
/**
 * @hidden
 */
export let SplineFragmentBase = /*@__PURE__*/ (() => {
    class SplineFragmentBase extends SplineSeriesBase {
        constructor() {
            super();
            this._logicalSeriesLink = null;
            this.uz = null;
            this.u1 = null;
            this.uz = new CategoryLineRasterizer();
        }
        get logicalSeriesLink() {
            return this._logicalSeriesLink;
        }
        set logicalSeriesLink(a) {
            this._logicalSeriesLink = a;
        }
        get parentSeries() {
            return this.u1;
        }
        set parentSeries(a) {
            this.u1 = a;
        }
        get_dh() {
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get_dn() {
            return true;
        }
        i9() {
            if (this.logicalSeriesLink != null) {
                return this.logicalSeriesLink.dk;
            }
            return null;
        }
        o2(a, b, c) {
            return this.o4(a, b, c, this.q8.r(this.q2(), this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx)), this.rn(), this.q2(), runOn(this, this.u3), (d, e) => this.g7(d, e, this.q2(), runOn(this, this.r1), new SplineFragmentBaseValueList(this)), (d, e) => this.g5(d, e, this.q2(), runOn(this, this.r1), new SplineFragmentBaseValueList(this)));
        }
        ag() {
            return [this.q2(), this.rn()];
        }
        u3(a, b, c) {
            if (this.ca == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.bx);
            let e = new ScalerParams(0, this.ca.pg, this.bx.bu, this.q2().cc, d);
            let f = this.q8.r(this.q2(), this.ca.pg, this.bx.bu, d);
            return this.ga(new SplineFragmentBaseValueList(this), a, this.q2(), e, f, runOn(this, this.r1), b, c);
        }
        gz() {
            let a = this.parentSeries;
            if (a.g9 == -1 || a.s0 == null || a.s0.f.indexOf(this) == -1) {
                return -1;
            }
            return a.s0.f.indexOf(this);
        }
        resolveLegendIndex() {
            let a = this.parentSeries;
            if (a.s4) {
                return -1 + a.g9 + a.sw.count - a.s0.f.indexOf(this);
            }
            return super.resolveLegendIndex();
        }
        g3() {
            let a = this.parentSeries;
            if (a.g9 == -1 || a.series.count == 0 || a.series.indexOf(this.logicalSeriesLink) == -1) {
                return -1;
            }
            return a.series.indexOf(this.logicalSeriesLink);
        }
        be() {
            return this.parentSeries;
        }
        ul(a, b, c, d, e, f, g) {
            let h = b[0];
            let i = b[1];
            let j = new Rect(0, h - 5, i - 5, 11, 11);
            if (!isNaN_(h) && !isNaN_(i) && !isInfinity(h) && !isInfinity(i) && c.tryAdd(j)) {
                a.m.add({ $type: Point_$type, x: h, y: i });
                let k = f.cu.item(e);
                k.content.item = this.ch.item(d);
                k.al = g;
                return true;
            }
            return false;
        }
        e3(a, b, c) {
            let d = super.e3(a, b, c);
            let e = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let f = this.parentSeries.fetchYAxis();
            if (this.parentSeries == null || e == null || e.itemsSource == null || f == null || this.parentSeries.ch == null || e.bh == null || f.bh == null) {
                d = false;
            }
            if (this.valueColumn == null) {
                return false;
            }
            if (isInfinity(this.valueColumn.minimum) && isInfinity(this.valueColumn.maximum)) {
                d = false;
            }
            if (isNaN_(this.valueColumn.minimum) && isNaN_(this.valueColumn.maximum)) {
                d = false;
            }
            return d;
        }
        ap(a) {
            return null;
        }
        u4(a, b, c, d, e, f) {
            let g = typeCast(ISortingAxis_$type, d);
            if (g == null) {
                return;
            }
            let h = this.getEffectiveViewport1(f);
            let i = new ScalerParams(0, b, c, d.cc, h);
            let j = new ScalerParams(0, b, c, e.cc, h);
            let k = d.eb(2, i) - d.eb(1, i);
            let l = this.pt();
            let m = 0;
            let n = this.up(d, b, c, h);
            let o = (p) => Math.abs(this.parentSeries.st[p]) + this.parentSeries.ss[p];
            let p = (q) => q;
            let q = (r) => {
                let s = g.i$b._inner[r];
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    return this.valueColumn.item(s) < 0 ? (this.logicalSeriesLink.aq._inner[s] + this.valueColumn.item(s)) / o(s) * 100 : (this.logicalSeriesLink.ap._inner[s] + this.valueColumn.item(s)) / o(s) * 100;
                }
                else {
                    return this.valueColumn.item(s) < 0 ? this.logicalSeriesLink.aq._inner[s] + this.valueColumn.item(s) : this.logicalSeriesLink.ap._inner[s] + this.valueColumn.item(s);
                }
            };
            let r = this.rc.cr.f;
            let s = this.rc.cr.e;
            let t = truncate(Math.ceil(c.width / (r - s)));
            let u = new CollisionAvoider();
            let v = this.rc.cr.d;
            if (v <= 0 || (s <= 0 && r <= 0)) {
                this.rc.cu.count = m;
                return;
            }
            let w = 0;
            for (let x = s; x < r + 1; ++x) {
                let y = null;
                let z = x * v;
                if (g != null && g.i$b != null && z >= 0 && z < g.i$b.count) {
                    z = g.i$b._inner[z];
                }
                if (x >= (this.valueColumn.count - 1)) {
                    if (l && this.ul(a, a.f._inner[a.f.count - 1], u, Math.min(z, this.ch.count - 1), m, f, w - 1)) {
                        ++m;
                    }
                    break;
                }
                let aa = p(x);
                let ab = q(x);
                let ac = p(x + 1);
                let ad = q(x + 1);
                let ae = ac - aa;
                let af = this.uh[x];
                let ag = this.uh[x + 1];
                let ah = g.i$d(g.i$b._inner[x]);
                let ai = d.d8(ah, i) + n;
                let aj = e.d8(ab, j);
                a.f.add([ai, aj, aj]);
                w++;
                for (let ak = 1; ak < t; ++ak) {
                    let al = ak / t;
                    let am = aa + ae * al;
                    let an = (ac - am) / ae;
                    let ao = (am - aa) / ae;
                    let ap = an * ab + ao * ad + ((an * an * an - an) * af + (ao * ao * ao - ao) * ag) * (ae * ae) / 6;
                    let aq = g.i$d(g.i$b._inner[x]);
                    let ar = g.i$d(g.i$b._inner[x + 1]);
                    if (aq == ar && ab == ad) {
                        break;
                    }
                    let as = aq + (ar - aq) * al;
                    am = d.d8(as, i) + n;
                    ap = e.d8(ap, j);
                    a.f.add([am, ap, ap]);
                    w++;
                }
                if (l) {
                    y = [ai, aj, aj];
                }
                if (l && this.ul(a, y, u, Math.min(z, this.ch.count - 1), m, f, w - 1)) {
                    ++m;
                }
            }
            this.rc.cu.count = m;
        }
        si(a, b) {
            a.u();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null) {
                return;
            }
            if (this.logicalSeriesLink.aq.count == 0 || this.logicalSeriesLink.ap.count == 0) {
                return;
            }
            if (this.rc.cr.d == 0) {
                return;
            }
            super.si(a, b);
            if (a.f.count <= 1) {
                return;
            }
            let c = b.bv;
            let d = b.bu;
            let e = this.getEffectiveViewport1(b);
            let f = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let g = typeCast(NumericYAxis.$, this.parentSeries.fetchYAxis());
            let h = new ScalerParams(0, c, d, f.cc, e);
            let i = new ScalerParams(0, c, d, g.cc, e);
            a.f.clear();
            a.m.clear();
            let j = this.pt();
            let k = 0;
            let l;
            let m;
            if (b.p) {
                l = this.parentSeries.su;
                m = this.parentSeries.a4.a$h.item(b.ad);
            }
            else if (b == this.bw) {
                l = this.parentSeries.q6;
                m = typeCast(CategorySeriesView.$, this.parentSeries.bw);
            }
            else {
                l = this.parentSeries.q3;
                m = this.parentSeries.rc;
            }
            let n = m.cr.d;
            let o = typeCast(ISortingAxis_$type, f);
            if (o != null && o.i$b.count != this.ch.count) {
                return;
            }
            let p = this.preferredCategoryMode(f);
            if (p == 0 && f.categoryMode != 0) {
                p = 1;
            }
            let q = 0;
            switch (p) {
                case 0:
                    q = 0;
                    break;
                case 1:
                    q = 0.5 * f.getCategorySize(c, d, e);
                    break;
                case 2:
                    let r = this.g9;
                    q = f.getGroupCenter(this.g9, c, d, e);
                    break;
            }
            if (f.cc) {
                q = -q;
            }
            let s = (t) => Math.abs(this.parentSeries.st[t]) + this.parentSeries.ss[t];
            let t = (u) => u;
            let u = (v) => {
                let w = this.valueColumn.item(v);
                if (isNaN_(w) || isInfinity(w)) {
                    w = 0;
                }
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    if (s(v) == 0) {
                        return 0;
                    }
                    return w < 0 ? (this.logicalSeriesLink.aq._inner[v] + w) / s(v) * 100 : (this.logicalSeriesLink.ap._inner[v] + w) / s(v) * 100;
                }
                return w < 0 ? this.logicalSeriesLink.aq._inner[v] + w : this.logicalSeriesLink.ap._inner[v] + w;
            };
            let v = b.cr.d;
            this.uu(b);
            let w = m.cr.e;
            let x = m.cr.f;
            let y = truncate(Math.ceil(d.width / (x - w)));
            let z = new CollisionAvoider();
            if (o != null) {
                this.u4(a, c, d, f, g, b);
                return;
            }
            let aa = 0;
            let ab = 0;
            for (let ac = w; ac < x + 1; ++ac) {
                if (ac >= this.valueColumn.count) {
                    break;
                }
                let ad = null;
                if (v == 1) {
                    if (ac >= (this.valueColumn.count - 1)) {
                        if (j && a.f.count > 0 && this.ul(a, a.f._inner[a.f.count - 1], z, Math.min(ac * v, this.ch.count - 1), k, b, aa - 1)) {
                            ++k;
                        }
                        break;
                    }
                    let ae = t(ac);
                    let af = t(ac + 1);
                    let ag = u(ac);
                    let ah = u(ac + 1);
                    let ai = af - ae;
                    let aj = this.uh[ac];
                    let ak = this.uh[ac + 1];
                    let al = f.d8(ae, h) + q;
                    let am = g.d8(ag, i);
                    a.f.add([al, am, am]);
                    aa++;
                    ab = aa;
                    for (let an = 1; an < y; ++an) {
                        let ao = ae + ai * an / y;
                        let ap = (af - ao) / ai;
                        let aq = (ao - ae) / ai;
                        let ar = ap * ag + aq * ah + ((ap * ap * ap - ap) * aj + (aq * aq * aq - aq) * ak) * (ai * ai) / 6;
                        ao = f.d8(ao, h) + q;
                        ar = g.d8(ar, i);
                        a.f.add([ao, ar, ar]);
                        aa++;
                    }
                    if (j) {
                        ad = [al, am, am];
                    }
                }
                else {
                    ad = b.cr.getBucket(ac);
                    if (!isNaN_(ad[0])) {
                        ad[0] = f.d8(ad[0], h) + q;
                        ad[1] = g.d8(ad[1], i);
                        ad[2] = g.d8(ad[2], i);
                        a.f.add(ad);
                        aa++;
                        ab = aa;
                    }
                }
                if (j && this.ul(a, ad, z, Math.min(ac * v, this.ch.count - 1), k, b, ab - 1)) {
                    ++k;
                }
            }
            b.cu.count = k;
        }
        uf(a) {
            let b = (c) => Math.abs(this.parentSeries.st[c]) + this.parentSeries.ss[c];
            let c = (d) => d;
            let d = (e) => {
                let f = this.valueColumn.item(e);
                if (isNaN_(f) || isInfinity(f)) {
                    f = 0;
                }
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    if (b(e) == 0) {
                        return 0;
                    }
                    return f < 0 ? (this.logicalSeriesLink.aq._inner[e] + f) / b(e) * 100 : (this.logicalSeriesLink.ap._inner[e] + f) / b(e) * 100;
                }
                return f < 0 ? this.logicalSeriesLink.aq._inner[e] + f : this.logicalSeriesLink.ap._inner[e] + f;
            };
            let e = new List$1(Array_$type, 0);
            let f = a.bv;
            let g = a.bu;
            let h = typeCast(ISortingAxis_$type, this.tw);
            let i = 0;
            let j = 0;
            let k = 0;
            let l = this.gh;
            let m = this.o7(this.bx);
            let n = this.tw;
            let o = this.getEffectiveViewport1(a);
            if (h == null || h.i$b == null) {
                let p = new ScalerParams(0, f, g, n.cc, o);
                let q = 0;
                let r = n.kr - 1;
                let s = Math.floor((r - q + 1) * l / m.width);
                i = truncate(Math.max(1, s));
                j = truncate(Math.max(0, Math.floor(q / i) - 1));
                k = truncate(Math.ceil(r / i));
            }
            else {
                j = 0;
                k = n.kr - 1;
                i = 1;
            }
            let t = truncate(Math.ceil(g.width / (k - j)));
            let u = new CollisionAvoider();
            if (h != null) {
                return this.ug(a);
            }
            let v = 0;
            let w = 0;
            for (let x = j; x < k + 1; ++x) {
                if (x >= this.valueColumn.count) {
                    break;
                }
                let y = null;
                if (i == 1) {
                    if (x >= (this.valueColumn.count - 1)) {
                        break;
                    }
                    let z = c(x);
                    let aa = c(x + 1);
                    let ab = d(x);
                    let ac = d(x + 1);
                    let ad = aa - z;
                    let ae = this.uh[x];
                    let af = this.uh[x + 1];
                    e.add([ab, ab]);
                    for (let ag = 1; ag < t; ++ag) {
                        let ah = z + ad * ag / t;
                        let ai = (aa - ah) / ad;
                        let aj = (ah - z) / ad;
                        let ak = ai * ab + aj * ac + ((ai * ai * ai - ai) * ae + (aj * aj * aj - aj) * af) * (ad * ad) / 6;
                        e.add([ak, ak]);
                    }
                }
                else {
                    y = a.cr.getBucket(x);
                    if (!isNaN_(y[0])) {
                        e.add([y[0], y[1]]);
                    }
                }
            }
            return e.toArray();
        }
        ug(a) {
            let b = new List$1(Array_$type, 0);
            let c = a.bv;
            let d = a.bu;
            let e = this.tw;
            let f = typeCast(ISortingAxis_$type, e);
            if (f == null) {
                return null;
            }
            let g = this.getEffectiveViewport1(a);
            let h = this.pt();
            let i = 0;
            let j = (k) => Math.abs(this.parentSeries.st[k]) + this.parentSeries.ss[k];
            let k = (l) => l;
            let l = (m) => {
                let n = f.i$b._inner[m];
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    return this.valueColumn.item(n) < 0 ? (this.logicalSeriesLink.aq._inner[n] + this.valueColumn.item(n)) / j(n) * 100 : (this.logicalSeriesLink.ap._inner[n] + this.valueColumn.item(n)) / j(n) * 100;
                }
                else {
                    return this.valueColumn.item(n) < 0 ? this.logicalSeriesLink.aq._inner[n] + this.valueColumn.item(n) : this.logicalSeriesLink.ap._inner[n] + this.valueColumn.item(n);
                }
            };
            let m = 0;
            let n = 0;
            let o = 0;
            let p = this.gh;
            let q = this.o7(this.bx);
            if (f == null || f.i$b == null) {
                let r = 0;
                let s = e.kr - 1;
                let t = Math.floor((s - r + 1) * p / q.width);
                m = truncate(Math.max(1, t));
                n = truncate(Math.max(0, Math.floor(r / m) - 1));
                o = truncate(Math.ceil(s / m));
            }
            else {
                n = 0;
                o = e.kr - 1;
                m = 1;
            }
            if (m <= 0 || (n <= 0 && o <= 0)) {
                this.rc.cu.count = i;
                return null;
            }
            let u = truncate(Math.ceil(d.width / (o - n)));
            let v = new CollisionAvoider();
            let w = 0;
            for (let x = n; x < o + 1; ++x) {
                let y = null;
                if (x >= (this.valueColumn.count - 1)) {
                    break;
                }
                let z = k(x);
                let aa = l(x);
                let ab = k(x + 1);
                let ac = l(x + 1);
                let ad = ab - z;
                let ae = this.uh[x];
                let af = this.uh[x + 1];
                b.add([aa, aa]);
                for (let ag = 1; ag < u; ++ag) {
                    let ah = ag / u;
                    let ai = z + ad * ah;
                    let aj = (ab - ai) / ad;
                    let ak = (ai - z) / ad;
                    let al = aj * aa + ak * ac + ((aj * aj * aj - aj) * ae + (ak * ak * ak - ak) * af) * (ad * ad) / 6;
                    b.add([al, al]);
                }
            }
            return b.toArray();
        }
        uu(a) {
            super.uu(a);
            let b = (c) => Math.abs(this.parentSeries.st[c]) + this.parentSeries.ss[c];
            let c = (d) => d;
            let d = (e) => {
                let f = this.valueColumn.item(e);
                if (isNaN_(f) || isInfinity(f)) {
                    f = 0;
                }
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    if (b(e) == 0) {
                        return 0;
                    }
                    return f < 0 ? (this.logicalSeriesLink.aq._inner[e] + f) / b(e) * 100 : (this.logicalSeriesLink.ap._inner[e] + f) / b(e) * 100;
                }
                return f < 0 ? this.logicalSeriesLink.aq._inner[e] + f : this.logicalSeriesLink.ap._inner[e] + f;
            };
            let e = this.tw;
            let f = this.uj == 0 ? NaN : 0;
            if (e != null && typeCast(ISortingAxis_$type, e) !== null && e.i$b != null) {
                let g = new SafeSortedReadOnlyDoubleCollection(0, this.valueColumn, e.i$b);
                d = (h) => g.item(h);
            }
            this.uh = Numeric.c(this.valueColumn.count, c, d, f, f);
            if (this.uk) {
                let h = -1.7976931348623157E+308;
                let i = 1.7976931348623157E+308;
                let j = this.uf(a);
                if (j == null) {
                    return;
                }
                for (let k = 0; k < j.length; k++) {
                    if (isNaN_(j[k][0]) || isNaN_(j[k][1])) {
                        continue;
                    }
                    if (j[k][1] > h) {
                        h = j[k][1];
                    }
                    if (j[k][0] < i) {
                        i = j[k][0];
                    }
                }
                this.ur = i;
                this.uq = h;
            }
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case "ActualBrush":
                    if (this.logicalSeriesLink != null) {
                        this.logicalSeriesLink.hs = this.of;
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    SplineFragmentBase.$t = /*@__PURE__*/ markType(SplineFragmentBase, 'SplineFragmentBase', SplineSeriesBase.$);
    return SplineFragmentBase;
})();
/**
 * @hidden
 */
export let SplineAreaFragment = /*@__PURE__*/ (() => {
    class SplineAreaFragment extends SplineFragmentBase {
        constructor() {
            super();
            this.u9 = null;
            this.ab = SplineAreaFragment.$;
        }
        bu() {
            return new SplineAreaFragmentView(this);
        }
        lh(a) {
            super.lh(a);
            this.u5 = typeCast(SplineAreaFragmentView.$, a);
        }
        ac() {
            super.ac();
            this.l0(false);
        }
        get_c8() {
            return true;
        }
        get_c7() {
            return true;
        }
        get_ea() {
            return true;
        }
        u7(a, b) {
            let c = this.u5.dh.ak;
            if (this.er(a, c)) {
                return true;
            }
            let d = this.u5.di.ak;
            if (this.er(a, d)) {
                return true;
            }
            return false;
        }
        ep(a, b) {
            if (this.u6(a, b)) {
                return true;
            }
            if (this.u7(a, b)) {
                return true;
            }
            if (this.pu(a, b)) {
                return true;
            }
            return false;
        }
        u6(a, b) {
            let c = this.u5.dj.ak;
            if (this.eq(a, b, c)) {
                return true;
            }
            let d = this.u5.dk.ak;
            if (this.eq(a, b, d)) {
                return true;
            }
            return false;
        }
        kh(a, b) {
            super.kh(a, b);
            let c = b;
            c.dc();
        }
        sl(a, b) {
            super.sl(a, b);
            this.uz.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = a.f;
            let d = this.getEffectiveViewport1(b);
            this.rb.a0(this, this.rv(), runOn(this, this.qw), this.r3(b), this.r4(b));
            let e = false;
            let f = this.rb.b;
            if (f != null) {
                e = true;
            }
            if (e) {
                let g = new ScalerParams(0, b.bv, b.bu, this.tw.cc, d);
                this.sh(c, -1, this.valueColumn.count, this.tw, g, b.q);
            }
            let h = typeCast(SplineAreaFragmentView.$, b);
            let i = b.cr.d;
            this.rb.ad(h.dj, true, false, true, true);
            this.rb.ad(h.dk, true, false, true, true);
            this.rb.ad(h.dh, false, true, false, false);
            this.rb.ad(h.di, false, true, false, false);
            h.dh._opacity = this.rb.j * this.fi;
            h.di._opacity = 0.5 * this.rb.j * this.fi;
            this.uz.i(h.dh, h.dj, h.di, h.dk, a.f.count, a.f, true, i, this.gh, (j, k, l, m, n) => this.u8(j, a.f, b), 1);
        }
        l2(a, b) {
            super.l2(a, b);
        }
        u8(a, b, c) {
            let d = this.s4(c);
            let e = d;
            let f = this.logicalSeriesLink.aj;
            let g = f ? this.parentSeries.s0.e : this.parentSeries.s0.d;
            let h = g.indexOf(this);
            if (a.count == 0) {
                return;
            }
            if (h == -1) {
                return;
            }
            let i = false;
            for (let j = h; j >= 0; j--) {
                if (i) {
                    break;
                }
                if (j == 0) {
                    a.add({ $type: Point_$type, x: a._inner[a.count - 1].x, y: e });
                    a.add({ $type: Point_$type, x: a._inner[0].x, y: e });
                    break;
                }
                let k = typeCast(SplineFragmentBase.$, g._inner[j - 1]);
                if (k != null && k.uz != null && k.uz.o.count > 0 && this.bx != null && k.e3(this.bx.bu, this.bx.bv, this.bx)) {
                    i = true;
                    for (let l = k.uz.o.count - 1; l >= 0; l--) {
                        a.add(k.uz.o._inner[l]);
                    }
                }
            }
        }
        s4(a) {
            let b = 0;
            let c = a.bv;
            let d = a.bu;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.yAxis.cc, e);
            if (!c.isEmpty && !d.isEmpty && this.yAxis != null) {
                b = this.yAxis.d8(0, f);
            }
            return b;
        }
        ma() {
            let a = (typeCast(XamDataChart.$, this.ca));
            if (a != null) {
                this.fi = isNaN_(this.fq) ? this.parentSeries.fi : this.fq;
            }
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    SplineAreaFragment.$t = /*@__PURE__*/ markType(SplineAreaFragment, 'SplineAreaFragment', SplineFragmentBase.$);
    return SplineAreaFragment;
})();
/**
 * @hidden
 */
export let SplineFragment = /*@__PURE__*/ (() => {
    class SplineFragment extends SplineFragmentBase {
        constructor() {
            super();
            this.ab = SplineFragment.$;
        }
        get_ea() {
            return true;
        }
        bu() {
            return new SplineFragmentView(this);
        }
        lh(a) {
            super.lh(a);
            this.u5 = a;
        }
        u7(a, b) {
            let c = this.u5.dg.ak;
            if (this.er(a, c)) {
                return true;
            }
            return false;
        }
        get_c8() {
            return true;
        }
        ep(a, b) {
            if (this.u6(a, b)) {
                return true;
            }
            if (this.u7(a, b)) {
                return true;
            }
            if (this.pu(a, b)) {
                return true;
            }
            return false;
        }
        u6(a, b) {
            let c = this.u5.dh.ak;
            if (this.eq(a, b, c)) {
                return true;
            }
            let d = this.u5.di.ak;
            if (this.eq(a, b, d)) {
                return true;
            }
            return false;
        }
        kh(a, b) {
            super.kh(a, b);
            let c = b;
            c.dc();
        }
        sl(a, b) {
            super.sl(a, b);
            this.uz.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = typeCast(SplineFragmentView.$, b);
            let d = a.f;
            let e = this.getEffectiveViewport1(b);
            this.rb.a0(this, this.rv(), runOn(this, this.qw), this.r3(b), this.r4(b));
            let f = false;
            let g = this.rb.b;
            if (g != null) {
                f = true;
            }
            if (f) {
                let h = new ScalerParams(0, b.bv, b.bu, this.tw.cc, e);
                this.sh(d, -1, this.valueColumn.count, this.tw, h, b.q);
            }
            this.rb.ad(c.dh, true, false, true, false);
            this.rb.ad(c.di, true, false, true, false);
            this.rb.ad(c.dg, false, true, false, false);
            c.dg._opacity = 0.75 * this.rb.j;
            let i = c.cr.d;
            this.uz.m(c.dh, c.dg, c.di, a.f.count, a.f, true, 1, this.st(a.f, a.f.count - 1, b.bu, b.bv), i, this.gh);
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    SplineFragment.$t = /*@__PURE__*/ markType(SplineFragment, 'SplineFragment', SplineFragmentBase.$);
    return SplineFragment;
})();
/**
 * @hidden
 */
export let SplineFragmentBaseValueList = /*@__PURE__*/ (() => {
    class SplineFragmentBaseValueList extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        indexOf(a) {
            throw new NotImplementedException(0);
        }
        insert(a, b) {
            throw new NotImplementedException(0);
        }
        removeAt(a) {
            throw new NotImplementedException(0);
        }
        item(a, b) {
            if (arguments.length === 2) {
                throw new NotImplementedException(0);
                return b;
            }
            else {
                let b = false;
                if (this.a.parentSeries != null) {
                    b = this.a.parentSeries.s3;
                }
                let c = this.a.parentSeries;
                if (c == null) {
                    return NaN;
                }
                let d = this.a.valueColumn.item(a);
                let e = Math.abs(c.st[a]) + c.ss[a];
                let f = this.a.logicalSeriesLink.ap;
                let g = this.a.logicalSeriesLink.aq;
                if (isNaN_(d) || isInfinity(d)) {
                    d = 0;
                }
                if (b) {
                    if (e == 0) {
                        d = 0;
                    }
                    else if (d < 0) {
                        d = (g._inner[a] + d) / e * 100;
                    }
                    else {
                        d = (f._inner[a] + d) / e * 100;
                    }
                }
                else {
                    d = d < 0 ? g._inner[a] + d : f._inner[a] + d;
                }
                return d;
            }
        }
        add(a) {
            throw new NotImplementedException(0);
        }
        clear() {
            throw new NotImplementedException(0);
        }
        contains(a) {
            throw new NotImplementedException(0);
        }
        copyTo(a, b) {
            throw new NotImplementedException(0);
        }
        get count() {
            return this.a.valueColumn.count;
        }
        get isReadOnly() {
            throw new NotImplementedException(0);
        }
        remove(a) {
            throw new NotImplementedException(0);
        }
        getEnumerator() {
            throw new NotImplementedException(0);
        }
        getEnumeratorObject() {
            throw new NotImplementedException(0);
        }
    }
    SplineFragmentBaseValueList.$t = /*@__PURE__*/ markType(SplineFragmentBaseValueList, 'SplineFragmentBaseValueList', Base.$, [/*@__PURE__*/ IList$1_$type.specialize(Number_$type)]);
    return SplineFragmentBaseValueList;
})();
/**
 * @hidden
 */
export let StackedSeriesBase = /*@__PURE__*/ (() => {
    class StackedSeriesBase extends CategorySeries {
        constructor() {
            super();
            this._series = null;
            this.seriesCreated = null;
            this.ta = 0;
            this.s9 = 0;
            this.ss = null;
            this.st = null;
            this.s0 = null;
            this.sx = null;
            this.s6 = new Dictionary$2(String_$type, Boolean_$type, 0);
            this.su = null;
            this.series = new StackedSeriesCollection();
            let a = this.series;
            a.collectionResetting = delegateCombine(a.collectionResetting, runOn(this, this.tm));
            let b = this.series;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.tl));
            this.q8 = new StackedSeriesFramePreparer(1, this, this.s1, this, this, this.s1.cr);
            this.s0 = new StackedSeriesManager(this);
            this.sx = new StackedSeriesCollection();
            let c = this.sx;
            c.collectionChanged = delegateCombine(c.collectionChanged, runOn(this, this.tl));
            let d = this.sx;
            d.collectionResetting = delegateCombine(d.collectionResetting, runOn(this, this.tg));
        }
        k2() {
            for (let a of fromEnum(this.sw)) {
                a.ey();
            }
            super.k2();
        }
        get_dr() {
            return false;
        }
        getHostReferenceValue() {
            return this.f2();
        }
        bu() {
            return new StackedSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.s1 = a;
        }
        li(a, b) {
            super.li(a, b);
            for (let c of fromEnum(this.series)) {
                c.visualSeriesLink.bx.bu = b;
            }
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        g8() {
            if (this.series == null) {
                return -1;
            }
            return this.series.count;
        }
        ku(a) {
            for (let b = 0; b < this.s0.f.count; b++) {
                let c = this.s0.f._inner[b];
                if (!a(c)) {
                    break;
                }
            }
        }
        get_isStacked() {
            return true;
        }
        get sw() {
            return this.s2 ? this.sx : this.series;
        }
        tg(a, b) {
            for (let c of fromEnum(this.sx)) {
                if (this.s0 != null && this.s0.c.contains(c)) {
                    c.parentSeries = null;
                    this.s0.c.remove(c);
                }
            }
        }
        tm(a, b) {
            for (let c of fromEnum(this.series)) {
                if (this.s0 != null && this.s0.c.contains(c)) {
                    c.parentSeries = null;
                    this.s0.c.remove(c);
                }
            }
        }
        tl(a, b) {
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    if (this.s0 != null && this.s0.c.contains(c)) {
                        c.parentSeries = null;
                        this.s0.c.remove(c);
                    }
                }
            }
            if (b.newItems != null) {
                let d = b.newStartingIndex;
                for (let e of fromEn(b.newItems)) {
                    if (this.s0 != null && !this.s0.c.contains(e)) {
                        e.parentSeries = this;
                        e.ej();
                        e.e5();
                        e.e6();
                        e.fd();
                        e.e7();
                        e.e8();
                        e.ee();
                        e.ef();
                        e.ei();
                        e.eg();
                        e.eh();
                        e.ek();
                        e.ep();
                        e.eq();
                        e.er();
                        e.ew();
                        e.ey();
                        e.es();
                        e.eu();
                        e.ev();
                        e.ew();
                        e.ex();
                        e.ez();
                        e.e0();
                        e.e1();
                        e.ed();
                        e.e3();
                        e.e4();
                        e.e9();
                        e.fa();
                        e.fb();
                        e.et();
                        e.e2();
                        e.fc();
                        e.fe();
                        if (!this.s2) {
                            this.s0.c.insert(d, e);
                            d++;
                        }
                    }
                }
            }
            if (!this.s2) {
                this.tn();
            }
        }
        l7(a) {
            this.b8.cf.c5(a, true, false);
        }
        q9(a) {
            if (a != null && a.q) {
                if (a.p) {
                    return new StackedSeriesFramePreparer(1, typeCast(IIsCategoryBased_$type, this), typeCast(ISupportsMarkers_$type, a), a, this, a.cr);
                }
                else {
                    let b = typeCast(CategorySeriesView.$, this.bw);
                    return new StackedSeriesFramePreparer(1, this, typeCast(ISupportsMarkers_$type, b), this.ca.cf.o, this, b.cr);
                }
            }
            else {
                return this.q8;
            }
        }
        si(a, b) {
            a.u();
            this.tj();
            this.q9(b).d(a, b);
        }
        kh(a, b) {
            super.kh(a, b);
            for (let c of fromEnum(this.sw)) {
                if (c.visualSeriesLink != null) {
                    c.visualSeriesLink.kh(a, c.visualSeriesLink.bx);
                }
            }
        }
        th() {
            this.tj();
        }
        tn() {
            let a = this.fetchXAxis();
            if (a != null) {
                a.cw(true);
            }
            let b = this.fetchYAxis();
            if (b != null) {
                b.cw(true);
            }
        }
        get_s3() {
            return false;
        }
        get s3() {
            return this.get_s3();
        }
        eh(a) {
            let b = this.ch != null ? this.ch.indexOf(a) : -1;
            let c = this.ca != null ? this.ca.pg : Rect.empty;
            c = c.copy();
            let d = this.bx.bu;
            let e = new Rect(0, 0, 0, 1, 1);
            let f = this.o9(this.bx);
            if (b >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                let g = this.fetchXAxis();
                if (g != null) {
                    let h = new ScalerParams(0, e, e, g.cc, f);
                    let i = g.d8(b, h);
                    if (i < c.left + 0.1 * c.width) {
                        i = i + 0.4 * c.width;
                    }
                    if (i > c.right - 0.1 * c.width) {
                        i = i - 0.4 * c.width;
                    }
                    c.x = i - 0.5 * c.width;
                }
                let j = this.fetchYAxis();
                if (j != null && this.ss != null && b < this.ss.length) {
                    let k = new ScalerParams(0, e, e, j.cc, f);
                    let l = j.d8(this.ss[b], k);
                    let m = j.d8(this.st[b], k);
                    if (!isNaN_(l) && !isNaN_(m)) {
                        let n = Math.abs(m - l);
                        if (c.height < n) {
                            c.height = n;
                            c.y = Math.min(m, l);
                        }
                        else {
                            if (m < c.top + 0.1 * c.height) {
                                m = m + 0.4 * c.height;
                            }
                            if (m > c.bottom - 0.1 * c.height) {
                                m = m - 0.4 * c.height;
                            }
                            c.y = m - 0.5 * c.height;
                        }
                    }
                }
                this.b5.ap(this.ca, c, true);
            }
            return b >= 0;
        }
        ap(a) {
            if (this.st == null || this.st.length == 0 || this.ss == null || this.ss.length == 0) {
                return null;
            }
            if (a == this.fetchXAxis()) {
                let b = Math.min(this.st.length, this.ss.length);
                return new AxisRange(0, b - 1);
            }
            if (a == this.fetchYAxis()) {
                return new AxisRange(this.ta, this.s9);
            }
            return null;
        }
        pt() {
            return false;
        }
        kk(a, b, c, d) {
            this.tj();
            this.rx();
            this.l0(false);
        }
        sv() {
            return this.s1;
        }
        s7() {
            let a = 0;
            let b = this.bx.bv;
            let c = this.bx.bu;
            let d = this.getEffectiveViewport1(this.bx);
            let e = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (!b.isEmpty && !c.isEmpty && e != null) {
                let f = new ScalerParams(0, b, c, e.cc, d);
                a = e.d8(e.k5, f);
            }
            return a;
        }
        s8() {
            let a = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (a != null) {
                return a.k5;
            }
            return 0;
        }
        tc(a) {
            return this.g9 < 0 || this.sw == null || this.sw.count == 0 ? -1 : this.g9 + this.sw.indexOf(a);
        }
        tb(a) {
            let b = this.ca != null ? this.ca.pg : Rect.empty;
            let c = this.bx.bu;
            let d = this.getEffectiveViewport1(this.bx);
            let e = typeCast(CategoryAxisBase.$, this.fetchXAxis());
            let f = -1;
            if (e != null && !b.isEmpty && !c.isEmpty) {
                let g = new ScalerParams(0, b, c, e.cc, d);
                let h = this.o7(this.bx);
                let i = e.eb(h.left, g);
                let j = e.eb(h.right, g);
                let k = (a.x - b.left) / b.width;
                let l = i + (k * (j - i));
                if (e.categoryMode != 0) {
                    l -= 0.5;
                }
                let m = truncate(Math.round(l));
                f = m;
            }
            return f;
        }
        s5(a, b, c, d) {
            let e = true;
            let f = typeCast(CategoryAxisBase.$, this.fetchXAxis());
            let g = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (!d.o() || c.isEmpty || b.isEmpty || f == null || f.itemsSource == null || g == null || this.ch == null || f.bh == null || g.bh == null || g.kv == g.ku) {
                e = false;
            }
            let h = d;
            let i = h.cr.d;
            if (a.valueColumn == null || a.valueColumn.count == 0 || i < 1 || a._visibility != 0) {
                e = false;
            }
            return e;
        }
        ti() {
            if (this.ca == null || this.s0 == null) {
                return;
            }
            if (!this.s2) {
                this.sx.clear();
                for (let a of fromEnum(this.series)) {
                    if (!this.s0.c.contains(a)) {
                        this.s0.c.add(a);
                    }
                }
                this.tn();
                return;
            }
        }
        sl(a, b) {
            super.sl(a, b);
            this.s0.h();
        }
        tk(a, b, c) {
        }
        tj() {
            if (this.ch == null) {
                return;
            }
            let a = this.ch.count;
            this.ss = new Array(a);
            this.st = new Array(a);
            for (let b = 0; b < a; b++) {
                this.ss[b] = 0;
                this.st[b] = 0;
            }
            this.ta = Number.POSITIVE_INFINITY;
            this.s9 = Number.NEGATIVE_INFINITY;
            let c = 0;
            for (let d of fromEnum(this.sw)) {
                if (d.itemsSource != null && d.visualSeriesLink == null) {
                    continue;
                }
                if (d.itemsSource != null) {
                    d.x = d.visualSeriesLink.valueColumn;
                }
                if (d.itemsSource == null) {
                    this.ch.deregisterColumn(d.x);
                    d.x = this.ce(d.d4);
                }
                if (d.visualSeriesLink != null && d.itemsSource == null) {
                    d.visualSeriesLink.s3 = true;
                    d.visualSeriesLink.valueColumn = d.x;
                    d.visualSeriesLink.s3 = false;
                }
                d.aj = true;
                if (d.x != null) {
                    d.ap.clear();
                    d.aq.clear();
                    for (let e = 0; e < d.x.count; e++) {
                        let f = d.x.item(e);
                        if (f < c) {
                            d.ap.add(c);
                            d.aq.add(this.st[e]);
                            this.st[e] = this.st[e] + f;
                            if (d.aj) {
                                d.aj = false;
                            }
                        }
                        else if (f >= c) {
                            d.ap.add(this.ss[e]);
                            d.aq.add(c);
                            this.ss[e] = this.ss[e] + f;
                        }
                        else if (isNaN_(f) || isInfinity(f)) {
                            d.ap.add(this.ss[e]);
                            d.aq.add(this.st[e]);
                        }
                    }
                }
            }
            for (let g = 0; g < a; g++) {
                this.ta = Math.min(this.ta, this.st[g]);
                this.s9 = Math.max(this.s9, this.ss[g]);
            }
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    if (c != null && d == null) {
                        this.kl(this.fetchXAxis());
                        this.kl(this.fetchYAxis());
                    }
                    if (c == null && d != null) {
                        this.lr(this.fetchXAxis());
                        this.lr(this.fetchYAxis());
                    }
                    if (this.sw != null) {
                        for (let e of fromEnum(this.sw)) {
                            e.w = this.ca;
                        }
                        this.l0(false);
                    }
                    break;
                case "ItemsSource":
                    if (this.sw != null) {
                        for (let f of fromEnum(this.sw)) {
                            if (f.itemsSource == null) {
                                if (f.visualSeriesLink != null) {
                                    f.visualSeriesLink.itemsSource = d;
                                }
                            }
                        }
                    }
                    break;
                case "FastItemsSource":
                    if (this.s2) {
                        this.ti();
                    }
                    if (!this.rx()) {
                        this.s1.cr.g(this.gh);
                    }
                    this.l0(false);
                    break;
                case StackedSeriesBase.$$p[0]:
                    this.ti();
                    break;
                case StackedSeriesBase.$$p[1]:
                    if (this.ca != null) {
                        this.ca.km(this.s0.f);
                    }
                    break;
                case StackedSeriesBase.$$p[2]:
                    for (let g of fromEnum(this.sw)) {
                        g.fe();
                    }
                    break;
                case "Brush":
                    for (let h of fromEnum(this.sw)) {
                        h.ee();
                    }
                    break;
                case "DashArray":
                    for (let i of fromEnum(this.sw)) {
                        i.ef();
                    }
                    break;
                case "HighlightingFadeOpacity":
                    for (let j of fromEnum(this.sw)) {
                        j.ei();
                    }
                    break;
                case "DashCap":
                    for (let k of fromEnum(this.sw)) {
                        k.eg();
                    }
                    break;
                case "IsDropShadowEnabled":
                    for (let l of fromEnum(this.sw)) {
                        l.ej();
                    }
                    break;
                case "ShadowBlur":
                    for (let m of fromEnum(this.sw)) {
                        m.e5();
                    }
                    break;
                case "ShadowColor":
                    for (let n of fromEnum(this.sw)) {
                        n.e6();
                    }
                    break;
                case "UseSingleShadow":
                    for (let o of fromEnum(this.sw)) {
                        o.fd();
                    }
                    break;
                case "ShadowOffsetX":
                    for (let p of fromEnum(this.sw)) {
                        p.e7();
                    }
                    break;
                case "ShadowOffsetY":
                    for (let q of fromEnum(this.sw)) {
                        q.e8();
                    }
                    break;
                case "EndCap":
                    for (let r of fromEnum(this.sw)) {
                        r.eh();
                    }
                    break;
                case "IsHitTestVisible":
                    for (let s of fromEnum(this.sw)) {
                        s.ek();
                    }
                    break;
                case "LegendItemBadgeTemplate":
                    for (let t of fromEnum(this.sw)) {
                        t.ep();
                    }
                    break;
                case "LegendItemTemplate":
                    for (let u of fromEnum(this.sw)) {
                        u.eq();
                    }
                    break;
                case "LegendItemVisibility":
                    for (let v of fromEnum(this.sw)) {
                        v.er();
                    }
                    break;
                case "LegendItemBadgeShape":
                    for (let w of fromEnum(this.sw)) {
                        w.eo();
                    }
                    break;
                case "LegendItemBadgeMode":
                    for (let x of fromEnum(this.sw)) {
                        x.en();
                    }
                    break;
                case "MarkerTemplate":
                    for (let y of fromEnum(this.sw)) {
                        y.ew();
                    }
                    break;
                case "MarkerType":
                    for (let z of fromEnum(this.sw)) {
                        z.ey();
                    }
                    break;
                case "MarkerThickness":
                    for (let aa of fromEnum(this.sw)) {
                        aa.ex();
                    }
                    break;
                case "MarkerBrush":
                    for (let ab of fromEnum(this.sw)) {
                        ab.es();
                    }
                    break;
                case "MarkerOutline":
                    for (let ac of fromEnum(this.sw)) {
                        ac.eu();
                    }
                    break;
                case "MarkerStyle":
                    for (let ad of fromEnum(this.sw)) {
                        ad.ev();
                    }
                    break;
                case "Opacity":
                    for (let ae of fromEnum(this.sw)) {
                        ae.ez();
                    }
                    break;
                case "OpacityMask":
                    for (let af of fromEnum(this.sw)) {
                        af.e0();
                    }
                    break;
                case "AreaFillOpacity":
                    for (let ag of fromEnum(this.sw)) {
                        ag.ed();
                    }
                    break;
                case "Outline":
                    for (let ah of fromEnum(this.sw)) {
                        ah.e1();
                    }
                    break;
                case "StartCap":
                    for (let ai of fromEnum(this.sw)) {
                        ai.e9();
                    }
                    break;
                case "OutlineMode":
                    for (let aj of fromEnum(this.sw)) {
                        aj.e2();
                    }
                    break;
                case "MarkerFillOpacity":
                    for (let ak of fromEnum(this.sw)) {
                        ak.et();
                    }
                    break;
                case "Thickness":
                    for (let al of fromEnum(this.sw)) {
                        al.fa();
                    }
                    break;
                case "ToolTip":
                    for (let am of fromEnum(this.sw)) {
                        am.fb();
                    }
                    break;
                case "UseLightweightMarkers":
                    for (let an of fromEnum(this.sw)) {
                        an.fc();
                    }
                    break;
            }
        }
        get currentCategoryMode() {
            return this.preferredCategoryMode(typeCast(CategoryAxisBase.$, this.q2()));
        }
        get scaler() {
            return typeCast(ICategoryScaler_$type, this.q2());
        }
        get yScaler() {
            return typeCast(IScaler_$type, this.rn());
        }
        get bucketizer() {
            return this.rc.cr;
        }
        get currentMode2Index() {
            return this.r6();
        }
        provideCollisionDetector() {
            return new CollisionAvoider();
        }
        ek() {
            return false;
        }
        get_dh() {
            return false;
        }
        l2(a, b) {
            let c = this.et;
            super.l2(a, b);
            if (!c) {
                this.bx.a2(b);
                return;
            }
            this.bx.a2(b);
            if (this.ct(this.bw)) {
                return;
            }
            for (let d of fromEnum(this.series)) {
                d.visualSeriesLink.l2(a, b);
            }
            this.et = false;
        }
        lz(a, b, c, d, e) {
            super.lz(a, b, c, d, e);
            let f = this.a4.a$h.item(d);
            f.cr.g(this.gh);
            f.a1(c);
            if (this.ct(f)) {
                return;
            }
            if (this.su == null) {
                this.su = new CategoryFrame(3);
            }
            this.su.u();
            this.tj();
            this.q9(f).d(this.su, f);
            this.sl(this.su, f);
            for (let g of fromEnum(this.series)) {
                g.visualSeriesLink.lz(a, b, c, d, e);
            }
        }
        hg() {
            let a = this.a6.exportStackedVisualData(this, this.pf);
            for (let b of fromEnum(this.series)) {
                let c = this.a6.createFragmentVisualData(this, this.pf, getInstanceType(b).typeName, b.dk);
                b.visualSeriesLink.bx.al(c);
                this.a6.addSubSeriesVisualData(a, c);
            }
            this.kr(a);
            this.bx.al(a);
            return a;
        }
        get mayContainUnknowns() {
            return true;
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    StackedSeriesBase.$t = /*@__PURE__*/ markType(StackedSeriesBase, 'StackedSeriesBase', CategorySeries.$, [IIsCategoryBased_$type]);
    StackedSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedSeriesBase, 'raisePropertyChanged', ['AutoGenerateSeries:s2:to', [0, false], 'ReverseLegendOrder:s4:tp', [0, false], 'SeriesVisibility:tr:tq', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)]]);
    return StackedSeriesBase;
})();
/**
 * @hidden
 */
export let HorizontalStackedSeriesBase = /*@__PURE__*/ (() => {
    class HorizontalStackedSeriesBase extends StackedSeriesBase {
        getOffsetValue() {
            return this.q8.r(this.xAxis, this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        getCategoryWidth() {
            return this.xAxis.getCategorySize(this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        fetchXAxis() {
            return this.xAxis;
        }
        fetchYAxis() {
            return this.yAxis;
        }
        ag() {
            return [this.fetchXAxis(), this.fetchYAxis()];
        }
        rx() {
            return this.yAxis != null && this.yAxis.cv();
        }
        ma() {
            let a = (typeCast(XamDataChart.$, this.ca));
            if (a != null) {
                this.fi = isNaN_(this.fq) ? a.p9.fk : this.fq;
                for (let b of fromEnum(this.sw)) {
                    b.ed();
                }
            }
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case HorizontalStackedSeriesBase.$$p[0]:
                    if (c != d) {
                        this.kl(typeCast(Axis.$, c));
                        this.lr(typeCast(Axis.$, d));
                        this.rc.cr.g(this.gh);
                        this.l0(false);
                        this.k7();
                    }
                    break;
                case HorizontalStackedSeriesBase.$$p[1]:
                    if (c != d) {
                        this.kl(typeCast(Axis.$, c));
                        this.lr(typeCast(Axis.$, d));
                        this.rc.cr.g(this.gh);
                        this.rx();
                        this.l0(false);
                        this.k7();
                    }
                    break;
            }
        }
        tv(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        tu(a) {
            if (typeCast(CategoryXAxis.$, a) !== null || a.b9) {
                return true;
            }
            return false;
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    HorizontalStackedSeriesBase.$t = /*@__PURE__*/ markType(HorizontalStackedSeriesBase, 'HorizontalStackedSeriesBase', StackedSeriesBase.$);
    HorizontalStackedSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, HorizontalStackedSeriesBase, 'raisePropertyChanged', ['XAxis::ty', [CategoryAxisBase.$, null], 'YAxis::tz', [NumericYAxis.$, null]]);
    return HorizontalStackedSeriesBase;
})();
/**
 * @hidden
 */
export let StackedAreaSeries = /*@__PURE__*/ (() => {
    class StackedAreaSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedAreaSeries.$;
        }
        get_c7() {
            return true;
        }
        ac() {
            super.ac();
            this.l0(false);
        }
        bu() {
            return new StackedAreaSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.t0 = a;
        }
        ap(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.ch.count - 1);
            }
            if (a == this.yAxis) {
                this.tj();
                return new AxisRange(this.ta, this.s9);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    StackedAreaSeries.$t = /*@__PURE__*/ markType(StackedAreaSeries, 'StackedAreaSeries', HorizontalStackedSeriesBase.$);
    return StackedAreaSeries;
})();
/**
 * @hidden
 */
export let VerticalStackedSeriesBase = /*@__PURE__*/ (() => {
    class VerticalStackedSeriesBase extends StackedSeriesBase {
        q2() {
            return this.yAxis;
        }
        rn() {
            return this.xAxis;
        }
        getOffsetValue() {
            return this.q8.r(this.yAxis, this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        getCategoryWidth() {
            return this.yAxis.getCategorySize(this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        get_isVertical() {
            return true;
        }
        fetchXAxis() {
            return this.xAxis;
        }
        fetchYAxis() {
            return this.yAxis;
        }
        rx() {
            return this.xAxis != null && this.xAxis.cv();
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case VerticalStackedSeriesBase.$$p[0]:
                    if (c != d) {
                        this.kl(typeCast(Axis.$, c));
                        this.lr(typeCast(Axis.$, d));
                        this.rc.cr.g(this.gh);
                        this.l0(false);
                        this.k7();
                    }
                    break;
                case VerticalStackedSeriesBase.$$p[1]:
                    if (c != d) {
                        this.kl(typeCast(Axis.$, c));
                        this.lr(typeCast(Axis.$, d));
                        this.rc.cr.g(this.gh);
                        this.rx();
                        this.l0(false);
                        this.k7();
                    }
                    break;
            }
        }
        tv(a) {
            if (typeCast(CategoryYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        tu(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    VerticalStackedSeriesBase.$t = /*@__PURE__*/ markType(VerticalStackedSeriesBase, 'VerticalStackedSeriesBase', StackedSeriesBase.$);
    VerticalStackedSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, VerticalStackedSeriesBase, 'raisePropertyChanged', ['XAxis::ty', [NumericXAxis.$, null], 'YAxis::tz', [CategoryYAxis.$, null]]);
    return VerticalStackedSeriesBase;
})();
/**
 * @hidden
 */
export let StackedBarSeries = /*@__PURE__*/ (() => {
    class StackedBarSeries extends VerticalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedBarSeries.$;
        }
        get_c9() {
            return true;
        }
        get_dw() {
            return true;
        }
        ac() {
            super.ac();
            this.l0(false);
        }
        bu() {
            return new StackedBarSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.t0 = a;
        }
        sv() {
            return this.t0;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        r6() {
            let a = 0;
            for (let b of fromEnum(this.ca.series)) {
                if (b == this) {
                    return a;
                }
                let c = typeCast(IBarSeries_$type, b);
                if (c != null && c.yAxis == this.yAxis && c.getPreferredCategoryMode() == 2) {
                    a++;
                }
            }
            return -1;
        }
        s7() {
            let a = 0;
            let b = this.ca != null ? this.ca.pg : Rect.empty;
            let c = this.bx.bu;
            if (!b.isEmpty && !c.isEmpty && this.xAxis != null) {
                let d = this.getEffectiveViewport1(this.bx);
                let e = new ScalerParams(0, b, c, this.xAxis.cc, d);
                a = this.xAxis.d8(this.xAxis.k5, e);
            }
            return a;
        }
        s8() {
            if (this.xAxis != null) {
                return this.xAxis.k5;
            }
            return 0;
        }
        ap(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.yAxis) {
                return new AxisRange(0, this.ch.count - 1);
            }
            if (a == this.xAxis) {
                this.tj();
                return new AxisRange(this.ta, this.s9);
            }
            return null;
        }
        eh(a) {
            let b = this.ch != null ? this.ch.indexOf(a) : -1;
            let c = this.ca != null ? this.ca.pg : Rect.empty;
            c = c.copy();
            let d = this.bx.bu;
            let e = new Rect(0, 0, 0, 1, 1);
            let f = this.o9(this.bx);
            let g = new ScalerParams(0, e, e, this.xAxis.cc, f);
            let h = new ScalerParams(0, e, e, this.yAxis.cc, f);
            if (b >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                if (this.yAxis != null) {
                    let i = this.yAxis.d8(b, h);
                    if (i < c.top + 0.1 * c.height) {
                        i = i + 0.4 * c.height;
                    }
                    if (i > c.bottom - 0.1 * c.height) {
                        i = i - 0.4 * c.height;
                    }
                    c.y = i - 0.5 * c.height;
                }
                if (this.xAxis != null && this.ss != null && b < this.ss.length) {
                    let j = this.xAxis.d8(this.ss[b], g);
                    let k = this.xAxis.d8(this.st[b], g);
                    if (!isNaN_(j) && !isNaN_(k)) {
                        let l = Math.abs(k - j);
                        if (c.width < l) {
                            c.width = l;
                            c.x = Math.min(k, j);
                        }
                        else {
                            if (k < c.left + 0.1 * c.width) {
                                k = k + 0.4 * c.width;
                            }
                            if (k > c.right - 0.1 * c.width) {
                                k = k - 0.4 * c.width;
                            }
                            c.x = k - 0.5 * c.width;
                        }
                    }
                }
                this.b5.ap(this.ca, c, true);
            }
            return b >= 0;
        }
        e3(a, b, c) {
            let d = true;
            let e = c;
            if (!c.o() || b.isEmpty || a.isEmpty || this.yAxis == null || this.yAxis.itemsSource == null || this.xAxis == null || this.ch == null || this.xAxis.bh == null || this.yAxis.bh == null || this.xAxis.kv == this.xAxis.ku) {
                e.cr.d = 0;
                d = false;
            }
            return d;
        }
        kk(a, b, c, d) {
            switch (a) {
                case 4:
                case 1:
                case 0:
                    this.rc.cr.g(this.gh);
                    break;
            }
            switch (a) {
                case 4:
                    if (this.xAxis != null && !this.xAxis.cv()) {
                        this.l0(true);
                    }
                    break;
                case 1:
                    if (this.xAxis != null && !this.xAxis.cv()) {
                        this.l0(true);
                    }
                    break;
                case 0:
                    if (this.xAxis != null && !this.xAxis.cv()) {
                        this.l0(true);
                    }
                    break;
                case 2:
                    if (this.rc.cr.d > 0) {
                        this.l0(true);
                    }
                    break;
                case 3:
                    if (this.xAxis != null && !this.xAxis.cv()) {
                        this.l0(true);
                    }
                    break;
            }
        }
        g0(a) {
            let b = this.ca != null ? this.ca.pg : Rect.empty;
            let c = this.bx.bu;
            let d = this.getEffectiveViewport1(this.bx);
            let e = -1;
            if (this.yAxis != null && !b.isEmpty && !c.isEmpty) {
                let f = new ScalerParams(0, b, c, this.yAxis.cc, d);
                let g = this.o7(this.bx);
                let h = this.yAxis.eb(g.top, f);
                let i = this.yAxis.eb(g.bottom, f);
                let j = (a.y - b.top) / b.height;
                let k = h + (j * (i - h));
                if (this.yAxis.categoryMode != 0) {
                    k -= 0.5;
                }
                let l = truncate(Math.round(k));
                e = l;
            }
            return e;
        }
        hh(a) {
            let b = this.g0(a);
            return b >= 0 && this.ch != null && b < this.ch.count ? this.ch.item(b) : null;
        }
        tn() {
            if (this.xAxis != null) {
                this.xAxis.cw(true);
            }
            if (this.yAxis != null) {
                this.yAxis.cw(true);
            }
        }
        tb(a) {
            return this.g0(a);
        }
        s5(a, b, c, d) {
            let e = true;
            if (!d.o() || c.isEmpty || b.isEmpty || this.yAxis == null || this.yAxis.itemsSource == null || this.xAxis == null || this.ch == null || this.xAxis.bh == null || this.yAxis.bh == null) {
                e = false;
            }
            let f = d;
            if (a.valueColumn == null || a.valueColumn.count == 0 || f.cr.d < 1) {
                e = false;
            }
            return e;
        }
        f1() {
            return this.yAxis.ki(this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        tk(a, b, c) {
            let d = typeCast(BarFragment.$, a);
            let e = typeCast(ColumnFragmentView.$, c);
            if (!this.e3(c.bu, c.bv, c) || d == null || e == null) {
                return;
            }
            let f = this.yAxis.ki(c.bv, c.bu, this.getEffectiveViewport1(c));
            if (isNaN_(f) || isInfinity(f)) {
                d.uq.db.count = 0;
                return;
            }
            let g = 0;
            d.rb.a0(d, d.rv(), (h, i) => d.qw(h, i), d.r3(c), d.r4(c));
            d.rb.r = d.ut;
            d.rb.s = d.uu;
            d.rb.k = d.ut;
            d.rb.l = d.uu;
            let h = d.valueColumn.count;
            let i = c.bv;
            let j = c.bu;
            let k = this.getEffectiveViewport1(c);
            let l = false;
            let m = d.rb.b;
            if (m != null) {
                l = true;
            }
            let n = b.f;
            let o = d.q2();
            let p = new ScalerParams(0, i, j, o.cc, k);
            let q = 0;
            for (let r of fromEnum(b.f)) {
                if (isInfinity(r[0]) || isNaN_(r[0]) || isInfinity(r[1]) || isInfinity(r[2]) || isNaN_(r[1]) || isNaN_(r[2])) {
                    q++;
                    continue;
                }
                let s = r[0] - 0.5 * f;
                let t = r[1];
                let u = r[2];
                u = Math.max(u, -100);
                t = Math.min(t, c.bu.right + 100);
                let v = e.db.item(g);
                v.height = f;
                v.width = Math.abs(t - u);
                if (l) {
                    d.sh(n, q, h, o, p, c.q);
                }
                d.rb.ad(v, false, false, false, false);
                v.am = d.rb.k;
                v.an = d.rb.l;
                e.di(v, Math.min(t, u), s);
                g++;
                q++;
            }
            e.db.count = g;
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case StackedBarSeries.$$p[0]:
                case StackedBarSeries.$$p[1]:
                    for (let e of fromEnum(this.sw)) {
                        e.e3();
                        e.e4();
                    }
                    this.l0(false);
                    break;
                case "SyncLink":
                    if (this.xAxis != null) {
                        this.xAxis.cv();
                    }
                    break;
                case "FastItemsSource":
                    if (this.xAxis != null && !this.xAxis.cv()) {
                        this.t0.cr.g(this.gh);
                    }
                    this.l0(false);
                    break;
                case "SeriesViewer":
                    if (c != null && d == null) {
                        this.kl(this.xAxis);
                        this.kl(this.yAxis);
                    }
                    if (c == null && d != null) {
                        this.lr(this.xAxis);
                        this.lr(this.yAxis);
                    }
                    this.t0.cr.g(this.gh);
                    this.l0(false);
                    if (this.xAxis != null) {
                        this.xAxis.cv();
                    }
                    break;
            }
        }
        getPreferredCategoryMode() {
            return this.preferredCategoryMode(this.yAxis);
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    StackedBarSeries.$t = /*@__PURE__*/ markType(StackedBarSeries, 'StackedBarSeries', VerticalStackedSeriesBase.$, [IBarSeries_$type]);
    StackedBarSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedBarSeries, 'raisePropertyChanged', ['RadiusX:t1:t5', [1, 0], 'RadiusY:t2:t6', [1, 0]]);
    return StackedBarSeries;
})();
/**
 * @hidden
 */
export let StackedColumnSeries = /*@__PURE__*/ (() => {
    class StackedColumnSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedColumnSeries.$;
        }
        get_db() {
            return true;
        }
        get_dw() {
            return true;
        }
        bu() {
            return new StackedColumnSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.t0 = a;
        }
        sv() {
            return this.t0;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        ap(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.ch.count - 1);
            }
            if (a == this.yAxis) {
                this.tj();
                return new AxisRange(this.ta, this.s9);
            }
            return null;
        }
        f1() {
            let a = this.getEffectiveViewport1(this.bx);
            return this.xAxis.ki(this.bx.bv, this.bx.bu, a);
        }
        tk(a, b, c) {
            let d = typeCast(ColumnFragment.$, a);
            let e = typeCast(ColumnFragmentView.$, c);
            if (!this.e3(c.bu, c.bv, c) || d == null || e == null) {
                return;
            }
            if (d == null) {
                return;
            }
            let f = this.getEffectiveViewport1(c);
            let g = this.xAxis.ki(c.bv, c.bu, f);
            if (isNaN_(g) || isInfinity(g)) {
                d.uq.db.count = 0;
                return;
            }
            let h = 0;
            d.rb.a0(d, d.rv(), (i, j) => d.qw(i, j), d.r3(c), d.r4(c));
            d.rb.r = d.ut;
            d.rb.s = d.uu;
            d.rb.k = d.ut;
            d.rb.l = d.uu;
            let i = c.bv;
            let j = c.bu;
            let k = this.getEffectiveViewport1(c);
            let l = false;
            let m = d.rb.b;
            if (m != null) {
                l = true;
            }
            let n = b.f;
            let o = d.q2();
            let p = new ScalerParams(0, i, j, o.cc, k);
            let q = d.valueColumn.count;
            let r = 0;
            for (let s of fromEnum(b.f)) {
                if (isInfinity(s[0]) || isNaN_(s[0]) || isInfinity(s[1]) || isInfinity(s[2]) || isNaN_(s[1]) || isNaN_(s[2])) {
                    r++;
                    continue;
                }
                let t = s[0] - 0.5 * g;
                let u = s[1];
                let v = s[2];
                u = Math.max(u, -100);
                v = Math.min(v, c.bu.bottom + 100);
                let w = e.db.item(h);
                w.width = g;
                w.height = Math.abs(v - u);
                if (l) {
                    d.sh(n, r, q, o, p, c.q);
                }
                d.rb.ad(w, false, false, false, false);
                w.am = d.rb.k;
                w.an = d.rb.l;
                e.di(w, t, Math.min(v, u));
                h++;
                r++;
            }
            e.db.count = h;
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case StackedColumnSeries.$$p[0]:
                case StackedColumnSeries.$$p[1]:
                    for (let e of fromEnum(this.sw)) {
                        e.e3();
                        e.e4();
                    }
                    this.l0(false);
                    break;
                case "SyncLink":
                    if (this.yAxis != null) {
                        this.yAxis.cv();
                    }
                    break;
                case "SeriesViewer":
                    if (this.yAxis != null) {
                        this.yAxis.cv();
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    StackedColumnSeries.$t = /*@__PURE__*/ markType(StackedColumnSeries, 'StackedColumnSeries', HorizontalStackedSeriesBase.$);
    StackedColumnSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedColumnSeries, 'raisePropertyChanged', ['RadiusX:t1:t5', [1, 0], 'RadiusY:t2:t6', [1, 0]]);
    return StackedColumnSeries;
})();
/**
 * @hidden
 */
export let StackedSplineAreaSeries = /*@__PURE__*/ (() => {
    class StackedSplineAreaSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedSplineAreaSeries.$;
        }
        get_c7() {
            return true;
        }
        get_ea() {
            return true;
        }
        ac() {
            super.ac();
            this.l0(false);
        }
        bu() {
            return new StackedSplineAreaSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.t0 = a;
        }
        ap(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.ch.count - 1);
            }
            if (a == this.yAxis) {
                this.tj();
                return new AxisRange(this.ta, this.s9);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case StackedSplineAreaSeries.$$p[0]:
                    for (let e of fromEnum(this.sw)) {
                        e.el();
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    StackedSplineAreaSeries.$t = /*@__PURE__*/ markType(StackedSplineAreaSeries, 'StackedSplineAreaSeries', HorizontalStackedSeriesBase.$);
    StackedSplineAreaSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedSplineAreaSeries, 'raisePropertyChanged', ['IsSplineShapePartOfRange:t1:t3', [0, false]]);
    return StackedSplineAreaSeries;
})();
/**
 * @hidden
 */
export let StackedSplineSeries = /*@__PURE__*/ (() => {
    class StackedSplineSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedSplineSeries.$;
        }
        get_ea() {
            return true;
        }
        ac() {
            super.ac();
            this.l0(false);
        }
        bu() {
            return new StackedSplineSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.t0 = a;
        }
        ap(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.ch.count - 1);
            }
            if (a == this.yAxis) {
                this.tj();
                return new AxisRange(this.ta, this.s9);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    StackedSplineSeries.$t = /*@__PURE__*/ markType(StackedSplineSeries, 'StackedSplineSeries', HorizontalStackedSeriesBase.$);
    StackedSplineSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedSplineSeries, 'raisePropertyChanged', ['IsSplineShapePartOfRange:t1:t3', [0, false]]);
    return StackedSplineSeries;
})();
/**
 * @hidden
 */
export let StackedFragmentSeries = /*@__PURE__*/ (() => {
    class StackedFragmentSeries extends DependencyObject {
        constructor() {
            super();
            this.y = false;
            this.z = false;
            this._parentSeries = null;
            this.br = 0;
            this.w = null;
            this.x = null;
            this._visualSeriesLink = null;
            this.ap = null;
            this.aq = null;
            this.ao = null;
            this.aj = false;
            this.bm = null;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.ap = new List$1(Number_$type, 0);
            this.aq = new List$1(Number_$type, 0);
            this.ao = new List$1(Array_$type, 0);
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.d9(a, b.propertyName, b.oldValue, b.newValue));
        }
        get parentSeries() {
            return this._parentSeries;
        }
        set parentSeries(a) {
            this._parentSeries = a;
        }
        get visualSeriesLink() {
            return this._visualSeriesLink;
        }
        set visualSeriesLink(a) {
            this._visualSeriesLink = a;
        }
        bn(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.g0(a);
            }
            return -1;
        }
        bt(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.hh(a);
            }
            return null;
        }
        bq(a, b) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.g6(a, b);
            }
            return -1;
        }
        bp(a, b) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.g4(a, b);
            }
            return -1;
        }
        ba(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.f8(a, b, c);
            }
            return NaN;
        }
        ij(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.o2(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        io(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pb(a);
            }
            return Rect.empty;
        }
        j(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.ak(a);
            }
            return null;
        }
        ip(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pc(a);
            }
            return Rect.empty;
        }
        k(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.al(a);
            }
            return null;
        }
        iq(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pd(a);
            }
            return Rect.empty;
        }
        ir(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pe(a);
            }
            return Rect.empty;
        }
        a6(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.f4(a, b, c);
            }
            return NaN;
        }
        ie(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.oy(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        a8(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.f6(a, b, c);
            }
            return NaN;
        }
        ih(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.o0(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        ik(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.o3(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        bb(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.f9(a, b, c);
            }
            return NaN;
        }
        ig(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.oz(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        a7(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.f5(a, b, c);
            }
            return NaN;
        }
        ii(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.o1(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        a9(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.f7(a, b, c);
            }
            return NaN;
        }
        bo(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.g1(a);
            }
            return -1;
        }
        a5() {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.f1();
            }
            return 0;
        }
        a4(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.fx(a);
            }
            return NaN;
        }
        bu(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.hi(a);
            }
            return null;
        }
        af(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.cx(a, b, c);
            }
            return false;
        }
        il(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.o5(a);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        id(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.ox(a);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        ak(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.eh(a);
            }
            return false;
        }
        im() {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.getEffectiveViewport();
            }
            return Rect.empty;
        }
        d8() {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.k9();
            }
        }
        ec(a) {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.l7(a);
            }
        }
        al(a, b) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.ep(a, b);
            }
            return false;
        }
        d7(a) {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.kz(a);
            }
        }
        provideRenderer(a) {
            this.bm = a;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.provideRenderer(a);
            }
        }
        fe() {
            if (this.parentSeries == null) {
                return;
            }
            this.iv = this.parentSeries._visibility != 0 ? 1 : this.ix;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink._visibility = this.iv;
            }
        }
        ew() {
            if (this.parentSeries == null) {
                return;
            }
            this.fh = this.fk != null ? this.fk : this.parentSeries.qd;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.qd = this.fh;
            }
        }
        ey() {
            if (this.parentSeries == null) {
                return;
            }
            let a = this.r == 0 || this.r == 2;
            this.q = 0;
            this.q = a ? this.parentSeries.pr : this.r;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.pr = this.q;
            }
        }
        ee() {
            if (this.parentSeries == null) {
                return;
            }
            this.h2 = this.hx != null ? this.hx : this.parentSeries.oj;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.oj = this.h2;
            }
        }
        ef() {
            if (this.parentSeries == null) {
                return;
            }
            this.h5 = this.h6 != null ? this.h6 : this.parentSeries.os;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.os = this.h5;
            }
        }
        ei() {
            if (this.parentSeries == null) {
                return;
            }
            this.at = !isNaN_(this.bc) ? this.bc : this.parentSeries.gd;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.gd = this.at;
            }
        }
        e2() {
            if (this.parentSeries == null) {
                return;
            }
            this.t = this.u != 0 ? this.u : this.parentSeries.bs;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.bs = this.t;
            }
        }
        et() {
            if (this.parentSeries == null) {
                return;
            }
            this.au = !isNaN_(this.bd) ? this.bd : this.parentSeries.ge;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ge = this.au;
            }
        }
        eg() {
            if (this.parentSeries == null) {
                return;
            }
            this.h7 = this.ia;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ot = this.h7;
            }
        }
        ej() {
            if (this.parentSeries == null) {
                return;
            }
            if (!this.y) {
                this.aa = this.parentSeries.dg;
            }
            else {
                this.aa = this.ag;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.dg = this.aa;
            }
        }
        e5() {
            if (this.parentSeries == null) {
                return;
            }
            this.az = !isNaN_(this.bi) ? this.bi : this.parentSeries.gj;
            if (this.visualSeriesLink != null && !isNaN_(this.az)) {
                this.visualSeriesLink.gj = this.az;
            }
        }
        e6() {
            if (this.parentSeries == null) {
                return;
            }
            this.h3 = Color.e(toNullable(Color.$, this.h4), toNullable(Color.$, null)) ? this.h4 : this.parentSeries.or;
            if (this.visualSeriesLink != null && Color.e(toNullable(Color.$, this.h3), toNullable(Color.$, null))) {
                this.visualSeriesLink.or = this.h3;
            }
        }
        fd() {
            if (this.parentSeries == null) {
                return;
            }
            if (!this.z) {
                this.ae = this.parentSeries.e1;
            }
            else {
                this.ae = this.an;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.e1 = this.ae;
            }
        }
        e7() {
            if (this.parentSeries == null) {
                return;
            }
            this.a0 = !isNaN_(this.bj) ? this.bj : this.parentSeries.gk;
            if (this.visualSeriesLink != null && !isNaN_(this.a0)) {
                this.visualSeriesLink.gk = this.a0;
            }
        }
        e8() {
            if (this.parentSeries == null) {
                return;
            }
            this.a1 = !isNaN_(this.bk) ? this.bk : this.parentSeries.gl;
            if (this.visualSeriesLink != null && !isNaN_(this.a1)) {
                this.visualSeriesLink.gl = this.a1;
            }
        }
        eh() {
            if (this.parentSeries == null) {
                return;
            }
            this.h8 = this.ib;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ou = this.h8;
            }
        }
        ek() {
            if (this.parentSeries == null) {
                return;
            }
            this.ab = this.ah;
        }
        ep() {
            if (this.parentSeries == null) {
                return;
            }
            this.ff = this.fi != null ? this.fi : this.parentSeries.legendItemBadgeTemplate;
            if (this.visualSeriesLink != null) {
                if (this.ff != null) {
                    this.visualSeriesLink.legendItemBadgeTemplate = this.ff;
                }
                else {
                    this.visualSeriesLink.legendItemBadgeTemplate = null;
                }
            }
        }
        eq() {
            if (this.parentSeries == null) {
                return;
            }
            this.fg = this.fj != null ? this.fj : this.parentSeries.legendItemTemplate;
            if (this.visualSeriesLink != null) {
                if (this.fg != null) {
                    this.visualSeriesLink.legendItemTemplate = this.fg;
                }
                else {
                    this.visualSeriesLink.legendItemTemplate = null;
                }
            }
        }
        er() {
            if (this.parentSeries == null) {
                return;
            }
            this.iu = this.parentSeries.ph != 0 ? 1 : this.iw;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ph = this.iu;
            }
        }
        eo() {
            if (this.parentSeries == null) {
                return;
            }
            this.o = this.p != 0 ? this.p : this.parentSeries.a9;
            if (this.visualSeriesLink != null) {
                if (this.o != 0) {
                    this.visualSeriesLink.a9 = this.o;
                }
                else {
                    this.visualSeriesLink.a9 = 0;
                }
            }
        }
        en() {
            if (this.parentSeries == null) {
                return;
            }
            this.m = this.n != 0 ? this.n : this.parentSeries.a7;
            if (this.visualSeriesLink != null) {
                if (this.m != 0) {
                    this.visualSeriesLink.a7 = this.m;
                }
                else {
                    this.visualSeriesLink.a7 = 0;
                }
            }
        }
        es() {
            if (this.parentSeries == null) {
                return;
            }
            this.ht = this.hy != null ? this.hy : this.parentSeries.qt;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.qt = this.ht;
            }
        }
        eu() {
            if (this.parentSeries == null) {
                return;
            }
            this.hu = this.hz != null ? this.hz : this.parentSeries.qu;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.qu = this.hu;
            }
        }
        ev() {
            if (this.parentSeries == null) {
                return;
            }
            this.is = this.it != null ? this.it : this.parentSeries.qv;
            if (this.visualSeriesLink != null) {
                if (this.is != null) {
                    this.visualSeriesLink.qv = this.is;
                }
                else {
                    this.visualSeriesLink.qv = null;
                }
            }
        }
        ez() {
            if (this.parentSeries == null) {
                return;
            }
            this.aw = !isNaN_(this.bf) ? this.bf : this.parentSeries._opacity;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink._opacity = this.aw;
            }
        }
        e0() {
        }
        e1() {
            if (this.parentSeries == null) {
                return;
            }
            this.hw = this.h1 != null ? this.h1 : this.parentSeries.oo;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.oo = this.hw;
            }
        }
        em() {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.itemsSource = this.itemsSource;
            }
        }
        ed() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (this.parentSeries.isStacked && this.parentSeries.c7 && !this.parentSeries.ea) {
                a = this.parentSeries.fi;
            }
            if (this.parentSeries.isStacked && this.parentSeries.c7 && this.parentSeries.ea) {
                a = this.parentSeries.fi;
            }
            this.as = !isNaN_(this.a3) ? this.a3 : a;
            if (this.visualSeriesLink != null) {
                if (typeCast(AreaFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.fq = this.as;
                }
                if (typeCast(SplineAreaFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.fq = this.as;
                }
            }
        }
        el() {
            if (this.parentSeries == null) {
                return;
            }
            let a = false;
            if (this.parentSeries.isStacked && this.parentSeries.ea && this.parentSeries.c7) {
                a = this.parentSeries.t1;
            }
            if (this.parentSeries.isStacked && this.parentSeries.c9) {
                a = this.parentSeries.t1;
            }
            this.ac = a;
            if (this.visualSeriesLink != null) {
                if (typeCast(SplineFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.uk = this.ac;
                }
                if (typeCast(SplineAreaFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.uk = this.ac;
                }
            }
        }
        e3() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (this.parentSeries.isStacked && this.parentSeries.db) {
                a = this.parentSeries.t1;
            }
            if (this.parentSeries.isStacked && this.parentSeries.c9) {
                a = this.parentSeries.t1;
            }
            this.ax = !isNaN_(a) ? a : this.bg;
            if (this.visualSeriesLink != null) {
                if (typeCast(ColumnFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.ut = this.ax;
                }
                if (typeCast(BarFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.ut = this.ax;
                }
            }
        }
        e4() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (this.parentSeries.isStacked && this.parentSeries.db) {
                a = this.parentSeries.t2;
            }
            if (this.parentSeries.isStacked && this.parentSeries.c9) {
                a = this.parentSeries.t2;
            }
            this.ay = !isNaN_(a) ? a : this.bh;
            if (this.visualSeriesLink != null) {
                if (typeCast(ColumnFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.uu = this.ay;
                }
                if (typeCast(BarFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.uu = this.ay;
                }
            }
        }
        e9() {
            if (this.parentSeries == null) {
                return;
            }
            this.h9 = this.ic;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ov = this.h9;
            }
        }
        fa() {
            if (this.parentSeries == null) {
                return;
            }
            this.a2 = !isNaN_(this.bl) ? this.bl : this.parentSeries.gm;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.gm = this.a2;
            }
        }
        ex() {
            if (this.parentSeries == null) {
                return;
            }
            this.av = !isNaN_(this.be) ? this.be : this.parentSeries.pw;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.pw = this.av;
            }
        }
        fb() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.toolTip = this.bw;
            }
        }
        fc() {
            if (this.parentSeries == null) {
                return;
            }
            this.ad = this.am;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.pv = this.ad;
            }
        }
        eb(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        d9(a, b, c, d) {
            if (this.parentSeries == null) {
                return;
            }
            switch (b) {
                case StackedFragmentSeries.$$p[73]:
                    if (this.parentSeries == null || this.visualSeriesLink == null) {
                        return;
                    }
                    this.visualSeriesLink.hp = d;
                    break;
                case StackedFragmentSeries.$$p[78]:
                    this.fe();
                    break;
                case StackedFragmentSeries.$$p[38]:
                    this.ee();
                    break;
                case StackedFragmentSeries.$$p[39]:
                    this.ef();
                    break;
                case StackedFragmentSeries.$$p[40]:
                    this.eg();
                    break;
                case StackedFragmentSeries.$$p[43]:
                    this.y = true;
                    this.ej();
                    break;
                case StackedFragmentSeries.$$p[67]:
                    this.e5();
                    break;
                case StackedFragmentSeries.$$p[68]:
                    this.e6();
                    break;
                case StackedFragmentSeries.$$p[76]:
                    this.y = true;
                    this.fd();
                    break;
                case StackedFragmentSeries.$$p[69]:
                    this.e7();
                    break;
                case StackedFragmentSeries.$$p[70]:
                    this.e8();
                    break;
                case StackedFragmentSeries.$$p[41]:
                    this.eh();
                    break;
                case StackedFragmentSeries.$$p[44]:
                    this.ek();
                    break;
                case StackedFragmentSeries.$$p[56]:
                    this.ew();
                    break;
                case StackedFragmentSeries.$$p[58]:
                    this.ey();
                    break;
                case StackedFragmentSeries.$$p[49]:
                    this.ep();
                    break;
                case StackedFragmentSeries.$$p[50]:
                    this.eq();
                    break;
                case StackedFragmentSeries.$$p[51]:
                    this.er();
                    break;
                case StackedFragmentSeries.$$p[48]:
                    this.eo();
                    break;
                case StackedFragmentSeries.$$p[47]:
                    this.en();
                    break;
                case StackedFragmentSeries.$$p[52]:
                    this.es();
                    break;
                case StackedFragmentSeries.$$p[54]:
                    this.eu();
                    break;
                case StackedFragmentSeries.$$p[55]:
                    this.ev();
                    break;
                case StackedFragmentSeries.$$p[57]:
                    this.ex();
                    break;
                case StackedFragmentSeries.$$p[61]:
                    this.ez();
                    break;
                case StackedFragmentSeries.$$p[60]:
                    this.e0();
                    break;
                case StackedFragmentSeries.$$p[46]:
                    this.em();
                    break;
                case StackedFragmentSeries.$$p[63]:
                    this.e1();
                    break;
                case StackedFragmentSeries.$$p[62]:
                    this.e2();
                    break;
                case StackedFragmentSeries.$$p[53]:
                    this.et();
                    break;
                case StackedFragmentSeries.$$p[37]:
                    this.ed();
                    break;
                case StackedFragmentSeries.$$p[65]:
                    this.e3();
                    break;
                case StackedFragmentSeries.$$p[66]:
                    this.e4();
                    break;
                case StackedFragmentSeries.$$p[45]:
                    this.el();
                    break;
                case StackedFragmentSeries.$$p[71]:
                    this.e9();
                    break;
                case StackedFragmentSeries.$$p[72]:
                    this.fa();
                    break;
                case StackedFragmentSeries.$$p[74]:
                    this.fb();
                    break;
                case StackedFragmentSeries.$$p[75]:
                    this.fc();
                    break;
            }
            this.parentSeries.l0(false);
        }
    }
    StackedFragmentSeries.$t = /*@__PURE__*/ markType(StackedFragmentSeries, 'StackedFragmentSeries', DependencyObject.$, [INotifyPropertyChanged_$type]);
    StackedFragmentSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedFragmentSeries, 'eb', ['ActualAreaFillOpacity:as:fl', [1, 1], 'ActualBrush:hs:fm', [Brush.$], 'ActualDashArray:h5:fn', [DoubleCollection.$], 'ActualDashCap:h7:fo', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)], 'ActualEndCap:h8:fp', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'ActualHighlightingFadeOpacity:at:fq', [1, NaN], 'ActualIsDropShadowEnabled:aa:fr', [0, false], 'ActualIsHitTestVisible:ab:fs', [0, true], 'ActualIsSplineShapePartOfRange:ac:ft', [0, false], 'ActualLegendItemBadgeMode:m:fu', [LegendItemBadgeMode_$type], 'ActualLegendItemBadgeShape:o:fv', [LegendItemBadgeShape_$type], 'ActualLegendItemBadgeTemplate:ff:fw', [DataTemplate.$], 'ActualLegendItemTemplate:fg:fx', [DataTemplate.$], 'ActualLegendItemVisibility:iu:fy', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'ActualMarkerBrush:ht:fz', [Brush.$], 'ActualMarkerFillOpacity:au:f0', [1, NaN], 'ActualMarkerOutline:hu:f1', [Brush.$], 'ActualMarkerStyle:is:f2', [Style.$], 'ActualMarkerTemplate:fh:f3', [DataTemplate.$], 'ActualMarkerThickness:av:f4', [1, 1], 'ActualMarkerType:q:f5', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 1)], 'ActualOpacityMask:hv:f6', [Brush.$], 'ActualOpacity:aw:f7', [1, 1], 'ActualOutlineMode:t:f8', [SeriesOutlineMode_$type, /*@__PURE__*/ enumGetBox(SeriesOutlineMode_$type, 0)], 'ActualOutline:hw:f9', [Brush.$], 'ActualRadiusX:ax:ga', [1, 0], 'ActualRadiusY:ay:gb', [1, 0], 'ActualShadowBlur:az:gc', [1, NaN], 'ActualShadowColor:h3:gd', [Color.$], 'ActualShadowOffsetX:a0:ge', [1, NaN], 'ActualShadowOffsetY:a1:gf', [1, NaN], 'ActualStartCap:h9:gg', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'ActualThickness:a2:gh', [1, 1], 'ActualToolTip:bs:gi', [4], 'ActualUseLightweightMarkers:ad:gj', [0, false], 'ActualUseSingleShadow:ae:gk', [0, true], 'ActualVisibility:iv:gl', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'AreaFillOpacity:a3:gm', [1, NaN], 'Brush:hx:gn', [Brush.$], 'DashArray:h6:go', [DoubleCollection.$], 'DashCap:ia:gp', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)], 'EndCap:ib:gq', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'HighlightingFadeOpacity:bc:gr', [1, NaN], 'IsDropShadowEnabled:ag:gs', [0], 'IsHitTestVisible:ah:gt', [0, true], 'IsSplineShapePartOfRange:ai:gu', [0, false], 'ItemsSource::gv', [IEnumerable_$type, null], 'LegendItemBadgeMode:n:gw', [LegendItemBadgeMode_$type, /*@__PURE__*/ enumGetBox(LegendItemBadgeMode_$type, 0)], 'LegendItemBadgeShape:p:gx', [LegendItemBadgeShape_$type, /*@__PURE__*/ enumGetBox(LegendItemBadgeShape_$type, 0)], 'LegendItemBadgeTemplate:fi:gy', [DataTemplate.$, null], 'LegendItemTemplate:fj:gz', [DataTemplate.$, null], 'LegendItemVisibility:iw:g0', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'MarkerBrush:hy:g1', [Brush.$], 'MarkerFillOpacity:bd:g2', [1, NaN], 'MarkerOutline:hz:g3', [Brush.$], 'MarkerStyle:it:g4', [Style.$], 'MarkerTemplate:fk:g5', [DataTemplate.$, null], 'MarkerThickness:be:g6', [1, 1.5], 'MarkerType:r:g7', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 1)], 'Name:dk:g8', [2], 'OpacityMask:h0:g9', [Brush.$], 'Opacity:bf:ha', [1, 1], 'OutlineMode:u:hb', [SeriesOutlineMode_$type, /*@__PURE__*/ enumGetBox(SeriesOutlineMode_$type, 0)], 'Outline:h1:hc', [Brush.$, null], 'ParentOrLocalBrush:h2:hd', [Brush.$], 'RadiusX:bg:he', [1, 0], 'RadiusY:bh:hf', [1, 0], 'ShadowBlur:bi:hg', [1, NaN], 'ShadowColor:h4:hh', [Color.$], 'ShadowOffsetX:bj:hi', [1, NaN], 'ShadowOffsetY:bk:hj', [1, NaN], 'StartCap:ic:hk', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'Thickness:bl:hl', [1, 1.5], 'Title:bv:hm', [4, "Series Title"], 'ToolTip:bw:hn', [4, null], 'UseLightweightMarkers:am:ho', [0, false], 'UseSingleShadow:an:hp', [0], 'ValueMemberPath:d4:hq', [2, null], 'Visibility:ix:hr', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)]]);
    return StackedFragmentSeries;
})();
/**
 * @hidden
 */
export let StackedSeriesCollection = /*@__PURE__*/ (() => {
    class StackedSeriesCollection extends ObservableCollection$1 {
        constructor() {
            super(StackedFragmentSeries.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    StackedSeriesCollection.$t = /*@__PURE__*/ markType(StackedSeriesCollection, 'StackedSeriesCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(StackedFragmentSeries.$));
    return StackedSeriesCollection;
})();
/**
 * @hidden
 */
export let StackedSeriesFramePreparer = /*@__PURE__*/ (() => {
    class StackedSeriesFramePreparer extends CategoryFramePreparer {
        constructor(a, ..._rest) {
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        super(0, c);
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = _rest[4];
                        super(1, c, d, e, f, g);
                    }
                    break;
            }
        }
        j(a) {
            let b = new SingleValuesHolder();
            if (typeCast(StackedColumnSeries.$, this.h) !== null || typeCast(StackedBarSeries.$, this.h) !== null) {
                let c = typeCast(StackedSeriesBase.$, this.h);
                if (c.sw.count > 0) {
                    b.f = c.sw._inner[0].x;
                }
                return b;
            }
            let d = this.ad.valueColumn;
            b.f = d;
            return b;
        }
        t(a, b, c, d, e) {
            let f = 0;
            let g = false;
            let h;
            let i = a.d != null;
            let j = this.h.provideCollisionDetector();
            let k = a.f;
            let l = a.k;
            let m = this.h.mayContainUnknowns;
            let n = new ScalerParams(0, a.m, a.l, a.b.j$a, l);
            let o = new ScalerParams(0, a.m, a.l, a.c.j$a, l);
            o.b = this.h.getHostReferenceValue();
            let p = (a.b.j$c(2, n) - a.b.j$c(1, n));
            let q = a.m;
            let r = a.l;
            let s = typeCast(NumericAxisBase.$, a.c) !== null && a.c.kl;
            for (let t = a.i; t <= a.j; ++t) {
                let u;
                if (a.d == null) {
                    if (!m) {
                        u = this.g.getBucketWithoutUnknowns(t);
                    }
                    else {
                        u = this.g.getBucket(t);
                    }
                }
                else {
                    u = ((() => { let v = this.f(a, t, b, p, g, h, c); t = v.p1; g = v.p4; h = v.p5; return v.ret; })());
                }
                let v = !s || (s && u[1] > 0);
                let w = u[0];
                if (!isNaN_(u[0])) {
                    this.x(a, u, c, i, n, o);
                    a.a.f.add(u);
                    let x = t * a.h;
                    let y = x;
                    if (a.d != null && a.d.i$b != null && x >= 0 && x < a.d.i$b.count) {
                        x = a.d.i$b._inner[x];
                    }
                    let z = u;
                    if (k && x < b.e) {
                        z = new Array(u.length);
                        z[0] = w;
                        this.z(b, x, true, a.e);
                        z[1] = b.c;
                        z[2] = b.d;
                        this.x(a, z, c, i, n, o);
                    }
                    if (d && v && this.l(a.a, z, j, Math.min(x, b.e - 1), f, a.a.f.count - 1)) {
                        ++f;
                    }
                }
            }
            return f;
        }
        l(a, b, c, d, e, f) {
            let g = b[0];
            let h = b[1];
            if (typeCast(IBarSeries_$type, this.c) !== null) {
                h = b[0];
                g = b[1];
            }
            let i = new Rect(0, g - 5, h - 5, 11, 11);
            if (!isNaN_(g) && !isNaN_(h) && !isInfinity(g) && !isInfinity(h) && c.tryAdd(i)) {
                a.m.add({ $type: Point_$type, x: g, y: h });
                this.c.updateMarkerTemplate(e, d, f);
                return true;
            }
            return false;
        }
    }
    StackedSeriesFramePreparer.$t = /*@__PURE__*/ markType(StackedSeriesFramePreparer, 'StackedSeriesFramePreparer', CategoryFramePreparer.$);
    return StackedSeriesFramePreparer;
})();
/**
 * @hidden
 */
export let AreaFragmentView = /*@__PURE__*/ (() => {
    class AreaFragmentView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.dg = new Path();
            this.di = new Path();
            this.dh = new Path();
            this.dj = new Path();
            this.dc = new Path();
            this.de = new Path();
            this.dd = new Path();
            this.df = new Path();
            this.da = a;
        }
        as() {
            super.as();
            if (!this.q) {
            }
        }
        db() {
            this.dg.ak = null;
            this.dh.ak = null;
            this.di.ak = null;
            this.dj.ak = null;
            this.dc.ak = null;
            this.dd.ak = null;
            this.de.ak = null;
            this.df.ak = null;
        }
        cs() {
            return new AreaFragmentBucketCalculator(this);
        }
        bb() {
            super.bb();
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.dc.ak = this.dg.ak;
            this.dd.ak = this.dh.ak;
            this.de.ak = this.di.ak;
            this.df.ak = this.dj.ak;
            this.dc._fill = a;
            this.dd._fill = a;
            this.dc._opacity = 1;
            this.dd._opacity = 1;
            this.de._stroke = a;
            this.de.ac = this.e.fl + 3;
            this.df._stroke = a;
            this.df.ac = this.e.fl + 3;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.s(this.dc);
                    a.s(this.dd);
                    a.s(this.de);
                    a.s(this.df);
                }
                else {
                    a.s(this.dg);
                    a.s(this.dh);
                    a.s(this.di);
                    a.s(this.dj);
                }
            }
        }
        get_index() {
            let a = this.da.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.da.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.bx.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            this.e.a6.exportPathData(a, this.di, "lowerShape", ["Lower"]);
            this.e.a6.exportPathData(a, this.dj, "upperShape", ["Upper", "Main"]);
            this.e.a6.exportPathData(a, this.dh, "translucentShape", ["Translucent"]);
            this.e.a6.exportPathData(a, this.dg, "fillShape", ["Fill"]);
        }
    }
    AreaFragmentView.$t = /*@__PURE__*/ markType(AreaFragmentView, 'AreaFragmentView', AnchoredCategorySeriesView.$);
    return AreaFragmentView;
})();
/**
 * @hidden
 */
export let ColumnFragmentView = /*@__PURE__*/ (() => {
    class ColumnFragmentView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.de = null;
            this.db = null;
            this.dc = null;
            this.dd = null;
            this.dj = new Rectangle();
            this.da = a;
            this.dc = new List$1(Number_$type, 0);
            this.dd = new List$1(Number_$type, 0);
            this.db = ((() => {
                let $ret = new Pool$1(Rectangle.$);
                $ret.create = runOn(this, this.dk);
                $ret.activate = runOn(this, this.df);
                $ret.disactivate = runOn(this, this.dh);
                $ret.destroy = runOn(this, this.dg);
                return $ret;
            })());
            this.de = new List$1(Rectangle.$, 0);
        }
        as() {
            super.as();
            if (!this.q) {
            }
        }
        dk() {
            let a = ((() => {
                let $ret = new Rectangle();
                $ret.dataContext = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this.e;
                    return $ret;
                })());
                return $ret;
            })());
            this.de.add(a);
            a._visibility = 1;
            return a;
        }
        df(a) {
            a._visibility = 0;
        }
        dh(a) {
            a._visibility = 1;
        }
        dg(a) {
            this.de.remove(a);
        }
        be(a, b) {
            super.be(a, b);
            let c = a;
        }
        di(a, b, c) {
            let d = false;
            if (a.o != c) {
                d = true;
                a.o = c;
            }
            if (a.n != b) {
                d = true;
                a.n = b;
            }
            if (d) {
                this.aq();
            }
        }
        bf(a, b) {
            super.bf(a, b);
        }
        ac(a) {
            return this.de._inner[a];
        }
        ab(a) {
            let b = this.de._inner[a];
            this.dj._visibility = b._visibility;
            this.dj.n = b.n;
            this.dj.o = b.o;
            this.dj.width = b.width;
            this.dj.height = b.height;
            let c = this.bp(a);
            this.dj._fill = c;
            this.dj._stroke = c;
            this.dj.ac = this.e.fl + 3;
            return this.dj;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                for (let c = 0; c < this.de.count; c++) {
                    let d = this.aa(c, b);
                    this.bd(d, c, b);
                    a.v(d);
                }
            }
        }
        get_index() {
            let a = this.da.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.da.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.bx.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            let b = 0;
            let c = new List$1(Rectangle.$, 0);
            for (let d of fromEnum(this.db.a)) {
                c.add(d);
            }
            c.aa((e, f) => {
                if (e.n < f.n) {
                    return -1;
                }
                else if (e.n > f.n) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            for (let e of fromEnum(c)) {
                this.e.a6.exportRectangleData(a, e, "column" + b, ["Main", "Fill"]);
            }
            b++;
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'>";
            let b = null;
            if (this.da.q2().b6) {
                b = this.da.fragmentXAxis;
            }
            else if (this.da.fragmentYAxis.b6) {
                b = this.da.fragmentYAxis;
            }
            if (b.b9) {
                let c = b;
                a += "<span>${item." + c.dateTimeMemberPath + "}</span><br/>";
            }
            if (b != null && b.fj != null) {
                a += "<span>${item." + b.fj + "}</span><br/>";
            }
            a += "<span";
            let d = this.e.a4.a$r(this.e);
            if (!stringIsNullOrEmpty(d)) {
                a += " style='color:" + d + "'";
            }
            a += ">" + this.da.hp + ": </span><span class='ui-priority-primary'>" + "${item." + this.da.tb + "}</span></div>";
            return a;
        }
    }
    ColumnFragmentView.$t = /*@__PURE__*/ markType(ColumnFragmentView, 'ColumnFragmentView', AnchoredCategorySeriesView.$);
    return ColumnFragmentView;
})();
/**
 * @hidden
 */
export let LineFragmentView = /*@__PURE__*/ (() => {
    class LineFragmentView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.dg = new Path();
            this.df = new Path();
            this.dh = new Path();
            this.dd = new Path();
            this.dc = new Path();
            this.de = new Path();
            this.da = a;
        }
        db() {
            this.df.ak = null;
            this.dg.ak = null;
            this.dh.ak = null;
            this.dc.ak = null;
            this.dd.ak = null;
            this.de.ak = null;
        }
        cs() {
            return new LineFragmentBucketCalculator(this);
        }
        bb() {
            super.bb();
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.dc.ak = this.df.ak;
            this.dd.ak = this.dg.ak;
            this.de.ak = this.dh.ak;
            this.dd._stroke = a;
            this.dd.ac = this.e.fl + 3;
            this.de._stroke = a;
            this.de.ac = this.e.fl + 3;
            this.dc._fill = a;
            this.dc._opacity = 1;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.s(this.dc);
                    a.s(this.dd);
                    a.s(this.de);
                }
                else {
                    a.s(this.df);
                    a.s(this.dg);
                    a.s(this.dh);
                }
            }
        }
        get_index() {
            let a = this.da.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.da.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.bx.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            this.e.a6.exportPathData(a, this.dg, "lowerShape", ["Lower", "Main"]);
            this.e.a6.exportPathData(a, this.dh, "upperShape", ["Upper"]);
            this.e.a6.exportPathData(a, this.df, "translucentShape", ["Translucent"]);
        }
    }
    LineFragmentView.$t = /*@__PURE__*/ markType(LineFragmentView, 'LineFragmentView', AnchoredCategorySeriesView.$);
    return LineFragmentView;
})();
/**
 * @hidden
 */
export let SplineAreaFragmentView = /*@__PURE__*/ (() => {
    class SplineAreaFragmentView extends SplineSeriesBaseView {
        constructor(a) {
            super(a);
            this.db = null;
            this.dh = new Path();
            this.dj = new Path();
            this.di = new Path();
            this.dk = new Path();
            this.dd = new Path();
            this.df = new Path();
            this.de = new Path();
            this.dg = new Path();
            this.db = a;
        }
        as() {
            super.as();
            if (!this.q) {
            }
        }
        dc() {
            this.dh.ak = null;
            this.di.ak = null;
            this.dj.ak = null;
            this.dk.ak = null;
            this.dd.ak = null;
            this.de.ak = null;
            this.df.ak = null;
            this.dg.ak = null;
        }
        bb() {
            super.bb();
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.dd.ak = this.dh.ak;
            this.de.ak = this.di.ak;
            this.df.ak = this.dj.ak;
            this.dg.ak = this.dk.ak;
            this.dd._fill = a;
            this.de._fill = a;
            this.de._opacity = 1;
            this.dd._opacity = 1;
            this.df._stroke = a;
            this.df.ac = this.e.fl + 3;
            this.dg._stroke = a;
            this.dg.ac = this.e.fl + 3;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.s(this.dd);
                    a.s(this.de);
                    a.s(this.df);
                    a.s(this.dg);
                }
                else {
                    a.s(this.dh);
                    a.s(this.di);
                    a.s(this.dj);
                    a.s(this.dk);
                }
            }
        }
        get_index() {
            let a = this.db.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.db.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.bx.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            this.e.a6.exportPathData(a, this.dj, "lowerShape", ["Lower"]);
            this.e.a6.exportPathData(a, this.dk, "upperShape", ["Upper", "Main"]);
            this.e.a6.exportPathData(a, this.di, "translucentShape", ["Translucent"]);
            this.e.a6.exportPathData(a, this.dh, "fillShape", ["Fill"]);
        }
    }
    SplineAreaFragmentView.$t = /*@__PURE__*/ markType(SplineAreaFragmentView, 'SplineAreaFragmentView', SplineSeriesBaseView.$);
    return SplineAreaFragmentView;
})();
/**
 * @hidden
 */
export let SplineFragmentView = /*@__PURE__*/ (() => {
    class SplineFragmentView extends SplineSeriesBaseView {
        constructor(a) {
            super(a);
            this.db = null;
            this.dh = new Path();
            this.dg = new Path();
            this.di = new Path();
            this.de = new Path();
            this.dd = new Path();
            this.df = new Path();
            this.db = a;
        }
        cs() {
            return new SplineFragmentBucketCalculator(this);
        }
        dc() {
            this.dg.ak = null;
            this.dh.ak = null;
            this.di.ak = null;
            this.dd.ak = null;
            this.de.ak = null;
            this.df.ak = null;
        }
        bb() {
            super.bb();
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.dd.ak = this.dg.ak;
            this.de.ak = this.dh.ak;
            this.df.ak = this.di.ak;
            this.de._stroke = a;
            this.de.ac = this.e.fl + 3;
            this.df._stroke = a;
            this.df.ac = this.e.fl + 3;
            this.dd._fill = a;
            this.dd._opacity = 0.75;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.s(this.dd);
                    a.s(this.de);
                    a.s(this.df);
                }
                else {
                    a.s(this.dg);
                    a.s(this.dh);
                    a.s(this.di);
                }
            }
        }
        get_index() {
            let a = this.db.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.db.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.bx.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            this.e.a6.exportPathData(a, this.dh, "lowerShape", ["Lower", "Main"]);
            this.e.a6.exportPathData(a, this.di, "upperShape", ["Upper"]);
            this.e.a6.exportPathData(a, this.dg, "translucentShape", ["Translucent"]);
        }
    }
    SplineFragmentView.$t = /*@__PURE__*/ markType(SplineFragmentView, 'SplineFragmentView', SplineSeriesBaseView.$);
    return SplineFragmentView;
})();
/**
 * @hidden
 */
export let StackedSeriesView = /*@__PURE__*/ (() => {
    class StackedSeriesView extends CategorySeriesView {
        constructor(a) {
            super(a);
            this.c0 = null;
            this.c1 = new Canvas();
            this.c3 = new Panel();
            this.c0 = a;
        }
        get c2() {
            return this.c1;
        }
        get c4() {
            return this.c3;
        }
        cs() {
            return new StackedBucketCalculator(this);
        }
        ap() {
            super.ap();
            for (let a = 0; a < this.c0.s0.f.count; a++) {
                this.c0.s0.f._inner[a].bx.ap();
            }
        }
        ar(a, b) {
            super.ar(a, b);
            for (let c of fromEnum(this.c0.series)) {
                c.visualSeriesLink.bx.ar(a, b);
            }
        }
        af() {
            let a = "rgba(95,95,95,0.5)";
            let b = true;
            let c = 5, d = 5, e = 5;
            let f = this.e;
            if ((f.isStacked && f.c7) || (f.isStacked && f.ea && f.c7)) {
                d = 1;
                e = -3;
            }
            else if ((f.isStacked && f.dv) || (f.isStacked && f.ea)) {
                c = 3;
                d = 1;
                e = 4;
                b = false;
            }
            else if ((f.isStacked && f.db)) {
                d = 5;
                e = 0;
            }
            let g = new Color();
            g.colorString = a;
            f.or = g;
            f.gj = c;
            f.gk = d;
            f.gl = e;
            f.e1 = b;
        }
    }
    StackedSeriesView.$t = /*@__PURE__*/ markType(StackedSeriesView, 'StackedSeriesView', CategorySeriesView.$);
    return StackedSeriesView;
})();
/**
 * @hidden
 */
export let StackedBarSeriesView = /*@__PURE__*/ (() => {
    class StackedBarSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
            this.c5 = null;
            this.c5 = a;
        }
        cs() {
            return new StackedBarBucketCalculator(this);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.pr = Defaults.c;
                this.c0.gh = Defaults.h;
                this.c0.gm = Defaults.i;
            }
        }
    }
    StackedBarSeriesView.$t = /*@__PURE__*/ markType(StackedBarSeriesView, 'StackedBarSeriesView', StackedSeriesView.$);
    return StackedBarSeriesView;
})();
/**
 * @hidden
 */
export let StackedColumnSeriesView = /*@__PURE__*/ (() => {
    class StackedColumnSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        cs() {
            return new StackedColumnBucketCalculator(this);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.pr = Defaults.c;
                this.c0.gh = Defaults.h;
                this.c0.gm = Defaults.i;
            }
        }
    }
    StackedColumnSeriesView.$t = /*@__PURE__*/ markType(StackedColumnSeriesView, 'StackedColumnSeriesView', StackedSeriesView.$);
    return StackedColumnSeriesView;
})();
/**
 * @hidden
 */
export let StackedAreaSeriesView = /*@__PURE__*/ (() => {
    class StackedAreaSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.pr = Defaults.e;
            }
        }
    }
    StackedAreaSeriesView.$t = /*@__PURE__*/ markType(StackedAreaSeriesView, 'StackedAreaSeriesView', StackedSeriesView.$);
    return StackedAreaSeriesView;
})();
/**
 * @hidden
 */
export let StackedSplineAreaSeriesView = /*@__PURE__*/ (() => {
    class StackedSplineAreaSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.pr = Defaults.e;
            }
        }
    }
    StackedSplineAreaSeriesView.$t = /*@__PURE__*/ markType(StackedSplineAreaSeriesView, 'StackedSplineAreaSeriesView', StackedSeriesView.$);
    return StackedSplineAreaSeriesView;
})();
/**
 * @hidden
 */
export let StackedSplineSeriesView = /*@__PURE__*/ (() => {
    class StackedSplineSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.pr = Defaults.e;
            }
        }
    }
    StackedSplineSeriesView.$t = /*@__PURE__*/ markType(StackedSplineSeriesView, 'StackedSplineSeriesView', StackedSeriesView.$);
    return StackedSplineSeriesView;
})();
/**
 * @hidden
 */
export let StackedSeriesManager = /*@__PURE__*/ (() => {
    class StackedSeriesManager extends Base {
        constructor(a) {
            super();
            this.b = null;
            this.f = null;
            this.c = null;
            this.e = null;
            this.d = null;
            this.j = null;
            this.k = null;
            if (a == null) {
                return;
            }
            this.b = a;
            this.f = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.c = new StackedSeriesCollection();
            this.e = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.d = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.j = this.b.s1.c2;
            this.k = this.b.s1.c4;
            let b = this.c;
            b.collectionChanged = delegateCombine(b.collectionChanged, (b, c) => {
                if (c.oldItems != null) {
                    for (let d of fromEn(c.oldItems)) {
                        if (this.f.contains(d.visualSeriesLink)) {
                            this.f.remove(d.visualSeriesLink);
                        }
                    }
                }
                if (c.newItems != null) {
                    let e = c.newStartingIndex;
                    for (let f of fromEn(c.newItems)) {
                        let g = this.a(f);
                        this.f.insert(e, g);
                        e++;
                    }
                }
            });
            let c = this.f;
            c.collectionChanged = delegateCombine(c.collectionChanged, (c, d) => {
                if (d.oldItems != null) {
                    for (let e of fromEn(d.oldItems)) {
                        e.kh(true, e.bx);
                        e.ca = null;
                        e.b5 = null;
                        e.itemsSource = null;
                        e.legend = null;
                        if (this.k != null && this.k.ab.contains(e)) {
                            this.k.ab.remove(e);
                        }
                        if (this.b.ca != null) {
                            this.b.ca.l1(e);
                        }
                    }
                }
                if (d.newItems != null) {
                    for (let f of fromEn(d.newItems)) {
                        f.ca = this.b.ca;
                        f.b5 = this.b.b5;
                        if (!this.k.ab.contains(f)) {
                            this.k.ab.add(f);
                        }
                        if (this.b.ca != null) {
                            this.b.ca.i4(f);
                        }
                    }
                }
                this.b.l0(false);
            });
        }
        a(a) {
            if (this.b.isStacked && this.b.dv) {
                let b = new LineFragment();
                b.provideRenderer(a.bm);
                b.parentSeries = this.b;
                a.visualSeriesLink = b;
                b.logicalSeriesLink = a;
                b.bx.bu = this.b.bx.bu;
                this.i(b, a);
                this.g(b);
                return b;
            }
            if (this.b.isStacked && this.b.db) {
                let c = new ColumnFragment();
                c.provideRenderer(a.bm);
                c.parentSeries = this.b;
                a.visualSeriesLink = c;
                c.logicalSeriesLink = a;
                c.bx.bu = this.b.bx.bu;
                this.i(c, a);
                this.g(c);
                return c;
            }
            if (this.b.isStacked && this.b.c9) {
                let d = new BarFragment();
                d.provideRenderer(a.bm);
                d.parentSeries = typeCast(StackedBarSeries.$, this.b);
                a.visualSeriesLink = d;
                d.logicalSeriesLink = a;
                d.bx.bu = this.b.bx.bu;
                this.i(d, a);
                this.g(d);
                return d;
            }
            if (this.b.isStacked && this.b.c7 && !this.b.ea) {
                let e = new AreaFragment();
                e.provideRenderer(a.bm);
                e.parentSeries = this.b;
                a.visualSeriesLink = e;
                e.logicalSeriesLink = a;
                e.bx.bu = this.b.bx.bu;
                this.i(e, a);
                this.g(e);
                return e;
            }
            if (this.b.isStacked && this.b.ea && !this.b.c7) {
                let f = new SplineFragment();
                f.provideRenderer(a.bm);
                f.parentSeries = this.b;
                a.visualSeriesLink = f;
                f.logicalSeriesLink = a;
                f.bx.bu = this.b.bx.bu;
                this.i(f, a);
                this.g(f);
                return f;
            }
            if (this.b.isStacked && this.b.ea && this.b.c7) {
                let g = new SplineAreaFragment();
                g.provideRenderer(a.bm);
                g.parentSeries = this.b;
                a.visualSeriesLink = g;
                g.logicalSeriesLink = a;
                g.bx.bu = this.b.bx.bu;
                this.i(g, a);
                this.g(g);
                return g;
            }
            return null;
        }
        i(a, b) {
            a.oj = b.h2;
            a.os = b.h5;
            a.ot = b.h7;
            a.ou = b.h8;
            if (b.itemsSource == null) {
                a.itemsSource = this.b.itemsSource;
            }
            else {
                a.itemsSource = b.itemsSource;
            }
            a.legend = this.b.a0;
            a.legendItemTemplate = b.fg;
            a.ph = b.iu;
            a.qt = b.ht;
            a.qu = b.hu;
            a.qv = b.is;
            a.qd = b.fh;
            a.pr = b.q;
            a.pw = b.av;
            a.gf = this.b.gf;
            a._opacity = b.bf;
            a.gd = b.at;
            a.oo = b.hw;
            a.gh = this.b.gh;
            a.ov = b.h9;
            a.gm = b.a2;
            a.hp = b.bv;
            a.pv = b.ad;
            a.tb = b.d4;
            a._visibility = b.iv;
            a.ge = b.au;
            a.bs = b.t;
            let c = typeCast(AreaFragment.$, a);
            if (c != null) {
                c.fi = b.as;
            }
            let d = typeCast(SplineAreaFragment.$, a);
            if (d != null) {
                d.fi = b.as;
            }
            let e = typeCast(ColumnFragment.$, a);
            if (e != null) {
                e.ut = b.ax;
                e.uu = b.ay;
            }
            let f = typeCast(BarFragment.$, a);
            if (f != null) {
                f.ut = b.ax;
                f.uu = b.ay;
            }
            a.toolTip = b.bw;
            a.dg = b.aa;
            a.e1 = b.ae;
            b.e5();
            b.e6();
            b.e7();
            b.e8();
        }
        h() {
            this.e.clear();
            this.d.clear();
            let a = 0;
            for (let b of fromEnum(this.f)) {
                b.et = true;
                b.g9 = this.b.tc(this.c._inner[a]);
                b.b5 = this.b.b5;
                b.ca = this.b.ca;
                if (this.c._inner[a].aj) {
                    this.e.add(b);
                }
                else {
                    this.d.add(b);
                }
                if ((this.b.isStacked && this.b.dv) || (this.b.isStacked && this.b.c7) || (this.b.isStacked && this.b.ea)) {
                    b.te(this.b.fetchXAxis());
                    b.tf(this.b.fetchYAxis());
                }
                b.l0(false);
                a++;
            }
        }
        g(a) {
            let fragment_ = a;
            fragment_.externalObject = TypeRegistrar.createFromInternal(fragment_, PlatformConstants.Prefix, PlatformConstants.Postfix);
            fragment_.externalObject._implementation = fragment_;
        }
    }
    StackedSeriesManager.$t = /*@__PURE__*/ markType(StackedSeriesManager, 'StackedSeriesManager');
    return StackedSeriesManager;
})();
//# sourceMappingURL=StackedSeriesCreatedEventArgs_combined.js.map
