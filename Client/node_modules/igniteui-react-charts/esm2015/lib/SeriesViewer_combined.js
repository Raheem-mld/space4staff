/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Control } from "igniteui-react-core";
import { INotifyPropertyChanged_$type, Type, Base, EventArgs, PropertyChangedEventArgs, IEnumerable_$type, callStaticConstructors, Point_$type, delegateCombine, runOn, delegateRemove, fromEnum, fromEn, typeCast, enumGetBox, EnumUtil, Boolean_$type, Number_$type, typeGetValue, toEnum, String_$type, markType, markDep, PointUtil, TypeRegistrar, Delegate_$type, Array_$type } from "igniteui-react-core";
import { ILegendOwner_$type } from "igniteui-react-core";
import { IInternalLegendOwner_$type } from "igniteui-react-core";
import { SRProvider } from "igniteui-react-core";
import { DVContainer } from "igniteui-react-core";
import { DoubleAnimator } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { DependencyObject } from "igniteui-react-core";
import { MarkerAutomaticBehavior_$type } from "./MarkerAutomaticBehavior";
import { IChartLegend_$type } from "igniteui-react-core";
import { SeriesHighlightingMode_$type } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior_$type } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode_$type } from "./LegendHighlightingMode";
import { LegendItemBadgeShape_$type } from "./LegendItemBadgeShape";
import { LegendItemBadgeMode_$type } from "./LegendItemBadgeMode";
import { Rect } from "igniteui-react-core";
import { ChartHitTestMode_$type } from "./ChartHitTestMode";
import { InteractionState_$type } from "igniteui-react-core";
import { WindowResponse_$type } from "./WindowResponse";
import { Visibility_$type } from "igniteui-react-core";
import { SeriesViewerComponentsFromView } from "./SeriesViewerComponentsFromView";
import { ZoomCoercionMode_$type } from "./ZoomCoercionMode";
import { Brush } from "igniteui-react-core";
import { ModifierKeys_$type } from "igniteui-react-core";
import { DataTemplate } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { CanvasRenderScheduler } from "igniteui-react-core";
import { SyncSettings } from "./SyncSettings";
import { PropertyMetadata } from "igniteui-react-core";
import { SeriesViewerComponentsForView } from "./SeriesViewerComponentsForView";
import { Dictionary$2 } from "igniteui-react-core";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { NotifyCollectionChangedEventArgs } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { FrameworkElement } from "igniteui-react-core";
import { MouseEventArgs } from "igniteui-react-core";
import { MouseButtonEventArgs } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { SeriesViewerManipulationEventArgs } from "./SeriesViewerManipulationEventArgs";
import { RectChangedEventArgs } from "igniteui-react-core";
import { MathUtil } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { RefreshCompletedEventArgs } from "./RefreshCompletedEventArgs";
import { Thickness } from "igniteui-react-core";
import { AxisTitlePosition_$type } from "./AxisTitlePosition";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { CoercionInfo } from "./CoercionInfo";
import { FastItemsSource } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
import { ChartContentType_$type } from "./ChartContentType";
import { defaultDVDateParse, dateNow } from "igniteui-react-core";
import { isNaN_, isInfinity, logBase, log10, truncate } from "igniteui-react-core";
import { stringIsNullOrEmpty, stringEmpty, stringIsNullOrWhiteSpace } from "igniteui-react-core";
import { ISchedulableRender_$type } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { Line } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { ITileZoomTile_$type } from "./ITileZoomTile";
import { DOMExecutionContext } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { PathFigureCollection } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { LineSegment } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { GeometryGroup } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { LabelPanelsArrangeState } from "./LabelPanelsArrangeState";
import { MarkerTemplates } from "./MarkerTemplates";
import { DataTemplateRenderInfo } from "igniteui-react-core";
import { DataTemplateMeasureInfo } from "igniteui-react-core";
import { AxisLabelsLocation_$type } from "./AxisLabelsLocation";
import { IProvidesViewport_$type } from "./IProvidesViewport";
import { ArgumentNullException } from "igniteui-react-core";
import { DomWrapper_$type } from "igniteui-react-core";
import { PointerTooltipStyle } from "./PointerTooltipStyle";
import { CanvasViewRenderer } from "igniteui-react-core";
import { DefaultPaletteInfo } from "./DefaultPaletteInfo";
import { CssGradientUtil } from "igniteui-react-core";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { AxisRange } from "./AxisRange";
import { LinearNumericSnapper } from "./LinearNumericSnapper";
import { AxisAnnotationCollection } from "./AxisAnnotationCollection";
import { VerticalAlignment_$type } from "igniteui-react-core";
import { Canvas } from "igniteui-react-core";
import { IFastItemsSourceProvider_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { LabelPosition } from "./LabelPosition";
import { BindingFormatter } from "igniteui-react-core";
import { LabelFontHeuristics } from "./LabelFontHeuristics";
import { Pool$1 } from "igniteui-react-core";
import { AxisComponentsFromView } from "./AxisComponentsFromView";
import { FastReflectionHelper } from "igniteui-react-core";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { RectangleGeometry } from "igniteui-react-core";
import { PathRenderingInfo } from "./PathRenderingInfo";
import { LineGeometry } from "igniteui-react-core";
import { BrushUtilCore } from "igniteui-react-core";
import { RenderRequestedEventArgs } from "./RenderRequestedEventArgs";
import { CategoryMode_$type } from "./CategoryMode";
import { GridMode_$type } from "./GridMode";
import { Panel } from "igniteui-react-core";
import { RectUtil } from "igniteui-react-core";
import { TickmarkValues } from "./TickmarkValues";
import { RotateTransform } from "igniteui-react-core";
import { TransformGroup } from "igniteui-react-core";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { AngleSimplifier } from "igniteui-react-core";
import { TranslateTransform } from "igniteui-react-core";
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { LogarithmicTickmarkValues } from "./LogarithmicTickmarkValues";
import { LinearTickmarkValues } from "./LinearTickmarkValues";
import { TickmarkValuesInitializationParameters } from "./TickmarkValuesInitializationParameters";
import { CategoryAxisRenderingParameters } from "./CategoryAxisRenderingParameters";
import { NumberAbbreviatorFactory } from "./NumberAbbreviatorFactory";
import { HighlightingState } from "./HighlightingState";
import { Marker } from "./Marker";
import { ContentControl } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode_$type } from "./ComputedPlotAreaMarginMode";
import { ILegendSeries_$type } from "igniteui-react-core";
import { ILegendSeriesInternal_$type } from "igniteui-react-core";
import { ILegendTemplateProvider_$type } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { SeriesVisibleRangeMode_$type } from "./SeriesVisibleRangeMode";
import { SeriesOutlineMode_$type } from "./SeriesOutlineMode";
import { TransitionInSpeedType_$type } from "./TransitionInSpeedType";
import { SeriesHitTestMode_$type } from "./SeriesHitTestMode";
import { Binding } from "igniteui-react-core";
import { SeriesComponentsForView } from "./SeriesComponentsForView";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { SeriesComponentsFromView } from "./SeriesComponentsFromView";
import { MarkerType_$type } from "./MarkerType";
import { Style } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { FastItemsSourceReference } from "igniteui-react-core";
import { stringFormat } from "igniteui-react-core";
import { EasingFunctions } from "igniteui-react-core";
import { DataTemplatePassInfo } from "igniteui-react-core";
/**
 * @hidden
 */
export let SeriesViewer = /*@__PURE__*/ (() => {
    class SeriesViewer extends Control {
        constructor() {
            super();
            this._widget = null;
            this.cf = null;
            this.cq = null;
            this.a4 = null;
            this.b7 = null;
            this.bk = new SeriesCollection();
            this._skipDataCleanup = false;
            this.cg = null;
            this.ap = null;
            this.o7 = null;
            this.plotAreaMouseLeftButtonDown = null;
            this.plotAreaMouseLeftButtonUp = null;
            this.plotAreaClicked = null;
            this.plotAreaMouseEnter = null;
            this.plotAreaMouseLeave = null;
            this.plotAreaMouseOver = null;
            this.bm = 1;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.c0 = false;
            this.seriesCursorMouseMove = null;
            this.seriesMouseLeftButtonDown = null;
            this.seriesMouseLeftButtonUp = null;
            this.seriesMouseMove = null;
            this.seriesMouseEnter = null;
            this.seriesMouseLeave = null;
            this.cv = false;
            this.pf = Rect.empty;
            this.pd = Rect.empty;
            this.ct = true;
            this.pc = null;
            this.c8 = false;
            this.f7 = 30;
            this.d9 = false;
            this.br = new SeriesViewerComponentsForView();
            this.cy = false;
            this.ar = 0;
            this.aq = 1;
            this.seriesAnimating = null;
            this.cw = false;
            this.b2 = 0;
            this.c2 = false;
            this.de = false;
            this.cu = false;
            this.iq = null;
            this.viewerManipulationStarting = null;
            this.viewerManipulationEnding = null;
            this.c6 = false;
            this.c3 = false;
            this.windowRectChanged = null;
            this.sizeChanged = null;
            this.dl = false;
            this.actualWindowRectChanged = null;
            this.gridAreaRectChanged = null;
            this.dg = false;
            this._syncChannel = null;
            this.bt = null;
            this.en = false;
            this.c5 = false;
            this.dk = false;
            this.eq = false;
            this.bx = 1;
            this.px = null;
            this.f9 = 0;
            this.bj = null;
            this.c4 = false;
            this.eo = false;
            this.pe = Rect.empty;
            this.ev = new Date();
            this.es = false;
            this.refreshCompleted = null;
            this.gk = null;
            this.gj = null;
            this.oq = null;
            this.op = null;
            this.fe = NaN;
            this.fc = NaN;
            this.fd = NaN;
            this.fb = NaN;
            this.fa = NaN;
            this.e8 = NaN;
            this.e9 = NaN;
            this.e7 = NaN;
            this.gh = null;
            this.al = null;
            this.am = null;
            this.ak = null;
            this.c1 = false;
            this.cs = false;
            this._syncSettings = null;
            this.destroyed = false;
            this.gf = null;
            this.et = new Dictionary$2(String_$type, Base.$, 0);
            this.d7 = false;
            this.ff = NaN;
            this.e4 = NaN;
            this.e6 = NaN;
            this.e2 = NaN;
            this.e1 = 20;
            this.e0 = NaN;
            this.cx = true;
            this.e5 = NaN;
            this.e3 = NaN;
            this.gi = null;
            this.ex = 1;
            this.ew = NaN;
            this.pb = null;
            this.dj = false;
            this.ey = 0;
            this.ez = 0;
            this.m4 = null;
            this.av = null;
            this.dp = false;
            this.dq = false;
            this.dm = false;
            this.cz = false;
            this.f8 = 0;
            this.dc = false;
            this.dt = false;
            this.seriesDataUpdated = null;
            DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
            DVContainer.instance.registerIfLoaded("InteractivityFactoryManager");
            DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
            this.pb = Rect.empty;
            this.o7 = { $type: Point_$type, x: NaN, y: NaN };
            this.ev = dateNow();
            this.dp = false;
            this.dq = false;
            this.al = new CanvasRenderScheduler();
            this.am = new CanvasRenderScheduler();
            this.ak = new CanvasRenderScheduler();
            SeriesViewer.ps = new Rect(0, 0, 0, 1, 1);
            this.syncSettings = ((() => {
                let $ret = new SyncSettings();
                $ret.synchronizeHorizontally = true;
                $ret.synchronizeVertically = true;
                return $ret;
            })());
            this.cf = this.ce();
            this.k5(this.cf);
            this.cf.c1();
            this.mh();
            this.jm();
            this.actualSyncLink = new SyncLink();
            this.mp(null, this.actualSyncLink);
            this.ap = new ChartContentManager(this);
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.lh(a, b.propertyName, b.oldValue, b.newValue));
            let a = this.series;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.l6));
            let b = this.series;
            b.collectionResetting = delegateCombine(b.collectionResetting, runOn(this, this.l7));
            this.cg = new DoubleAnimator(0, 1, this.gd);
            let c = this.cg;
            c.propertyChanged = delegateCombine(c.propertyChanged, runOn(this, this.jl));
            this.cf.bx();
            this.jo();
            this.jn();
        }
        get widget() {
            return this._widget;
        }
        set widget(a) {
            this._widget = a;
        }
        static staticInit() {
            SeriesViewer.ps = new Rect(0, 0, 0, 1, 1);
        }
        get cr() {
            if (this.cq == null) {
                this.cq = new SRProvider(this.cf.j.ae);
            }
            return this.cq;
        }
        get a5() {
            if (this.a4 == null) {
                this.a4 = DVContainer.instance.createInstance(ISeriesViewerInteractionManager_$type, () => this.cr.n);
            }
            return this.a4;
        }
        get dv() {
            return DVContainer.instance.checkLoaded("InteractivityFactoryManager");
        }
        jm() {
            if (this.b7 != null && this.b8 == null) {
                let a = this.b8;
                a.thumbnailSizeChanged = delegateRemove(a.thumbnailSizeChanged, runOn(this, this.ld));
            }
            if (this.b8 != null) {
                let b = this.b8;
                b.thumbnailSizeChanged = delegateCombine(b.thumbnailSizeChanged, runOn(this, this.ld));
            }
            if (this.gi != null) {
                this.b8.backgroundImageUri = this.gi;
            }
            if (this.b8 != null) {
                this.b8.initializeScalingRatio(this.fh);
            }
            if (this.b7 == null && this.b8 != null) {
                this.j0();
            }
            this.b7 = this.b8;
        }
        ld(a, b) {
            this.b8.surfaceIsDirty = true;
            for (let c of fromEnum(this.series)) {
                c.et = true;
            }
        }
        jn() {
            this.cf.cl();
            if (this.b8 != null) {
                this.b8.initializeScalingRatio(this.fh);
            }
        }
        get series() {
            return this.bk;
        }
        l6(a, b) {
            this.dc = this.di();
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    c.b5 = null;
                    c.ca = null;
                    this.l0(c);
                    this.cf.dv(c);
                }
            }
            if (b.newItems != null) {
                for (let d of fromEn(b.newItems)) {
                    if (!this.cf.aq(d)) {
                        this.mi(d);
                        this.cf.bp(d);
                        d.ca = this;
                        d.b5 = this.actualSyncLink;
                        d.ml();
                    }
                }
            }
            this.jz();
            this.j5();
            this.kj();
        }
        jp() {
            this.j5();
        }
        j5() {
        }
        get skipDataCleanup() {
            return this._skipDataCleanup;
        }
        set skipDataCleanup(a) {
            this._skipDataCleanup = a;
        }
        l0(a) {
            if (!this.skipDataCleanup) {
                if (typeCast(Series.$, a) !== null) {
                    a.itemsSource = null;
                }
                else if (typeCast(CategoryAxisBase.$, a) !== null) {
                    a.itemsSource = null;
                }
            }
            this.l2(a.name, true);
        }
        l7(a, b) {
            this.dc = this.di();
            for (let c of fromEnum(this.series)) {
                c.b5 = null;
                c.ca = null;
                this.l0(c);
                this.cf.dv(c);
            }
        }
        js(a, b, c, d) {
            let e = this.pv;
            let f = e.width;
            let g = e.height;
            let h = f / g;
            let i = a / b;
            if (isNaN_(h)) {
                return {
                    p0: a,
                    p1: b
                };
            }
            if (isNaN_(i) || c || d || Math.abs(h - i) > 0.0001) {
                if (c && d) {
                    if (a > b) {
                        b = a / h;
                    }
                    else {
                        a = b * h;
                    }
                }
                else if (c) {
                    b = a / h;
                }
                else {
                    a = b * h;
                }
            }
            if (b > 1) {
                let j = 1 / b;
                b = 1;
                a = a * j;
            }
            if (a > 1) {
                let k = 1 / a;
                a = 1;
                b = b * k;
            }
            return {
                p0: a,
                p1: b
            };
        }
        di() {
            return false;
        }
        get ek() {
            return this.d2;
        }
        get dr() {
            return this.a4 != null;
        }
        get a3() {
            let a = this.a5.f$b;
            if (a.executionContext == null) {
                a.executionContext = this.cf.l();
            }
            if (a.ensureAnimator == null) {
                a.ensureAnimator = runOn(this, this.jg);
            }
            return a;
        }
        jg() {
            {
                let a = this.cg;
                if (!a.f() && a.r > 0) {
                    a.v();
                }
                if (a.r == 0) {
                    this.mk(1);
                }
            }
        }
        jl(a, b) {
            this.mk(this.cg.o);
        }
        mk(a) {
            let b = this.a3.tick(a);
            if (a == 1 && b && this.cg.r > 0) {
                this.cg.v();
            }
            let c = this.a3.dirtySeries;
            if (this.a3.allDirty) {
                let d = this.series;
                for (let e = 0; e < d.count; e++) {
                    let f = d._inner[e];
                    f.lk();
                }
            }
            else {
                for (let g = 0; g < c.count; g++) {
                    let h = c._inner[g];
                    h.lk();
                }
            }
            if (!b) {
                this.cg.w();
            }
        }
        jk() {
            this.cf.ch();
            this.jj();
            for (let a = 0; a < this.series.count; a++) {
                if (this.series._inner[a].c6) {
                }
            }
        }
        ou(a) {
            return this.ot(this.ag, a);
        }
        o0(a) {
            return this.ot(this.aj, a);
        }
        oy(a) {
            return this.ot(this.ah, a);
        }
        oz(a) {
            return this.ot(this.ai, a);
        }
        ot(a, b) {
            if (a == null || a.count == 0) {
                return null;
            }
            else {
                return a.item(b % a.count);
            }
        }
        get o8() {
            return this.o7;
        }
        set o8(a) {
            if (PointUtil.notEquals(this.o7, a)) {
                let b = this.o7;
                this.o7 = a;
                this.ll("CrosshairPoint", b, this.o7);
            }
        }
        get du() {
            return this.b6 == 1 || this.b6 == 2;
        }
        get legend() {
            return this.c(SeriesViewer.no);
        }
        set legend(a) {
            this.h(SeriesViewer.no, a);
        }
        get da() {
            return this.c(SeriesViewer.m6);
        }
        set da(a) {
            this.h(SeriesViewer.m6, a);
        }
        ku(a, b) {
            this.c0 = false;
            let c = false;
            c = false;
            if (this.cf.k.ai) {
                return;
            }
            if (this.plotAreaMouseLeftButtonDown != null) {
                let d = this.ba(a, b, c);
                this.plotAreaMouseLeftButtonDown(this, d);
            }
        }
        ba(a, b, c) {
            let d = { $type: Point_$type, x: a.x, y: a.y };
            let e = { $type: Point_$type, x: a.x, y: a.y };
            if (!this.pv.isEmpty) {
                if (c) {
                    e.x -= this.pv.left;
                    e.y -= this.pv.top;
                }
                else {
                    d.x += this.pv.left;
                    d.y += this.pv.top;
                }
            }
            let f = new PlotAreaMouseButtonEventArgs(this, d, e);
            f.manipulationOccurred = this.c0;
            return f;
        }
        be(a, b, c) {
            let d = { $type: Point_$type, x: a.x, y: a.y };
            let e = { $type: Point_$type, x: a.x, y: a.y };
            if (!this.pv.isEmpty) {
                if (c) {
                    e.x -= this.pv.left;
                    e.y -= this.pv.top;
                }
                else {
                    d.x += this.pv.left;
                    d.y += this.pv.top;
                }
            }
            let f = new PlotAreaMouseEventArgs(this, d, e);
            return f;
        }
        kv(a, b, c) {
            let d = false;
            d = false;
            if (this.cf.k.ai) {
                return;
            }
            if (this.plotAreaMouseLeftButtonUp != null) {
                let e = this.ba(a, b, d);
                this.plotAreaMouseLeftButtonUp(this, e);
            }
            if (!this.c0 && !c) {
                if (this.plotAreaClicked != null) {
                    let f = this.ba(a, b, d);
                    this.plotAreaClicked(this, f);
                }
            }
            this.c0 = false;
        }
        get d2() {
            return this.c(SeriesViewer.nk);
        }
        set d2(a) {
            this.h(SeriesViewer.nk, a);
        }
        get ej() {
            return this.c(SeriesViewer.n5);
        }
        set ej(a) {
            this.h(SeriesViewer.n5, a);
        }
        get bq() {
            return EnumUtil.getEnumValue(SeriesHighlightingMode_$type, this.c(SeriesViewer.ng));
        }
        set bq(a) {
            this.h(SeriesViewer.ng, enumGetBox(SeriesHighlightingMode_$type, a));
        }
        bp() {
            if (this.bo == 0) {
                return 1;
            }
            if (this.bq == 3 || this.bq == 5) {
                if (this.bo == 2) {
                    return 4;
                }
            }
            return this.bo;
        }
        get bn() {
            return this.bm;
        }
        get bo() {
            return EnumUtil.getEnumValue(SeriesHighlightingBehavior_$type, this.c(SeriesViewer.nf));
        }
        set bo(a) {
            this.h(SeriesViewer.nf, enumGetBox(SeriesHighlightingBehavior_$type, a));
        }
        get a6() {
            return EnumUtil.getEnumValue(LegendHighlightingMode_$type, this.c(SeriesViewer.nl));
        }
        set a6(a) {
            this.h(SeriesViewer.nl, enumGetBox(LegendHighlightingMode_$type, a));
        }
        get a8() {
            return EnumUtil.getEnumValue(LegendItemBadgeShape_$type, this.c(SeriesViewer.nn));
        }
        set a8(a) {
            this.h(SeriesViewer.nn, enumGetBox(LegendItemBadgeShape_$type, a));
        }
        get a7() {
            return EnumUtil.getEnumValue(LegendItemBadgeMode_$type, this.c(SeriesViewer.nm));
        }
        set a7(a) {
            this.h(SeriesViewer.nm, enumGetBox(LegendItemBadgeMode_$type, a));
        }
        ll(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        kl() {
            this.km(this.series);
        }
        km(a) {
            for (let b of fromEn(a)) {
                let c = b.a0;
                if (c == null) {
                    continue;
                }
                let d = b.mq;
                if (d == null) {
                    continue;
                }
                if (c.containsChild(d)) {
                    c.removeChild(d);
                }
                if (!c.containsChild(d) && b.ph != 1) {
                    c.addChildInOrder(d, b);
                }
            }
        }
        kx(a, b, c) {
            this.lq(a, b, typeCast(MouseEventArgs.$, c));
        }
        k1(a, b, c) {
            this.lu(a, b, typeCast(MouseEventArgs.$, c));
        }
        ky(a, b, c) {
            this.lr(a, b, typeCast(MouseEventArgs.$, c));
        }
        kz(a, b, c) {
            this.ls(a, b, typeCast(MouseButtonEventArgs.$, c));
        }
        k0(a, b, c) {
            let d = typeCast(MouseButtonEventArgs.$, c);
            if (d != null) {
                this.lt(a, b, typeCast(MouseButtonEventArgs.$, c));
            }
        }
        i1(a, b) {
            return null;
        }
        get d8() {
            return this.c0;
        }
        j4() {
            if (!this.cv) {
                this.cv = true;
                this.c0 = true;
                if (this.viewerManipulationStarting != null) {
                    let a = new SeriesViewerManipulationEventArgs();
                    a.isDragZoom = true;
                    this.viewerManipulationStarting(this, a);
                }
            }
        }
        k2(a, b, c) {
        }
        k3(a, b, c) {
        }
        lo(a, b) {
            if (this.seriesCursorMouseMove != null && this.de) {
                this.seriesCursorMouseMove(this, new ChartCursorEventArgs(this, a, b));
            }
        }
        ls(a, b, c) {
            if (this.seriesMouseLeftButtonDown != null) {
                this.seriesMouseLeftButtonDown(this, new DataChartMouseButtonEventArgs(this, a, b, c));
            }
        }
        lt(a, b, c) {
            if (this.seriesMouseLeftButtonUp != null) {
                this.seriesMouseLeftButtonUp(this, new DataChartMouseButtonEventArgs(this, a, b, c));
            }
        }
        mb(a) {
            this.a5.f$am(this, a);
        }
        mc(a) {
            a = { $type: Point_$type, x: a.x - this.pv.left, y: a.y - this.pv.top };
            let b = this.pa(a);
            if (this.ej) {
                this.ja(b);
            }
            else {
                let c = this.bn;
                let d = c == 2 || c == 3 || c == 4;
                if (d) {
                    this.ml(b);
                    for (let e = 0; e < this.series.count; e++) {
                        let f = this.series._inner[e];
                        f.mk(b);
                        if (f.isStacked) {
                            f.ku((g) => {
                                g.mk(b);
                                return true;
                            });
                        }
                    }
                }
            }
        }
        lu(a, b, c) {
            if (this.seriesMouseMove != null) {
                this.seriesMouseMove(this, new ChartMouseEventArgs(this, a, b, c));
            }
        }
        lq(a, b, c) {
            if (this.seriesMouseEnter != null) {
                this.seriesMouseEnter(this, new ChartMouseEventArgs(this, a, b, c));
            }
        }
        lr(a, b, c) {
            if (this.seriesMouseLeave != null) {
                this.seriesMouseLeave(this, new ChartMouseEventArgs(this, a, b, c));
            }
        }
        j3() {
            if (this.cv) {
                this.cv = false;
                if (this.viewerManipulationEnding != null) {
                    let a = new SeriesViewerManipulationEventArgs();
                    a.isDragZoom = true;
                    this.viewerManipulationEnding(this, a);
                }
            }
        }
        get_pv() {
            return this.pf;
        }
        get pv() {
            return this.get_pv();
        }
        get pk() {
            return this.pd;
        }
        set pk(a) {
            this.pd = a;
        }
        pp(a, b, c) {
            if (c.isEmpty) {
                return c;
            }
            let d = c;
            let e = b;
            let f = (d.left - e.left) / e.width;
            let g = (d.top - e.top) / e.height;
            let h = (d.right - e.left) / e.width;
            let i = (d.bottom - e.top) / e.height;
            f = a.left + f * a.width;
            g = a.top + g * a.height;
            h = a.left + h * a.width;
            i = a.top + i * a.height;
            return new Rect(0, f, g, h - f, i - g);
        }
        get_pj() {
            if (this.ct) {
                this.ct = false;
                let a = this.pn(this.pv, this.pk, this.pg);
                this.pc = a;
            }
            return this.pc;
        }
        get pj() {
            return this.get_pj();
        }
        pn(a, b, c) {
            let d = b;
            let e = c;
            let f = a;
            if (f.isEmpty) {
                return Rect.empty;
            }
            if (d.isEmpty) {
                return a;
            }
            let g = (d.left - f.left) / f.width;
            let h = (d.right - f.left) / f.width;
            let i = (d.top - f.top) / f.height;
            let j = (d.bottom - f.top) / f.height;
            g = f.left + (g - e.left) / e.width * f.width;
            h = f.left + (h - e.left) / e.width * f.width;
            i = f.top + (i - e.top) / e.height * f.height;
            j = f.top + (j - e.top) / e.height * f.height;
            let k = new Rect(0, g, i, h - g, j - i);
            k.intersect(f);
            return k;
        }
        pi(a) {
            this.ct = true;
            return Rect.empty;
        }
        po() {
            return this.pv;
        }
        mg(a) {
            a.js = this.pv;
        }
        get ga() {
            return this.f7;
        }
        set ga(a) {
            this.f7 = a;
        }
        lg(a, b) {
            if (!b.isEmpty) {
                this.pf = b;
                this.pd = this.pi(this.pf);
                this.cf.en(this.pf);
            }
            if (this.di()) {
                if (this.actualSyncLink != null) {
                    this.ms(this.pg, false);
                }
            }
            this.kw(a, b);
        }
        bs() {
            return this.br;
        }
        i7(a, b) {
            let c = false;
            c = true;
            if (this.pv.containsPoint(a)) {
                if (!this.cy) {
                    this.cy = true;
                    if (this.plotAreaMouseEnter != null) {
                        let d = this.be(a, false, c);
                        d.isDuringManipulation = b;
                        this.plotAreaMouseEnter(this, d);
                    }
                }
                else {
                    this.cy = true;
                    if (this.plotAreaMouseOver != null) {
                        let e = this.be(a, false, c);
                        e.isDuringManipulation = b;
                        this.plotAreaMouseOver(this, e);
                    }
                }
            }
            else {
                if (this.cy) {
                    this.cy = false;
                    if (this.plotAreaMouseLeave != null) {
                        let f = this.be(a, false, c);
                        f.isDuringManipulation = b;
                        this.plotAreaMouseLeave(this, f);
                    }
                }
            }
        }
        get at() {
            return this.ar;
        }
        set at(a) {
            let b = this.ar;
            this.ar = a;
            if (b != this.ar) {
                this.ll("ContentHitTestMode", enumGetBox(ChartHitTestMode_$type, b), enumGetBox(ChartHitTestMode_$type, this.ar));
            }
        }
        lw() {
            this.as = this.au();
        }
        au() {
            if (!this.dv) {
                return 1;
            }
            return this.a5.f$a(this);
        }
        get as() {
            return this.aq;
        }
        set as(a) {
            let b = this.aq;
            this.aq = a;
            if (b != this.aq) {
                this.ll("ActualContentHitTestMode", enumGetBox(ChartHitTestMode_$type, b), enumGetBox(ChartHitTestMode_$type, this.aq));
            }
        }
        ln(a) {
            if (this.seriesAnimating != null) {
                this.seriesAnimating(a);
            }
        }
        d3() {
            return this.d4() || this.d5();
        }
        onDetachedFromUI() {
            this.cf.cz();
            SyncManager.e(this);
        }
        onAttachedToUI() {
            this.cf.ct();
            SyncManager.c(this);
        }
        get b6() {
            return this.b2;
        }
        set b6(a) {
            if (this.b6 != a) {
                let b = this.b2;
                this.b2 = a;
                if (this.dv) {
                    this.a5.f$ae(this);
                }
                if (b == 1 && this.b2 != 1) {
                    this.j3();
                }
            }
        }
        ko(a) {
            this.ja(this.pa(a));
        }
        kp(a, b) {
            let c = false;
            c = false;
            this.ja({ $type: Point_$type, x: NaN, y: NaN });
            if (this.cy) {
                this.cy = false;
                if (this.plotAreaMouseLeave != null) {
                    let d = this.be(a, false, c);
                    d.isDuringManipulation = b;
                    this.plotAreaMouseLeave(this, d);
                }
            }
        }
        ed(a, b) {
            return this.a5.f$e(this, a, b);
        }
        ke(a) {
            this.a5.f$n(this, a);
        }
        ec(a) {
            return this.a5.f$d(this, a);
        }
        get db() {
            return this.cu;
        }
        set db(a) {
            this.cu = a;
        }
        get_dw() {
            return this.dc || this.ep();
        }
        get dw() {
            return this.get_dw();
        }
        kg(a) {
            this.a5.f$p(this, a);
        }
        get dh() {
            return this.cu;
        }
        kt(a) {
            this.a5.f$ac(this, a);
        }
        kh(a, b) {
            this.a5.f$q(this, a, b);
        }
        kf(a) {
            this.a5.f$o(this, a);
        }
        get ee() {
            return this.c2;
        }
        set ee(a) {
            this.c2 = a;
        }
        lb() {
            this.a5.f$aj(this);
        }
        ks(a) {
            this.a5.f$ab(this, a);
        }
        lc(a, b, c, d) {
            this.a5.f$ak(this, a, b, c, d);
        }
        kr(a) {
            this.a5.f$aa(this, a);
        }
        k8(a, b, c, d) {
            this.a5.f$ag(this, a, b, c, d);
        }
        kn(a) {
            this.a5.f$x(this, a);
        }
        kq(a) {
            this.a5.f$z(this, a);
        }
        ki(a) {
            this.a5.f$r(this, a);
        }
        k7(a, b, c, d) {
            this.a5.f$af(this, a, b, c, d);
        }
        kk(a) {
            this.cf.eg(a.height);
        }
        jj() {
            if (this.cu) {
                this.ja({ $type: Point_$type, x: NaN, y: NaN });
                this.cf.ce();
            }
            this.cu = false;
        }
        j8(a, b) {
            this.a5.f$m(this, a, b);
        }
        b4(a) {
            let b = this.cf.k != null && this.cf.k.ai ? this.b5 : this.b3;
            if (b != 3) {
                return b;
            }
            return this.cf.m(a);
        }
        la() {
            this.c5 = false;
            if (!this.c6) {
                this.c6 = true;
                this.c0 = true;
                if (this.viewerManipulationStarting != null) {
                    let a = new SeriesViewerManipulationEventArgs();
                    a.isZoomPan = true;
                    this.viewerManipulationStarting(this, a);
                }
            }
            this.a5.f$ai(this);
        }
        k9() {
            if (this.c6) {
                this.c6 = false;
                if (this.viewerManipulationEnding != null) {
                    let a = new SeriesViewerManipulationEventArgs();
                    a.isZoomPan = true;
                    this.viewerManipulationEnding(this, a);
                }
            }
            this.a5.f$ah(this);
        }
        md() {
            this.a5.f$an(this);
        }
        je() {
            if (this.c5) {
                this.kb();
            }
            this.a5.f$j(this);
        }
        i9() {
            this.i8();
        }
        i8() {
            if (this.dv) {
                this.a5.f$g(this);
            }
        }
        le() {
        }
        lz() {
        }
        lx() {
            for (let a = 0; a < this.series.count; a++) {
                this.series._inner[a].l0(false);
            }
            this.ji(false, false, true);
        }
        j7(a, b) {
            this.a5.f$l(this, a, b);
        }
        ei() {
            return false;
        }
        get em() {
            return this.c3;
        }
        set em(a) {
            this.c3 = a;
        }
        j6(a, b, c) {
            this.a5.f$k(this, a, b, c);
        }
        mq(a, b) {
            if (b.propertyName == SyncSettings.$$p[0]) {
                SyncManager.b(this, b.oldValue, b.newValue);
            }
        }
        mp(a, b) {
            if (a != null) {
                a.ab.remove(this);
                a.propertyUpdated = delegateRemove(a.propertyUpdated, this.propertyUpdated);
            }
            if (b != null) {
                b.ab.add(this);
                b.propertyUpdated = delegateCombine(b.propertyUpdated, this.propertyUpdated);
            }
            for (let c of fromEnum(this.series)) {
                c.b5 = this.actualSyncLink;
                c.ca = this;
            }
        }
        ja(a) {
            this.actualSyncLink.ak(this, a);
        }
        ms(a, b) {
            this.mt(a, b, !b);
        }
        mt(a, b, c) {
            if (!b) {
                this.actualSyncLink.ap(this, a, c);
            }
            else {
                if (!this.d4() && !this.d5()) {
                    return;
                }
                let d = !a.isEmpty && !isNaN_(a.x) && !isNaN_(a.y) && !isNaN_(a.width) && !isNaN_(a.height);
                let e = a;
                if (d && !this.d4()) {
                    e = new Rect(0, 0, a.y, 1, a.height);
                }
                if (d && !this.d5()) {
                    e = new Rect(0, a.x, 0, a.width, 1);
                }
                this.actualSyncLink.ao(this, e);
            }
        }
        lf(a, b) {
            if (!b) {
                this.actualSyncLink.al(this, a);
            }
            else {
                if (!this.d4() && !this.d5()) {
                    return;
                }
                let c = !a.isEmpty && !isNaN_(a.x) && !isNaN_(a.y) && !isNaN_(a.width) && !isNaN_(a.height);
                let d = a;
                if (c && !this.d4()) {
                    d = new Rect(0, 0, a.y, 1, a.height);
                }
                if (c && !this.d5()) {
                    d = new Rect(0, a.x, 0, a.width, 1);
                }
                this.actualSyncLink.al(this, d);
            }
        }
        get d0() {
            return this.actualSyncLink != null;
        }
        *_eu() {
            if (this.actualSyncLink == null) {
                return undefined;
            }
            for (let a of fromEnum(this.actualSyncLink.ag)) {
                yield a;
            }
        }
        eu() {
            return toEnum(() => this._eu());
        }
        pa(a) {
            a = { $type: Point_$type, x: a.x + this.pv.left, y: a.y + this.pv.top };
            let b = this.pj;
            let c = this.pg.left + this.pg.width * (a.x - b.left) / b.width;
            let d = this.pg.top + this.pg.height * (a.y - b.top) / b.height;
            return { $type: Point_$type, x: c, y: d };
        }
        pu(a) {
            a = new Rect(0, a.left + this.pv.left, a.top + this.pv.top, a.width, a.height);
            let b = this.pj;
            let c = this.pg.left + this.pg.width * (a.left - b.left) / b.width;
            let d = this.pg.top + this.pg.height * (a.top - b.top) / b.height;
            let e = this.pg.left + this.pg.width * (a.right - b.left) / b.width;
            let f = this.pg.top + this.pg.height * (a.bottom - b.top) / b.height;
            return new Rect(0, c, d, e - c, f - d);
        }
        lv(a, b) {
            if (this.windowRectChanged != null && Rect.l_op_Inequality(a, b)) {
                this.windowRectChanged(this, new RectChangedEventArgs(a, b));
            }
        }
        k6(a, b) {
            this.lv(a, b);
        }
        k4(a, b) {
            if (this.sizeChanged != null && Size.l_op_Inequality(a, b)) {
                this.sizeChanged(this, new RectChangedEventArgs(new Rect(1, 0, 0, a), new Rect(1, 0, 0, b)));
            }
        }
        eg(a, b) {
            if (a.width != b.width || a.height != b.height || a.x != b.x || a.y != b.y) {
                return true;
            }
            return false;
        }
        lj(a, b) {
            if (this.actualWindowRectChanged != null && this.eg(a, b)) {
                this.actualWindowRectChanged(this, new RectChangedEventArgs(a, b));
            }
        }
        l5() {
            this.cf.dz();
        }
        lk(a, b) {
            if (this.gridAreaRectChanged != null && Rect.l_op_Inequality(a, b)) {
                this.gridAreaRectChanged(this, new RectChangedEventArgs(a, b));
            }
        }
        get_dx() {
            return false;
        }
        get dx() {
            return this.get_dx();
        }
        kw(a, b) {
            this.lk(a, b);
            if (this.dv) {
                this.a5.f$al(this);
            }
            if (this.dx && (Rect.l_op_Equality(a, null) || a.isEmpty || a.width == 0 || a.height == 0)) {
                this.ms(this.pw, false);
            }
            else {
                this.jo();
            }
        }
        jr() {
            this.jo();
        }
        get syncChannel() {
            return this._syncChannel;
        }
        set syncChannel(a) {
            this._syncChannel = a;
        }
        get actualSyncLink() {
            return this.bt;
        }
        set actualSyncLink(a) {
            let b = this.bt;
            this.bt = a;
            this.ll("ActualSyncLink", b, this.bt);
        }
        jq() {
            this.cf.d0();
        }
        kc() {
            this.c5 = true;
        }
        ka() {
            this.c5 = false;
        }
        kb() {
            if (this.c5) {
                if (this.c6) {
                    this.c6 = false;
                    if (this.viewerManipulationEnding != null) {
                        let a = new SeriesViewerManipulationEventArgs();
                        a.isZoomPan = true;
                        this.viewerManipulationEnding(this, a);
                    }
                    this.c0 = false;
                }
            }
        }
        get b8() {
            return this.cf.i().a;
        }
        mm(a) {
            if (this.b8 != null) {
                this.b8.mobileMode = a;
            }
        }
        get by() {
            return this.bx;
        }
        set by(a) {
            this.bx = a;
        }
        bz() {
            if (this.b0 == 0) {
                return 1;
            }
            return this.b0;
        }
        dd() {
            return this.b6 == 0 && !this.c2 && !this.c3;
        }
        c9() {
            if (this.actualSyncLink != null && this.actualSyncLink.ag.count > 0) {
                let a = true;
                a = this.dd();
                if (!a) {
                    return false;
                }
                for (let b = 0; b < this.actualSyncLink.ag.count; b++) {
                    if (!this.actualSyncLink.ag.item(b).dd()) {
                        return false;
                    }
                }
                return true;
            }
            else {
                return this.dd();
            }
        }
        i6() {
            if (this.b6 == 2) {
                this.cf.bt();
                this.b6 = 0;
                this.k9();
                this.lf(Rect.empty, true);
                if (this.bw == 1) {
                    this.ms(this.px, true);
                }
            }
            if (this.b6 == 1) {
                this.cf.bt();
                this.b6 = 0;
                this.k9();
                this.cf.cc();
                this.lf(Rect.empty, true);
            }
        }
        notifyCrosshairUpdate() {
        }
        mr(a, b) {
            let c = this.f5;
            this.pw = new Rect(0, this.fi, this.fj, MathUtil.b(a, c, 1), MathUtil.b(b, c, 1));
        }
        fn() {
            return 1;
        }
        fo() {
            return 1;
        }
        lh(a, b, c, d) {
            switch (b) {
                case SeriesViewer.$$p[33]:
                    this.cf.dg();
                    break;
                case SeriesViewer.$$p[30]:
                    this.cf.dg();
                    break;
                case SeriesViewer.$$p[41]:
                    this.by = this.bz();
                    break;
                case "ActualContentHitTestMode":
                    this.j1();
                    break;
                case "ContentHitTestMode":
                    this.lw();
                    break;
                case SeriesViewer.$$p[32]:
                    this.cf.de(c, d);
                    this.cf.dg();
                    break;
                case SeriesViewer.$$p[29]:
                    this.cf.da(c, d);
                    this.cf.dg();
                    break;
                case "TitleTextStyle":
                case "TitleTextColor":
                case "SubtitleTextStyle":
                case "SubtitleTextColor":
                case "TitleTopMargin":
                case "TitleLeftMargin":
                case "TitleRightMargin":
                case "TitleBottomMargin":
                case "SubtitleTopMargin":
                case "SubtitleLeftMargin":
                case "SubtitleRightMargin":
                case "SubtitleBottomMargin":
                    this.cf.dg();
                    break;
                case SeriesViewer.$$p[23]:
                case SeriesViewer.$$p[24]:
                case SeriesViewer.$$p[25]:
                    this.cf.c8();
                    break;
                case "PixelScalingRatio":
                    if (isNaN_(DeviceUtils.a(this.fr))) {
                        this.jn();
                    }
                    else {
                        this.fh = DeviceUtils.a(this.fr);
                    }
                    break;
                case "InteractionPixelScalingRatio":
                    this.fg = this.fp;
                    break;
                case "ActualPixelScalingRatio":
                    this.cf.dm();
                    break;
                case SeriesViewer.$$p[10]:
                    this.cf.cm();
                    break;
                case "ActualSyncLink":
                    this.mp(typeCast(SyncLink.$, c), typeCast(SyncLink.$, d));
                    break;
                case SeriesViewer.$$p[3]:
                    if (!this.dk) {
                        this.eq = true;
                    }
                    if (this.p0 == 0) {
                        this.de = true;
                    }
                    else {
                        this.de = this.c7;
                    }
                    if (this.dv) {
                        this.a5.f$al(this);
                    }
                    break;
                case "CrosshairPoint":
                    if (this.dv) {
                        if (this.eb) {
                            this.ml(this.o8);
                        }
                        this.a5.f$al(this);
                    }
                    this.notifyCrosshairUpdate();
                    break;
                case SeriesViewer.$$p[39]:
                    if (this.actualSyncLink != null) {
                        this.f9++;
                        this.ms(d, false);
                        this.f9--;
                    }
                    if (!this.pw.equals1(c) && this.f9 == 0) {
                        this.k6(c, this.pw);
                    }
                    this.jo();
                    break;
                case SeriesViewer.$$p[36]:
                    this.fi = this.f3;
                    break;
                case SeriesViewer.$$p[37]:
                    this.fj = this.f4;
                    break;
                case "ActualWindowPositionVertical":
                case "ActualWindowPositionHorizontal":
                    if (!this.eo) {
                        this.mr(this.fn(), this.fo());
                    }
                    break;
                case SeriesViewer.$$p[11]:
                    this.cf.c2();
                    break;
                case SeriesViewer.$$p[9]:
                    this.cg.r = this.gd;
                    break;
                case SeriesViewer.$$p[16]:
                    this.mo();
                    break;
                case "ActualWindowRect":
                    this.ct = true;
                    if (this.eg(c, d)) {
                        this.i2();
                    }
                    if (d.width == 1 && d.height == 1 && c.isEmpty) {
                        this.es = true;
                    }
                    this.lj(c, d);
                    break;
                case SeriesViewer.$$p[20]:
                    this.cf.c7(d);
                    break;
                case SeriesViewer.$$p[35]:
                    this.c8 = this.er;
                    break;
                case SeriesViewer.$$p[42]:
                    this.ga = this.ge;
                    this.i8();
                    break;
                case SeriesViewer.$$p[22]:
                    this.a5.f$ad(this);
                    break;
                case "HighlightingMode":
                case "HighlightingBehavior":
                    this.bm = this.bp();
                    if (this.dv) {
                        let e = this.a3;
                        e.highlightingBehavior = this.bn;
                    }
                    break;
                case "LegendItemBadgeShape":
                    for (let f of fromEnum(this.series)) {
                        f.a9 = this.a8;
                    }
                    break;
                case "LegendItemBadgeMode":
                    for (let g of fromEnum(this.series)) {
                        g.a7 = this.a7;
                    }
                    break;
                case SeriesViewer.$$p[1]:
                case SeriesViewer.$$p[15]:
                case SeriesViewer.$$p[13]:
                case SeriesViewer.$$p[14]:
                case SeriesViewer.$$p[12]:
                    for (let h of fromEnum(this.series)) {
                        h.k2();
                    }
                    break;
            }
        }
        get ds() {
            return this.bn == 2 || this.bn == 3 || this.bn == 4;
        }
        get eb() {
            return this.bn == 2 || this.bn == 3 || this.bn == 4;
        }
        ml(a) {
            let b = 1.7976931348623157E+308;
            let c = null;
            for (let d = 0; d < this.series.count; d++) {
                let e = this.series._inner[d];
                if (e.c6) {
                    continue;
                }
                if (e.cy && e.c1) {
                    continue;
                }
                if (e.isStacked) {
                    e.ku((f) => {
                        let g = this.i0(f, b, c, a);
                        if (g == null) {
                            return true;
                        }
                        b = g.c;
                        c = g.d;
                        return true;
                    });
                }
                let f = this.i0(e, b, c, a);
                if (f == null) {
                    continue;
                }
                b = f.c;
                c = f.d;
            }
            this.bj = c;
        }
        i0(a, b, c, d) {
            let e = a.ox(d);
            let f = a.o2(d, true, true);
            if (isNaN_(f.x) || isNaN_(f.y)) {
                return null;
            }
            let g = (e.x - f.x) * (e.x - f.x) + (e.y - f.y) * (e.y - f.y);
            if (g < b) {
                b = g;
                c = a;
            }
            return new Tuple$2(Number_$type, Series.$, b, c);
        }
        mo() {
            this.c4 = this.p1 == 0;
            this.cf.dl();
            this.mn();
            this.cf.ej();
            this.jq();
            this.jz();
        }
        j1() {
            this.cf.cs();
        }
        mn() {
            if (this.b8 == null) {
                return;
            }
            this.b8.visibility = this.p1;
            this.b8.isZoomable = this.d3();
        }
        get pq() {
            return this.pe;
        }
        set pq(a) {
            let b = this.pe;
            this.pe = a;
            if (this.pe.isEmpty) {
                this.cf.cg();
            }
            else {
                this.cf.ek(this.pv, this.pt(this.pq));
                this.cf.d9();
                this.ll("PreviewRect", b, this.pe);
            }
        }
        mf() {
            this.fi = this.pg.x;
            this.fj = this.pg.y;
        }
        i2() {
            this.es = false;
            this.ev = dateNow();
            if (this.dr) {
                for (let a = 0; a < this.series.count; a++) {
                    this.series._inner[a].kf();
                }
                this.a3.clear();
            }
            if (this.cg.f()) {
                this.cg.w();
            }
            let b = this.eo;
            this.eo = true;
            this.mf();
            this.eo = b;
            this.cf.ch();
            this.cf.em(this.pg);
        }
        pt(a) {
            if (this.pv.isEmpty) {
                return Rect.empty;
            }
            let b = this.pv;
            let c = b.left + (b.width * (a.left - this.pg.left) / this.pg.width);
            let d = b.top + (b.height * (a.top - this.pg.top) / this.pg.height);
            let e = b.left + (b.width * (a.right - this.pg.left) / this.pg.width);
            let f = b.top + (b.height * (a.bottom - this.pg.top) / this.pg.height);
            return new Rect(0, c, d, e - c, f - d);
        }
        lm() {
            if (this.refreshCompleted != null && !this.destroyed) {
                this.refreshCompleted(this, new RefreshCompletedEventArgs());
            }
        }
        k5(a) {
            this.mn();
        }
        get im() {
            return this.gk;
        }
        set im(a) {
            let b = this.gk;
            this.gk = a;
            this.ll("TitleTextStyle", b, a);
        }
        get h9() {
            return this.gj;
        }
        set h9(a) {
            let b = this.gj;
            this.gj = a;
            this.ll("SubtitleTextStyle", b, a);
        }
        get o6() {
            return this.oq;
        }
        set o6(a) {
            let b = this.oq;
            this.oq = a;
            this.ll("TitleTextColor", b, a);
        }
        get o5() {
            return this.op;
        }
        set o5(a) {
            let b = this.op;
            this.op = a;
            this.ll("SubtitleTextColor", b, a);
        }
        get f1() {
            return this.fe;
        }
        set f1(a) {
            let b = this.fe;
            this.fe = a;
            this.ll("TitleTopMargin", b, a);
        }
        get fz() {
            return this.fc;
        }
        set fz(a) {
            let b = this.fc;
            this.fc = a;
            this.ll("TitleLeftMargin", b, a);
        }
        get f0() {
            return this.fd;
        }
        set f0(a) {
            let b = this.fd;
            this.fd = a;
            this.ll("TitleRightMargin", b, a);
        }
        get fy() {
            return this.fb;
        }
        set fy(a) {
            let b = this.fb;
            this.fb = a;
            this.ll("TitleBottomMargin", b, a);
        }
        get fx() {
            return this.fa;
        }
        set fx(a) {
            let b = this.fa;
            this.fa = a;
            this.ll("SubtitleTopMargin", b, a);
        }
        get fv() {
            return this.e8;
        }
        set fv(a) {
            let b = this.e8;
            this.e8 = a;
            this.ll("SubtitleLeftMargin", b, a);
        }
        get fw() {
            return this.e9;
        }
        set fw(a) {
            let b = this.e9;
            this.e9 = a;
            this.ll("SubtitleRightMargin", b, a);
        }
        get fu() {
            return this.e7;
        }
        set fu(a) {
            let b = this.e7;
            this.e7 = a;
            this.ll("SubtitleBottomMargin", b, a);
        }
        py() {
            return this.cf.fe();
        }
        pz() {
            return this.cf.ff();
        }
        an(a) {
            return this.cf.c(a);
        }
        ao(a) {
            return this.cf.d(a);
        }
        getFontHeight() {
            return this.cf.a9;
        }
        provideContainer(a) {
            this.cf.cx(a);
        }
        j9(a, b) {
            this.cf.cy(a, b);
        }
        notifyContainerResized() {
            this.cf.cr();
        }
        pl() {
            return this.cf.e8();
        }
        jf() {
            this.cf.b5();
        }
        o9() {
            return this.cf.e5();
        }
        ci() {
            return this.cf.t();
        }
        ch() {
            return this.cf.q();
        }
        ov() {
            return this.cf.ex();
        }
        ow() {
            return this.cf.e0();
        }
        i4(a) {
            this.cf.bp(a);
        }
        l1(a) {
            this.cf.dv(a);
        }
        get ea() {
            return this.c1;
        }
        set ea(a) {
            let b = this.c1;
            this.c1 = a;
            if (b != this.c1) {
                this.cf.co(this.c1);
            }
        }
        get c7() {
            return this.cs;
        }
        set c7(a) {
            let b = this.cs;
            this.cs = a;
            if (b != this.cs) {
                this.cf.bk(this.cs);
            }
        }
        get syncSettings() {
            return this._syncSettings;
        }
        set syncSettings(a) {
            this._syncSettings = a;
        }
        i3(a) {
            this.cf.bn(a);
        }
        l3(a) {
            this.cf.dw(a);
        }
        jy(source_, a, b, c) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let d = this.actualSyncLink.ae(source_);
            if (d == null) {
                return;
            }
            d.handleCollectionChanged(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
        }
        jt(source_) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let a = this.actualSyncLink.ae(source_);
            if (a == null) {
                return;
            }
            a.handleCollectionChanged(new NotifyCollectionChangedEventArgs(0, 4));
        }
        jw(source_, a, b) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let c = this.actualSyncLink.ae(source_);
            if (c == null) {
                return;
            }
            c.handleCollectionChanged(new NotifyCollectionChangedEventArgs(1, 0, b, a));
        }
        jx(source_, a, b) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let c = this.actualSyncLink.ae(source_);
            if (c == null) {
                return;
            }
            c.handleCollectionChanged(new NotifyCollectionChangedEventArgs(1, 1, b, a));
        }
        destroy() {
            this.destroyed = true;
            let a = new List$1(Series.$, 0);
            for (let b = 0; b < this.series.count; b++) {
                a.add(this.series._inner[b]);
            }
            for (let c = 0; c < a.count; c++) {
                if (a._inner[c].bx != null) {
                    a._inner[c].bx.aj();
                }
                this.series.remove(a._inner[c]);
                this.l2(a._inner[c].name, true);
                a._inner[c].itemsSource = null;
                a._inner[c].ln(null, null);
            }
            this.jd();
            this.l4();
            this.onDetachedFromUI();
            this.cf.cx(null);
        }
        jd() {
        }
        ma(source_) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            this.gf = source_;
            this.mj();
        }
        l4() {
            this.gf = null;
            this.mj();
        }
        l9(a, source_) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            if (stringIsNullOrEmpty(a) == false) {
                if (!this.et.containsKey(a)) {
                    this.et.addItem(a, source_);
                }
                else {
                    this.et.item(a, source_);
                }
            }
            this.mj();
        }
        l2(a, b) {
            if (stringIsNullOrEmpty(a) == false) {
                if (this.et.containsKey(a)) {
                    this.et.removeItem(a);
                }
            }
            if (!b) {
                this.mj();
            }
        }
        l8(a, b) {
            if (a.itemsSource != b) {
                a.itemsSource = b;
            }
        }
        mi(a) {
            if (!this.d7) {
                return;
            }
            if (typeCast(Series.$, a) !== null) {
                let b = a;
                if (this.et.containsKey(b.name)) {
                    let c = this.et.item(b.name);
                    this.l8(b, c);
                }
                else {
                    this.l8(b, this.gf);
                }
            }
            if (typeCast(CategoryAxisBase.$, a) !== null) {
                let d = a;
                if (this.et.containsKey(d.name)) {
                    let e = this.et.item(d.name);
                    if (d.itemsSource != e) {
                        d.itemsSource = e;
                    }
                }
                else {
                    if (d.itemsSource != this.gf) {
                        d.itemsSource = this.gf;
                    }
                }
            }
        }
        mj() {
            if (!this.d7) {
                return;
            }
            for (let a of fromEnum(this.series)) {
                this.mi(a);
            }
        }
        get f2() {
            return this.ff;
        }
        set f2(a) {
            this.ff = a;
            this.jq();
        }
        get fq() {
            return this.e4;
        }
        set fq(a) {
            this.e4 = a;
            this.jq();
        }
        get ft() {
            return this.e6;
        }
        set ft(a) {
            this.e6 = a;
            this.jq();
        }
        get fm() {
            return this.e2;
        }
        set fm(a) {
            this.e2 = a;
            this.jq();
        }
        get fl() {
            return this.e1;
        }
        set fl(a) {
            this.e1 = a;
            this.jq();
        }
        get fk() {
            return this.e0;
        }
        set fk(a) {
            this.e0 = a;
            this.jq();
        }
        eh() {
            return false;
        }
        get dn() {
            return this.cx;
        }
        set dn(a) {
            let b = this.cx;
            this.cx = a;
            this.ll("IsAntiAliasingEnabledDuringInteraction", b, this.cx);
        }
        get fr() {
            return this.e5;
        }
        set fr(a) {
            let b = this.e5;
            this.e5 = a;
            this.ll("PixelScalingRatio", b, this.e5);
        }
        get fp() {
            return this.e3;
        }
        set fp(a) {
            let b = this.e3;
            this.e3 = a;
            this.ll("InteractionPixelScalingRatio", b, this.e3);
        }
        static b1(a, b) {
            let c = new CoercionInfo();
            c.b = a;
            c.a = null;
            let d = FastItemsSource.f(a);
            if (d.d == null) {
                return c;
            }
            if (b != null) {
                let methods_ = b;
                let key_ = d.d;
                let val_ = null;
                if (typeof methods_[key_] != 'undefined') {
                    val_ = methods_[key_];
                }
                ;
                c.b = d.c;
                c.a = val_;
            }
            else if (d.d == "defaultDateParse") {
                let e = defaultDVDateParse;
                c.b = d.c;
                c.a = e;
            }
            return c;
        }
        get hl() {
            return this.gi;
        }
        set hl(a) {
            this.gi = a;
            if (this.b8 == null) {
                return;
            }
            this.b8.backgroundImageUri = this.gi;
        }
        get fh() {
            return this.ex;
        }
        set fh(a) {
            let b = this.ex;
            this.ex = a;
            this.ll("ActualPixelScalingRatio", b, this.ex);
        }
        get fg() {
            return this.ew;
        }
        set fg(a) {
            let b = this.ew;
            this.ew = a;
            this.ll("ActualInteractionPixelScalingRatio", b, this.ew);
        }
        get pg() {
            return this.pb;
        }
        set pg(a) {
            let b = Rect.l_op_Inequality(this.pb, a);
            if (b) {
                let c = this.pb;
                this.pb = a;
                this.ll("ActualWindowRect", c, a);
            }
        }
        pm() {
            return this.pg;
        }
        jo() {
            if (this.dj) {
                return;
            }
            this.pg = this.ph();
        }
        pr() {
            return Rect.empty;
        }
        ph() {
            let a = this.pw.left;
            let b = this.pw.top;
            let c = this.pw.width;
            let d = this.pw.height;
            if (this.by == 1) {
                a = Math.min(1, Math.max(0, this.pw.left));
                c = Math.min(1, Math.max(0, this.pw.width));
            }
            if (this.by == 1) {
                b = Math.min(1, Math.max(0, this.pw.top));
                d = Math.min(1, Math.max(0, this.pw.height));
            }
            return new Rect(0, a, b, c, d);
        }
        gg(a, b) {
            return this.cf.bj(a, b);
        }
        get fi() {
            return this.ey;
        }
        set fi(a) {
            let b = this.ey;
            this.ey = a;
            this.ll("ActualWindowPositionHorizontal", b, this.ey);
        }
        get fj() {
            return this.ez;
        }
        set fj(a) {
            let b = this.ez;
            this.ez = a;
            this.ll("ActualWindowPositionVertical", b, this.ez);
        }
        j0() {
            if (this.c4 && this.b8 != null) {
                this.b8.surfaceIsDirty = true;
                this.b8.doRefresh(false);
            }
            this.i9();
        }
        jz() {
            if (this.c4 && this.b8 != null) {
                this.b8.surfaceIsDirty = true;
                this.b8.doRefresh(false);
            }
            this.i9();
        }
        flush() {
            this.ji(true, true, true);
        }
        ji(a, b, c) {
            this.ap.y();
            if (a) {
                this.cf.b6();
                this.ap.y();
            }
            if (c) {
                this.al.i();
            }
            if (b) {
                this.cf.a.i();
            }
            this.es = true;
        }
        ep() {
            return false;
        }
        ly(a, b) {
            if (this.m4 != null) {
                this.me(this.m4);
                this.m4 = null;
                this.av = null;
            }
            this.m4 = a;
            this.av = this.ap.k(2, a, b);
        }
        me(a) {
            this.ap.ad(2, a);
            this.m4 = null;
            this.av = null;
        }
        jb() {
            this.ap.ac(2, this.m4, this.av, false);
        }
        kj() {
            let a = false;
            let b = false;
            let c = false;
            for (let d = 0; d < this.series.count; d++) {
                let e = this.series._inner[d];
                if (e.dd) {
                    a = true;
                }
                if (e.de) {
                    b = true;
                }
                if (e.c6) {
                    c = true;
                }
            }
            this.dp = a;
            this.dq = b;
            this.dm = c;
        }
        get d1() {
            return this.c4;
        }
        i5() {
            this.cf.bq();
            for (let a = 0; a < this.series.count; a++) {
                this.series._inner[a].la();
            }
        }
        d6() {
            return this.cf.am();
        }
        gc() {
            let a = this.f8;
            this.f8++;
            return a;
        }
        cl() {
            if (this.im == null) {
                return null;
            }
            return FontUtil.toFontInfo(this.cf.j.ae, this.im);
        }
        ck() {
            if (this.h9 == null) {
                return null;
            }
            return FontUtil.toFontInfo(this.cf.j.ae, this.h9);
        }
        mh() {
            let a = false;
            a = this.c7;
            this.dk = true;
            this.de = (a && !this.eq) || this.p0 == 0;
            this.dk = false;
        }
        lp() {
            if (this.seriesDataUpdated != null) {
                this.seriesDataUpdated(this, EventArgs.empty);
            }
        }
    }
    SeriesViewer.$t = /*@__PURE__*/ markType(SeriesViewer, 'SeriesViewer', Control.$, [INotifyPropertyChanged_$type, ILegendOwner_$type, IInternalLegendOwner_$type]);
    SeriesViewer.no = /*@__PURE__*/ DependencyProperty.i("Legend", IChartLegend_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.ll("Legend", b.oldValue, b.newValue);
    }));
    SeriesViewer.m6 = /*@__PURE__*/ DependencyProperty.i("AnimateSeriesWhenAxisRangeChanges", Boolean_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, false, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.ll("AnimateSeriesWhenAxisRangeChanges", b.oldValue, b.newValue);
    }));
    SeriesViewer.nk = /*@__PURE__*/ DependencyProperty.i("IsWindowSyncedToVisibleRange", Boolean_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, false, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.ll("IsWindowSyncedToVisibleRange", b.oldValue, b.newValue);
    }));
    SeriesViewer.n5 = /*@__PURE__*/ DependencyProperty.i("ShouldSimulateHoverMoveCrosshairPoint", Boolean_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, false, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.ll("ShouldSimulateHoverMoveCrosshairPoint", b.oldValue, b.newValue);
    }));
    SeriesViewer.ng = /*@__PURE__*/ DependencyProperty.i("HighlightingMode", SeriesHighlightingMode_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(SeriesHighlightingMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.ll("HighlightingMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.nf = /*@__PURE__*/ DependencyProperty.i("HighlightingBehavior", SeriesHighlightingBehavior_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(SeriesHighlightingBehavior_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.ll("HighlightingBehavior", b.oldValue, b.newValue);
    }));
    SeriesViewer.nl = /*@__PURE__*/ DependencyProperty.i("LegendHighlightingMode", LegendHighlightingMode_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(LegendHighlightingMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.ll("LegendHighlightingMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.nn = /*@__PURE__*/ DependencyProperty.i("LegendItemBadgeShape", LegendItemBadgeShape_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(LegendItemBadgeShape_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.ll("LegendItemBadgeShape", b.oldValue, b.newValue);
    }));
    SeriesViewer.nm = /*@__PURE__*/ DependencyProperty.i("LegendItemBadgeMode", LegendItemBadgeMode_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(LegendItemBadgeMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.ll("LegendItemBadgeMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.ps = Rect.empty;
    SeriesViewer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, SeriesViewer, 'll', ['ActualPlotAreaBorderBrush:or:m5', [Brush.$, null], 'Brushes:ag:m7', [BrushCollection.$, null], 'CircleMarkerTemplate:mu:m8', [DataTemplate.$, null], 'CrosshairVisibility:p0:m9', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'DefaultInteraction:b3:na', [InteractionState_$type, /*@__PURE__*/ enumGetBox(InteractionState_$type, 3)], 'DiamondMarkerTemplate:mv:nb', [DataTemplate.$, null], 'DragModifier:on:nc', [ModifierKeys_$type, /*@__PURE__*/ enumGetBox(ModifierKeys_$type, 2)], 'HexagonMarkerTemplate:mw:nd', [DataTemplate.$, null], 'HexagramMarkerTemplate:mx:ne', [DataTemplate.$, null], 'HighlightingTransitionDuration:gd:nh', [1, 300], 'IsPagePanningAllowed:dy:ni', [0, true], 'IsSurfaceInteractionDisabled:dz:nj', [0, false], 'MarkerAutomaticBehavior:a9:np', [MarkerAutomaticBehavior_$type, /*@__PURE__*/ enumGetBox(MarkerAutomaticBehavior_$type, 4)], 'MarkerBrushes:ah:nq', [BrushCollection.$, null], 'MarkerOutlines:ai:nr', [BrushCollection.$, null], 'Outlines:aj:ns', [BrushCollection.$, null], 'OverviewPlusDetailPaneVisibility:p1:nt', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 1)], 'PanModifier:oo:nu', [ModifierKeys_$type, /*@__PURE__*/ enumGetBox(ModifierKeys_$type, 4)], 'PentagonMarkerTemplate:my:nv', [DataTemplate.$, null], 'PentagramMarkerTemplate:mz:nw', [DataTemplate.$, null], 'PlotAreaBackground:o1:nx', [Brush.$, null], 'PlotAreaBorderBrush:o2:ny', [Brush.$, null], 'PreferHigherResolutionTiles:ef:nz', [0, false], 'PreviewPathFill:o3:n0', [Brush.$, null], 'PreviewPathOpacity:fs:n1', [1, NaN], 'PreviewPathStroke:o4:n2', [Brush.$, null], 'PyramidMarkerTemplate:m0:n3', [DataTemplate.$, null], 'RightButtonDefaultInteraction:b5:n4', [InteractionState_$type, /*@__PURE__*/ enumGetBox(InteractionState_$type, 3)], 'SquareMarkerTemplate:m1:n6', [DataTemplate.$, null], 'SubtitleHorizontalAlignment:ol:n7', [HorizontalAlignment_$type, /*@__PURE__*/ enumGetBox(HorizontalAlignment_$type, 1)], 'Subtitle:h2:n8', [2, null], 'TetragramMarkerTemplate:m2:n9', [DataTemplate.$, null], 'TitleHorizontalAlignment:om:oa', [HorizontalAlignment_$type, /*@__PURE__*/ enumGetBox(HorizontalAlignment_$type, 1)], 'Title:ie:ob', [2, null], 'TriangleMarkerTemplate:m3:oc', [DataTemplate.$, null], 'UseTiledZooming:er:od', [0, false], 'WindowPositionHorizontal:f3:oe', [1, NaN], 'WindowPositionVertical:f4:of', [1, NaN], 'WindowRectMinWidth:f5:og', [1, 0.0001], 'WindowRect:pw:oh', [Rect.$, /*@__PURE__*/ new Rect(0, 0, 0, 1, 1)], 'WindowResponse:bw:oi', [WindowResponse_$type, /*@__PURE__*/ enumGetBox(WindowResponse_$type, 1)], 'ZoomCoercionMode:b0:oj', [ZoomCoercionMode_$type, /*@__PURE__*/ enumGetBox(ZoomCoercionMode_$type, 0)], 'ZoomTileCacheSize:ge:ok', [1, 30]]);
    return SeriesViewer;
})();
/**
 * @hidden
 */
export let SeriesViewerView = /*@__PURE__*/ (() => {
    class SeriesViewerView extends Base {
        constructor(a) {
            super();
            this.p = null;
            this.a = null;
            this.n = null;
            this.o = null;
            this.g = null;
            this.b = null;
            this.ai = false;
            this.fd = null;
            this.fc = null;
            this.fb = null;
            this.fa = null;
            this.h = new SeriesViewerComponentsFromView();
            this.j = null;
            this.w = null;
            this.z = null;
            this.y = null;
            this.x = null;
            this.an = false;
            this.ao = false;
            this.bi = null;
            this.k = null;
            this.a9 = 0;
            this.a8 = 0;
            this.a7 = 0;
            this.e6 = Rect.empty;
            this.aj = false;
            this.a1 = 0;
            this.az = 0;
            this.a0 = 0;
            this.ay = 0;
            this.ak = true;
            this.aa = false;
            this.a2 = NaN;
            this.e7 = Rect.empty;
            this.ab = false;
            this.af = false;
            this.ae = false;
            this.av = false;
            this.eq = null;
            this.ep = null;
            this.ad = false;
            this.ac = false;
            this.ag = true;
            this.ax = null;
            this.ar = false;
            this.bg = 0;
            this.ah = true;
            this.a8 = 0;
            this.a7 = 0;
            this.p = a;
            this.p.o8 = { $type: Point_$type, x: NaN, y: NaN };
            this.p.bw = 1;
            this.j = new SeriesViewerViewManager(this);
            this.fa = ((() => {
                let $ret = new Line();
                $ret.visibility = 1;
                return $ret;
            })());
            this.fb = ((() => {
                let $ret = new Line();
                $ret.visibility = 1;
                return $ret;
            })());
        }
        l() {
            return new DOMExecutionContext(this.j.ae);
        }
        cl() {
            this.j.a9();
        }
        c1() {
            this.p.dk = true;
            this.p.p0 = 1;
            this.p.dk = false;
            this.fc = new Path();
            this.fd = new Rectangle();
            this.fd._visibility = 1;
            this.d3();
            this.g = new SeriesCollection();
            this.b = new AxisCollection();
            this.a = new CanvasRenderScheduler();
            this.a.l(this);
            this.a.e.add(this.p.am);
            if (this.p.p1 == 0) {
                this.ck();
            }
            let a = this.p;
            a.windowRectChanged = delegateCombine(a.windowRectChanged, runOn(this, this.cq));
            let b = this.p;
            b.gridAreaRectChanged = delegateCombine(b.gridAreaRectChanged, runOn(this, this.cp));
            this.o = new OverviewPlusDetailViewportHost(this);
            this.dl();
        }
        e() {
            for (let a = 0; a < this.g.count; a++) {
                if (this.g._inner[a].a4.a$c) {
                    return this.g._inner[a];
                }
            }
            return null;
        }
        ck() {
            if (this.n == null) {
                this.n = this.j.g();
            }
            this.p.b8.provideContext(this.z);
            this.p.b8.provideContainer(this.bi);
            this.p.b8.provideEventSource(this.k);
            this.n.world = new Rect(0, 0, 0, 1, 1);
            this.n.window = this.p.pw;
            this.n.surfaceViewer = TypeRegistrar.create("SeriesViewerSurfaceViewer", this.p, this);
            this.n.viewScheduler = this.a;
            this.ej();
            let a = this.n;
            a.windowChanging = delegateCombine(a.windowChanging, runOn(this, this.dk));
            let b = this.n;
            b.windowChanged = delegateCombine(b.windowChanged, runOn(this, this.dj));
        }
        dk(a, b) {
            let c = b.newValue;
            if (this.n != null) {
                c = this.n.changeRect(b.oldValue, b.newValue, this.p.d4(), this.p.d5(), this.n.world);
            }
            if (c.isEmpty) {
                this.n.window = b.oldValue;
            }
            else if (!c.equals1(b.newValue)) {
                this.n.window = c;
            }
            if (this.p.bw == 1) {
                let d = this.p.pv.width / this.p.pv.height;
                c = new Rect(0, c.left / d, c.top, c.width / d, c.height);
                this.p.pw = c;
            }
        }
        dj(a, b) {
            let c = b.newValue;
            if (this.n != null) {
                c = this.n.changeRect(b.oldValue, b.newValue, this.p.d4(), this.p.d5(), this.n.world);
            }
            if (c.isEmpty) {
                c = b.oldValue;
            }
            else if (!c.equals1(b.newValue)) {
                this.n.window = c;
            }
            let d = this.p.pv.width / this.p.pv.height;
            c = new Rect(0, c.left / d, c.top, c.width / d, c.height);
            this.p.pw = c;
        }
        ej() {
            if (this.n == null) {
                return;
            }
            if (this.p.p1 != 0) {
                return;
            }
            let a = 1;
            if (this.p.pv.isEmpty == false) {
                a = this.p.pv.width / this.p.pv.height;
            }
            let b = this.n.world;
            let c = new Rect(0, 0, 0, a, 1);
            this.n.world = c;
            if (b.width != c.width || b.height != c.height || b.x != c.x || b.y != c.y) {
                this.n.surfaceViewer.isDirty = true;
            }
            this.n.window = new Rect(0, this.p.pw.left * a, this.p.pw.top, this.p.pw.width * a, this.p.pw.height);
        }
        cq(a, b) {
            this.ej();
        }
        cp(a, b) {
            this.ej();
        }
        b8(a, b, c) {
            let d = true;
            for (let e of fromEnum(this.p.series)) {
                if (d && e.et) {
                    d = false;
                    c.a.k(0, 0, a, b);
                }
                e.l2(new Rect(0, 0, 0, a, b), c);
            }
        }
        d2() {
            this.j.bl();
        }
        ca() {
        }
        d4() {
            this.j.bm();
        }
        ch() {
            for (let a = 0; a < this.p.series.count; a++) {
                this.p.series._inner[a].bx.ap();
            }
        }
        b9() {
        }
        cb() {
        }
        dv(a) {
            let b = this.g.indexOf(a);
            if (b >= 0) {
                this.g.removeAt(b);
            }
            if (a.isStacked) {
                a.ku((c) => {
                    c.ca = null;
                    b = this.g.indexOf(c);
                    if (b >= 0) {
                        this.g.removeAt(b);
                    }
                    return true;
                });
            }
            this.p.lw();
            a.ln(null, null);
            this.c9();
        }
        c9() {
            if (this.p.destroyed) {
                return;
            }
            if (this.g.count == 0) {
                if (this.y != null && Rect.l_op_Inequality(this.p.pv, null) && !this.p.pv.isEmpty) {
                    this.eo();
                }
            }
            this.p.al.o(this.y, this.x);
        }
        eo() {
            if (this.y != null && Rect.l_op_Inequality(this.p.pv, null) && !this.p.pv.isEmpty) {
                if (this.p.fh != 1) {
                    this.y.z();
                    this.y.aa(this.p.fh, this.p.fh);
                }
                this.y.k(this.p.pv.left, this.p.pv.top, this.p.pv.width, this.p.pv.height);
                if (this.p.fh != 1) {
                    this.y.y();
                }
            }
        }
        aq(a) {
            a.li(a.bx.bu, this.e6);
            return this.g.contains(a);
        }
        get au() {
            return this.ai;
        }
        set au(a) {
            this.ai = a;
        }
        bp(a) {
            if (!this.g.contains(a)) {
                this.g.add(a);
                if (a.isStacked) {
                    a.ku((b) => {
                        this.g.add(b);
                        return true;
                    });
                }
                this.p.lw();
            }
            a.ln(this.y, this.x);
            this.p.jq();
        }
        dq(a) {
            this.x = a;
            for (let b = 0; b < this.g.count; b++) {
                this.g._inner[b].ln(this.y, this.x);
            }
            for (let c = 0; c < this.b.count; c++) {
                this.b._inner[c].hf(this.y, this.x);
            }
        }
        bx() {
        }
        bt() {
            this.cc();
            this.ch();
        }
        cc() {
            this.fd._visibility = 1;
            this.cn();
        }
        b7() {
        }
        dn() {
        }
        d5() {
            this.fd._visibility = 0;
            this.cn();
        }
        ed(a) {
            this.fd.o = a.top + this.p.pv.top;
            this.fd.n = a.left + this.p.pv.left;
            this.fd.width = a.width;
            this.fd.height = a.height;
            this.c8();
            this.fd._fill = null;
            this.fd.ac = 0.5;
            this.cn();
        }
        bw() {
        }
        dc() {
        }
        el(a, b, c, d) {
            this.fb.ak = a;
            this.fb.am = b;
            this.fb.al = c;
            this.fb.an = d;
            this.cn();
        }
        ea() {
            this.fb._visibility = 0;
            this.cn();
        }
        ci() {
            if (this.fb._visibility == 0) {
                this.fb._visibility = 1;
                this.cn();
            }
        }
        ee(a, b, c, d) {
            this.fa.ak = a;
            this.fa.am = b;
            this.fa.al = c;
            this.fa.an = d;
            this.cn();
        }
        d6() {
            this.fa._visibility = 0;
            this.cn();
        }
        cd() {
            if (this.fa._visibility == 0) {
                this.fa._visibility = 1;
                this.cn();
            }
        }
        cg() {
            this.fc._visibility = 1;
            this.cn();
        }
        e3(a) {
            let b = new PathFigureCollection();
            let c = new PathFigure();
            c._isClosed = true;
            c._startPoint = { $type: Point_$type, x: a.left, y: a.top };
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.top }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.top }));
            b.add(c);
            return b;
        }
        e4(a) {
            let b = new PathFigureCollection();
            let c = new PathFigure();
            c._isClosed = true;
            c._startPoint = { $type: Point_$type, x: a.left, y: a.top };
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.top }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.top }));
            b.add(c);
            return b;
        }
        ek(a, b) {
            b.intersect(a);
            let c = new PathGeometry();
            c.c = this.e4(a);
            let d = new PathGeometry();
            d.c = this.e3(b);
            let e = new GeometryGroup();
            e.d.add(c);
            e.d.add(d);
            this.fc.ak = e;
            this.c8();
            this.cn();
        }
        d9() {
            this.fc._visibility = 0;
            this.cn();
        }
        em(a) {
        }
        dt(a) {
            let b = this.b.indexOf(a);
            this.b.removeAt(b);
            a.hf(null, null);
            this.d0();
            this.p.l2(a.name, true);
        }
        du(a) {
        }
        bo(a) {
            if (!this.b.contains(a)) {
                this.b.add(a);
            }
            a.hf(this.y, this.x);
            this.d0();
        }
        bl(a) {
        }
        i() {
            this.h.a = this.n;
            return this.h;
        }
        static aw(a) {
            let b = a.ca.series;
            let c = new List$1(Series.$, 0);
            for (let d = 0; d < b.count; d++) {
                c.add(b._inner[d]);
                if (b._inner[d].isStacked) {
                    b._inner[d].ku((e) => {
                        c.add(e);
                        return true;
                    });
                }
            }
            return c;
        }
        dz() {
            this.p.pw = new Rect(0, 0, 0, 1, 1);
        }
        cx(a) {
            if (a == this.bi) {
                return;
            }
            if (a == null) {
                if (this.k != null) {
                    this.k.ar();
                }
                this.j.bf(null);
                this.w = null;
                this.z = null;
                this.y = null;
                this.x = null;
                this.k = null;
                if (this.p.b8 != null) {
                    this.p.b8.provideContext(null);
                    this.p.b8.provideContainer(null);
                    this.p.b8.provideEventSource(null);
                }
                return;
            }
            this.bi = a;
            if (this.au) {
                this.a.e.add(this.p.al);
            }
            this.j.bf(a);
            this.w = this.j.t;
            this.z = this.j.w;
            this.y = this.j.v;
            this.x = this.j.u;
            this.an = false;
            try {
                this.an = (window.navigator.msPointerEnabled && window.MSGesture !== undefined);
            }
            catch (b) {
            }
            this.ao = false;
            try {
                this.ao = (window.PointerEvent !== undefined);
            }
            catch (c) {
            }
            if (this.an || this.ao) {
                this.av = true;
            }
            this.k = this.j.f;
            if (this.k != null) {
                this.k.bg = this.p.pv;
                this.k.al = runOn(this, this.as);
                let d = this.k;
                d.onContactCompleted = delegateCombine(d.onContactCompleted, (d, e) => this.cu(d, e, this.k.aj));
                let e = this.k;
                e.onContactMoved = delegateCombine(e.onContactMoved, runOn(this, this.cv));
                let f = this.k;
                f.onContactStarted = delegateCombine(f.onContactStarted, runOn(this, this.cw));
                let g = this.k;
                g.onDragCompleted = delegateCombine(g.onDragCompleted, runOn(this.p, this.p.kf));
                let h = this.k;
                h.onFlingStarted = delegateCombine(h.onFlingStarted, runOn(this, this.al));
                let i = this.k;
                i.onDragDelta = delegateCombine(i.onDragDelta, (i) => this.p.kg(i));
                let j = this.k;
                j.onDragStarted = delegateCombine(j.onDragStarted, (j) => this.p.kh(j, true));
                let k = this.k;
                k.onKeyDown = delegateCombine(k.onKeyDown, runOn(this.p, this.p.ec));
                let l = this.k;
                l.onMouseDown = delegateCombine(l.onMouseDown, runOn(this, this.c3));
                let m = this.k;
                m.onMouseLeave = delegateCombine(m.onMouseLeave, runOn(this, this.c4));
                let n = this.k;
                n.onMouseOver = delegateCombine(n.onMouseOver, runOn(this, this.c5));
                let o = this.k;
                o.onMouseUp = delegateCombine(o.onMouseUp, runOn(this, this.c6));
                let p = this.k;
                p.onMouseWheel = delegateCombine(p.onMouseWheel, runOn(this.p, this.p.ed));
                if (this.k.ak) {
                    let q = this.k;
                    q.onZoomDelta = delegateCombine(q.onZoomDelta, (q, r, s, t) => this.p.k8(q, r, s, t));
                    let r = this.k;
                    r.onZoomStarted = delegateCombine(r.onZoomStarted, (r, s, t, u) => this.p.lc(r, s, t, u));
                    let s = this.k;
                    s.onZoomCompleted = delegateCombine(s.onZoomCompleted, (s, t, u, v) => this.p.k7(s, t, u, v));
                }
                else {
                    let t = this.k;
                    t.onPinchDelta = delegateCombine(t.onPinchDelta, (t, u) => this.p.kr(u));
                    let u = this.k;
                    u.onPinchStarted = delegateCombine(u.onPinchStarted, (u, v) => this.p.ks(u));
                    let v = this.k;
                    v.onGestureCompleted = delegateCombine(v.onGestureCompleted, (v, w) => this.p.ki(v));
                }
                let w = this.k;
                w.onDoubleTap = delegateCombine(w.onDoubleTap, (w) => this.p.ke(w));
                let x = this.k;
                x.onHold = delegateCombine(x.onHold, runOn(this, this.c0));
            }
            if (this.p.b8 != null) {
                this.p.b8.provideContext(this.z);
                this.p.b8.provideContainer(a);
                this.p.b8.provideEventSource(this.k);
            }
            for (let y of fromEnum(this.b)) {
                y.a4.aw();
                this.bo(y);
            }
            for (let z of fromEnum(this.g)) {
                this.bp(z);
            }
        }
        al(a, b, c) {
            if (this.p.db) {
                return false;
            }
            return true;
        }
        cv(a, b) {
            this.p.j7(a, b);
        }
        cw(a, b) {
            this.p.a5.f$s(this.p, a, b);
        }
        c0(a) {
            this.p.kt(a);
        }
        cu(a, b, c) {
            this.p.j6(a, b, c);
        }
        dr(a) {
        }
        get_ap() {
            return false;
        }
        get ap() {
            return this.get_ap();
        }
        ec() {
            this.a9 = FontUtil.getCurrentFontHeight(this.j.ae, this.p.getFontInfo());
        }
        f(a, b, c, d) {
            return {
                ret: ((() => { let e = this.p.a5.f$c(this.p, this.g, this.x, a, b, c, d); c = e.p5; return e.ret; })()),
                p2: c
            };
        }
        bd() {
            return this.a8;
        }
        bc() {
            return this.a7;
        }
        cr() {
            this.j.bc();
        }
        cy(a, b) {
            let c = this.a8;
            let d = this.a7;
            if (this.a8 != a) {
                this.aj = true;
            }
            this.a8 = a;
            if (this.a7 != b) {
                this.aj = true;
            }
            this.a7 = b;
            if (this.aj) {
                let e = new Size(1, c, d);
                let f = new Size(1, a, b);
                this.p.k4(e, f);
            }
            this.dg();
            this.d0();
            this.p.al.o(this.y, this.x);
        }
        d0() {
            this.ag = true;
            this.p.ap.z();
        }
        b2() {
            if (this.a8 == 0 || this.a7 == 0) {
                return;
            }
            this.ag = false;
            this.aa = false;
            if (this.ak) {
                this.df();
                this.db();
                this.ak = false;
                this.cn();
            }
            let a = this.a8;
            let b = this.a7;
            let c = this.p.fq;
            let d = this.p.ft;
            let e = this.p.fm;
            let f = this.p.f2;
            let g = this.p.fk;
            let h = this.p.fl;
            if (isNaN_(g)) {
                g = this.a9 / 2;
            }
            if (isNaN_(h)) {
                h = 0;
            }
            let i = this.p.eh();
            let j = new List$1(AxisLabelPanelBase.$, 0);
            for (let k of fromEnum(this.b)) {
                if (k.av != null) {
                    j.add(k.av);
                    k.av.bs = () => this.aj;
                }
            }
            if (i) {
                let l = false;
                let m = false;
                let n = false;
                let o = false;
                for (let p of fromEnum(j)) {
                    if (LabelPanelArranger.b(p) == 2 && (p.ac.ay == null || p.ac.ay.visibility == 0)) {
                        l = true;
                    }
                    if (LabelPanelArranger.b(p) == 3 && (p.ac.ay == null || p.ac.ay.visibility == 0)) {
                        m = true;
                    }
                    if (LabelPanelArranger.b(p) == 0 && (p.ac.ay == null || p.ac.ay.visibility == 0)) {
                        n = true;
                    }
                    if (LabelPanelArranger.b(p) == 1 && (p.ac.ay == null || p.ac.ay.visibility == 0)) {
                        o = true;
                    }
                    if (p.ac != null && p.ac.ay != null) {
                        p.ac.ay.c = p.ac.ay.location;
                    }
                }
                if (l || m) {
                    if (!n && isNaN_(f)) {
                        f = g;
                    }
                    if (!o && isNaN_(e)) {
                        e = g;
                    }
                }
                if (o || n) {
                    if (!l && isNaN_(c)) {
                        c = h;
                    }
                    if (!m && isNaN_(d)) {
                        d = h;
                    }
                }
            }
            if (isNaN_(f)) {
                f = 0;
            }
            if (isNaN_(c)) {
                c = 0;
            }
            if (isNaN_(d)) {
                d = 0;
            }
            if (isNaN_(e)) {
                e = 0;
            }
            let q = this.bf();
            f += q;
            let r = this.be();
            f += r;
            let s = new Rect(0, c, f, a - (c + d), b - (f + e));
            s = LabelPanelArranger.e(j, s);
            let t = new Size(1, Math.max(0, a - (c + d)), Math.max(0, b - (f + e)));
            if (this.p.di() && s.width != s.height) {
                if (s.width < s.height) {
                    f += (s.height - s.width) / 2;
                    s.top = s.top + ((s.height - s.width) / 2);
                    t.height = t.height - (s.height - s.width);
                    s.height = s.width;
                }
                else {
                    c += (s.width - s.height) / 2;
                    s.left = s.left + ((s.width - s.height) / 2);
                    t.width = t.width - (s.width - s.height);
                    s.width = s.height;
                }
            }
            this.a1 = f - (q + r);
            this.az = c;
            this.a0 = d;
            this.ay = e;
            this.e6 = s;
            let u = ((() => {
                let $ret = new LabelPanelsArrangeState();
                $ret.f = c;
                $ret.c = c;
                $ret.a = f + t.height;
                $ret.b = f + t.height;
                $ret.g = c + t.width;
                $ret.d = c + t.width;
                $ret.h = f;
                $ret.e = f;
                return $ret;
            })());
            LabelPanelArranger.d(j, u, this.e6, (v, w) => {
                if (!v.cu.equals1(w)) {
                    if (v.ac != null) {
                        v.ac.cl = true;
                    }
                    v.cu = w;
                    v.ac.a4.ad();
                }
            });
            let v = false;
            if (this.aj) {
                this.aj = false;
                v = true;
            }
            this.p.lg(this.p.pv, this.e6);
            for (let w of fromEnum(this.b)) {
                if (Rect.l_op_Equality(w.js, null) || w.js.isEmpty) {
                    this.aa = true;
                }
                if (w.js.equals1(this.e6) && !this.j.y()) {
                    continue;
                }
                w.g7(w.js, this.e6);
            }
            for (let x of fromEnum(this.g)) {
                if (Rect.l_op_Equality(x.bx.bu, null) || x.bx.bu.isEmpty) {
                    this.aa = true;
                }
                if (x.bx.bu.equals1(this.e6) && !this.j.y()) {
                    continue;
                }
                x.li(x.bx.bu, this.e6);
            }
            this.eh();
            this.ds(this.e6);
            this.j.bb(false);
        }
        eh() {
            if (this.p.b8 != null && !this.e6.isEmpty) {
                let a = this.p.b8;
                let b = (this.p.c7) ? this.e6.width : Number.POSITIVE_INFINITY;
                let c = (this.p.c7) ? this.e6.height : Number.POSITIVE_INFINITY;
                let d = a.getDesiredSize(new Size(1, b, c));
                this.p.b8.arrange(new Rect(0, this.e6.right - d.width, this.e6.bottom - d.height, d.width, d.height));
                this.ej();
            }
        }
        v() {
            let a = this.p.getFontInfo();
            let b = this.s();
            if (this.p.cl() != null) {
                a = this.p.cl();
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        u() {
            let a = this.p.getFontInfo();
            let b = this.r();
            if (this.p.ck() != null) {
                a = this.p.ck();
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        e2() {
            let a = this.p.getFontBrush();
            let b = this.ez();
            if (this.p.o6 != null) {
                a = this.p.o6;
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        e1() {
            let a = this.p.getFontBrush();
            let b = this.ey();
            if (this.p.o5 != null) {
                a = this.p.o5;
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        bf() {
            if (this.p.ie == null || !(typeCast(XamDataChart.$, this.p) !== null)) {
                return 0;
            }
            let a = this.v();
            let b = 0;
            b = FontUtil.getCurrentFontHeight(this.j.ae, a);
            let c = this.fh();
            b += c.e + c.b;
            return b;
        }
        be() {
            if (this.p.h2 == null || !(typeCast(XamDataChart.$, this.p) !== null)) {
                return 0;
            }
            if (!isNaN_(this.a2)) {
                return this.a2;
            }
            let a = this.u();
            this.a2 = FontUtil.getCurrentFontHeight(this.j.ae, a);
            let b = this.fg();
            this.a2 += b.e + b.b;
            return this.a2;
        }
        fh() {
            let a = this.j.cd();
            let b = isNaN_(this.p.f1) ? a.e : this.p.f1;
            let c = isNaN_(this.p.fz) ? a.c : this.p.fz;
            let d = isNaN_(this.p.f0) ? a.d : this.p.f0;
            let e = isNaN_(this.p.fy) ? a.b : this.p.fy;
            return new Thickness(1, c, b, d, e);
        }
        fg() {
            let a = this.j.cc();
            let b = isNaN_(this.p.fx) ? a.e : this.p.fx;
            let c = isNaN_(this.p.fv) ? a.c : this.p.fv;
            let d = isNaN_(this.p.fw) ? a.d : this.p.fw;
            let e = isNaN_(this.p.fu) ? a.b : this.p.fu;
            return new Thickness(1, c, b, d, e);
        }
        ds(a) {
        }
        cn() {
            if (!this.af) {
                if (this.z != null) {
                    this.af = true;
                    this.a.o(this.z, null);
                }
            }
        }
        dx() {
            if (this.z == null) {
                return;
            }
            if (this.z.d) {
                if (this.p.fh != 1) {
                    this.z.z();
                    this.z.aa(this.p.fh, this.p.fh);
                }
                if (!this.e7.isEmpty) {
                    if (!this.au) {
                        this.z.k(this.e7.left, this.e7.top, this.e7.width, this.e7.height);
                    }
                }
            }
            this.dy();
            if (this.z.d) {
                if (this.p.fh != 1) {
                    this.z.y();
                }
            }
        }
        isValid() {
            return true;
        }
        preRender() {
            this.j.a5(this.a8, this.a7);
            this.dp();
        }
        dp() {
        }
        dy() {
            if (this.z.d) {
                this.e7 = new Rect(0, 0, 0, this.a8, this.a7);
                if (this.ax != null && this.ax.count > 0) {
                    this.cf();
                    this.z.z();
                    this.z.ae(this.p.pv);
                    if (!this.au) {
                        this.z.k(this.p.pv.left, this.p.pv.top, this.p.pv.width, this.p.pv.height);
                    }
                }
                this.z.r(this.fa);
                this.z.r(this.fb);
                this.z.s(this.fc);
                this.z.v(this.fd);
                this.z.ac(this.v());
                if (this.eq != null) {
                    this.eq.am = this.e2();
                    this.z.w(this.eq);
                }
                this.z.ac(this.u());
                if (this.ep != null) {
                    this.ep.am = this.e1();
                    this.z.w(this.ep);
                }
                if (this.ax != null && this.ax.count > 0) {
                    this.j.bk(this.ax);
                    this.z.y();
                }
                if (this.ar) {
                    this.d8();
                    this.ar = false;
                    this.ax.clear();
                    this.p.a5.f$h(this.p);
                    this.cn();
                }
            }
        }
        cz() {
            this.j.bg();
        }
        ct() {
            this.j.be();
        }
        e8() {
            return new Rect(0, 0, 0, this.a8, this.a7);
        }
        e5() {
            return this.j.b7();
        }
        d3() {
            this.p.mu = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.d;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.m3 = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.m;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.m0 = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.j;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.m1 = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.k;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.mv = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.e;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.my = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.h;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.mw = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.f;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.m2 = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.l;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.mz = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.i;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.mx = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.g;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
        }
        eb() {
            this.j.bo();
            this.d1();
            let a = this.a9;
            this.ec();
            if (a != this.a9) {
                this.p.jq();
            }
        }
        dl() {
            if (this.p.p1 == 0) {
                this.ck();
                this.p.jm();
            }
            if (this.p.b8 != null) {
                let a = this.p.p1;
                this.p.b8.visibility = a;
                this.p.b8.doRefresh(false);
            }
        }
        as(a) {
            return this.p.a5.f$f(this.p, a);
        }
        c5(a, b, c) {
            this.p.a5.f$v(this.p, this.g, this.x, a, b, c);
            this.p.i7(a, this.p.b6 != 0 || this.p.d8);
        }
        c4(a) {
            this.p.a5.f$u(this.p, a);
        }
        c3(a) {
            this.p.a5.f$t(this.p, this.k, a);
        }
        c6(a) {
            this.p.a5.f$w(this.p, this.k, a);
        }
        d1() {
        }
        get ew() {
            return this.k.bd;
        }
        en(a) {
            if (this.k != null) {
                this.k.bg = this.p.pv;
            }
        }
        co(a) {
            this.p.a5.f$y(this.p, a);
            this.p.c7 = a;
        }
        bk(a) {
            this.p.mh();
            this.j.bv(a);
            if (this.p.b8 != null) {
                this.p.b8.mobileMode = a;
            }
            this.ei();
        }
        ei() {
            this.p.mo();
        }
        get isDirty() {
            return this.af;
        }
        set isDirty(a) {
            this.af = a;
        }
        undirty(a) {
            this.af = false;
            this.dx();
        }
        get index() {
            return 10;
        }
        postRender() {
        }
        b6() {
            this.d0();
        }
        ce() {
            this.j.a8();
        }
        d7() {
            this.j.bn();
        }
        bv(a) {
            this.j.ax();
        }
        bm(a) {
            this.j.at(a);
        }
        ef(a) {
            this.j.bt(a);
        }
        eg(a) {
            this.j.bu(a);
        }
        bn(a) {
            this.j.au(a);
        }
        dw(a) {
            this.j.bj(a);
        }
        c7(a) {
            this.p.al.o(this.y, this.z);
        }
        bu(a) {
        }
        m(a) {
            if (this.p.c7) {
                return 2;
            }
            else {
                return 1;
            }
        }
        c2() {
            if (this.k != null) {
                this.k.ac = this.p.dz;
            }
            if (this.n != null) {
                this.n.isSurfaceInteractionDisabled = this.p.dz;
            }
        }
        bb(a, b) {
            if (a == null || this.z == null) {
                return 0;
            }
            this.z.ac(b);
            return this.z.e(a);
        }
        ba(a, b) {
            if (a == null) {
                return 0;
            }
            let c = 0;
            c = FontUtil.getCurrentFontHeight(this.j.ae, b);
            return c;
        }
        dg() {
            this.ak = true;
            this.d0();
            this.cn();
        }
        er(a, b, c, d) {
            if (a == null) {
                return null;
            }
            let e = ((() => {
                let $ret = new TextBlock();
                $ret.ak = a;
                $ret.o = b.e;
                return $ret;
            })());
            let f = this.bb(e, c);
            e.o = b.e;
            let g = this.ba(a, c);
            e.m = f;
            e.l = g;
            switch (d) {
                case 0:
                    e.n = b.c;
                    break;
                case 2:
                    e.n = Math.max((this.a8 - b.d) - f, b.c);
                    break;
                case 1:
                case 3:
                default:
                    let h = (this.a8 / 2) - (f / 2);
                    h += b.c;
                    h -= b.d;
                    e.n = h;
                    break;
            }
            return e;
        }
        df() {
            this.eq = typeCast(XamDataChart.$, this.p) !== null ? this.er(this.p.ie, this.fh(), this.v(), this.ev()) : null;
        }
        db() {
            this.a2 = NaN;
            this.ep = typeCast(XamDataChart.$, this.p) !== null ? this.er(this.p.h2, this.fg(), this.u(), this.eu()) : null;
            if (this.ep != null) {
                this.ep.o += this.bf();
            }
        }
        c(a) {
            let b = this.j.c();
            if (b == 0) {
                let c = LabelPanelArranger.b(a.av);
                if (a.ai == null) {
                    if (c == 4) {
                        return 4;
                    }
                    if (c == 5) {
                        return 3;
                    }
                }
                else {
                    if (c == 4) {
                        return 3;
                    }
                    if (c == 5) {
                        return 4;
                    }
                }
                if (c == 0) {
                    return 3;
                }
                return 4;
            }
            return b;
        }
        d(a) {
            let b = this.j.d();
            if (b == 0) {
                let c = LabelPanelArranger.b(a.av);
                if (a.ai == null) {
                    if (c == 7) {
                        return 1;
                    }
                    if (c == 6) {
                        return 2;
                    }
                }
                else {
                    if (c == 7) {
                        return 2;
                    }
                    if (c == 6) {
                        return 1;
                    }
                }
                if (c == 3) {
                    return 2;
                }
                return 1;
            }
            return b;
        }
        dh() {
            if (!isNaN_(this.p.fg)) {
                if (!isNaN_(DeviceUtils.a(this.p.fr))) {
                    this.p.fh = DeviceUtils.a(this.p.fr);
                }
                else {
                    this.cl();
                }
            }
            if (!this.p.dn) {
                this.j.a4();
            }
        }
        di() {
            if (!isNaN_(DeviceUtils.a(this.p.fg))) {
                this.p.fh = DeviceUtils.a(this.p.fg);
            }
            if (!this.p.dn) {
                this.j.a3();
            }
        }
        t() {
            return this.j.r();
        }
        e0() {
            return this.j.b6();
        }
        q() {
            return this.j.q();
        }
        ex() {
            return this.j.b5();
        }
        s() {
            return this.j.p();
        }
        r() {
            return this.j.o();
        }
        ez() {
            return this.j.b4();
        }
        ey() {
            return this.j.b3();
        }
        get a4() {
            return this.az;
        }
        get a5() {
            return this.a0;
        }
        get a6() {
            return this.a1;
        }
        get a3() {
            return this.ay;
        }
        get et() {
            return this.eq;
        }
        get es() {
            return this.ep;
        }
        e9() {
            return new Rect(0, 0, 0, this.a8, this.a7);
        }
        ff() {
            return this.j.cf();
        }
        fe() {
            return this.j.ce();
        }
        da(a, b) {
            this.ac = true;
        }
        de(a, b) {
            this.ad = true;
        }
        ev() {
            if (this.ad) {
                return this.p.om;
            }
            else {
                let a = 1;
                switch (this.j.as()) {
                    case "left":
                        a = 0;
                        break;
                    case "right":
                        a = 2;
                        break;
                }
                return a;
            }
        }
        eu() {
            if (this.ac) {
                return this.p.ol;
            }
            else {
                let a = 1;
                switch (this.j.ar()) {
                    case "left":
                        a = 0;
                        break;
                    case "right":
                        a = 2;
                        break;
                }
                return a;
            }
        }
        bq() {
            if (this.ag) {
                this.b2();
                if (this.aa) {
                    this.p.ap.y();
                }
                if (this.ag) {
                    this.b2();
                }
            }
        }
        am() {
            if (this.p.es) {
                return false;
            }
            if ((dateNow().getTime() - this.p.ev.getTime()) < 300) {
                return true;
            }
            return false;
        }
        b5() {
            this.j.a5(this.a8, this.a7);
        }
        cm() {
            this.j.ba(this.p.dy);
        }
        at(a) {
            let b = this.p.pg;
            let c = b.top > 0;
            let d = b.left > 0;
            let e = b.right < 1;
            let f = b.bottom < 1;
            let g = a.y < 0;
            let h = a.y > 0;
            let i = a.x < 0;
            let j = a.x > 0;
            if (c && g) {
                return true;
            }
            if (d && i) {
                return true;
            }
            if (f && h) {
                return true;
            }
            if (j && e) {
                return true;
            }
            return false;
        }
        dm() {
            this.j.bi();
            this.p.al.o(this.y, this.x);
            this.p.am.o(this.y, null);
            this.p.ak.o(this.y, this.x);
            this.a.o(this.z, null);
        }
        b3(a, b, c) {
            this.ar = false;
            if (this.ax == null) {
                this.ax = new List$1(ITileZoomTile_$type, 0);
            }
            for (let d = 0; d < this.ax.count; d++) {
                while (d < this.ax.count && !a.containsKey(this.ax._inner[d].content)) {
                    this.ax.removeAt(d);
                }
            }
            for (let e = 0; e < b.count; e++) {
                this.ax.add(b._inner[e]);
            }
            this.cn();
        }
        bh(a, b, c) {
            return this.j.an(a, b, c);
        }
        b0() {
            this.j.a1();
        }
        b1(a) {
            this.j.a2(a);
        }
        cj() {
            if (this.ax == null) {
                return;
            }
            this.ar = true;
            this.cn();
        }
        by() {
            this.j.az();
        }
        br() {
            this.j.av();
        }
        bz(a) {
            this.j.a0(a);
            this.p.kc();
        }
        bs() {
            this.j.aw();
            this.p.ka();
        }
        cf() {
            if (this.ah) {
                this.ah = false;
                this.y.k(this.p.pv.left, this.p.pv.top, this.p.pv.width, this.p.pv.height);
                this.p.al.c = true;
            }
        }
        d8() {
            if (!this.ah) {
                this.ah = true;
                this.p.al.c = false;
                this.p.al.o(this.y, this.x);
            }
        }
        dd() {
        }
        cs() {
            this.j.bd();
        }
        c8() {
            this.fc._fill = this.p.o3 == null ? this.j.b2() : this.p.o3;
            this.fc._opacity = isNaN_(this.p.fs) ? 0.1 : this.p.fs;
            this.fd._stroke = this.p.o4 == null ? this.j.b2() : this.p.o4;
        }
        b4(a) {
            if (this.j.ae == null) {
                this.p.provideContainer(a);
            }
        }
        bj(a, b) {
            return this.j.ao(a, b);
        }
    }
    SeriesViewerView.$t = /*@__PURE__*/ markType(SeriesViewerView, 'SeriesViewerView', Base.$, [ISchedulableRender_$type]);
    return SeriesViewerView;
})();
/**
 * @hidden
 */
export let OverviewPlusDetailViewportHost = /*@__PURE__*/ (() => {
    class OverviewPlusDetailViewportHost extends Base {
        constructor(a) {
            super();
            this.a = null;
            if (a == null) {
                throw new ArgumentNullException(0, "view");
            }
            this.a = a;
        }
        getViewInfo(a, b) {
            a = new Rect(0, 0, 0, this.a.n.worldRectViewport.width, this.a.n.worldRectViewport.height);
            b = SeriesViewer.ps;
            return {
                p0: a,
                p1: b
            };
        }
        getEffectiveViewport() {
            if (!this.a.p.dx) {
                if (this.a.p.pk.isEmpty) {
                    return this.a.p.pk;
                }
                return this.a.p.pp(this.a.n.previewViewportdRect, this.a.p.pv, this.a.p.pk);
            }
            return Rect.empty;
        }
    }
    OverviewPlusDetailViewportHost.$t = /*@__PURE__*/ markType(OverviewPlusDetailViewportHost, 'OverviewPlusDetailViewportHost', Base.$, [IProvidesViewport_$type]);
    return OverviewPlusDetailViewportHost;
})();
/**
 * @hidden
 */
export let SeriesViewerViewManager = /*@__PURE__*/ (() => {
    class SeriesViewerViewManager extends Base {
        constructor(a) {
            super();
            this.ae = null;
            this.af = null;
            this.aj = null;
            this.ai = null;
            this.ag = null;
            this.ak = null;
            this.t = null;
            this.w = null;
            this.v = null;
            this.u = null;
            this.x = null;
            this.f = null;
            this.j = null;
            this.ah = null;
            this.ab = 0;
            this.aa = 0;
            this.ac = 1;
            this.ad = 0;
            this.l = null;
            this.b9 = new Thickness(0, 0);
            this.aq = null;
            this.ap = stringEmpty();
            this.b8 = new Thickness(0, 0);
            this.bz = null;
            this.by = null;
            this.k = null;
            this.a = 0;
            this.b = 0;
            this.n = null;
            this.b1 = null;
            this.m = null;
            this.b0 = null;
            this.ca = new Thickness(0, 0);
            this.cb = new Thickness(0, 0);
            this.h = null;
            this.z = new Dictionary$2(String_$type, Tuple$2.$.specialize(DomWrapper_$type, RenderingContext.$), 0);
            this.al = -1;
            this.am = -1;
            this.s = null;
            this.j = a;
        }
        bi() {
        }
        bf(a) {
            if (a == null) {
                if (this.f != null) {
                    this.f.ar();
                }
                this.ae = null;
                if (this.af != null) {
                    this.af.remove();
                }
                this.af = null;
                if (this.aj != null) {
                    this.aj.remove();
                }
                this.aj = null;
                if (this.ai != null) {
                    this.ai.remove();
                }
                this.ai = null;
                if (this.ag != null) {
                    this.ag.remove();
                }
                this.ag = null;
                if (this.ak != null) {
                    this.ak.remove();
                }
                this.ak = null;
                this.t = null;
                this.w = null;
                this.v = null;
                this.u = null;
                if (this.ah != null) {
                    this.ah.remove();
                }
                this.ah = null;
                this.f = null;
                this.j.p.cg.u(null);
                this.j.p.al.j(null);
                this.j.p.am.j(null);
                this.j.p.ak.j(null);
                this.j.a.j(null);
                return;
            }
            this.ae = a;
            this.j.p.cg.u(this.ae);
            this.j.p.al.j(this.ae);
            this.j.p.am.j(this.ae);
            this.j.p.ak.j(this.ae);
            this.j.a.j(this.ae);
            this.j.p.ap.aa(this.ae);
            this.bh();
            this.ae.rootWrapper.setStyleProperty("position", "relative");
            this.af = this.ae.createElement("canvas");
            this.af.setStyleProperty("position", "absolute");
            this.af.setStyleProperty("top", "0px");
            this.af.setStyleProperty("left", "0px");
            this.aj = this.ae.createElement("canvas");
            this.aj.setStyleProperty("position", "absolute");
            this.aj.setStyleProperty("top", "0px");
            this.aj.setStyleProperty("left", "0px");
            this.ai = this.ae.createElement("canvas");
            this.ai.setStyleProperty("position", "absolute");
            this.ai.setStyleProperty("top", "0px");
            this.ai.setStyleProperty("left", "0px");
            this.ag = this.ae.createElement("canvas");
            this.ag.setStyleProperty("position", "absolute");
            this.ag.setStyleProperty("top", "0px");
            this.ag.setStyleProperty("left", "0px");
            this.ak = this.ae.createElement("canvas");
            this.ak.setStyleProperty("position", "absolute");
            this.ak.setStyleProperty("top", "0px");
            this.ak.setStyleProperty("left", "0px");
            this.ae.append(this.af);
            this.ae.append(this.ai);
            this.ae.append(this.aj);
            this.t = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.af));
            this.w = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.aj));
            this.v = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ai));
            if (this.j.p.as != 1) {
                this.u = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ag));
                this.s = this.u;
            }
            else {
                this.u = new RenderingContext(null, null);
            }
            this.x = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ak));
            this.j.dr(this.t);
            this.j.cy(this.ae.rootWrapper.width(), this.ae.rootWrapper.height());
            {
                if ((TypeRegistrar.isRegistered('CanvasGestureDOMEventProxy'))) {
                    let overlayCanvas_ = this.aj;
                    let container_ = this.ae;
                    this.f = (TypeRegistrar.create('CanvasGestureDOMEventProxy', overlayCanvas_, container_, false));
                }
                else {
                    this.f = null;
                }
                if (this.f != null) {
                    this.f.am = runOn(this.j, this.j.at);
                }
            }
            this.ah = this.ae.createElement("div");
            this.ah.hide();
            this.ah.setStyleProperty("position", "absolute");
            this.ah.setStyleProperty("z-index", "10000");
            this.ah.addClass(this.j.p.iq);
            this.ae.append(this.ah);
        }
        static bx(a, b) {
            b();
            return;
        }
        bh() {
            this.j.d1();
            this.j.ec();
            this.bo();
        }
        a9() {
            let a = this.j.p.fr;
            let b = this.j.p.fh;
            if (!isNaN_(a) && a != 0) {
                return;
            }
            if (window.devicePixelRatio != undefined && window.devicePixelRatio != b) {
                this.j.p.fh = window.devicePixelRatio;
            }
        }
        g() {
            if ((TypeRegistrar.isRegistered('XamOverviewPlusDetailPane'))) {
                let overlayCanvas_ = this.aj;
                let container_ = this.ae;
                return (TypeRegistrar.create('XamOverviewPlusDetailPane'));
            }
            return null;
        }
        bl() {
            this.aj.setStyleProperty("cursor", "default");
        }
        bm() {
            this.aj.setStyleProperty("cursor", "pointer");
        }
        b2() {
            return ((() => {
                let $ret = new Brush();
                $ret.fill = "#000000";
                return $ret;
            })());
        }
        ay(a, b, c) {
            this.ab = a;
            this.aa = b;
            this.ac = c;
            let d = a;
            let e = b;
            if (c != 1) {
                d = Math.round(a * c);
                e = Math.round(b * c);
            }
            if (this.af != null) {
                this.af.setAttribute("width", d.toString());
                this.af.setAttribute("height", e.toString());
                this.af.setStyleProperty("width", a.toString() + "px");
                this.af.setStyleProperty("height", b.toString() + "px");
            }
            if (this.aj != null) {
                this.aj.setAttribute("width", d.toString());
                this.aj.setAttribute("height", e.toString());
                this.aj.setStyleProperty("width", a.toString() + "px");
                this.aj.setStyleProperty("height", b.toString() + "px");
                this.aj.setAttribute("tabindex", "0");
                this.aj.setStyleProperty("outline", "0");
            }
            if (this.ai != null) {
                this.ai.setAttribute("width", d.toString());
                this.ai.setAttribute("height", e.toString());
                this.ai.setStyleProperty("width", a.toString() + "px");
                this.ai.setStyleProperty("height", b.toString() + "px");
            }
            if (this.ag != null) {
                this.ag.setAttribute("width", d.toString());
                this.ag.setAttribute("height", e.toString());
                this.ag.setStyleProperty("width", a.toString() + "px");
                this.ag.setStyleProperty("height", b.toString() + "px");
            }
            if (this.ak != null) {
                this.ak.setAttribute("width", d.toString());
                this.ak.setAttribute("height", e.toString());
                this.ak.setStyleProperty("width", a.toString() + "px");
                this.ak.setStyleProperty("height", b.toString() + "px");
            }
            this.j.p.al.n();
            this.j.p.am.n();
            this.j.p.ak.n();
        }
        b7() {
            if (this.f == null) {
                return { $type: Point_$type, x: 0, y: 0 };
            }
            let a = this.f.bf(this.ae.rootWrapper);
            return { $type: Point_$type, x: a.left, y: a.top };
        }
        y() {
            return false;
        }
        bb(a) {
        }
        a7(a, b, c, d, e) {
            let f = this.e();
            a = f.a;
            b = f.f;
            c = f.k;
            d = f.h;
            e = f.i;
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d,
                p4: e
            };
        }
        e() {
            let a = new DefaultPaletteInfo();
            a.a = new BrushCollection();
            a.f = new BrushCollection();
            a.b = new BrushCollection();
            a.c = new BrushCollection();
            let b = new List$1(String_$type, 0);
            b.add("background-image");
            this.ae.startCSSQuery();
            let c = this.ae.getCssDefaultValuesForClassCollection("ui-chart-fill-palette-", b.toArray());
            let d = c.length;
            let e = this.ae.getCssDefaultValuesForClassCollection("ui-chart-outline-palette-", b.toArray());
            let f = e.length;
            let g = this.ae.getCssDefaultValuesForClassCollection("ui-chart-marker-fill-palette-", b.toArray());
            let h = g.length;
            let i = this.ae.getCssDefaultValuesForClassCollection("ui-chart-marker-outline-palette-", b.toArray());
            let j = i.length;
            for (let k = 0; k < d; k++) {
                a.a.add(CssGradientUtil.brushFromGradientString(c[k][0]));
            }
            for (let l = 0; l < f; l++) {
                a.f.add(CssGradientUtil.brushFromGradientString(e[l][0]));
            }
            for (let m = 0; m < h; m++) {
                a.b.add(CssGradientUtil.brushFromGradientString(g[m][0]));
            }
            for (let n = 0; n < j; n++) {
                a.c.add(CssGradientUtil.brushFromGradientString(i[n][0]));
            }
            b.clear();
            let o = 0;
            let p = 0;
            let q = Math.min(d, f);
            let r = null;
            if (d == 0) {
                b.add("background-color");
            }
            if (f == 0) {
                b.add("border-top-color");
                p = d == 0 ? 1 : 0;
            }
            if (b.count > 0) {
                r = this.ae.getCssDefaultValuesForClassCollection("ui-chart-palette-", b.toArray());
                q = r.length;
            }
            if (d == 0) {
                if (q > 0) {
                    for (let s = 0; s < q; s++) {
                        let t = new Brush();
                        t._fill = r[s][o];
                        a.a.add(t);
                    }
                }
                else {
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#8BDC5C";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#8961A9";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#6DB1FF";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#82E9D9";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#EA3C63";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#735656";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#F8CE4F";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#A8A8B7";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#E051A9";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#FF903B";
                        return $ret;
                    })()));
                }
            }
            if (f == 0) {
                if (q > 0) {
                    for (let u = 0; u < q; u++) {
                        let v = new Brush();
                        v._fill = r[u][p];
                        a.f.add(v);
                    }
                }
                else {
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#8BDC5C";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#8961A9";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#6DB1FF";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#82E9D9";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#EA3C63";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#735656";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#F8CE4F";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#A8A8B7";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#E051A9";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#FF903B";
                        return $ret;
                    })()));
                }
            }
            b.clear();
            let w = Math.min(h, j);
            if (h == 0) {
                b.add("background-color");
            }
            if (j == 0) {
                b.add("border-top-color");
                p = h == 0 ? 1 : 0;
            }
            if (b.count > 0) {
                r = this.ae.getCssDefaultValuesForClassCollection("ui-chart-marker-palette-", b.toArray());
                w = r.length;
            }
            if (h == 0) {
                if (w > 0) {
                    for (let x = 0; x < w; x++) {
                        let y = ((() => {
                            let $ret = new Brush();
                            $ret.fill = r[x][o];
                            return $ret;
                        })());
                        a.b.add(y);
                    }
                }
                else {
                    a.b.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#FFFFFF";
                        return $ret;
                    })()));
                }
            }
            if (j == 0) {
                if (w > 0) {
                    for (let z = 0; z < w; z++) {
                        let aa = ((() => {
                            let $ret = new Brush();
                            $ret.fill = r[z][p];
                            return $ret;
                        })());
                        a.c.add(aa);
                    }
                }
                else {
                    for (let ab of fromEnum(a.a)) {
                        a.c.add(ab);
                    }
                }
            }
            let ac = this.ae.getCssDefaultPropertyValue("ui-chart-axis", "border-top-color");
            if (ac != null) {
                a.i = new Brush();
                a.i._fill = ac;
            }
            else {
                a.i = AxisDefaults.g;
            }
            a.k = new Brush();
            a.k._fill = this.ae.getCssDefaultPropertyValue("", "color");
            a.j = Defaults.ae;
            let ad = this.ae.getCssDefaultPropertyValue("ui-chart-crosshair", "border-top-color");
            if (ad != null) {
                a.j = new Brush();
                a.j._fill = ad;
            }
            this.ae.endCSSQuery();
            a.h = FontUtil.getFont(this.ae);
            let ae = ((() => {
                let $ret = new Brush();
                $ret.fill = "#ee5879";
                return $ret;
            })());
            a.d = new BrushCollection();
            a.d.add(ae);
            a.e = new BrushCollection();
            a.e.add(ae);
            return a;
        }
        a6(a, b, c, d, e, f) {
            this.ae.startCSSQuery();
            let g = this.ae.getCssDefaultPropertyValue("ui-chart-area-fill-opacity", "opacity");
            a = g != null ? parseFloat(g) : 1;
            b = new Array(4);
            let h = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-top");
            let i = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-right");
            let j = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-bottom");
            let k = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-left");
            b[0] = h != null ? parseFloat(h) : NaN;
            b[1] = i != null ? parseFloat(i) : NaN;
            b[2] = j != null ? parseFloat(j) : NaN;
            b[3] = k != null ? parseFloat(k) : NaN;
            c = d = null;
            let l = this.ae.getCssDefaultPropertyValue("ui-chart-axis-stroke", "border-top-color");
            if (l != null) {
                let m = new Brush();
                m._fill = l;
                c = m;
            }
            let n = this.ae.getCssDefaultPropertyValue("ui-chart-axis-major-line", "border-top-color");
            if (n != null) {
                let o = new Brush();
                o._fill = n;
                d = o;
            }
            let p = this.ae.getCssDefaultPropertyValue("ui-chart-aligned-gridlines", "visibility");
            f = p != null && p == "visible";
            let q = this.ae.getCssDefaultPropertyValue("ui-chart-category-axis-tick", "height");
            if (q != null) {
                e = parseFloat(q);
                if (Math.abs(e) > 4000) {
                    e = 0;
                }
            }
            else {
                q = this.ae.getCssDefaultPropertyValue("ui-chart-category-axis-tick", "width");
                e = q != null ? parseFloat(q) : 0;
            }
            this.ae.endCSSQuery();
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f
            };
        }
        ax() {
            this.ah.removeChildren();
        }
        bt(x_) {
            let box_ = this.ah;
            let offset_ = this.f.bf(this.ah);
            let a = this.b7();
            x_ = a.x + this.j.p.pv.left + x_;
            box_.setOffset(x_, this.j.p.pv.top + this.ad + a.y);
        }
        bu(y_) {
            this.ad = y_;
            let box_ = this.ah;
            let offset_ = this.ah.getOffset();
            let a = this.b7();
            y_ = this.j.p.pv.top + this.ad + a.y;
            box_.setOffset(offset_.left, y_);
        }
        at(a) {
            let b = a;
            b.show();
            this.ah.append(b);
        }
        a8() {
            this.ah.hide();
        }
        bn() {
            this.ah.show();
        }
        au(a) {
            this.ae.appendToBody(a);
        }
        bj(a) {
            a.remove();
        }
        bc() {
            if (this.ae == null) {
                return;
            }
            this.a9();
            this.j.cy(this.ae.rootWrapper.width(), this.ae.rootWrapper.height());
        }
        p() {
            return this.l;
        }
        cd() {
            return this.b9;
        }
        as() {
            return this.aq;
        }
        ar() {
            return this.ap;
        }
        cc() {
            return this.b8;
        }
        b4() {
            return this.bz;
        }
        b3() {
            return this.by;
        }
        o() {
            return this.k;
        }
        c() {
            return this.a;
        }
        d() {
            return this.b;
        }
        r() {
            return this.n;
        }
        b6() {
            return this.b1;
        }
        q() {
            return this.m;
        }
        b5() {
            return this.b0;
        }
        ce() {
            return this.ca;
        }
        cf() {
            return this.cb;
        }
        bo() {
            this.ae.startCSSQuery();
            this.bq();
            this.bp();
            this.bs();
            this.br();
            this.bw();
            this.ae.endCSSQuery();
        }
        bw() {
            let a = "ui-chart-pointer-tooltip";
            let b = this.ae.getCssDefaultPropertyValue(a, "background-color");
            let c = this.ae.getCssDefaultPropertyValue(a, "border-top-color");
            let d = this.ae.getCssDefaultPropertyValue(a, "border-top-left-radius");
            let e = this.ae.getCssDefaultPropertyValue(a, "border-top-width");
            let f = new PointerTooltipStyle();
            f.a = d != null ? parseFloat(d) : 0;
            f.c = b != null ? Brush.create(b) : ((() => {
                let $ret = new Brush();
                $ret.fill = "white";
                return $ret;
            })());
            f.d = c != null ? Brush.create(c) : ((() => {
                let $ret = new Brush();
                $ret.fill = "gray";
                return $ret;
            })());
            f.b = e != null ? parseFloat(e) : 0;
            this.h = f;
        }
        bq() {
            let a = "ui-chart-title";
            this.l = FontUtil.getFontForClass(this.ae, a);
            this.bz = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            this.aq = this.ae.getCssDefaultPropertyValue(a, "text-align");
            if (this.aq == null) {
                this.aq = "center";
            }
            let b = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let f = b != null ? parseFloat(b) : 0;
            let g = c != null ? parseFloat(c) : 0;
            let h = d != null ? parseFloat(d) : 0;
            let i = e != null ? parseFloat(e) : 0;
            this.b9 = new Thickness(1, h, f, i, g);
        }
        bp() {
            let a = "ui-chart-subtitle";
            this.k = FontUtil.getFontForClass(this.ae, a);
            this.by = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            this.ap = this.ae.getCssDefaultPropertyValue(a, "text-align");
            if (this.ap == null) {
                this.ap = "center";
            }
            let b = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let f = b != null ? parseFloat(b) : 0;
            let g = c != null ? parseFloat(c) : 0;
            let h = d != null ? parseFloat(d) : 0;
            let i = e != null ? parseFloat(e) : 0;
            this.b8 = new Thickness(1, h, f, i, g);
        }
        br() {
            let a = "ui-chart-horizontal-axis-title";
            this.m = FontUtil.getFontForClass(this.ae, a);
            this.b0 = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            let b = this.ae.getCssDefaultPropertyValue(a, "vertical-align");
            if (b == null) {
                this.a = 0;
            }
            else if (b.toLowerCase() == "bottom") {
                this.a = 4;
            }
            else {
                this.a = 3;
            }
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let f = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let g = c != null ? parseFloat(c) : 2;
            let h = d != null ? parseFloat(d) : 2;
            let i = e != null ? parseFloat(e) : 2;
            let j = f != null ? parseFloat(f) : 2;
            this.ca = new Thickness(1, i, g, j, h);
        }
        bs() {
            let a = "ui-chart-vertical-axis-title";
            this.n = FontUtil.getFontForClass(this.ae, a);
            this.b1 = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            let b = this.ae.getCssDefaultPropertyValue(a, "text-align");
            if (b == null) {
                this.b = 0;
            }
            else if (b.toLowerCase() == "right") {
                this.b = 2;
            }
            else {
                this.b = 1;
            }
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let f = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let g = c != null ? parseFloat(c) : 0;
            let h = d != null ? parseFloat(d) : 0;
            let i = e != null ? parseFloat(e) : 0;
            let j = f != null ? parseFloat(f) : 0;
            this.cb = new Thickness(1, i, g, j, h);
        }
        a5(a, b) {
            let c = this.j.p.fh;
            if (a != this.ab || b != this.aa || c != this.ac) {
                this.ay(a, b, this.j.p.fh);
                this.j.p.al.i();
                this.j.a.i();
            }
        }
        i() {
            return this.h;
        }
        ba(a) {
            if (this.f == null) {
                return;
            }
            this.f.aa = a;
            this.f.am = runOn(this.j, this.j.at);
        }
        an(a, b, c) {
            let d;
            if (!((() => { let e = this.z.tryGetValue(b.iD.toString(), d); d = e.p1; return e.ret; })())) {
                let e = this.ae.createElement("canvas");
                e.setAttribute("width", c.toString());
                e.setAttribute("height", c.toString());
                e.setStyleProperty("width", c.toString() + "px");
                e.setStyleProperty("height", c.toString() + "px");
                let f = this.ae.get2DCanvasContext(e);
                let g = new RenderingContext(new CanvasViewRenderer(), f);
                let h = new Tuple$2(DomWrapper_$type, RenderingContext.$, e, g);
                d = h;
                this.z.addItem(b.iD.toString(), d);
            }
            let i = new Rect(0, 0, 0, c, c);
            let j = new RenderSurface();
            j.a = d.d;
            for (let k = 0; k < this.j.p.series.count; k++) {
                let l = this.j.p.series._inner[k];
                l.lz(i, a, j, "tile", 1);
            }
            this.j.p.ak.i();
            return d.c;
        }
        a2(a) {
            this.z.removeItem(a.iD.toString());
        }
        a1() {
            this.z.clear();
        }
        bk(a) {
            for (let b = 0; b < a.count; b++) {
                let c = a._inner[b];
                let d = c.content;
                this.j.z.m(d.getNativeElement(), 1, c.xPosition + this.j.p.pv.left, c.yPosition + this.j.p.pv.top, c.width, c.height);
            }
        }
        az() {
            if (this.al != -1) {
                this.av();
            }
            if (this.ae != null) {
                this.al = this.ae.setTimeout(() => this.j.p.a5.f$i(this.j.p), 5000);
            }
            else {
                this.al = window.setTimeout(() => this.j.p.a5.f$i(this.j.p), 5000);
            }
        }
        av() {
            if (this.al != -1) {
                if (this.ae != null) {
                    this.ae.clearTimeout(this.al);
                }
                else {
                    window.clearTimeout(this.al);
                }
                this.al = -1;
            }
        }
        a0(a) {
            if (this.am != -1) {
                this.aw();
            }
            if (this.ae != null) {
                this.am = this.ae.setTimeout(() => this.j.p.je(), a);
            }
            else {
                this.am = window.setTimeout(() => this.j.p.je(), a);
            }
        }
        aw() {
            if (this.am != -1) {
                if (this.ae != null) {
                    this.ae.clearTimeout(this.am);
                }
                else {
                    window.clearTimeout(this.am);
                }
                this.am = -1;
            }
        }
        bd() {
            if (this.j.p.as != 1) {
                if (this.s == null) {
                    this.u = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ag));
                    this.s = this.u;
                }
                else {
                    this.u = this.s;
                }
            }
            else {
                this.u = new RenderingContext(null, null);
            }
            this.j.dq(this.u);
        }
        bv(a) {
            if (this.ae != null) {
                let b = "igTouch";
                if (a) {
                    this.ae.rootWrapper.addClass(b);
                }
                else {
                    this.ae.rootWrapper.removeClass(b);
                }
            }
        }
        a3() {
        }
        a4() {
        }
        bg() {
            if (this.f != null) {
                this.f.bc(this.aj, "");
            }
        }
        be() {
            this.a9();
            if (this.f != null) {
                this.f.aq(this.aj, "");
            }
        }
        ao(a, b) {
            let c = this.ae.createElement("canvas");
            c.setStyleProperty("width", a + "px");
            c.setStyleProperty("height", b + "px");
            c.setProperty("width", a);
            c.setProperty("height", b);
            let d = this.ae.get2DCanvasContext(c);
            if (this.t != null) {
                d.drawImage(this.af.getNativeElement(), 0, 0, a, b);
            }
            if (this.v != null) {
                d.drawImage(this.ai.getNativeElement(), 0, 0, a, b);
            }
            if (this.w != null) {
                d.drawImage(this.aj.getNativeElement(), 0, 0, a, b);
            }
            let e = this.ae.createElement("img");
            let sCanv_ = c.getNativeElement();
            e.setProperty("src", sCanv_.toDataURL('image/png'));
            return e.getNativeElement();
        }
    }
    SeriesViewerViewManager.$t = /*@__PURE__*/ markType(SeriesViewerViewManager, 'SeriesViewerViewManager');
    return SeriesViewerViewManager;
})();
/**
 * @hidden
 */
export let AutoRangeCalculator = /*@__PURE__*/ (() => {
    class AutoRangeCalculator extends Base {
        static a(a, b, c, d, e, f, g) {
            f = !isNaN_(b) && !isInfinity(b) ? b : Number.POSITIVE_INFINITY;
            g = !isNaN_(c) && !isInfinity(c) ? c : Number.NEGATIVE_INFINITY;
            let h = f;
            let i = g;
            if (isInfinity(h) || isInfinity(i)) {
                if (a != null) {
                    let j = a.j2();
                    if (j != null) {
                        h = Math.min(h, j.c);
                        i = Math.max(i, j.b);
                    }
                }
            }
            if (!isInfinity(h) && !isInfinity(i)) {
                if (h == i && h != 0) {
                    h *= h > 0 ? 0.9 : 1.1;
                    i *= i > 0 ? 1.1 : 0.9;
                }
                if (h == i && h == 0) {
                    i = 1;
                }
                if (b > c) {
                    let k = c;
                    c = b;
                    b = k;
                }
                let l = isNaN_(b) || isInfinity(b) ? h : b;
                let m = isNaN_(c) || isInfinity(c) ? i : c;
                if (d) {
                    if (l <= 0) {
                        if (m > 1) {
                            l = 1;
                        }
                        else {
                            l = Math.pow(e, Math.floor(logBase(m, e)));
                        }
                    }
                    if (isNaN_(b) || isInfinity(b)) {
                        let n = logBase(l, e);
                        h = Math.pow(e, Math.floor(n));
                    }
                    else {
                        h = l;
                    }
                    if (isNaN_(c) || isInfinity(c)) {
                        i = Math.pow(e, Math.ceil(logBase(m, e)));
                    }
                    else {
                        i = m;
                    }
                }
                else {
                    let o = Math.pow(10, Math.floor(log10(m - l)) - 1);
                    let p = a.d7();
                    if (a != null && p > 0 && (!a.kj && !a.ki)) {
                        let q = new LinearNumericSnapper(0, h, i, p, a.el());
                        o = q.g;
                    }
                    if ((isNaN_(b) || isInfinity(b)) && !isNaN_(h) && !isNaN_(o) && o != 0) {
                        {
                            h = o * Math.floor(h / o);
                        }
                    }
                    else {
                        h = l;
                    }
                    if ((isNaN_(c) || isInfinity(c)) && !isNaN_(i) && !isNaN_(o) && o != 0) {
                        let r = Math.ceil(i / o);
                        {
                            i = o * r;
                        }
                    }
                    else {
                        i = m;
                    }
                }
            }
            f = h;
            g = i;
            return {
                p5: f,
                p6: g
            };
        }
    }
    AutoRangeCalculator.$t = /*@__PURE__*/ markType(AutoRangeCalculator, 'AutoRangeCalculator');
    return AutoRangeCalculator;
})();
/**
 * @hidden
 */
export let IAxisAnnotationManager_$type = /*@__PURE__*/ new Type(null, 'IAxisAnnotationManager');
/**
 * @hidden
 */
export let AxisLabelSettings = /*@__PURE__*/ (() => {
    class AxisLabelSettings extends Base {
        constructor() {
            super();
            this.aa = null;
            this.ax = null;
            this.b = 1;
            this.a2 = 0;
            this.h = true;
            this.c = 0;
            this.a = null;
            this.m = 0;
            this.o = NaN;
            this.p = 2;
            this.q = 2;
            this.r = 2;
            this.n = 2;
            this.au = 0;
            this.az = 1;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.f = null;
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.aq(a, b.propertyName, b.oldValue, b.newValue));
        }
        get textStyle() {
            return this.aa;
        }
        set textStyle(a) {
            let b = this.aa;
            this.aa = a;
            this.ar("TextStyle", b, a);
        }
        get textColor() {
            return this.ax;
        }
        set textColor(a) {
            let b = this.ax;
            this.ax = a;
            this.ar("TextColor", b, a);
        }
        get location() {
            return this.b;
        }
        set location(a) {
            let b = this.b;
            this.b = a;
            this.ar("Location", enumGetBox(AxisLabelsLocation_$type, b), enumGetBox(AxisLabelsLocation_$type, a));
        }
        get visibility() {
            return this.a2;
        }
        set visibility(a) {
            let b = this.a2;
            this.a2 = a;
            this.ar("Visibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, a));
        }
        get showFirstLabel() {
            return this.h;
        }
        set showFirstLabel(a) {
            let b = this.h;
            this.h = a;
            this.ar("ShowFirstLabel", b, a);
        }
        registerAxis(a) {
            this.a = a;
        }
        unregisterAxis(a) {
            this.a = null;
        }
        get angle() {
            return this.m;
        }
        set angle(a) {
            let b = this.m;
            this.m = a;
            this.ar("Angle", b, a);
        }
        get extent() {
            return this.o;
        }
        set extent(a) {
            let b = this.o;
            this.o = a;
            this.ar("Extent", b, a);
        }
        set margin(a) {
            this.leftMargin = a;
            this.bottomMargin = a;
            this.rightMargin = a;
            this.topMargin = a;
        }
        get leftMargin() {
            return this.p;
        }
        set leftMargin(a) {
            let b = this.p;
            this.p = a;
            this.ar("LeftMargin", b, a);
        }
        get rightMargin() {
            return this.q;
        }
        set rightMargin(a) {
            let b = this.q;
            this.q = a;
            this.ar("RightMargin", b, a);
        }
        get topMargin() {
            return this.r;
        }
        set topMargin(a) {
            let b = this.r;
            this.r = a;
            this.ar("TopMargin", b, a);
        }
        get bottomMargin() {
            return this.n;
        }
        set bottomMargin(a) {
            let b = this.n;
            this.n = a;
            this.ar("BottomMargin", b, a);
        }
        get horizontalAlignment() {
            return this.au;
        }
        set horizontalAlignment(a) {
            let b = this.au;
            this.au = a;
            this.ar("HorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, a));
        }
        get verticalAlignment() {
            return this.az;
        }
        set verticalAlignment(a) {
            let b = this.az;
            this.az = a;
            this.ar("VerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, a));
        }
        ar(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        aq(a, b, c, d) {
            switch (b) {
                case "Location":
                    this.c = this.location;
                    break;
            }
            if (this.a == null || this.a.bf == null) {
                return;
            }
            switch (b) {
                case "Angle":
                    this.a.ck = true;
                    this.a.hp();
                    break;
                case "TextStyle":
                    this.f = null;
                    this.a.ck = true;
                    if (this.a.bh != null) {
                        this.a.bh.jq();
                    }
                    this.a.hp();
                    break;
                case "Location":
                case "Extent":
                case "Visibility":
                case "HorizontalAlignment":
                case "VerticalAlignment":
                case "TopMargin":
                case "RightMargin":
                case "BottomMargin":
                case "LeftMargin":
                case "ShowFirstLabel":
                    this.a.ck = true;
                    if (this.a.bh != null) {
                        this.a.bh.jq();
                    }
                    this.a.hp();
                    break;
                case "TextColor":
                    this.a.hp();
                    break;
            }
        }
        j() {
            return this.m != 0;
        }
        k() {
            return !isNaN_(this.o);
        }
        get i() {
            return this.textStyle != null;
        }
        g(a) {
            if (this.f == null) {
                this.f = FontUtil.toFontInfo(a, this.textStyle);
            }
            return this.f;
        }
    }
    AxisLabelSettings.$t = /*@__PURE__*/ markType(AxisLabelSettings, 'AxisLabelSettings', Base.$, [INotifyPropertyChanged_$type]);
    AxisLabelSettings.extentPropertyDefault = NaN;
    return AxisLabelSettings;
})();
/**
 * @hidden
 */
export let TitleSettings = /*@__PURE__*/ (() => {
    class TitleSettings extends AxisLabelSettings {
        constructor() {
            super();
            this.a4 = 0;
            this.horizontalAlignment = 1;
            this.leftMargin = NaN;
            this.rightMargin = NaN;
            this.topMargin = NaN;
            this.bottomMargin = NaN;
        }
        get position() {
            return this.a4;
        }
        set position(a) {
            let b = this.a4;
            this.a4 = a;
            this.ar("AxisTitlePosition", enumGetBox(AxisTitlePosition_$type, b), enumGetBox(AxisTitlePosition_$type, a));
        }
        aq(a, b, c, d) {
            super.aq(a, b, c, d);
            if (this.a == null || this.a.bh == null) {
                return;
            }
            switch (b) {
                case "AxisTitlePosition":
                    this.a.ck = true;
                    this.a.hp();
                    break;
            }
        }
    }
    TitleSettings.$t = /*@__PURE__*/ markType(TitleSettings, 'TitleSettings', AxisLabelSettings.$);
    return TitleSettings;
})();
/**
 * @hidden
 */
export let Axis = /*@__PURE__*/ (() => {
    class Axis extends Control {
        constructor() {
            super();
            this.a4 = null;
            this.bs = null;
            this.a8 = null;
            this.a6 = null;
            this.h5 = null;
            this.bm = null;
            this.bg = null;
            this.br = null;
            this.bw = false;
            this.dd = NaN;
            this.c8 = 50;
            this.dj = 0;
            this.dg = 150;
            this.ar = 0;
            this.dc = NaN;
            this.dn = 0;
            this.di = 0;
            this.df = 180;
            this.bj = null;
            this.bi = null;
            this.fm = "Verdana";
            this.de = NaN;
            this.dq = 0;
            this.dk = 8;
            this.dh = 16;
            this.e7 = -1;
            this.e6 = 1;
            this.e5 = 3;
            this.e8 = 0;
            this.jy = 0;
            this.dm = 0;
            this.dl = 2;
            this.h6 = null;
            this.dr = 0;
            this.cd = false;
            this.cp = false;
            this.cr = false;
            this.rangeChanged = null;
            this.ak = new AxisAnnotationCollection();
            this.al = new AxisAnnotationCollection();
            this.jl = Rect.empty;
            this.jr = null;
            this.c5 = null;
            this.c6 = null;
            this.av = null;
            this.bv = false;
            this.a5 = null;
            this.e4 = null;
            this.ah = null;
            this._coercionMethods = null;
            this.bu = false;
            this.cs = false;
            this.c0 = false;
            this.renderRequested = null;
            this.bb = null;
            this.cl = false;
            this.da = NaN;
            this.db = -1;
            this.cm = false;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.c7 = null;
            this.c3 = new Dictionary$2(String_$type, String_$type, 0);
            this.c2 = new Dictionary$2(String_$type, FastReflectionHelper.$, 0);
            this.jx = new Size();
            this.ao = new AxisComponentsForView();
            this.du = 0;
            this.c9 = 0;
            this.bq = null;
            this.bp = null;
            this.bo = null;
            this.aw = new AxisLabelSettings();
            this.e3 = null;
            DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
            DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
            this.du = NaN;
            this.a4 = this.a3();
            this.ha(this.a4);
            this.a4.ag();
            this.bq = ((() => {
                let $ret = new Pool$1(TextBlock.$);
                $ret.create = runOn(this.a4, this.a4.ax);
                $ret.activate = runOn(this.a4, this.a4.aq);
                $ret.disactivate = runOn(this.a4, this.a4.as);
                $ret.destroy = runOn(this.a4, this.a4.ar);
                return $ret;
            })());
            this.bp = ((() => {
                let $ret = new Pool$1(TextBlock.$);
                $ret.create = runOn(this.a4, this.a4.ax);
                $ret.activate = runOn(this.a4, this.a4.aq);
                $ret.disactivate = runOn(this.a4, this.a4.as);
                $ret.destroy = runOn(this.a4, this.a4.ar);
                return $ret;
            })());
            this.bo = ((() => {
                let $ret = new Pool$1(Rectangle.$);
                $ret.create = runOn(this.a4, this.a4.bc);
                $ret.activate = runOn(this.a4, this.a4.p);
                $ret.disactivate = runOn(this.a4, this.a4.r);
                $ret.destroy = runOn(this.a4, this.a4.q);
                return $ret;
            })());
            this.jr = Rect.empty;
            this.c5 = new List$1(Base.$, 0);
            this.c6 = new List$1(LabelPosition.$, 0);
            this.av = this.au();
            this.av.af = this.ay;
            this.av.ac = this;
            this.c7 = new List$1(Series.$, 0);
            let a = this.ak;
            a.collectionResetting = delegateCombine(a.collectionResetting, runOn(this, this.gu));
            let b = this.ak;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.gt));
            let c = this.al;
            c.collectionResetting = delegateCombine(c.collectionResetting, runOn(this, this.gw));
            let d = this.al;
            d.collectionChanged = delegateCombine(d.collectionChanged, runOn(this, this.gv));
            this.ab = Axis.$;
            if (this.ay != null) {
                this.aw = this.ay;
            }
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (e, f) => this.he(e, f.propertyName, f.oldValue, f.newValue));
            this.br = (e, f) => {
                if (this.bh == null || !this.bh.dl) {
                    this.h4(f.oldRect, f.newRect);
                }
            };
            this.a4.v();
        }
        a3() {
            return new AxisView(this);
        }
        ha(a) {
        }
        gx() {
            if (this.b5) {
                this.a7.onAddAnnotations(this);
            }
        }
        get bt() {
            if (this.bs == null) {
                this.bs = new SRProvider(this.e4);
            }
            if (this.bs.l == null) {
                this.bs.l = this.e4;
            }
            return this.bs;
        }
        get a9() {
            if (this.a8 == null) {
                this.a8 = DVContainer.instance.createInstance(IAxisVisualDataManager_$type, () => this.bt.q);
            }
            return this.a8;
        }
        d7() {
            return this.js.width;
        }
        fl() {
            return null;
        }
        fk() {
            return null;
        }
        get_b6() {
            return false;
        }
        get b6() {
            return this.get_b6();
        }
        get_ce() {
            return false;
        }
        get ce() {
            return this.get_ce();
        }
        get_b4() {
            return false;
        }
        get b4() {
            return this.get_b4();
        }
        get_cg() {
            return false;
        }
        get cg() {
            return this.get_cg();
        }
        get_cj() {
            return false;
        }
        get cj() {
            return this.get_cj();
        }
        get_ch() {
            return false;
        }
        get ch() {
            return this.get_ch();
        }
        get_b9() {
            return false;
        }
        get b9() {
            return this.get_b9();
        }
        get_cf() {
            return false;
        }
        get cf() {
            return this.get_cf();
        }
        get_b7() {
            return false;
        }
        get b7() {
            return this.get_b7();
        }
        get_b8() {
            return true;
        }
        get b8() {
            return this.get_b8();
        }
        aj() {
            return this.ai;
        }
        get a7() {
            if (this.a6 == null) {
                this.a6 = DVContainer.instance.createInstance(IAxisAnnotationManager_$type, () => this.bt.n);
                this.a6.owner = this;
            }
            return this.a6;
        }
        get b5() {
            return DVContainer.instance.checkLoaded("AnnotationFactoryManager");
        }
        gv(a, b) {
            if (!this.b5) {
                return;
            }
            this.a7.onAutoAnnotionsChanged(this, this.al, b);
        }
        gw(a, b) {
            if (!this.b5) {
                return;
            }
            this.a7.onAutoAnnotionsReset(this, this.al, b);
        }
        gt(a, b) {
            if (!this.b5) {
                return;
            }
            this.a7.onAnnotionsChanged(this, this.ak, b);
        }
        gu(a, b) {
            if (!this.b5) {
                return;
            }
            this.a7.onAnnotionsReset(this, this.ak, b);
        }
        provideRenderer(a) {
            this.e4 = a;
            this.gy();
            this.av.af = this.ay;
        }
        g7(a, b) {
            if (!a.equals1(b)) {
                this.h3(a, b);
            }
        }
        ac() {
            super.ac();
            this.a4.aj();
        }
        get bn() {
            return this.bm;
        }
        set bn(a) {
            if (this.bn != a) {
                let b = this.bn;
                this.bm = a;
                this.hk("FastItemsSourceProvider", b, this.bm);
            }
        }
        get bh() {
            return this.bg;
        }
        set bh(a) {
            if (this.bh != a) {
                let b = this.bh;
                this.bg = a;
                this.hk("SeriesViewer", b, this.bg);
            }
        }
        get bf() {
            return typeCast(XamDataChart.$, this.bh);
        }
        set bf(a) {
            this.bh = a;
        }
        get cz() {
            return this.bw;
        }
        set cz(a) {
            if (this.bw == a) {
                return;
            }
            this.bw = a;
            let b = null;
            if (this.av != null && Rect.l_op_Inequality(this.av.cu, null)) {
                b = this.av.cu;
            }
            this.av = this.au();
            this.av.ac = this;
            this.av.af = this.ay;
            if (Rect.l_op_Inequality(b, null)) {
                this.av.cu = b;
            }
            if (this.bh != null && this.bh.cf != null) {
                this.av.ae.ak(this.bh.cf.y);
                this.ho(true);
            }
        }
        get ep() {
            return this.dd;
        }
        set ep(a) {
            let b = this.dd;
            if (b != a) {
                this.dd = a;
                this.dp = a;
                this.ho(true);
            }
        }
        get dp() {
            return this.c8;
        }
        set dp(a) {
            this.c8 = a;
        }
        get ev() {
            return this.dj;
        }
        set ev(a) {
            this.dj = a;
            this.ho(true);
        }
        get es() {
            return this.dg;
        }
        set es(a) {
            this.dg = a;
            this.ho(true);
        }
        get as() {
            return this.ar;
        }
        set as(a) {
            let b = this.ar;
            if (b != a) {
                this.ar = a;
                this.ho(true);
            }
        }
        get eo() {
            return this.dc;
        }
        set eo(a) {
            this.dc = a;
            this.hn();
        }
        get eu() {
            return this.di;
        }
        set eu(a) {
            this.di = a;
            this.hn();
        }
        get er() {
            return this.df;
        }
        set er(a) {
            this.df = a;
            this.hn();
        }
        get bl() {
            if (this.bj == null) {
                if (this.bi == null) {
                    this.bi = this.a4.i();
                }
                return this.bi;
            }
            return this.bj;
        }
        set bl(a) {
            this.bj = a;
            this.de = FontUtil.getFontSize(this.bj);
            this.hn();
        }
        get gg() {
            return this.fm;
        }
        set gg(a) {
            this.fm = a;
            let b = this.de;
            if (isNaN_(b)) {
                b = 12;
            }
            this.bl.n = a;
            this.bl.d = b;
            this.av.b3();
            this.hn();
        }
        get eq() {
            return this.de;
        }
        set eq(a) {
            this.de = a;
            this.bl = FontUtil.getFontWithNewFontSize(this.bl, this.de);
            this.hn();
        }
        get ew() {
            return this.dk;
        }
        set ew(a) {
            this.dk = a;
            this.hn();
        }
        get et() {
            return this.dh;
        }
        set et(a) {
            this.dh = a;
            this.hn();
        }
        get fc() {
            return this.e7;
        }
        set fc(a) {
            this.e7 = a;
            this.hn();
        }
        get fb() {
            return this.e6;
        }
        set fb(a) {
            this.e6 = a;
            this.hn();
        }
        get fa() {
            return this.e5;
        }
        set fa(a) {
            this.e5 = a;
            this.hn();
        }
        get j1() {
            return this.jy;
        }
        set j1(a) {
            this.jy = a;
            this.hn();
        }
        get ey() {
            return this.dm;
        }
        set ey(a) {
            this.dm = a;
            this.hn();
        }
        get ex() {
            return this.dl;
        }
        set ex(a) {
            this.dl = a;
            this.hn();
        }
        hw() {
            this.av.cj();
        }
        hn() {
            this.ho(false);
        }
        ho(a) {
            if (a) {
                this.av.ci();
            }
            this.ck = true;
            this.hm();
        }
        hz() {
            if (this.e0 > 0) {
                this.dr = this.e0;
                return;
            }
            let a = typeCast(XamDataChart.$, this.bh);
            if (a != null && isNaN_(this.e0) && this.b6 && (this.cj || this.a1 == 0)) {
                this.dr = a.p9.fl;
                return;
            }
            this.dr = 0;
        }
        get cy() {
            return this.c(Axis.i5);
        }
        set cy(a) {
            this.h(Axis.i5, a);
        }
        dw() {
            return 0;
        }
        i6() {
            if (this.cj) {
                return 2;
            }
            return 0;
        }
        jz() {
            return 1;
        }
        i7() {
            return 1;
        }
        j0() {
            return 1;
        }
        dy() {
            if (this.cj) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        d0() {
            if (!this.cj && !this.b4) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        dz() {
            if (this.cj) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        dx() {
            if (!this.cj && !this.b4) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        d3() {
            return NaN;
        }
        d5() {
            return NaN;
        }
        d4() {
            return NaN;
        }
        d2() {
            return NaN;
        }
        az() {
            if (this.cj) {
                return 2;
            }
            if (this.cg) {
                return 5;
            }
            return 1;
        }
        a0() {
            return 1;
        }
        hl(a) {
            if (this.rangeChanged != null) {
                this.rangeChanged(this, a);
            }
        }
        d1() {
            if (this.cj) {
                return -90;
            }
            return 0;
        }
        dv() {
            return NaN;
        }
        get am() {
            return this.ak;
        }
        get an() {
            return this.al;
        }
        get js() {
            if (this.jr.isEmpty) {
                return this.jl;
            }
            return this.jr;
        }
        set js(a) {
            this.jl = a;
        }
        h0() {
            let a = 0;
            let b = typeCast(XamDataChart.$, this.bh);
            if (b != null && b.p6 == 0) {
                a = 1;
            }
            this.a4.av(a);
        }
        c1(a, b, c) {
            return this.bh != null;
        }
        ci() {
            let a = Rect.empty;
            if (this.bh != null) {
                a = this.bh.pw;
            }
            return this.c1(this.js, a, this.a4);
        }
        h3(a, b) {
            this.cl = false;
            this.js = b;
            this.ck = true;
            this.cv();
            this.hq(false);
            if (this.bh != null) {
                this.bh.ap.ae(1, this, this.a5, b);
            }
        }
        get ck() {
            return this.bv;
        }
        set ck(a) {
            this.bv = a;
        }
        jp() {
            if (this.bh == null || this.bh.pk.isEmpty) {
                return Rect.empty;
            }
            let a = this.bh.pk;
            let b = this.js;
            let c = (a.left - b.left) / b.width;
            let d = (a.top - b.top) / b.height;
            let e = (a.right - b.left) / b.width;
            let f = (a.bottom - b.top) / b.height;
            return new Rect(0, c, d, e - c, f - d);
        }
        h4(a, b) {
            this.ck = true;
            this.hq(true);
        }
        hm() {
            this.hq(false);
        }
        he(a, b, c, d) {
            switch (b) {
                case Axis.$$p[10]:
                case Axis.$$p[11]:
                    if (this.fz != null) {
                        this.ah = new BindingFormatter();
                        this.ah.j = this.fz;
                        this.ah.d = this.ag;
                    }
                    else {
                        this.ah = null;
                    }
                    break;
                case "SeriesViewer":
                    let e = typeCast(SeriesViewer.$, c);
                    if (e != null) {
                        this.e4 = null;
                        e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, this.br);
                        e.ap.ad(1, this);
                        this.a4.aa(e);
                    }
                    let f = typeCast(SeriesViewer.$, d);
                    if (f != null) {
                        this.e4 = f.cf.j.ae;
                        f.actualWindowRectChanged = delegateCombine(f.actualWindowRectChanged, this.br);
                        this.a5 = f.ap.k(1, this, runOn(this, this.g2));
                        if (this.ay == null && this.e4 != null) {
                            this.provideRenderer(this.e4);
                        }
                        this.a4.u(f);
                        if (this.cm && !this.a5.e) {
                            this.cm = false;
                            this.cv();
                        }
                        this.hy();
                        this.hz();
                    }
                    break;
                case Axis.$$p[8]:
                    this.hq(false);
                    break;
                case Axis.$$p[21]:
                    this.cr = this.cq;
                    this.hq(false);
                    break;
                case Axis.$$p[20]:
                    this.cp = this.co;
                    this.hq(false);
                    break;
                case Axis.$$p[9]:
                    this.cd = this.cc;
                    let g = new AxisRangeChangedEventArgs(0, 0, 0, 1, 1);
                    this.g1(g);
                    for (let h of fromEnum(this.c7)) {
                        h.ky();
                        if (h.ca != null) {
                            h.k7();
                        }
                    }
                    break;
                case Axis.$$p[12]:
                    this.a4.ah();
                    if (typeCast(DataTemplate.$, d) !== null) {
                        this.c0 = true;
                    }
                    else {
                        this.c0 = false;
                    }
                    this.ck = true;
                    this.ht();
                    this.hq(false);
                    break;
                case Axis.$$p[16]:
                case Axis.$$p[19]:
                case Axis.$$p[25]:
                    this.hq(false);
                    break;
                case Axis.$$p[13]:
                    let i = typeCast(AxisLabelSettings.$, d);
                    if (i != null) {
                        i.registerAxis(this);
                        this.aw = i;
                    }
                    else {
                        this.aw = new AxisLabelSettings();
                    }
                    if (this.av != null) {
                        this.av.af = this.aw;
                    }
                    this.hc();
                    this.ck = true;
                    this.hq(false);
                    break;
                case Axis.$$p[30]:
                    this.a4.ak();
                    break;
                case Axis.$$p[31]:
                    let j = typeCast(TitleSettings.$, d);
                    if (j != null) {
                        j.registerAxis(this);
                    }
                    else {
                        j = new TitleSettings();
                    }
                    if (this.h6 != null) {
                        this.h6.dataContext = j;
                    }
                    this.hd();
                    this.hq(false);
                    break;
                case Axis.$$p[26]:
                    this.ck = true;
                    this.hz();
                    this.a4.ad();
                    this.hq(false);
                    break;
                case Axis.$$p[5]:
                case "UseEnhancedIntervalManagement":
                case Axis.$$p[6]:
                    this.ck = true;
                    this.hq(false);
                    break;
                case Axis.$$p[3]:
                    if (this.bh != null) {
                        this.bh.jq();
                    }
                    break;
                case Axis.$$p[18]:
                    this.hy();
                    if (d != null) {
                        this.cs = true;
                        this.hq(false);
                    }
                    else {
                        this.cs = false;
                    }
                    break;
                case Axis.$$p[4]:
                    if (this.ai != null) {
                        this.ai.hp();
                    }
                    break;
                case Axis.$$p[24]:
                case Axis.$$p[15]:
                    this.hy();
                    this.hq(false);
                    break;
                case Axis.$$p[23]:
                case Axis.$$p[14]:
                case Axis.$$p[17]:
                case Axis.$$p[7]:
                case Axis.$$p[28]:
                case Axis.$$p[29]:
                case Axis.$$p[27]:
                case Axis.$$p[2]:
                case Axis.$$p[0]:
                case Axis.$$p[1]:
                case Axis.$$p[22]:
                    this.hq(false);
                    break;
                case "MinExtent":
                    this.a4.ad();
                    break;
            }
        }
        hc() {
            if (this.a4.m()) {
                this.a4.w(this.aw);
            }
        }
        hd() {
            this.a4.ak();
        }
        get coercionMethods() {
            return this._coercionMethods;
        }
        set coercionMethods(a) {
            this._coercionMethods = a;
        }
        get_expectFunctions() {
            return this.bu;
        }
        set_expectFunctions(a) {
            this.bu = a;
        }
        get expectFunctions() {
            return this.get_expectFunctions();
        }
        set expectFunctions(a) {
            this.set_expectFunctions(a);
        }
        ht() {
            this.bq.count = 0;
            this.bp.count = 0;
            this.bo.count = 0;
            if (this.a4.m()) {
                this.a4.an();
            }
        }
        g9(a, b, c, d) {
            let e = Math.min(b, c);
            let f = Math.max(b, c);
            if (e < d.bottom && f > d.top) {
                let g = new RectangleGeometry();
                g.e = new Rect(0, d.left, e, d.width, f - e);
                a.add(g);
            }
        }
        g8(a, b, c, d, e) {
            let f = b <= c.bottom && b >= c.top;
            if (!e && f) {
                f = !this.cb(b, d.c, c, false);
            }
            if (f) {
                if (d.a) {
                    b = this.ds(b, c.top, c.bottom, d);
                }
                let g = new LineGeometry();
                g.d = { $type: Point_$type, x: c.left, y: b };
                g.c = { $type: Point_$type, x: c.right, y: b };
                a.add(g);
            }
        }
        h2(a, b, c, d) {
            let e = Math.min(b, c);
            let f = Math.max(b, c);
            if (f > d.left && e < d.right) {
                let g = new RectangleGeometry();
                g.e = new Rect(0, e, d.top, f - e, d.height);
                a.add(g);
            }
        }
        h1(a, b, c, d, e) {
            let f = b >= c.left && b <= c.right;
            if (!f) {
                let g = truncate(Math.round(b));
                let h = truncate(Math.round(c.left));
                let i = truncate(Math.round(c.right));
                if (g >= h && g <= i) {
                    f = true;
                }
            }
            if (!e && f) {
                f = !this.cb(b, d.c, c, true);
            }
            if (f) {
                if (d.a) {
                    b = this.ds(b, c.left, c.right, d);
                }
                let j = new LineGeometry();
                j.d = { $type: Point_$type, x: b, y: c.top };
                j.c = { $type: Point_$type, x: b, y: c.bottom };
                a.add(j);
            }
        }
        cb(a, b, c, d) {
            let e = false;
            let f = typeCast(XamDataChart.$, this.bh);
            if (f != null && f.qo && !c.isEmpty) {
                for (let g of fromEnum(f.axes)) {
                    if (g._visibility != 0 || g.ez < 1 || g.ja == null || BrushUtilCore.a(g.ja) || g.js.isEmpty) {
                        continue;
                    }
                    if (g.ai != null && g.b1()) {
                        let h = this.cj ? c.left : c.top;
                        let i = 0;
                        let j = g.hv(h, i, g.bh.pw, c, g.jn(), d ? c.left : c.top, d ? c.right : c.bottom);
                        h = j.p0;
                        i = j.p1;
                        let k = Rect.empty;
                        let l = Rect.empty;
                        if (d && g.cj) {
                            k = new Rect(0, h - (g.ez / 2), g.js.top, g.ez, g.js.height);
                            l = new Rect(0, a - (b / 2), c.top, b, c.height);
                        }
                        else if (!d && !g.cj) {
                            k = new Rect(0, g.js.left, h - (g.ez / 2), g.js.width, g.ez);
                            l = new Rect(0, c.left, a - (b / 2), c.width, b);
                        }
                        if (k.left <= l.right && l.left <= k.right && k.top <= l.bottom && l.top <= k.bottom) {
                            e = true;
                            break;
                        }
                    }
                    else {
                        let m = Rect.empty;
                        let n = Rect.empty;
                        if (d && g.cj) {
                            m = new Rect(0, g.js.left, g.js.top, g.ez, g.js.height);
                            n = new Rect(0, a - (b / 2), c.top, b, c.height);
                        }
                        else if (!d && !g.cj) {
                            m = new Rect(0, g.js.left, g.js.bottom - (g.ez / 2), g.js.width, g.ez);
                            n = new Rect(0, c.left, a - (b / 2), c.width, b);
                        }
                        if (m.left <= n.right && n.left <= m.right && m.top <= n.bottom && n.top <= m.bottom) {
                            e = true;
                            break;
                        }
                    }
                }
            }
            return e;
        }
        hv(a, b, c, d, e, f, g) {
            let h = Math.abs(f - g);
            a = this.fe;
            a = this.ai.en(a);
            let i = typeCast(CategoryAxisBase.$, this.ai);
            if (i != null && i.categoryMode == 2) {
                let j = 0.5 * i.getCategorySize(c, d, e);
                let k = i.a1 == 0;
                if (i.cc == k) {
                    j = -j;
                }
                a = a + j;
            }
            b = a - f;
            if (a < f) {
                a = f;
            }
            else if (a > g) {
                a = g;
            }
            if (b < 0) {
                b = 0;
            }
            else if (b > h) {
                b = h;
            }
            return {
                p0: a,
                p1: b
            };
        }
        ds(a, b, c, d) {
            let e = a;
            if (d != null && d.c > 0) {
                let f = d.c % 2;
                if (f == 0 || f == 1) {
                    let g = 1;
                    e = Math.floor(a);
                    if (e + 0.5 < a) {
                        g = -1;
                        e = Math.ceil(a);
                    }
                    if (f == 1) {
                        e += 0.5 * g;
                    }
                    if (e >= c) {
                        e -= 1;
                    }
                    else if (e <= b) {
                        e += 1;
                    }
                }
            }
            return e;
        }
        g0(a) {
            this.a4.z(a);
        }
        gz() {
            this.bq.count = 0;
            this.bp.count = 0;
            this.bo.count = 0;
            this.a4.x();
            this.c5.clear();
            this.c6.clear();
        }
        hp() {
            this.hq(false);
        }
        hq(a) {
            if (this.bh != null) {
                this.bh.ap.ac(1, this, this.a5, a);
                if (this.renderRequested != null) {
                    let b = new RenderRequestedEventArgs();
                    b.animate = a;
                    this.renderRequested(this, b);
                    a = b.animate;
                }
            }
        }
        em() {
            if (this.bb == null) {
                return -1;
            }
            if (isNaN_(this.bb.b)) {
                return -1;
            }
            if (this.ay != null && (this.ay.angle != 0)) {
                return -1;
            }
            return Math.max(Axis.eh, this.bb.b);
        }
        ek() {
            if (this.bb == null) {
                return -1;
            }
            if (isNaN_(this.bb.d) && isNaN_(this.da)) {
                return -1;
            }
            if (this.ay != null && (this.ay.angle != 0)) {
                return -1;
            }
            let a = this.bb.d;
            if (!isNaN_(this.da) && this.e9 == -1) {
                return this.da;
            }
            return Math.max(Axis.eh, this.bb.d);
        }
        ct(a, b, c, d) {
            if (this.b6 && this.by && this.b2()) {
                if (a > 1) {
                    let e = a - 1;
                    if (e < 1) {
                        return false;
                    }
                    let f = this.d6(e, b, c, d);
                    if (isNaN_(f)) {
                        return false;
                    }
                    if (f > this.da) {
                        return true;
                    }
                }
            }
            return false;
        }
        d6(a, b, c, d) {
            return NaN;
        }
        el() {
            if (this.cj) {
                return this.em();
            }
            else {
                return this.ek();
            }
        }
        get cu() {
            return this.e9 == -1;
        }
        g2(a) {
            if (this.a4.l()) {
                return;
            }
            let b = 0;
            let c = 0;
            if (this.c6 != null && this.c6.count > 0) {
                b = this.c6._inner[this.c6.count - 1].c;
                c = this.c6.count;
            }
            if (this.ck && this.cy) {
                this.bb = this.ba();
            }
            this.hr(a);
            if (!this.cj && this.ck && this.cy && this.cu) {
                if (this.bz()) {
                    this.hr(a);
                }
            }
            let d = 1;
            let e = 0;
            if (this.c6 != null && this.c6.count > 0) {
                d = this.c6._inner[this.c6.count - 1].c;
                e = this.c6.count;
            }
            if (this.cz) {
                this.ck = true;
            }
            let f = false;
            if (d != b || e != c || this.ck) {
                this.ck = false;
                if (this.a4.m()) {
                    this.a4.ad();
                    f = true;
                }
            }
            this.a4.ac();
            if (!f) {
                this.g3();
            }
        }
        bz() {
            if (!isNaN_(this.da) || this.c5 == null || this.c5.count == 0) {
                return false;
            }
            let a = this.bk();
            if (a == null) {
                return false;
            }
            let b = -1.7976931348623157E+308;
            for (let c = 0; c < this.c5.count; c++) {
                let d = this.c5._inner[c];
                if (typeof d === 'string') {
                    let e = FontUtil.measureStringWidth(d, a, this.a4.j);
                    b = Math.max(e, b);
                }
            }
            b += 5;
            if (this.ay != null) {
                b += this.ay.leftMargin + this.ay.rightMargin;
            }
            this.da = b;
            return true;
        }
        hs() {
            this.da = NaN;
            this.hq(false);
        }
        b2() {
            return !isNaN_(this.da) && this.e9 == -1;
        }
        dt(a, b) {
            return a;
        }
        hu() {
            this.da = NaN;
        }
        ba() {
            let a = this.bk();
            if (a == null) {
                return null;
            }
            let b = "W";
            if (this.a4.j == null) {
                return null;
            }
            let c = FontUtil.measureStringWidth(b, a, this.a4.j);
            if (this.db != c || this.bb == null) {
                this.db = c;
                let d = FontUtil.getCurrentFontHeight(this.bh.cf.j.ae, a);
                if (this.bb == null) {
                    this.bb = new LabelFontHeuristics();
                }
                this.bb.b = d;
                this.bb.c = this.e9;
                this.bb.a = this.by;
                this.bb.e = c;
                this.bb.d = this.bb.e * this.bb.c;
            }
            return this.bb;
        }
        bk() {
            let a = null;
            if (this.bh != null) {
                a = this.bh.getFontInfo();
            }
            if (this.ay != null && this.ay.i) {
                if (this.bh != null) {
                    a = this.ay.g(this.bh.cf.j.ae);
                }
            }
            return a;
        }
        g3() {
            if (!this.a4.m()) {
                return;
            }
            if (!this.b3()) {
                this.a4.ab();
            }
        }
        cv() {
            return this.cw(false);
        }
        cw(a) {
            if (a || this.bh == null) {
                let b = this.cx();
                if (b) {
                    this.ck = true;
                }
                this.cm = false;
                return b;
            }
            if (!this.cm) {
                this.cm = true;
                this.bh.ap.ab(this, this.a5);
            }
            return false;
        }
        cx() {
            return false;
        }
        hr(a) {
            if (this.h6 != null) {
                if ((this.be == null || this.be.visibility == 0) && (this.ay == null || this.ay.visibility == 0) && this.gp != null) {
                    this.h6._visibility = 0;
                }
                else {
                    this.h6._visibility = 1;
                }
            }
        }
        hy() {
            let a = typeCast(XamDataChart.$, this.bh);
            if (a == null) {
                return;
            }
            let b = null, c = null, d = null;
            if (this.b6 && !this.b4) {
                b = a.s3;
                for (let e of fromEnum(this.c7)) {
                    if (e.d6 || e.d4 || e.d0 || e.d4) {
                        c = a.s1;
                        d = a.s2;
                        break;
                    }
                }
            }
            else if (this.ce && !this.b4) {
                c = a.s1;
                d = a.s2;
                b = this.ai != null ? a.s3 : null;
                for (let f of fromEnum(this.c7)) {
                    if (f.d6 || f.d4 || f.d0 || f.d4) {
                        b = a.s3;
                        break;
                    }
                }
            }
            else if (this.b4 || this.a1 == 3) {
                b = a.s3;
                c = a.s1;
                d = a.s2;
            }
            this.ja = this.je != null ? this.je : b;
            this.i8 = this.jb != null ? this.jb : c;
            this.i9 = this.jc != null ? this.jc : d;
        }
        hk(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        cn(a) {
            let b = this.c7.contains(a);
            if (!b) {
                this.c7.add(a);
            }
            this.hy();
            return !b;
        }
        bx(a) {
            let b = this.c7.contains(a);
            if (b) {
                this.c7.remove(a);
            }
            this.hy();
            return b;
        }
        fg(a, b) {
            let c = this.gb(b);
            if (c == Axis.$$p[12]) {
                return this.fh(a, b, this.fj);
            }
            return null;
        }
        gb(a) {
            if (!this.c3.containsKey(a)) {
                let b = a.charAt(0).toUpperCase() + a.substr(1);
                this.c3.addItem(a, b);
            }
            return this.c3.item(a);
        }
        fh(a, b, c) {
            let d = null;
            if (!this.c2.containsKey(b)) {
                d = new FastReflectionHelper(false, c);
                this.c2.addItem(b, d);
            }
            else {
                d = this.c2.item(b);
            }
            d.propertyName = c;
            return d.getPropertyValue(a);
        }
        fi(a) {
            return this.a4.n(a);
        }
        fw(a) {
            return this.a4.o(a);
        }
        ej() {
            return NaN;
        }
        d8(a, b) {
            return 0;
        }
        d9(a, b, c) {
            return 0;
        }
        jo(a) {
            if (this.bh == null) {
                return Rect.empty;
            }
            if (!a.equals1(this.js)) {
                return Rect.empty;
            }
            return this.bh.pk;
        }
        jn() {
            if (this.bh == null) {
                return Rect.empty;
            }
            return this.bh.pk;
        }
        jm() {
            if (this.bh == null || this.bh.pj.isEmpty) {
                return this.js;
            }
            return this.bh.pj;
        }
        jq(a, b) {
            if (b.isEmpty) {
                return a;
            }
            return b;
        }
        ea(a, b, c) {
            let d = this.jo(c);
            let e = new ScalerParams(0, b, c, this.cc, d);
            return this.d8(a, e);
        }
        g5(a, b, c, d) {
        }
        g4(a, b, c, d, e) {
        }
        eb(a, b) {
            return 0;
        }
        ec(a, b, c) {
            return 0;
        }
        ed(a, b, c) {
            let d = this.jo(c);
            let e = new ScalerParams(0, b, c, this.cc, d);
            return this.eb(a, e);
        }
        g6(a, b, c, d) {
        }
        en(a) {
            let b = this.jn();
            let c = new ScalerParams(0, this.bh.pg, this.js, this.cc, b);
            return this.d8(a, c);
        }
        hb(a) {
            let b = false;
            if (this.jx.width == 0 || this.jx.height == 0) {
                this.jr = new Rect(0, 0, 0, a.width, a.height);
            }
            else {
                b = true;
                this.jr = new Rect(0, 0, 0, this.jx.width, this.jx.height);
            }
            if (b) {
                this.a5.c = true;
                this.ck = true;
                this.av.cd();
                this.cw(true);
            }
        }
        hx() {
            this.jr = Rect.empty;
            this.av.ck();
        }
        ap() {
            this.ao.a = this.av;
            return this.ao;
        }
        get eg() {
            return this.c9;
        }
        set eg(a) {
            let b = this.eg;
            if (a != b) {
                this.c9 = a;
                this.hk("MinExtent", b, this.eg);
            }
        }
        b3() {
            if (!isNaN_(this.du)) {
                return true;
            }
            if (this.ay == null) {
                return false;
            }
            else {
                return this.ay.k();
            }
        }
        ee() {
            if (!isNaN_(this.du)) {
                return this.du;
            }
            if (this.ay == null) {
                return 50;
            }
            return this.ay.extent;
        }
        gy() {
            this.a4.t();
        }
        g1(a) {
            this.hl(a);
        }
        get jt() {
            return this.aq().a;
        }
        get ju() {
            return this.aq().b;
        }
        get jw() {
            return this.a4.c().d;
        }
        get jv() {
            return this.aq().c;
        }
        bd() {
            return SyncManager.a(this.bg);
        }
        aq() {
            return this.a4.c();
        }
        get ax() {
            return this.aw;
        }
        hf(a, b) {
            if (this.av != null) {
                this.av.ce(a);
            }
            this.a4.af(a, b);
        }
        b1() {
            return this.fe != null;
        }
        ff() {
            return this.a9.exportVisualData(this);
        }
        *_c4() {
            for (let a = 0; a < this.c7.count; a++) {
                let b = this.c7._inner[a];
                yield b;
            }
        }
        c4() {
            return toEnum(() => this._c4());
        }
        hg(a) {
        }
        hj(a) {
        }
        hi(a) {
        }
        jk(a, b, c, d = null, e = null) {
            if (this.cj) {
                let f = new LineGeometry();
                f.d = { $type: Point_$type, x: c.left, y: a };
                f.c = { $type: Point_$type, x: c.right, y: a };
                return f;
            }
            else {
                let g = new LineGeometry();
                g.d = { $type: Point_$type, x: a, y: c.bottom };
                g.c = { $type: Point_$type, x: a, y: c.top };
                return g;
            }
        }
    }
    Axis.$t = /*@__PURE__*/ markType(Axis, 'Axis', Control.$, [INotifyPropertyChanged_$type]);
    Axis.i5 = /*@__PURE__*/ DependencyProperty.i("UseEnhancedIntervalManagement", Boolean_$type, Axis.$, /*@__PURE__*/ new PropertyMetadata(2, false, (a, b) => a.hk("UseEnhancedIntervalManagement", b.oldValue, b.newValue)));
    Axis.eh = 7;
    Axis.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, Axis, 'hk', ['ActualMajorStroke:i8:h7', [Brush.$], 'ActualMinorStroke:i9:h8', [Brush.$], 'ActualStroke:ja:h9', [Brush.$], 'CrossingAxis:ai:ia', [Axis.$], 'CrossingValue:fe:ib', [4, null], 'EnhancedIntervalMinimumCharacters:e9:ic', [1, -1], 'EnhancedIntervalPreferMoreCategoryLabels:by:id', [0, false], 'FormatLabel:at:ie', [Delegate_$type], 'IsDisabled:ca:ig', [0, false], 'IsInverted:cc:ih', [0, false], 'LabelFormat:fz:ii', [2, null], 'LabelFormatSpecifiers:ag:ij', [Array_$type, null], 'Label:fj:ik', [4, null], 'LabelSettings:ay:il', [AxisLabelSettings.$, null], 'MajorStrokeDashArray:jg:im', [DoubleCollection.$], 'MajorStroke:jb:io', [Brush.$], 'MajorStrokeThickness:ef:ip', [1, 1], 'MinorStrokeDashArray:jh:iq', [DoubleCollection.$], 'MinorStroke:jc:ir', [Brush.$], 'MinorStrokeThickness:ei:is', [1, 1], 'ShouldAvoidAnnotationCollisions:co:it', [0, false], 'ShouldKeepAnnotationsInView:cq:iu', [0, false], 'Strip:jd:iv', [Brush.$], 'StrokeDashArray:ji:iw', [DoubleCollection.$], 'Stroke:je:ix', [Brush.$], 'StrokeThickness:ez:iy', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'TickLength:e0:iz', [1, NaN], 'TickStrokeDashArray:jj:i0', [DoubleCollection.$], 'TickStroke:jf:i1', [Brush.$], 'TickStrokeThickness:e1:i2', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'Title:gp:i3', [2], 'TitleSettings:be:i4', [TitleSettings.$, null]]);
    return Axis;
})();
/**
 * @hidden
 */
export let AxisCollection = /*@__PURE__*/ (() => {
    class AxisCollection extends ObservableCollection$1 {
        constructor() {
            super(Axis.$, 0);
            this.collectionResetting = null;
            this.propertyChanged = delegateCombine(this.propertyChanged, (a, b) => {
                if (b.propertyName == "Name") {
                    for (let c = 0; c < this.count; ++c) {
                        if (this._inner[c].name == b.propertyName) {
                            this.ac(new NotifyCollectionChangedEventArgs(2, 2, this._inner[c], this._inner[c], c));
                        }
                    }
                }
            });
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    AxisCollection.$t = /*@__PURE__*/ markType(AxisCollection, 'AxisCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(Axis.$));
    return AxisCollection;
})();
/**
 * @hidden
 */
export let AxisLabelManager = /*@__PURE__*/ (() => {
    class AxisLabelManager extends Base {
        constructor() {
            super();
            this.e = null;
            this.f = null;
            this.b = null;
            this.a = null;
            this.c = null;
            this.c = (a) => {
            };
        }
        n(a, b) {
            this.e.clear();
            this.f.clear();
            this.b.ac = this.a;
            this.b.cx = a;
            this.b.cw = b;
            if (b.isEmpty || a.isEmpty) {
                this.s(0);
                this.a.bp.count = 0;
                this.a.bo.count = 0;
            }
            if (this.a.bq.count == 0 && this.a.bp.count == 0) {
                this.b.ab.clear();
            }
        }
        i(a, b) {
            this.e.add1(a);
            this.f.add(b);
        }
        t() {
            this.b.a5 = this.e;
            this.b.a6 = this.f;
        }
        static j(a, b) {
            AxisLabelManager.k(a, false, b);
        }
        static k(a, b, c) {
        }
        static l(a, b, c) {
        }
        static m(a, b) {
            AxisLabelManager.l(a, true, b);
        }
        h(a) {
            this.b.ab.add(a);
        }
        r(a) {
            this.b.br = a;
        }
        o(a) {
            this.c(a);
        }
        u(a) {
            let b = this.a.bq.item(a);
            return b;
        }
        s(a) {
            if (this.a == null) {
                return;
            }
            this.a.bq.count = a;
        }
        get d() {
            if (this.a == null || this.a.ay == null) {
                return false;
            }
            return this.a.ay.visibility != 0;
        }
        q() {
            this.a.bq.count = 0;
            this.a.bp.count = 0;
            this.a.bo.count = 0;
            this.a.av.a7.clear();
        }
        p() {
            this.a.ck = true;
        }
        g() {
            this.a.gx();
        }
    }
    AxisLabelManager.$t = /*@__PURE__*/ markType(AxisLabelManager, 'AxisLabelManager');
    return AxisLabelManager;
})();
/**
 * @hidden
 */
export let AxisLabelPanelBase = /*@__PURE__*/ (() => {
    class AxisLabelPanelBase extends Panel {
        constructor() {
            super();
            this.cr = null;
            this.br = 0;
            this.ac = null;
            this.aj = false;
            this.az = null;
            this.a6 = null;
            this.cw = null;
            this.cq = Rect.empty;
            this.cp = null;
            this.cv = null;
            this.a8 = 0;
            this.bs = null;
            this.a7 = null;
            this.a4 = null;
            this.af = null;
            this.an = false;
            this.ar = false;
            this.as = false;
            this.at = false;
            this.bu = null;
            this.ak = false;
            this.a9 = 50;
            this.ba = 0;
            this.bb = 0;
            this.cz = new Size();
            this.ba = NaN;
            this.cw = Rect.empty;
            this.cv = Rect.empty;
            this.cu = Rect.empty;
            this.ae = this.ad();
            this.cc(this.ae);
            this.ae.am();
            this.a7 = new List$1(FrameworkElement.$, 0);
            this.a6 = new List$1(LabelPosition.$, 0);
            this.a4 = new List$1(Rect.$, 0);
            this.as = false;
            this.ar = false;
            this.at = false;
            this.an = false;
            this.aj = false;
        }
        ad() {
            return new AxisLabelPanelBaseView(this);
        }
        cc(a) {
        }
        b3() {
        }
        cj() {
        }
        ci() {
        }
        get av() {
            return this.aj;
        }
        set av(a) {
            this.aj = a;
        }
        get a5() {
            return this.az;
        }
        set a5(a) {
            let b = this.az;
            this.az = a;
            if (b == null && b != a) {
                this.b9();
            }
        }
        get cx() {
            return this.cq;
        }
        set cx(a) {
            let b = this.cq;
            this.cq = a;
            this.cn(b, this.cq);
        }
        get cu() {
            if (!this.cv.isEmpty) {
                return this.cv;
            }
            return this.cp;
        }
        set cu(a) {
            let b = this.cp;
            this.cp = a;
            this.b8(b, this.cp);
        }
        get bc() {
            return this.a8;
        }
        set bc(a) {
            this.a8 = a;
        }
        am(a, b) {
            for (let c = 0; c < a.count - 1; c++) {
                if (b._inner[c]) {
                    continue;
                }
                for (let d = c; d < a.count - 1; d++) {
                    if (b._inner[d + 1]) {
                        continue;
                    }
                    if (a._inner[c].intersectsWith(a._inner[d + 1])) {
                        return true;
                    }
                }
            }
            return false;
        }
        bt(a, b, c) {
            return {
                ret: 0,
                p1: b
            };
        }
        a1() {
            return null;
        }
        b1() {
        }
        bx(a) {
        }
        bh() {
            return this.af != null ? this.af.angle : 0;
        }
        bl() {
            return this.ac.be != null ? this.ac.be.angle : 0;
        }
        aq(a, b) {
            if (a == 0 && !this.ac.b4 && this.af != null) {
                if (this.ac.cj) {
                    if (!this.af.showFirstLabel && this.ac.bh.fo() == 1) {
                        return false;
                    }
                }
                else {
                    if (!this.af.showFirstLabel && this.ac.bh.fn() == 1) {
                        return false;
                    }
                }
            }
            return true;
        }
        bg(a) {
            return this.ae.m(a);
        }
        bq(a) {
            return this.ae.w(a);
        }
        bi(a) {
            return this.ae.n(a);
        }
        bf(a) {
            return this.ae.l(a);
        }
        ao() {
            return false;
        }
        cn(a, b) {
        }
        b8(a, b) {
        }
        a3() {
            if (this.ab.count < 1 || this.a6.count == 0) {
                return new List$1(Rect.$, 0);
            }
            this.a7 = new List$1(FrameworkElement.$, 0);
            this.a4 = new List$1(Rect.$, 0);
            this.b1();
            this.ae.ae();
            let a = this.bh();
            if (a % 360 == 0) {
                this.ar = false;
            }
            if (this.a7.count == 0) {
                return new List$1(Rect.$, 0);
            }
            this.a4 = this.a1();
            this.a4 = this.a2(this.a4);
            this.aj = true;
            return this.a4;
        }
        a2(a) {
            if (this.ac.co || this.ac.cq) {
                let b = this.ae.p();
                let c = this.ae.r();
                let d = this.ae.q();
                let e = this.ae.o();
                let f = Math.max(b, Math.max(c, Math.max(d, e)));
                let g = new Thickness(0, f);
                if (this.ar) {
                    g = new Thickness(0, Math.sqrt((f * f) / 2));
                }
                let h = this.a0(a);
                let i = new List$1(Thickness.$, 0);
                if (h.count < 1) {
                    return a;
                }
                h.aa((j, k) => {
                    let l = this.cs(j, a._inner[j], g);
                    let m = this.cs(k, a._inner[k], g);
                    let n = l.top;
                    let o = m.top;
                    if (n < o) {
                        return -1;
                    }
                    if (n > o) {
                        return 1;
                    }
                    return 0;
                });
                for (let j = 0; j < h.count; j++) {
                    let k = h._inner[j];
                    let l = a._inner[k];
                    let m = this.cs(k, a._inner[k], g);
                    let n = this.ac.bh.pv.top;
                    if (this.ac.cq) {
                        if (l.top < (this.ac.bh.pv.top - n)) {
                            l = new Rect(0, l.left, l.top + ((this.ac.bh.pv.top - n) - l.top), l.width, l.height);
                            a._inner[k] = l;
                        }
                    }
                }
                let o = this.ap(a, h, g);
                if (o && (this.ac.co)) {
                    for (let p = 0; p < h.count - 1; p++) {
                        let q = h._inner[p];
                        let r = h._inner[p + 1];
                        let s = a._inner[q];
                        let t = a._inner[r];
                        let u = this.cs(q, a._inner[q], g);
                        let v = this.cs(r, a._inner[r], g);
                        if (u.intersectsWith(v) || u.top > v.bottom) {
                            let w = new Rect(0, t.left, u.bottom + 1 + (t.top - v.top), t.width, t.height);
                            a._inner[r] = w;
                        }
                    }
                }
                for (let x = h.count - 1; x >= 0; x--) {
                    let y = h._inner[x];
                    let z = a._inner[y];
                    let aa = this.cs(y, a._inner[y], g);
                    let ab = this.ac.bh.cf.a3;
                    if (this.ac.cq) {
                        if (aa.bottom > this.ac.bh.pv.bottom + ab) {
                            z = new Rect(0, z.left, z.top - (aa.bottom - (this.ac.bh.pv.bottom + ab)), z.width, z.height);
                            a._inner[y] = z;
                        }
                    }
                }
                if (this.ac.co) {
                    for (let ac = h.count - 1; ac >= 1; ac--) {
                        let ad = h._inner[ac];
                        let ae = h._inner[ac - 1];
                        let af = a._inner[ad];
                        let ag = a._inner[ae];
                        let ah = this.cs(ad, a._inner[ad], g);
                        let ai = this.cs(ae, a._inner[ae], g);
                        if (ah.intersectsWith(ai) || ah.top < ai.bottom) {
                            let aj = new Rect(0, ag.left, ah.top - (ai.height + 1 + (ag.top - ai.top)), ag.width, ag.height);
                            a._inner[ae] = aj;
                        }
                    }
                }
                return a;
            }
            else {
                return a;
            }
        }
        cs(a, b, c) {
            let d = this.a6._inner[a];
            let e = d.d;
            if (isNaN_(e.c) || isNaN_(e.e) || isNaN_(e.d) || isNaN_(e.b)) {
                e = c;
            }
            if (e.c > c.c || e.e > c.e || e.d > c.d || e.b > c.b) {
                e = c;
            }
            let f = new Rect(0, b.left - e.c, b.top - e.e, b.width + e.c + e.d, b.height + e.e + e.b);
            return f;
        }
        ap(a, b, c) {
            if (b.count <= 1) {
                return false;
            }
            for (let d = 0; d < b.count - 1; d++) {
                let e = b._inner[d];
                let f = b._inner[d + 1];
                let g = a._inner[e];
                let h = a._inner[f];
                let i = this.cs(e, a._inner[e], c);
                let j = this.cs(f, a._inner[f], c);
                if (i.intersectsWith(j)) {
                    return true;
                }
            }
            return false;
        }
        a0(a) {
            let b = new List$1(Number_$type, 0);
            for (let c = 0; c < a.count; c++) {
                let d = this.a6._inner[c].a;
                if (d) {
                    b.add(c);
                }
            }
            return b;
        }
        bk(a, b) {
            let c = a * (Math.PI / 180);
            let d = Math.abs(b.width * Math.cos(c)) + Math.abs(b.height * Math.sin(c));
            return d;
        }
        bj(a, b) {
            let c = a * (Math.PI / 180);
            let d = Math.abs(b.height * Math.cos(c)) + Math.abs(b.width * Math.sin(c));
            return d;
        }
        bo() {
            let a = this.ae.k();
            return a;
        }
        bm() {
            let a = this.ae.j();
            return a;
        }
        bn() {
            if (this.ac.gp == null || (this.ac.be != null && this.ac.be.visibility == 1)) {
                return 0;
            }
            let a = this.bm();
            let b = this.bo();
            let c = new Rect(0, 0, 0, b, a);
            let d = this.bl();
            let e = RectUtil.w(c, d);
            return e.height + this.ae.v() + this.ae.s();
        }
        bp() {
            if (this.ac.gp == null || (this.ac.be != null && this.ac.be.visibility == 1)) {
                return 0;
            }
            let a = this.bm();
            let b = this.bo();
            let c = new Rect(0, 0, 0, b, a);
            let d = this.bl();
            let e = RectUtil.w(c, d);
            return e.width + this.ae.t() + this.ae.u();
        }
        cy(a) {
            if (this.ac == null || this.ab.count == 0) {
                return a;
            }
            this.b0(a);
            this.b4();
            this.bz(a);
            this.a4 = this.a3();
            if (this.a7.count != this.a4.count) {
                return a;
            }
            let b = this.ae.p();
            let c = this.ae.r();
            let d = this.ae.q();
            let e = this.ae.o();
            if (this.ar) {
                for (let f = 0; f < this.a7.count; f++) {
                    if (this.aq(f, this.a4._inner[f])) {
                        this.ae.aa(this.a7._inner[f], this.a4._inner[f], b, c, d, e);
                    }
                    this.cg(this.a7._inner[f], this.bh());
                }
            }
            for (let g = 0; g < this.a7.count; g++) {
                if (!this.ar) {
                    this.ae.ad(this.a7._inner[g]);
                }
                if (this.aq(g, this.a4._inner[g])) {
                    this.ae.aa(this.a7._inner[g], this.a4._inner[g], b, c, d, e);
                }
                else {
                    this.ae.aa(this.a7._inner[g], new Rect(0, 0, 0, 0, 0), b, c, d, e);
                }
            }
            if (this.ac.bp.count > 0) {
                this.ac.a7.arrangeAnnotations(this.ac, this.ae, this.a7, this.a4, this.ar, this.bh(), b, c, d, e);
            }
            this.bx(a);
            if (this.ao() && this.al && this.ac != null && this.ac.bf != null && !this.ac.cl && this.ac.bf.qn && !this.ac.bf.qj && this.a4 != null && this.a4.count > 0) {
                this.ac.bf.sg(this, this.cu, this.a4._inner[0], this.a4._inner[this.a4.count - 1]);
            }
            return a;
        }
        get al() {
            return this.ac.ay != null && (this.ac.ay.c != 5 && this.ac.ay.c != 4);
        }
        ct() {
            return Rect.empty;
        }
        b0(a) {
            if (this.ac.h6 == null) {
                return;
            }
            this.ae.ah(this.ac.h6, new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
            let b = Math.abs(this.bl() - 0) > 1E-06;
            let c = this.ct();
            let d = c.left + (c.width / 2);
            let e = c.top + (c.height / 2);
            let f = this.bo() + this.ae.t() + this.ae.u();
            let g = this.bm() + this.ae.v() + this.ae.s();
            let h = f / 2;
            let i = g / 2;
            let j = new Rect(0, d - h, e - i, f, g);
            if (b) {
                this.ch(this.ac.h6);
            }
            else {
                this.ae.ad(this.ac.h6);
            }
            this.ae.aa(this.ac.h6, j, this.ae.t(), this.ae.v(), this.ae.u(), this.ae.s());
            if ((this.ac.be == null || this.ac.be.visibility == 0) && (this.ac.ay == null || this.ac.ay.visibility == 0) && this.ac.gp != null) {
                this.ac.h6._visibility = 0;
            }
            else {
                this.ac.h6._visibility = 1;
                this.ae.aa(this.ac.h6, new Rect(0, 0, 0, 0, 0), 0, 0, 0, 0);
            }
        }
        bz(a) {
            this.ae.ab(a);
        }
        b4() {
        }
        ay() {
            if (typeCast(CategoryAxisBase.$, this.ac) !== null) {
                return this.ac.kd;
            }
            if (typeCast(NumericAxisBase.$, this.ac) !== null) {
                let a = new List$1(Number_$type, 0);
                let d = this.ac.kb.j();
                for (let c = 0; c < d.length; c++) {
                    let b = d[c];
                    let e = this.ac.jn();
                    let f = new ScalerParams(0, this.ac.bh.pw, this.ac.js, this.ac.cd, e);
                    a.add(this.ac.d8(b, f));
                }
                return a;
            }
            return null;
        }
        get ag() {
            let a = this.af != null ? this.af.c : this.ah();
            if (this.ac.ai == null) {
                if (a == 4) {
                    a = 5;
                }
                else if (a == 5) {
                    a = 4;
                }
                else if (a == 6) {
                    a = 7;
                }
                else if (a == 7) {
                    a = 6;
                }
            }
            return a;
        }
        cm(a, b, c, d, e, f) {
            let g = b;
            let h = b;
            if (f != null) {
                let i = f.c / 2;
                g -= i;
                h += i;
            }
            if (h >= e.left && g <= e.right) {
                if (f.a) {
                    b = this.ac.ds(b, e.left, e.right, f);
                }
                let j = new LineGeometry();
                j.d = { $type: Point_$type, x: b, y: c };
                j.c = { $type: Point_$type, x: b, y: d };
                a.add(j);
            }
        }
        b7(a, b, c, d, e, f) {
            if (b <= e.bottom && b >= e.top) {
                if (f.a) {
                    b = this.ac.ds(b, e.top, e.bottom, f);
                }
                let g = new LineGeometry();
                g.d = { $type: Point_$type, x: c, y: b };
                g.c = { $type: Point_$type, x: d, y: b };
                a.add(g);
            }
        }
        cg(a, b) {
            let c = this.bh();
            this.ae.ai(a, c);
        }
        ch(a) {
            let b = this.bl();
            this.b6(a, b);
        }
        b6(a, b) {
            let c = typeCast(FrameworkElement.$, a);
            let d = this.bm();
            let e = this.bo();
            let f = 0.5 * e;
            let g = 0.5 * d;
            let h = ((() => {
                let $ret = new RotateTransform();
                $ret.j = b;
                $ret.k = f;
                $ret.l = g;
                return $ret;
            })());
            let i = new TransformGroup();
            i.j.add(h);
            c.j = i;
        }
        c0(a) {
            if ((this.ab.contains(this.ac.h6) == false) && this.ac.h6 != null) {
                this.ab.add(this.ac.h6);
                AxisLabelManager.m(this.ac.h6, this.ac.be);
            }
            for (let b of fromEnum(this.ab)) {
                if (b != this.ac.h6 && b != this.ae.av) {
                    this.ae.ag(b);
                }
            }
            let c = (this.ac == null || this.a9 <= 0 || isNaN_(this.a9)) ? 50 : this.a9;
            if (this.ac != null && (this.ac.c7 == null || this.ac.c7.count == 0)) {
                if (this.ac.b3()) {
                    c = this.ac.ee();
                }
            }
            let d = this.ao();
            c = Math.min(c, d ? a.height : a.width);
            c = isInfinity(c) ? 50 : c;
            return d ? new Size(1, 50, c) : new Size(1, c, 50);
        }
        get bd() {
            return this.c(AxisLabelPanelBase.co);
        }
        set bd(a) {
            this.h(AxisLabelPanelBase.co, a);
        }
        ai(a) {
            if (a == null) {
                return this.ac.bh.an(this.ac);
            }
            if (a.position == 0) {
                if (this.ac != null && this.ac.bh != null) {
                    return this.ac.bh.an(this.ac);
                }
                return 4;
            }
            return a.position;
        }
        ah() {
            return 1;
        }
        au(a) {
            return true;
        }
        *_aw() {
            for (let a of fromEnum(this.ab)) {
                if (a != this.ac.h6 && a != this.ae.av) {
                    yield a;
                }
            }
        }
        aw() {
            return toEnum(() => this._aw());
        }
        bw(a, b, c, d, e) {
            let f = this.ae.x(b, c, d, e);
            return f;
        }
        b2(a) {
            if (this.bu == null || this.bg(this.bu) < this.bg(a)) {
                this.bu = a;
            }
        }
        cb(a) {
            this.a7.add(a);
        }
        *_ax() {
            for (let a = 0; a < this.ac.bq.count; a++) {
                yield this.ac.bq.item(a);
            }
            for (let b = 0; b < this.ac.bp.count; b++) {
                yield this.ac.bp.item(b);
            }
        }
        ax() {
            return toEnum(() => this._ax());
        }
        b5() {
            this.ae.af();
            this.cl();
        }
        cl() {
            this.a4 = this.a3();
        }
        b9() {
        }
        be(a) {
            return this.a9;
        }
        cd() {
            this.cv = new Rect(0, 0, 0, this.cz.width, this.cz.height);
        }
        ck() {
            this.cv = Rect.empty;
        }
        ca() {
            this.ae.aj();
        }
        ce(a) {
            this.ae.ak(a);
        }
        by() {
            this.ae.y();
        }
        cf() {
            this.ae.an();
        }
    }
    AxisLabelPanelBase.$t = /*@__PURE__*/ markType(AxisLabelPanelBase, 'AxisLabelPanelBase', Panel.$);
    AxisLabelPanelBase.co = /*@__PURE__*/ DependencyProperty.i("Extent", Number_$type, AxisLabelPanelBase.$, /*@__PURE__*/ new PropertyMetadata(2, 50, (a, b) => a.a9 = b.newValue));
    return AxisLabelPanelBase;
})();
/**
 * @hidden
 */
export let CategoryAxisBase = /*@__PURE__*/ (() => {
    class CategoryAxisBase extends Axis {
        constructor() {
            super();
            this.kd = null;
            this.j5 = null;
            this.ko = 0;
            this.kq = 0;
            this.j3 = 0;
            this.kp = 0;
            this.j7 = false;
            this.kd = new List$1(Number_$type, 0);
        }
        a3() {
            return new CategoryAxisBaseView(this);
        }
        get_b8() {
            return false;
        }
        ha(a) {
            super.ha(a);
            this.j2 = a;
        }
        d6(a, b, c, d) {
            let e = this.getCategorySize(b, c, d);
            let f = e * a;
            return f;
        }
        c1(a, b, c) {
            let d = super.c1(a, b, c);
            if (!d) {
                return false;
            }
            return this.itemsSource != null && this.kq > 0;
        }
        la() {
            if (this.j6 != null && this.bn != null && this.itemsSource != null) {
                this.j6 = this.bn.releaseFastItemsSource(this.itemsSource);
            }
        }
        k9() {
            if (this.j6 == null && this.bn != null && this.itemsSource != null) {
                this.j6 = this.bn.getFastItemsSource(this.itemsSource);
            }
        }
        get_b6() {
            return true;
        }
        ll(a, b, c) {
            if (this.b4) {
                return Rect.empty;
            }
            return this.lm(a, b, c, this.cj);
        }
        lm(a, b, c, d) {
            let e = 0;
            let f = a.x;
            let g = this.js.left;
            let h = this.js.right;
            if (d) {
                f = a.y;
                g = this.js.top;
                h = this.js.bottom;
            }
            let i = this.kd;
            if ((d && !this.cc) || (!d && this.cc)) {
                i = new List$1(Number_$type, 0);
                for (let j = this.kd.count - 1; j >= 0; j--) {
                    i.add(this.kd._inner[j]);
                }
            }
            if (this.categoryMode == 0) {
                if (b) {
                    let k;
                    if (d) {
                        k = new Rect(0, this.js.left, a.y - c / 2, this.js.width, c);
                    }
                    else {
                        k = new Rect(0, a.x - c / 2, this.js.top, c, this.js.height);
                    }
                    k.intersect(this.js);
                    return k;
                }
                else {
                    if (f > h) {
                        return Rect.empty;
                    }
                    if (f < g) {
                        return Rect.empty;
                    }
                    let l = 1.7976931348623157E+308;
                    let m = -1;
                    for (e = 0; e < i.count; e++) {
                        let n = Math.abs(i._inner[e] - f);
                        if (n < l) {
                            l = n;
                            m = e;
                        }
                    }
                    if (m == -1) {
                        return Rect.empty;
                    }
                    let o = i._inner[m];
                    let p;
                    if (d) {
                        p = new Rect(0, this.js.left, o - c / 2, this.js.width, c);
                    }
                    else {
                        p = new Rect(0, o - c / 2, this.js.top, c, this.js.height);
                    }
                    p.intersect(this.js);
                    return p;
                }
            }
            else {
                for (e = 0; e < i.count; e++) {
                    if (i._inner[e] > f) {
                        break;
                    }
                }
                if (e == 0) {
                    return Rect.empty;
                }
                if (f > h) {
                    return Rect.empty;
                }
                if (f < g) {
                    return Rect.empty;
                }
                let q = this.js.right;
                if (d) {
                    q = this.js.bottom;
                }
                if (e < i.count) {
                    q = i._inner[e];
                }
                if (d) {
                    return new Rect(0, this.js.left, i._inner[e - 1], this.js.width, q - i._inner[e - 1]);
                }
                else {
                    return new Rect(0, i._inner[e - 1], this.js.top, q - i._inner[e - 1], this.js.height);
                }
            }
        }
        get itemsSource() {
            return this.c(CategoryAxisBase.li);
        }
        set itemsSource(a) {
            this.h(CategoryAxisBase.li, a);
        }
        get kr() {
            return this.ko;
        }
        set kr(a) {
            this.ko = a;
            this.kq = this.ko;
        }
        get categoryMode() {
            return this.j3;
        }
        set categoryMode(a) {
            if (this.j3 != a) {
                let b = this.j3;
                this.j3 = a;
                this.hk("CategoryMode", enumGetBox(CategoryMode_$type, b), enumGetBox(CategoryMode_$type, a));
            }
        }
        get ks() {
            return this.kp;
        }
        set ks(a) {
            if (a != this.kp) {
                let b = this.kp;
                this.kp = a;
                this.hk("GroupCount", b, this.kp);
            }
        }
        eb(a, b) {
            return NaN;
        }
        getUnscaledValue3(a, b, c, d) {
            return NaN;
        }
        getCategorySize(a, b, c) {
            return NaN;
        }
        ki(a, b, c) {
            return NaN;
        }
        getGroupCenter(a, b, c, d) {
            return NaN;
        }
        kn(a) {
            let b = this.bh.pw;
            let c = this.js;
            let d = this.jn();
            let e = new ScalerParams(0, b, c, this.cc, d);
            return this.eb(a, e);
        }
        *_kc() {
            for (let a of fromEnum(this.c7)) {
                yield a;
            }
            if (this.bh != null && this.bh.d0 && this.j9(this.bh)) {
                for (let b of fromEnum(this.bh.eu())) {
                    if (b != this.bh) {
                        for (let c of fromEnum(b.series)) {
                            yield c;
                        }
                    }
                }
            }
        }
        kc() {
            return toEnum(() => this._kc());
        }
        j8(a) {
            return this.c7.contains(a);
        }
        j9(a) {
            return false;
        }
        *_kb() {
            let a = typeCast(XamDataChart.$, this.bh);
            if (a != null && a.d0 && this.j9(a)) {
                for (let b of fromEnum(a.eu())) {
                    if (b != this.bh) {
                        let c = typeCast(XamDataChart.$, b);
                        if (c != null) {
                            for (let d of fromEnum(c.axes)) {
                                if (typeCast(CategoryAxisBase.$, d) !== null) {
                                    yield typeCast(CategoryAxisBase.$, d);
                                }
                            }
                        }
                    }
                }
            }
        }
        kb() {
            return toEnum(() => this._kb());
        }
        le(a) {
            if (this.j7) {
                return;
            }
            try {
                this.j7 = true;
                let b = 0;
                let c = 0;
                let d = false;
                for (let e of fromEnum(this.kc())) {
                    if (!e.da && !e.d4 && !e.di) {
                        continue;
                    }
                    let f = e;
                    let g = f.preferredCategoryMode(this);
                    if (g == 2) {
                        b = 2;
                        d = true;
                        if (this.j8(e)) {
                            c++;
                        }
                    }
                    if (g == 1 && !d) {
                        b = 1;
                    }
                }
                let h = this.ka;
                for (let i of fromEnum(this.kb())) {
                    if (i.ka) {
                        h = true;
                    }
                    if (a) {
                        i.le(false);
                    }
                }
                if (b == 0 && h) {
                    b = 2;
                    if (c == 0) {
                        c = 1;
                    }
                }
                this.categoryMode = b;
                this.ks = c;
            }
            finally {
                this.j7 = false;
            }
        }
        he(a, b, c, d) {
            super.he(a, b, c, d);
            switch (b) {
                case "FastItemsSourceProvider":
                    if ((typeCast(IFastItemsSourceProvider_$type, c)) != null) {
                        this.j6 = c.releaseFastItemsSource(this.itemsSource);
                    }
                    if ((typeCast(IFastItemsSourceProvider_$type, d)) != null) {
                        this.j6 = d.getFastItemsSource(this.itemsSource);
                    }
                    this.kr = 0;
                    if (this.j6 != null) {
                        this.kr = this.j6.count;
                    }
                    this.le(true);
                    break;
                case "ItemsSource":
                    if (this.bn != null) {
                        this.j6 = this.bn.getFastItemsSource(this.itemsSource);
                    }
                    break;
                case CategoryAxisBase.$$p[0]:
                    let e = typeCast(IFastItemsSource_$type, c);
                    this.k1();
                    this.ck = true;
                    if (e != null) {
                        e.event = delegateRemove(e.event, runOn(this, this.k4));
                    }
                    this.kr = 0;
                    if (this.j6 != null) {
                        this.kr = this.j6.count;
                    }
                    if (this.j6 != null) {
                        let f = this.j6;
                        f.event = delegateCombine(f.event, runOn(this, this.k4));
                        this.hq(false);
                        for (let g of fromEnum(this.c4())) {
                            g.l0(false);
                            if (g.ca != null) {
                                g.k7();
                            }
                        }
                    }
                    else {
                        this.gz();
                        for (let h of fromEnum(this.c4())) {
                            h.kh(true, h.bx);
                            if (h.ca != null) {
                                h.k7();
                            }
                        }
                    }
                    break;
                case "ItemsCount":
                    this.hl(new AxisRangeChangedEventArgs(0, 0, 0, typeGetValue((c)) - 1, typeGetValue((d)) - 1));
                    this.hq(false);
                    break;
                case CategoryAxisBase.$$p[3]:
                    this.ck = true;
                    this.lf();
                    this.hq(false);
                    this.k2();
                    break;
                case "CategoryMode":
                    this.ck = true;
                    this.hq(false);
                    this.lc();
                    this.k2();
                    break;
                case CategoryAxisBase.$$p[2]:
                case CategoryAxisBase.$$p[1]:
                    this.ck = true;
                    for (let i of fromEnum(this.c4())) {
                        i.et = true;
                        let j = typeCast(IHasCategoryModePreference_$type, i);
                        if (j != null && j.preferredCategoryMode(this) == 2) {
                            i.l0(false);
                        }
                    }
                    this.hq(false);
                    if (this.bh != null) {
                        this.bh.jz();
                    }
                    break;
                case Axis.$$p[4]:
                case Axis.$$p[3]:
                    this.ck = true;
                    this.hq(true);
                    break;
            }
        }
        k2() {
            for (let a of fromEnum(this.c4())) {
                a.l0(false);
            }
        }
        k4(a, b) {
            this.lb(b);
        }
        lb(a) {
            switch (a.action) {
                case 3:
                case 0:
                case 1:
                case 2:
                case 4:
                    if (this.j6 != null) {
                        this.kr = this.j6.count;
                    }
                    this.hq(false);
                    break;
            }
            if (this.j6 != null) {
                this.kr = this.j6.count;
            }
        }
        lf() {
            let a = false, b = false;
            for (let c of fromEnum(this.c7)) {
                let d = typeCast(IHasCategoryModePreference_$type, c);
                if (d == null) {
                    continue;
                }
                let e = d.preferredCategoryMode(this);
                a = a || e == 1;
                b = b || e == 2;
            }
            let f = b ? 2 : a ? 1 : 0;
            if (f == 0 && this.ka) {
                f = 1;
                if (this.ks == 0) {
                    this.ks = 1;
                }
            }
            this.categoryMode = f;
        }
        cn(a) {
            let b = super.cn(a);
            if (b) {
                this.le(true);
                let c = typeCast(IHasCategoryModePreference_$type, a);
                if (c != null && c.preferredCategoryMode(this) == 2) {
                    for (let d of fromEnum(this.c4())) {
                        let e = typeCast(IHasCategoryModePreference_$type, d);
                        if (e != null && e != c && e.preferredCategoryMode(this) == 2) {
                            d.l0(false);
                        }
                    }
                }
                this.hq(false);
                this.cv();
            }
            return b;
        }
        bx(a) {
            let b = super.bx(a);
            if (b) {
                this.le(true);
                let c = typeCast(IHasCategoryModePreference_$type, a);
                if (c != null && c.preferredCategoryMode(this) != 0) {
                    for (let d of fromEnum(this.c4())) {
                        let e = typeCast(IHasCategoryModePreference_$type, d);
                        if (e != null) {
                            d.l0(false);
                        }
                    }
                }
                this.hq(false);
            }
            return b;
        }
        lc() {
            let a = null;
            for (let b of fromEnum(this.c4())) {
                if (b.da) {
                    let c = b.an(this);
                    if (c != null && c.ai == this) {
                        a = c;
                    }
                }
            }
            if (a != null) {
                a.hp();
            }
        }
        k1() {
            this.j5 = this.j6;
        }
        ld() {
            let a = this.ay;
            if (a == null) {
                a = new AxisLabelSettings();
            }
            if (a.visibility == 1) {
                this.bq.count = 0;
                this.bp.count = 0;
                this.bo.count = 0;
            }
            else {
                let b = 0;
                b = this.j2.bf(this.c5);
                this.bq.count = b;
            }
        }
        k3(a) {
            if (this.j6 != null) {
                this.j6.handleCollectionChanged(a);
            }
        }
        k8(a, b, c) {
            this.k3(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
        }
        k5() {
            this.k3(new NotifyCollectionChangedEventArgs(0, 4));
        }
        k6(a, b) {
            this.k3(new NotifyCollectionChangedEventArgs(1, 0, b, a));
        }
        k7(a, b) {
            this.k3(new NotifyCollectionChangedEventArgs(1, 1, b, a));
        }
        kj(a, b, c, d) {
            return this.kk(a, b, c, d, this.categoryMode);
        }
        kk(a, b, c, d, e) {
            let f = 0;
            let g = e;
            if (g == 0 && this.categoryMode != 0) {
                g = 1;
            }
            switch (g) {
                case 0:
                    f = 0;
                    break;
                case 1:
                    f = 0.5 * this.getCategorySize(a, b, c);
                    break;
                case 2:
                    f = this.getGroupCenter(d, a, b, c);
                    break;
            }
            if (this.cj != this.cc) {
                f *= -1;
            }
            return f;
        }
        getSeriesOffset(a, b, c, d, e) {
            return this.kk(a, b, c, d, e);
        }
        get isVertical() {
            return this.cj;
        }
        j$c(a, b) {
            return this.eb.apply(this, arguments);
        }
        j$b(a, b) {
            return this.d8.apply(this, arguments);
        }
        j$d(a, b, c, d, e) {
            this.g4.apply(this, arguments);
        }
        j$e(a, b, c, d) {
            this.g5.apply(this, arguments);
        }
        j$f(a, b, c, d) {
            this.g6.apply(this, arguments);
        }
        get j$a() {
            return this.cc;
        }
    }
    CategoryAxisBase.$t = /*@__PURE__*/ markType(CategoryAxisBase, 'CategoryAxisBase', Axis.$, [ICategoryScaler_$type]);
    CategoryAxisBase.li = /*@__PURE__*/ DependencyProperty.i("ItemsSource", IEnumerable_$type, CategoryAxisBase.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(CategoryAxisBase.$, a);
        if (c.bn != null) {
            c.bn.releaseFastItemsSource(b.oldValue);
        }
        a.hk("ItemsSource", b.oldValue, b.newValue);
    }));
    CategoryAxisBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CategoryAxisBase, 'hk', ['FastItemsSource:j6:lg', [IFastItemsSource_$type], 'Gap:kf:lh', [1, 0.2], 'Overlap:km:lj', [1, 0], 'UseClusteringMode:ka:lk', [0, false]]);
    return CategoryAxisBase;
})();
/**
 * @hidden
 */
export let HorizontalAxisLabelPanelBase = /*@__PURE__*/ (() => {
    class HorizontalAxisLabelPanelBase extends AxisLabelPanelBase {
        constructor() {
            super(...arguments);
            this.dd = 0;
            this.da = 0;
            this.dc = 0;
            this.db = 0;
        }
        ad() {
            return new HorizontalAxisLabelPanelBaseView(this);
        }
        cc(a) {
            super.cc(a);
            this.c1 = a;
        }
        b1() {
            this.c1.az();
        }
        c3() {
            return this.af != null && this.af.j() && this.bh() % 360 != 0;
        }
        c4() {
            return this.an && !this.ar;
        }
        ao() {
            return true;
        }
        a1() {
            let a = new List$1(Rect.$, 0);
            let b = new List$1(Boolean_$type, 0);
            this.as = false;
            this.ar = false;
            this.at = false;
            let c = this.af != null ? (this.af.angle) : 0;
            let d = c * Math.PI / 180;
            if (this.c3()) {
                this.ar = true;
            }
            this.an = false;
            this.df(a, b, d);
            this.an = this.an || this.am(a, b);
            if (this.an) {
                this.dh(a, b);
            }
            else {
                this.di();
            }
            let e = this.ac.b3();
            if (!e) {
                this.de(c);
            }
            else {
                this.ae.ac();
            }
            if (this.ar) {
                for (let f = 0; f < a.count; f++) {
                    let g = a._inner[f];
                    g.x = this.a6._inner[f].c;
                    a._inner[f] = g;
                }
            }
            let h = 0;
            if (this.c4()) {
                h = ((() => { let i = this.bt(this.da, a, b); a = i.p1; return i.ret; })());
            }
            if (this.an && !this.as) {
                if (h > 0) {
                    if (this.c1.ay()) {
                        this.at = true;
                    }
                }
            }
            if (this.an && this.c2()) {
                let i = this.cu.width;
                let j = this.c8();
                let k = this.c7();
                let l = this.a6.count > 1 ? this.a6._inner[1].c - this.a6._inner[0].c : i;
                let m = Math.abs(l * 0.8);
                let n = 0;
                let o = Math.abs(Math.atan(this.da / l) * 180 / Math.PI);
                let p = this.ae.p();
                let q = this.ae.q();
                for (let r = 0; r < a.count; r++) {
                    if (this.ak) {
                        if (r > 0 && r < a.count - 1) {
                            let s = this.a6.count > 1 ? this.a6._inner[r].c - (a._inner[r - 1].x + a._inner[r - 1].width) : i;
                            let t = this.a6.count > 1 ? a._inner[r + 1].x - this.a6._inner[r].c : i;
                            m = Math.abs(Math.min(Math.abs(s * 2), Math.abs(t * 2)) * 0.8);
                        }
                        else {
                            if (r == 0) {
                                let u = this.a6.count > 1 ? a._inner[r + 1].x - this.a6._inner[r].c : i;
                                m = Math.abs((l * 2) * 0.8);
                            }
                            if (r == a.count - 1) {
                                let v = this.a6.count > 1 ? this.a6._inner[r].c - (a._inner[r - 1].x + a._inner[r - 1].width) : i;
                                m = Math.abs((v * 2) * 0.8);
                            }
                        }
                    }
                    let w = Math.min(a._inner[r].width, m);
                    n = this.ar ? this.a6._inner[r].c : this.a6._inner[r].c - w / 2;
                    let x = AngleSimplifier.a(c);
                    let y = (x >= o && x <= 180 - o) || (x >= 180 + o && x <= 360 - o);
                    let z = a._inner[r];
                    if (this.ar && y) {
                        let aa = this.bq(this.a7._inner[r]);
                        m = Math.min(j / Math.abs(Math.sin(d)), aa);
                    }
                    z.x = n;
                    z.width = Math.min(m, z.width);
                    a._inner[r] = z;
                    if (!(typeCast(TextBlock.$, this.a7._inner[r]) !== null)) {
                        this.a7._inner[r].width = Math.min(m, z.width);
                    }
                    let ab = typeCast(TextBlock.$, this.a7._inner[r]);
                    if (ab != null) {
                        let ac = this.bw(r, ab, m, p, q);
                        if (this.at) {
                            ab.height = k;
                        }
                        else if (!Base.equalsStatic(ab.ak, ac)) {
                            ab.ak = ac;
                            this.a7._inner[r].width = Math.min(m, this.bg(this.a7._inner[r]));
                            this.dc = Math.min(this.dc, this.a7._inner[r].width);
                        }
                    }
                }
                if (!e) {
                    this.de(c);
                }
            }
            if (this.c5()) {
                this.dg(a);
            }
            return a;
        }
        df(a, b, c) {
            let d = this.bn();
            let e = this.c9();
            this.da = -1.7976931348623157E+308;
            this.dd = -1.7976931348623157E+308;
            this.db = -1.7976931348623157E+308;
            this.dc = -1.7976931348623157E+308;
            let f = this.ae.p();
            let g = this.ae.q();
            let h = this.ae.r();
            let i = this.ae.o();
            let j = this.cu.top;
            let k = (this.cu.height - d);
            let l = false;
            for (let m = 0; m < this.a7.count; m++) {
                if (!this.a6._inner[m].a) {
                    l = true;
                }
            }
            for (let n = 0; n < this.a7.count; n++) {
                if (this.a6 == null || n >= this.a6.count) {
                    break;
                }
                let o, p, q, r, s, t;
                let u = this.a7._inner[n];
                s = this.bg(u);
                t = this.bf(u);
                r = s + this.ae.p() + this.ae.q();
                q = t + h + i;
                let v = this.a6._inner[n].a;
                if (this.ar) {
                    o = this.a6._inner[n].c;
                }
                else {
                    o = this.a6._inner[n].c - r / 2;
                }
                p = j + e;
                if (!v || !l) {
                    this.da = Math.max(q, this.da);
                    this.dd = Math.max(r, this.dd);
                    this.db = Math.max(t, this.db);
                    this.dc = Math.max(s, this.dc);
                }
                let w = new Rect(0, o, p, r, q);
                a.add(w);
                b.add(v);
                let x = r * Math.abs(Math.sin(c));
                this.an = this.an || x > k;
            }
        }
        de(a) {
            let b = a * (Math.PI / 180);
            let c = Math.abs(this.dc * Math.sin(b)) + Math.abs(this.db * Math.cos(b));
            c += this.ae.r() + this.ae.o();
            let d = this.bn();
            this.bd = (c) + (d) + this.ac.dr;
        }
        dg(a) {
            this.c1.a0(a);
        }
        dh(a, b) {
        }
        di() {
        }
        cg(a, b) {
            let c = a.l;
            let d = a.m;
            let e = 0;
            let f = c / 2;
            let g = new TransformGroup();
            let h = AngleSimplifier.a(this.bh());
            let i = ((() => {
                let $ret = new RotateTransform();
                $ret.j = h;
                $ret.k = e;
                $ret.l = f;
                return $ret;
            })());
            let j = 0;
            let k = 0;
            if (h != 0 && h != 360) {
                if (h > 0 && h < 180) {
                    j = -Math.sin(MathUtil.k(h)) * (c / 2);
                }
                else {
                    i.k = d;
                    k = -d;
                    j = -Math.sin(MathUtil.k(h - 180)) * (c / 2);
                }
            }
            let l = ((() => {
                let $ret = new TranslateTransform();
                $ret.k = j;
                $ret.j = k;
                return $ret;
            })());
            g.j.add(i);
            g.j.add(l);
            a.j = g;
        }
        c5() {
            return !this.as && !this.ar;
        }
        c2() {
            return true;
        }
        bt(a, b, c) {
            let d = 0;
            let e = new List$1(Rect.$, 0);
            let f = this.c9() + this.cu.top;
            let g = this.c8();
            let h = f + g;
            if (a * 3 <= this.a9) {
                d = 3;
            }
            else if (a * 2 <= this.a9) {
                d = 2;
            }
            else {
                return {
                    ret: d,
                    p1: b
                };
            }
            let i = 0;
            for (let j = 0; j < b.count; j++) {
                let k = RectUtil.p(b._inner[j]);
                if (!c._inner[j]) {
                    if (i % d == 0) {
                        k.y = f;
                    }
                    else if (i % d == d - 1) {
                        k.y = h - k.height;
                    }
                    else {
                        k.y = (f + (g / 2)) - k.height / 2;
                    }
                    i++;
                }
                e.add(k);
            }
            this.an = this.am(e, c);
            if (!this.an) {
                this.as = true;
                b = e;
            }
            return {
                ret: d,
                p1: b
            };
        }
        ct() {
            let a = this.ai(this.ac.be);
            let b = this.bn();
            let c = this.ag;
            let d = 0;
            if (a == 3) {
                d += this.cu.top;
                if (c == 1 || c == 5) {
                    d += this.ac.dr;
                }
            }
            else {
                d = this.cu.bottom - b;
                if (c == 4 || c == 0) {
                    d -= this.ac.dr;
                }
            }
            let e = this.bp();
            let f = 0;
            let g = this.ac.be == null ? 1 : this.ac.be.horizontalAlignment;
            if (g == 0) {
                f = this.cu.left;
            }
            else if (g == 2) {
                f = this.cu.right - e;
            }
            else {
                f = (this.cu.left + (this.cu.width / 2)) - (e / 2);
            }
            return new Rect(0, f, d, e, b);
        }
        c9() {
            let a = 0;
            let b = this.ai(this.ac.be);
            if (b == 3) {
                a += this.bn();
            }
            let c = this.ag;
            if (c == 1 || c == 5) {
                a += this.ac.dr;
            }
            return a;
        }
        c6() {
            let a = 0;
            let b = this.ai(this.ac.be);
            if (b == 4) {
                a += this.bn();
            }
            let c = this.ag;
            if (c == 0 || c == 4) {
                a += this.ac.dr;
            }
            return a;
        }
        c8() {
            let a = (this.a9 - this.c9()) - this.c6();
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        c7() {
            let a = ((this.c8() - this.ae.r()) - this.ae.o());
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        b4() {
            let a = this.ae.at();
            this.ac.g0(a);
            if (this.af != null && this.af.visibility != 0) {
                return;
            }
            let b = this.ac.dr;
            if (b == 0) {
                return;
            }
            let c = this.ay();
            if (c == null) {
                return;
            }
            let d = this.cu.top;
            let e;
            let f = this.ag;
            if (f == 0 || f == 4) {
                d = this.cu.bottom;
                e = d - this.ac.dr;
            }
            else {
                e = d + this.ac.dr;
            }
            let g = this.ae.b();
            for (let h of fromEnum(c)) {
                this.cm(a, h, d, e, this.cw, g);
            }
            if (!this.ab.contains(this.ae.av)) {
                this.ab.add(this.ae.av);
            }
        }
        a2(a) {
            if (this.ac.co || this.ac.cq) {
                let b = this.ae.p();
                let c = this.ae.r();
                let d = this.ae.q();
                let e = this.ae.o();
                let f = Math.max(b, Math.max(c, Math.max(d, e)));
                let g = new Thickness(0, f);
                if (this.ar) {
                    g = new Thickness(0, Math.sqrt((f * f) / 2));
                }
                let h = this.a0(a);
                let i = new List$1(Thickness.$, 0);
                if (h.count < 1) {
                    return a;
                }
                h.aa((j, k) => {
                    let l = this.cs(j, a._inner[j], g);
                    let m = this.cs(k, a._inner[k], g);
                    let n = l.left;
                    let o = m.left;
                    if (n < o) {
                        return -1;
                    }
                    if (n > o) {
                        return 1;
                    }
                    return 0;
                });
                for (let j = 0; j < h.count; j++) {
                    let k = h._inner[j];
                    let l = a._inner[k];
                    let m = this.cs(k, a._inner[k], g);
                    let n = this.ac.bh.pv.left;
                    if (this.ac.cq) {
                        if (l.left < (this.ac.bh.pv.left - n)) {
                            l = new Rect(0, l.left + ((this.ac.bh.pv.left - n) - l.left), l.top, l.width, l.height);
                            a._inner[k] = l;
                        }
                    }
                }
                let o = this.ap(a, h, g);
                if (o && (this.ac.co)) {
                    for (let p = 0; p < h.count - 1; p++) {
                        let q = h._inner[p];
                        let r = h._inner[p + 1];
                        let s = a._inner[q];
                        let t = a._inner[r];
                        let u = this.cs(q, a._inner[q], g);
                        let v = this.cs(r, a._inner[r], g);
                        if (u.intersectsWith(v) || u.left > v.right) {
                            let w = new Rect(0, u.right + 1 + (t.left - v.left), t.top, t.width, t.height);
                            a._inner[r] = w;
                        }
                    }
                }
                for (let x = h.count - 1; x >= 0; x--) {
                    let y = h._inner[x];
                    let z = a._inner[y];
                    let aa = this.cs(y, a._inner[y], g);
                    let ab = this.ac.bh.cf.a5;
                    if (this.ac.cq) {
                        if (aa.right > this.ac.bh.pv.right + ab) {
                            z = new Rect(0, z.left - (aa.right - (this.ac.bh.pv.right + ab)), z.top, z.width, z.height);
                            a._inner[y] = z;
                        }
                    }
                }
                if (this.ac.co) {
                    for (let ac = h.count - 1; ac >= 1; ac--) {
                        let ad = h._inner[ac];
                        let ae = h._inner[ac - 1];
                        let af = a._inner[ad];
                        let ag = a._inner[ae];
                        let ah = this.cs(ad, a._inner[ad], g);
                        let ai = this.cs(ae, a._inner[ae], g);
                        if (ah.intersectsWith(ai) || ah.left < ai.right) {
                            let aj = new Rect(0, ah.left - (ai.width + 1) + (ag.left - ai.left), ag.top, ag.width, ag.height);
                            a._inner[ae] = aj;
                        }
                    }
                }
                return a;
            }
            else {
                return a;
            }
        }
    }
    HorizontalAxisLabelPanelBase.$t = /*@__PURE__*/ markType(HorizontalAxisLabelPanelBase, 'HorizontalAxisLabelPanelBase', AxisLabelPanelBase.$);
    return HorizontalAxisLabelPanelBase;
})();
/**
 * @hidden
 */
export let HorizontalAxisLabelPanel = /*@__PURE__*/ (() => {
    class HorizontalAxisLabelPanel extends HorizontalAxisLabelPanelBase {
        ah() {
            return 1;
        }
        au(a) {
            return a == 5 || a == 4 || a == 1 || a == 0;
        }
    }
    HorizontalAxisLabelPanel.$t = /*@__PURE__*/ markType(HorizontalAxisLabelPanel, 'HorizontalAxisLabelPanel', HorizontalAxisLabelPanelBase.$);
    return HorizontalAxisLabelPanel;
})();
/**
 * @hidden
 */
export let NumericAxisBase = /*@__PURE__*/ (() => {
    class NumericAxisBase extends Axis {
        constructor() {
            super();
            this.kp = 0;
            this.k1 = 0;
            this.ks = 0;
            this.ko = 0;
            this.k0 = 0;
            this.kr = 0;
            this.kn = 0;
            this.kq = 0;
            this.ke = false;
            this.k8 = 0;
            this.j6 = null;
            this.km = false;
            this.ka = null;
            this.kd = false;
            this.k8 = 10;
        }
        a3() {
            return new NumericAxisBaseView(this);
        }
        ha(a) {
            super.ha(a);
            this.j3 = a;
        }
        dt(a, b) {
            let c = a < this.kv ? this.kv : a;
            c = a > this.ku ? this.ku : c;
            return c;
        }
        get_ce() {
            return true;
        }
        get kv() {
            return this.kp;
        }
        set kv(a) {
            if (this.kv != a) {
                let b = this.kp;
                this.kp = a;
                this.k1 = Math.log(this.kv);
                this.hk("ActualMinimumValue", b, this.kv);
            }
        }
        fl() {
            return this.k3;
        }
        get ky() {
            return this.ks;
        }
        set ky(a) {
            if (this.ky != a) {
                let b = this.ks;
                this.ks = a;
                this.hk("ActualVisibleMinimumValue", b, this.ky);
            }
        }
        get ku() {
            return this.ko;
        }
        set ku(a) {
            if (this.ku != a) {
                let b = this.ko;
                this.ko = a;
                this.k0 = Math.log(this.ku);
                this.hk("ActualMaximumValue", b, this.ku);
            }
        }
        fk() {
            return this.ku;
        }
        get kx() {
            return this.kr;
        }
        set kx(a) {
            if (this.kx != a) {
                let b = this.kr;
                this.kr = a;
                this.hk("ActualVisibleMaximumValue", b, this.kx);
            }
        }
        get kt() {
            return this.kn;
        }
        set kt(a) {
            if (this.kt != a) {
                let b = this.kn;
                this.kn = a;
                this.hk("ActualInterval", b, this.kt);
            }
        }
        ej() {
            return this.kt;
        }
        get kw() {
            return this.kq;
        }
        set kw(a) {
            if (this.kw != a) {
                let b = this.kq;
                this.kq = a;
                this.hk("ActualMinorInterval", b, this.kw);
            }
        }
        get kg() {
            return this.ke;
        }
        set kg(a) {
            if (this.kg != a) {
                let b = this.ke;
                if (b != a) {
                    this.ke = a;
                    this.hk("ActualIsLogarithmic", b, this.kg);
                }
            }
        }
        get kl() {
            return this.kg && this.kv > 0 && this.k8 > 1;
        }
        hr(a) {
            super.hr(a);
            if (this.kl && this.bh != null) {
                let b = this.jn();
                let c = this.jm();
                let d = this.j7(this.js, this.bh.pg, b, c);
                if (d == null) {
                    return;
                }
                for (let e = 0; e < d.k.count; e++) {
                    let f = this.k7;
                    let g = d.k._inner[e];
                    let h = Math.min(g.d, g.c);
                    let i = Math.max(g.d, g.c);
                    let j = Math.floor(logBase(h, f));
                    let k = Math.ceil(logBase(i, f));
                    if (k - j < 2) {
                        if (typeCast(LogarithmicTickmarkValues.$, this.ka) !== null) {
                            this.ka = new LinearTickmarkValues();
                        }
                    }
                    else {
                        this.ka = this.kc != null ? this.kc : ((() => {
                            let $ret = new LogarithmicTickmarkValues();
                            $ret.x = f;
                            return $ret;
                        })());
                    }
                }
            }
        }
        hj(a) {
            super.hj(a);
            this.k3 = a;
        }
        hi(a) {
            super.hj(a);
            this.k2 = a;
        }
        he(a, b, c, d) {
            super.he(a, b, c, d);
            switch (b) {
                case NumericAxisBase.$$p[4]:
                    this.cv();
                    this.hq(false);
                    break;
                case NumericAxisBase.$$p[3]:
                    this.cv();
                    this.hq(false);
                    break;
                case NumericAxisBase.$$p[1]:
                    this.km = true;
                    this.kg = this.kk;
                    break;
                case Axis.$$p[4]:
                case Axis.$$p[3]:
                case NumericAxisBase.$$p[0]:
                case NumericAxisBase.$$p[5]:
                    this.ck = true;
                    this.hq(false);
                    break;
                case NumericAxisBase.$$p[2]:
                    this.km = true;
                    this.k8 = this.k7;
                    if (this.kg) {
                        this.cv();
                        this.ls();
                        this.hq(false);
                    }
                    break;
                case NumericAxisBase.$$p[6]:
                    let e = new AxisRangeChangedEventArgs(0, this.kv, this.kv, this.ku, this.ku);
                    this.hl(e);
                    this.ck = true;
                    this.hq(false);
                    break;
                case Axis.$$p[13]:
                    this.j6 = this.j4();
                    this.ck = true;
                    this.hq(false);
                    break;
                case "TickmarkValues":
                    this.lu();
                    break;
                case "ActualIsLogarithmic":
                    this.cv();
                    this.ls();
                    this.ck = true;
                    this.lu();
                    this.hq(false);
                    break;
                case "ActualTickmarkValues":
                    this.ck = true;
                    this.hq(false);
                    break;
                case "AbbreviateLargeNumbers":
                    this.hq(false);
                    break;
            }
        }
        ls() {
            for (let a of fromEnum(this.c4())) {
                a.l0(false);
            }
        }
        j2() {
            let a = new AxisRange(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
            let b = false;
            if (this.bh != null) {
                for (let c of fromEnum(this.c4())) {
                    let d = c.ap(this);
                    if (d != null) {
                        b = true;
                        a = new AxisRange(Math.min(a.c, d.c), Math.max(a.b, d.b));
                    }
                }
            }
            if (b) {
                return a;
            }
            return null;
        }
        lq(a, b, c, d, e, f, g) {
            let h = AutoRangeCalculator.a(a, b, c, d, e, f, g);
            f = h.p5;
            g = h.p6;
            return {
                p5: f,
                p6: g
            };
        }
        cx() {
            let a = this.kg && !isNaN_(this.k7) && !isInfinity(this.k7) && this.k7 > 1;
            let b;
            let c;
            let d = this.lq(this, this.k3, this.k2, a, this.k7, b, c);
            b = d.p5;
            c = d.p6;
            if (b != this.kv || c != this.ku || this.km) {
                this.km = false;
                let e = new AxisRangeChangedEventArgs(0, this.kv, b, this.ku, c);
                this.kv = b;
                this.ku = c;
                this.hl(e);
                this.lt(e);
                this.hq(true);
                return true;
            }
            return false;
        }
        lt(a) {
        }
        cn(a) {
            let b = super.cn(a);
            if (b) {
                this.cv();
            }
            return b;
        }
        bx(a) {
            let b = super.bx(a);
            if (b) {
                this.cv();
            }
            return b;
        }
        j5(a) {
            return new NumericAxisRenderer(a);
        }
        j4() {
            let a = ((() => {
                let $ret = new AxisLabelManager();
                $ret.a = this;
                $ret.f = this.c6;
                $ret.e = this.c5;
                $ret.b = this.av;
                return $ret;
            })());
            if (this.ay != null) {
                this.ay.registerAxis(this);
            }
            let b = this.j5(a);
            b.u = () => {
                let c = this.a4.ay();
                let d = this.a4.a1();
                let e = this.a4.az();
                let f = this.a4.a0();
                this.h0();
                this.g0(c);
                this.g0(d);
                this.g0(e);
                this.g0(f);
            };
            b.o = (c, d) => !d.isEmpty && !c.isEmpty;
            b.d = (c, d, e, f) => this.j7(c, d, e, f);
            b.g = (c) => this.fi(c);
            return b;
        }
        j8() {
            return new NumericAxisRenderingParameters();
        }
        lr() {
        }
        j9() {
            return null;
        }
        j7(a, b, c, d) {
            let e = this.j8();
            let f = this.a4.ay();
            let g = this.a4.a1();
            let h = this.a4.az();
            let i = this.a4.a0();
            let j = this.a4.e();
            let k = this.a4.f();
            let l = this.a4.g();
            e.t = f;
            e.w = g;
            e.u = h;
            e.v = i;
            e.a = j;
            e.c = k;
            e.d = l;
            e.l = this.ku;
            e.m = this.kv;
            e.h = this.ki;
            e.f = this.kb;
            e.z = a;
            e.y = c;
            e.x = d;
            e.aa = b;
            e.o = this.el();
            e.g = this.kh();
            e.p = this.kz;
            e.q = this.k4;
            e.s = this.fj;
            if (this.fj == null && (this.at != null || this.ah != null)) {
                e.s = "Format";
            }
            e.j = this.cs;
            e.ab = this.kf;
            return e;
        }
        k6(a) {
            let b = this.jn();
            let c = new ScalerParams(0, this.bh.pg, this.js, this.cc, b);
            return this.eb(a, c);
        }
        kh() {
            return !isNaN_(this.kz);
        }
        get kj() {
            return !isNaN_(this.k3);
        }
        get ki() {
            return !isNaN_(this.k2);
        }
        lu() {
            if (this.kc != null) {
                this.kb = this.kc;
            }
            else if (this.kg) {
                this.kb = new LogarithmicTickmarkValues();
                this.j3.bf();
            }
            else {
                this.kb = new LinearTickmarkValues();
            }
        }
        get kc() {
            return typeCast(TickmarkValues.$, this.c(NumericAxisBase.l2));
        }
        set kc(a) {
            this.h(NumericAxisBase.l2, a);
        }
        get kb() {
            if (this.ka == null) {
                this.lu();
            }
            return this.ka;
        }
        set kb(a) {
            let b = this.ka;
            let c = b != a;
            if (c) {
                this.ka = a;
                this.hk("ActualTickmarkValues", b, a);
            }
        }
        get kf() {
            return this.kd;
        }
        set kf(a) {
            let b = this.kf;
            if (a != b) {
                this.kd = a;
                this.hk("AbbreviateLargeNumbers", b, this.kf);
            }
        }
    }
    NumericAxisBase.$t = /*@__PURE__*/ markType(NumericAxisBase, 'NumericAxisBase', Axis.$);
    NumericAxisBase.l2 = /*@__PURE__*/ DependencyProperty.i("TickmarkValues", TickmarkValues.$, NumericAxisBase.$, /*@__PURE__*/ new PropertyMetadata(1, (a, b) => a.hk("TickmarkValues", b.oldValue, b.newValue)));
    NumericAxisBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, NumericAxisBase, 'hk', ['Interval:kz:lv', [1, NaN], 'IsLogarithmic:kk:lw', [0, false], 'LogarithmBase:k7:lx', [1, 10], 'MaximumValue:k2:ly', [1, NaN], 'MinimumValue:k3:lz', [1, NaN], 'MinorInterval:k4:l0', [1, NaN], 'ReferenceValue:k5:l1', [1, 0]]);
    return NumericAxisBase;
})();
/**
 * @hidden
 */
export let NumericScaler = /*@__PURE__*/ (() => {
    class NumericScaler extends DependencyObject {
        constructor() {
            super(...arguments);
            this.o = 0;
            this.n = 0;
            this.m = 0;
        }
        y(a) {
            this.l = a;
        }
        x(a) {
            this.k = a;
        }
        w(a, b, c) {
            switch (a) {
                case NumericScaler.$$p[1]:
                    this.o = this.l;
                    this.z();
                    break;
                case NumericScaler.$$p[0]:
                    this.n = this.k;
                    this.z();
                    break;
            }
        }
        z() {
            if (isNaN_(this.l) || isNaN_(this.k) || isInfinity(this.l) || isInfinity(this.k) || this.l < (-7.9228162514264338E+28) || this.k > (7.9228162514264338E+28)) {
                this.m = this.k - this.l;
            }
            else {
                this.m = this.k - this.l;
            }
        }
        j(a, b, c, d) {
            let e = new List$1(Number_$type, 2, a.count);
            for (let f = b; f < c; f++) {
                e.add(this.q(a.item(f), d));
            }
            return e;
        }
        v(a, b, c, d) {
            for (let e = b; e < c; e++) {
                a.item(e, this.p(a.item(e), d));
            }
        }
        u(a, b, c, d, e) {
            for (let f = 0; f < b.count; f++) {
                let g = b.item(f);
                for (let h = c; h < d; h++) {
                    a.item(h)[g] = this.p(a.item(h)[g], e);
                }
            }
        }
    }
    NumericScaler.$t = /*@__PURE__*/ markType(NumericScaler, 'NumericScaler', DependencyObject.$);
    NumericScaler.ac = /*@__PURE__*/ new Rect(0, 0, 0, 1, 1);
    NumericScaler.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, NumericScaler, 'w', ['ActualMaximumValue:k:aa', [1, NaN], 'ActualMinimumValue:l:ab', [1, NaN]]);
    return NumericScaler;
})();
/**
 * @hidden
 */
export let AxisRendererBase = /*@__PURE__*/ (() => {
    class AxisRendererBase extends Base {
        constructor(a) {
            super();
            this.u = null;
            this.o = null;
            this.v = null;
            this.m = null;
            this.l = null;
            this.k = null;
            this.q = null;
            this.n = null;
            this.j = null;
            this.e = null;
            this.p = null;
            this.h = null;
            this.t = null;
            this.b = null;
            this.g = null;
            this.d = null;
            this.r = null;
            this.a = null;
            this.f = null;
            this.i = null;
            this.u = () => {
            };
            this.o = (b, c) => false;
            this.v = () => {
            };
            this.m = (b, c) => c;
            this.l = (b, c, d, e) => {
            };
            this.k = (b, c, d) => {
            };
            this.q = (b, c) => false;
            this.n = (b, c) => this.q(b, c);
            this.j = (b) => {
            };
            this.e = (b) => {
            };
            this.p = (b, c, d) => false;
            this.h = (b, c) => new LabelPosition(c);
            this.t = (b, c) => c;
            this.g = (b) => null;
            this.r = (b, c, d, e) => c;
            this.a = (b, c, d, e) => c;
            this.b = a;
            this.d = (b, c, d, e) => null;
        }
        c(a, b, c, d, e) {
            this.x(c, b);
            if (this.o(b, c)) {
                this.v();
                let f = this.d(b, c, d, e);
                this.x(c, b);
                if (f == null) {
                    this.aa();
                    return null;
                }
                if (f.k.count > 1 && !f.g) {
                    this.ab(f);
                }
                for (let g of fromEnum(f.k)) {
                    f.e = g;
                    if (isNaN_(g.c) || isInfinity(g.c) || isNaN_(g.d) || isInfinity(g.d)) {
                        continue;
                    }
                    if (g.d == g.c) {
                        continue;
                    }
                    this.e(f);
                    this.b.o(f.r);
                    let h = 0;
                    let i = 0;
                    let j = false;
                    let k = (l) => l;
                    if (this.f != null) {
                        k = this.i;
                    }
                    if (typeCast(CategoryAxisRenderingParameters.$, f) !== null) {
                        h = f.ab;
                        i = f.af;
                        j = f.ac;
                    }
                    f.f = this.s(f);
                    f.f.s(((() => {
                        let $ret = new TickmarkValuesInitializationParameters();
                        $ret.n = f.e.d;
                        $ret.m = f.e.c;
                        $ret.g = f.m;
                        $ret.f = f.l;
                        $ret.k = f.e.b;
                        $ret.d = f.g;
                        $ret.l = f.p;
                        $ret.j = f.q;
                        $ret.h = f.o;
                        $ret.i = f.e.a;
                        $ret.p = f.e.e;
                        $ret.a = h;
                        $ret.q = i;
                        $ret.s = f.aa;
                        $ret.r = f.z;
                        $ret.e = j;
                        $ret.c = k;
                        return $ret;
                    })()));
                    this.y(f);
                }
                this.z();
                return f;
            }
            return null;
        }
        aa() {
            this.b.q();
        }
        ab(a) {
            let b = -1.7976931348623157E+308;
            let c = -2147483648;
            let d = 0;
            let e = 0;
            let f = false;
            let g = (h) => h;
            if (this.f != null) {
                g = this.i;
            }
            if (typeCast(CategoryAxisRenderingParameters.$, a) !== null) {
                d = a.ab;
                e = a.af;
                f = a.ac;
            }
            for (let h of fromEnum(a.k)) {
                a.e = h;
                a.f.s(((() => {
                    let $ret = new TickmarkValuesInitializationParameters();
                    $ret.n = h.d;
                    $ret.m = h.c;
                    $ret.g = a.m;
                    $ret.f = a.l;
                    $ret.k = h.b;
                    $ret.d = a.g;
                    $ret.l = a.p;
                    $ret.i = h.a;
                    $ret.p = h.e;
                    $ret.h = a.o;
                    $ret.j = a.q;
                    $ret.a = d;
                    $ret.q = e;
                    $ret.s = a.aa;
                    $ret.r = a.z;
                    $ret.e = f;
                    $ret.c = g;
                    return $ret;
                })()));
                h.a = a.f.m;
                h.e = a.f.r;
                if (!isNaN_(a.f.m)) {
                    b = Math.max(b, a.f.m);
                    c = Math.max(c, a.f.r);
                }
            }
            for (let i of fromEnum(a.k)) {
                if (i.a == b) {
                    i.a = -1;
                    i.e = -1;
                }
                else {
                    i.a = b;
                    i.e = c;
                }
            }
        }
        x(a, b) {
            this.u();
            this.b.n(a, b);
            this.b.t();
        }
        z() {
            this.b.t();
            let a = false;
            if (this.b.d) {
                this.b.s(0);
            }
            else {
                let b = 0;
                for (let c of fromEnum(this.b.e)) {
                    let d = typeCast(FrameworkElement.$, c);
                    if (d == null) {
                        d = this.b.u(b);
                        let e = d.ak;
                        let f = c.toString();
                        let g = 0;
                        let h = 0;
                        if (e != null) {
                            g = e.length;
                        }
                        if (f != null) {
                            h = f.length;
                        }
                        if (g != h) {
                            a = true;
                        }
                        d.ak = f;
                        b++;
                    }
                    else {
                        this.b.h(d);
                    }
                }
                if (a) {
                    this.b.p();
                }
                this.b.g();
                this.b.s(b);
            }
        }
        s(a) {
            return a.f;
        }
        y(a) {
            let b = a.f.j();
            let c = a.f.k();
            this.b.r(this.m(a, a.f.m));
            this.j(a);
            for (let d = 0; d < b.length; d++) {
                let e = a.f.p + d;
                let f = b[d];
                let g = f;
                let h = 0;
                if (d < b.length - 1) {
                    h = b[d + 1];
                }
                else {
                    h = Number.POSITIVE_INFINITY;
                }
                g = this.r(a, g, e, a.f.m);
                h = this.r(a, h, e, a.f.m);
                let i = this.m(a, g);
                let j = this.m(a, h);
                if (this.q(a, i)) {
                    if (e % 2 == 0 && this.n(a, j) && !isInfinity(j)) {
                        this.l(a, a.w, i, j);
                    }
                    a.b = a.c;
                    this.k(a, a.u, i);
                    a.b = null;
                }
                i = this.a(a, i, e, a.f.m);
                if (!isNaN_(i) && !isInfinity(i) && this.p(a, i, d == b.length - 1)) {
                    let k = this.w(a, g, e, a.f.m);
                    if (k != null) {
                        this.b.i(k, this.h(a, i));
                    }
                }
            }
            if (a.j) {
                for (let l = 0; l < c.length; l++) {
                    let m = c[l];
                    let n = this.m(a, m);
                    a.b = a.d;
                    this.k(a, a.v, n);
                    a.b = null;
                }
            }
        }
        w(a, b, c, d) {
            return null;
        }
    }
    AxisRendererBase.$t = /*@__PURE__*/ markType(AxisRendererBase, 'AxisRendererBase');
    return AxisRendererBase;
})();
/**
 * @hidden
 */
export let NumericAxisRenderer = /*@__PURE__*/ (() => {
    class NumericAxisRenderer extends AxisRendererBase {
        constructor(a) {
            super(a);
            this.ac = null;
            this.ad = false;
        }
        w(a, b, c, d) {
            let e;
            if (a.s != null) {
                e = this.g(b);
            }
            else {
                b = Math.round(b * 1000000) / 1000000;
                if (a.i() && a.ab) {
                    return this.ae(b);
                }
                e = MathUtil.n(b);
            }
            return e;
        }
        ae(a) {
            if (this.ad) {
                return a.toString();
            }
            if (this.ac == null) {
                this.ac = NumberAbbreviatorFactory.a(this.b.a.bt);
                if (this.ac == null) {
                    this.ad = true;
                    return a.toString();
                }
            }
            return this.ac.abbreviate(a);
        }
    }
    NumericAxisRenderer.$t = /*@__PURE__*/ markType(NumericAxisRenderer, 'NumericAxisRenderer', AxisRendererBase.$);
    return NumericAxisRenderer;
})();
/**
 * @hidden
 */
export let VerticalAxisLabelPanel = /*@__PURE__*/ (() => {
    class VerticalAxisLabelPanel extends AxisLabelPanelBase {
        constructor() {
            super(...arguments);
            this.da = 0;
            this.c7 = 0;
            this.c9 = 0;
            this.c8 = 0;
        }
        ad() {
            return new VerticalAxisLabelPanelView(this);
        }
        cc(a) {
            super.cc(a);
            this.c1 = a;
        }
        b1() {
            this.c1.ay();
        }
        bl() {
            return this.ac.be != null ? this.ac.be.angle : -90;
        }
        c3() {
            let a = 0;
            let b = this.ai(this.ac.be);
            if (b == 1) {
                a += this.bp();
            }
            let c = this.ag;
            if (c == 3 || c == 7) {
                a += this.ac.dr;
            }
            return a;
        }
        c5() {
            let a = 0;
            let b = this.ai(this.ac.be);
            if (b == 2) {
                a += this.bp();
            }
            let c = this.ag;
            if (c == 2 || c == 6) {
                a += this.ac.dr;
            }
            return a;
        }
        c6() {
            let a = (this.a9 - this.c3()) - this.c5();
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        c4() {
            let a = ((this.c6() - this.ae.p()) - this.ae.q());
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        a1() {
            let a = new List$1(Rect.$, 0);
            this.as = false;
            this.ar = false;
            if (this.af != null && this.af.j() && this.bh() % 360 != 0) {
                this.ar = true;
            }
            this.da = -1.7976931348623157E+308;
            this.c7 = -1.7976931348623157E+308;
            this.c9 = -1.7976931348623157E+308;
            this.c8 = -1.7976931348623157E+308;
            let b = this.ae.p();
            let c = this.ae.r();
            let d = this.ae.q();
            let e = this.ae.o();
            let f = this.c3();
            let g = false;
            if (!isNaN_(this.ba)) {
                this.da = Math.max(this.ba, this.da);
                this.c9 = Math.max(this.bb, this.c9);
            }
            for (let h = 0; h < this.a7.count; h++) {
                let i = this.a7._inner[h];
                let j = this.a6._inner[h].a;
                let k = this.bf(i);
                let l = this.bg(i);
                let m = k + c + e;
                let n = l + b + d;
                let o = this.cu.left + f;
                let p = this.a6._inner[h].c - m / 2;
                if (j) {
                    let q = this.ba;
                    if ((isNaN_(this.ba) || n > this.ba || this.a6._inner[h].b) && !g) {
                        if (this.a6._inner[h].b) {
                            g = true;
                        }
                        this.a6._inner[h].b = false;
                        this.ba = n;
                        this.bb = l;
                    }
                    this.da = Math.max(this.ba, this.da);
                    this.c7 = Math.max(m, this.c7);
                    this.c9 = Math.max(this.bb, this.c9);
                    this.c8 = Math.max(k, this.c8);
                }
                else {
                    this.da = Math.max(n, this.da);
                    this.c7 = Math.max(m, this.c7);
                    this.c9 = Math.max(l, this.c9);
                    this.c8 = Math.max(k, this.c8);
                }
                let r = new Rect(0, o, p, n, m);
                a.add(r);
            }
            let s = 0;
            if (this.ar) {
                s = this.bh() % 360;
                if (s < 0) {
                    s += 360;
                }
            }
            let t = this.ac.b3();
            if (!t) {
                this.db(s, b, d);
            }
            else {
                this.ae.ac();
            }
            if (this.ar) {
                for (let u = 0; u < a.count; u++) {
                    let v = a._inner[u];
                    v.y = this.a6._inner[u].c - this.c7 / 2;
                    a._inner[u] = v;
                }
            }
            let w = false;
            if (!this.ar && this.da <= this.a9) {
                w = true;
            }
            if (!w) {
                let x = this.cu.height;
                let y = this.c6();
                let z = y;
                let aa = this.a6.count > 1 ? Math.abs(this.a6._inner[1].c - this.a6._inner[0].c) : x;
                let ab = Math.abs(Math.asin(aa / this.da) * (180 / Math.PI));
                let ac = (s >= ab && s <= 180 - ab) || (s - 180 >= ab && s - 180 <= 180 - ab);
                for (let ad = 0; ad < a.count; ad++) {
                    if (this.ar) {
                        let ae = s * (Math.PI / 180);
                        let af = this.bq(this.a7._inner[ad]);
                        z = Math.min(y / Math.abs(Math.cos(ae)), af);
                        if (ac) {
                            let ag;
                            if (s > 0 && s < 90) {
                                ag = (Math.PI / 180) * (90 - s);
                            }
                            else if (s > 270 && s < 360) {
                                ag = (Math.PI / 180) * (s - 270);
                            }
                            else {
                                ag = 0;
                            }
                            z = aa / Math.cos(ag);
                        }
                    }
                    let ah = a._inner[ad];
                    ah.width = Math.min(ah.width, z);
                    a._inner[ad] = ah;
                    if (!(typeCast(TextBlock.$, this.a7._inner[ad]) !== null)) {
                        this.a7._inner[ad].width = z;
                    }
                    let ai = typeCast(TextBlock.$, this.a7._inner[ad]);
                    if (ai != null) {
                        let aj = this.bw(ad, ai, z, b, d);
                        if (!Base.equalsStatic(ai.ak, aj)) {
                            ai.ak = aj;
                            this.a7._inner[ad].width = z;
                        }
                    }
                }
                if (!t) {
                    this.db(s, b, d);
                }
            }
            if (this.c2()) {
                this.dc(a);
            }
            return a;
        }
        db(a, b, c) {
            let d = a * (Math.PI / 180);
            let e = Math.abs(this.c9 * Math.cos(d)) + Math.abs(this.c8 * Math.sin(d));
            let f = this.bp();
            let g = (e + b + c) + (f) + this.ac.dr;
            this.bd = Math.max(this.ac.eg, g);
        }
        dc(a) {
            this.c1.az(a, this.da);
        }
        cg(a, b) {
            let c = 0;
            let d = this.c8 / 2;
            let e = new TransformGroup();
            let f = AngleSimplifier.a(this.bh());
            let g = ((() => {
                let $ret = new RotateTransform();
                $ret.j = f;
                $ret.k = c;
                $ret.l = d;
                return $ret;
            })());
            let h = 0;
            let i = 0;
            if (f != 0 && f != 360) {
                f -= 90;
                if (f > 0 && f < 180) {
                    g.k = this.c9;
                    h = -this.c9 + this.c8 / 2;
                    h = h + Math.sin(MathUtil.k(f - 180)) * (this.c8 / 2);
                }
                else {
                    if (f >= 180) {
                        h = h - Math.cos(MathUtil.k(f)) * (this.c8 / 2);
                    }
                    else {
                        h = h + Math.cos(MathUtil.k(f)) * (this.c8 / 2);
                    }
                }
            }
            let j = ((() => {
                let $ret = new TranslateTransform();
                $ret.j = h;
                $ret.k = i;
                return $ret;
            })());
            e.j.add(g);
            e.j.add(j);
            a.j = e;
        }
        c2() {
            return !this.as && !this.ar;
        }
        ct() {
            let a = this.ai(this.ac.be);
            let b = this.bp();
            let c = this.ag;
            let d = 0;
            if (a == 1) {
                d += this.cu.left;
                if (c == 3 || c == 7) {
                    d += this.ac.dr;
                }
            }
            else {
                d = this.cu.right - b;
                if (c == 6 || c == 2) {
                    d -= this.ac.dr;
                }
            }
            let e = this.bn();
            let f = 0;
            let g = this.ac.be == null ? 1 : this.ac.be.verticalAlignment;
            if (g == 0) {
                f = this.cu.top;
            }
            else if (g == 2) {
                f = this.cu.bottom - e;
            }
            else {
                f = (this.cu.top + (this.cu.height / 2)) - (e / 2);
            }
            return new Rect(0, d, f, b, e);
        }
        ai(a) {
            if (a == null) {
                return this.ac.bh.ao(this.ac);
            }
            if (a.position == 0) {
                if (this.ac != null && this.ac.bh != null) {
                    return this.ac.bh.ao(this.ac);
                }
                return 1;
            }
            return a.position;
        }
        ah() {
            return 2;
        }
        au(a) {
            return a == 2 || a == 3 || a == 6 || a == 7;
        }
        b4() {
            let a = this.ae.at();
            this.ac.g0(a);
            if (this.af != null && this.af.visibility != 0) {
                return;
            }
            let b = this.ac.dr;
            if (b == 0) {
                return;
            }
            let c = this.ay();
            if (c == null) {
                return;
            }
            let d = this.cu.left;
            let e;
            let f = this.ag;
            if (f == 2 || f == 6) {
                d = this.cu.right;
                e = d - b;
            }
            else {
                e = d + b;
            }
            let g = this.ae.b();
            for (let h of fromEnum(c)) {
                this.b7(a, h, d, e, this.cw, g);
            }
            if (!this.ab.contains(this.ae.av)) {
                this.ab.add(this.ae.av);
            }
        }
    }
    VerticalAxisLabelPanel.$t = /*@__PURE__*/ markType(VerticalAxisLabelPanel, 'VerticalAxisLabelPanel', AxisLabelPanelBase.$);
    return VerticalAxisLabelPanel;
})();
/**
 * @hidden
 */
export let IHasCategoryAxis_$type = /*@__PURE__*/ new Type(null, 'IHasCategoryAxis');
/**
 * @hidden
 */
export let IHasCategoryModePreference_$type = /*@__PURE__*/ new Type(null, 'IHasCategoryModePreference', null, [IHasCategoryAxis_$type]);
/**
 * @hidden
 */
export let IHighlightingManager_$type = /*@__PURE__*/ new Type(null, 'IHighlightingManager');
/**
 * @hidden
 */
export let HighlightingInfo = /*@__PURE__*/ (() => {
    class HighlightingInfo extends Base {
        constructor() {
            super();
            this.i = 0;
            this.h = 0;
            this.g = 0;
            this.a = 0;
            this.f = 0;
            this.e = false;
            this.d = false;
            this.c = false;
            this.b = null;
            this.a = HighlightingState.outward;
            this.f = 0;
            this.e = false;
        }
    }
    HighlightingInfo.$t = /*@__PURE__*/ markType(HighlightingInfo, 'HighlightingInfo');
    return HighlightingInfo;
})();
/**
 * @hidden
 */
export let ISeriesInteractionManager_$type = /*@__PURE__*/ new Type(null, 'ISeriesInteractionManager');
/**
 * @hidden
 */
export let ISeriesViewerInteractionManager_$type = /*@__PURE__*/ new Type(null, 'ISeriesViewerInteractionManager');
/**
 * @hidden
 */
export let IDataChartVisualDataManager_$type = /*@__PURE__*/ new Type(null, 'IDataChartVisualDataManager');
/**
 * @hidden
 */
export let IAxisVisualDataManager_$type = /*@__PURE__*/ new Type(null, 'IAxisVisualDataManager');
/**
 * @hidden
 */
export let ISeriesVisualDataManager_$type = /*@__PURE__*/ new Type(null, 'ISeriesVisualDataManager');
/**
 * @hidden
 */
export let XamDataChart = /*@__PURE__*/ (() => {
    class XamDataChart extends SeriesViewer {
        constructor() {
            super();
            this._xsr = null;
            this.p7 = null;
            this.qv = 1;
            this.qw = 1;
            this.qj = false;
            this.qm = false;
            this.qx = 0;
            this.qy = 0;
            this.rd = NaN;
            this.re = NaN;
            this.p2 = new AxisCollection();
            this.axisRangeChanged = null;
            this.qa = null;
            this.qd = false;
            this.qs = 0;
            this.qu = 0;
            this.qt = 0;
            this.qr = 0;
            this.q0 = NaN;
            this.q2 = NaN;
            this.q1 = NaN;
            this.qz = NaN;
            this.ab = XamDataChart.$;
            let a = this.axes;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.sb));
            let b = this.axes;
            b.collectionResetting = delegateCombine(b.collectionResetting, runOn(this, this.sc));
        }
        get XSRP() {
            if (this._xsr == null) {
                this._xsr = new SRProvider(this.cf.j.ae);
            }
            return this._xsr;
        }
        get p8() {
            if (this.p7 == null) {
                this.p7 = DVContainer.instance.createInstance(IDataChartVisualDataManager_$type, () => this.XSRP.q);
            }
            return this.p7;
        }
        static staticInit() {
            XamDataChart.rc = -1.7976931348623157E+308;
            XamDataChart.rb = 1.7976931348623157E+308;
        }
        static rl(a) {
            if (a.ca == null) {
                return -1;
            }
            if (!a.ds) {
                return -1;
            }
            let b = XamDataChartView.aw(a);
            if (b.count == 0) {
                return -1;
            }
            let c = -1;
            for (let d = 0; d < b.count; d++) {
                c = Math.max(c, b._inner[d].g9);
            }
            let e = c + 1;
            if (a.dn) {
                e = a.gz();
                if (e == -1) {
                    return -1;
                }
                let f = a.be();
                e = f.g9 + e;
            }
            return e;
        }
        lh(a, b, c, d) {
            super.lh(a, b, c, d);
            switch (b) {
                case XamDataChart.$$p[15]:
                    this.q7 = this.rj;
                    break;
                case XamDataChart.$$p[16]:
                    this.q8 = this.rk;
                    break;
                case "ActualWindowScaleHorizontal":
                case "ActualWindowScaleVertical":
                    if (!this.eo) {
                        this.mr(this.fn(), this.fo());
                    }
                    break;
                case XamDataChart.$$p[7]:
                    this.cf.fm(d);
                    {
                        for (let e of fromEnum(this.axes)) {
                            e.hp();
                        }
                    }
                    break;
                case XamDataChart.$$p[8]:
                    this.qi = this.qh;
                    break;
                case XamDataChart.$$p[14]:
                    this.ql = this.qp;
                    break;
                case XamDataChart.$$p[9]:
                case XamDataChart.$$p[11]:
                    this.mn();
                    break;
                case XamDataChart.$$p[0]:
                case XamDataChart.$$p[13]:
                    if (c != d) {
                        for (let f of fromEnum(this.axes)) {
                            f.ck = true;
                            f.hp();
                        }
                    }
                    break;
                case XamDataChart.$$p[6]:
                case XamDataChart.$$p[4]:
                case XamDataChart.$$p[5]:
                    for (let g of fromEnum(this.axes)) {
                        g.hy();
                    }
                    break;
                case XamDataChart.$$p[3]:
                    this.se();
                    break;
            }
        }
        j5() {
            super.j5();
            if (this.p4 == 1) {
                this.se();
            }
        }
        si() {
            this.se();
        }
        se() {
            let a = this.s4();
            this.qd = false;
            if (!isNaN_(this.rg)) {
                this.q4 = this.rg;
            }
            else {
                this.q4 = a.c;
            }
            if (!isNaN_(this.ri)) {
                this.q6 = this.ri;
            }
            else {
                this.q6 = a.e;
            }
            if (!isNaN_(this.rh)) {
                this.q5 = this.rh;
            }
            else {
                this.q5 = a.d;
            }
            if (!isNaN_(this.rf)) {
                this.q3 = this.rf;
            }
            else {
                this.q3 = a.b;
            }
            this.pk = this.pi(this.pv);
            if (this.qd) {
                this.qd = false;
                for (let b of fromEnum(this.axes)) {
                    b.ck = true;
                    b.hp();
                }
                for (let c of fromEnum(this.series)) {
                    c.l0(false);
                }
            }
        }
        s4() {
            switch (this.p4) {
                case 1:
                    let a = this.s5();
                    return a;
                default: return new Thickness(1, 0, 0, 0, 0);
            }
        }
        s5() {
            let a = new Thickness(1, 0, 0, 0, 0);
            for (let b = 0; b < this.series.count; b++) {
                let c = this.series._inner[b];
                let d = c.pg();
                a = new Thickness(1, Math.max(d.c, a.c), Math.max(d.e, a.e), Math.max(d.d, a.d), Math.max(d.b, a.b));
            }
            return a;
        }
        fn() {
            return this.q7;
        }
        fo() {
            return this.q8;
        }
        mf() {
            super.mf();
            this.q7 = this.pg.width;
            this.q8 = this.pg.height;
        }
        get q7() {
            return this.qv;
        }
        set q7(a) {
            let b = this.qv;
            this.qv = a;
            this.ll("ActualWindowScaleHorizontal", b, this.qv);
        }
        get q8() {
            return this.qw;
        }
        set q8(a) {
            let b = this.qw;
            this.qw = a;
            this.ll("ActualWindowScaleVertical", b, this.qw);
        }
        d4() {
            return this.qi;
        }
        d5() {
            return this.ql;
        }
        sh() {
            this.qj = false;
            this.qm = true;
            for (let a = 0; a < this.axes.count; a++) {
                this.axes._inner[a].ck = true;
                this.axes._inner[a].hp();
            }
        }
        sg(a, b, c, d) {
            if (a.ac == null) {
                return;
            }
            if (a.ac.ck || a.ac.js.isEmpty) {
                return;
            }
            let e = false;
            for (let f = 0; f < this.axes.count; f++) {
                let g = this.axes._inner[f].av.bd;
                this.axes._inner[f].av.b5();
                if (this.axes._inner[f].av.bd != g) {
                    e = true;
                }
            }
            if (e) {
                return;
            }
            if (isNaN_(this.rd)) {
                this.rd = this.cf.a4;
                this.re = this.cf.a5;
            }
            let h = false;
            if (this.qm) {
                this.qm = false;
                h = true;
            }
            this.qj = true;
            let i = 0;
            let j = 0;
            let k = 0;
            let l = c.left + k;
            let m = d.right + k;
            let n = 0;
            n = this.pv.right + this.cf.a5;
            if (l < 0) {
                i = -l;
                i += this.q9;
            }
            if (m > n) {
                j = m - n;
                j += this.q9;
            }
            if (h) {
                if (l > 0) {
                    i = -l;
                    i += this.q9;
                }
                if (m < n) {
                    j = -(n - m);
                    j += this.q9;
                }
            }
            let o = false;
            let p = false;
            if (i != 0 || j != 0) {
                o = true;
                this.qx = this.qx + i;
                this.qy = this.qy + j;
                if (this.qx > this.ra) {
                    this.qx = this.ra;
                    p = true;
                }
                if (this.qy > this.ra) {
                    this.qy = this.ra;
                    p = true;
                }
                if (this.qx < 0) {
                    this.qx = 0;
                    p = true;
                }
                if (this.qy < 0) {
                    this.qy = 0;
                    p = true;
                }
            }
            else {
                return;
            }
            this.en = true;
            this.fq = this.rd + this.qx;
            this.ft = this.re + this.qy;
            this.en = false;
            this.d9 = o;
            if (p) {
                return;
            }
            if (this.d9) {
                for (let q = 0; q < this.axes.count; q++) {
                    this.axes._inner[q].ck = true;
                    this.axes._inner[q].hq(false);
                }
                this.ji(true, false, false);
                this.qj = false;
                for (let r = 0; r < this.axes.count; r++) {
                    this.axes._inner[r].ck = true;
                    this.axes._inner[r].hq(false);
                }
                this.ji(true, false, false);
            }
        }
        get axes() {
            return this.p2;
        }
        sb(a, b) {
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    if (c != null) {
                        c.bn = null;
                        c.bh = null;
                        this.l0(c);
                        this.cf.dt(c);
                        c.rangeChanged = delegateRemove(c.rangeChanged, runOn(this, this.sd));
                        this.cf.du(c);
                        if (c.c7 != null) {
                            for (let d of fromEnum(c.c4())) {
                                d.l0(false);
                            }
                        }
                    }
                }
                if (this.axes.count == 0) {
                    this.l5();
                }
            }
            if (b.newItems != null) {
                for (let e of fromEn(b.newItems)) {
                    if (e != null) {
                        this.mi(e);
                        e.bn = this.actualSyncLink;
                        e.bh = this;
                        e.a4.aw();
                        this.cf.bo(e);
                        e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.sd));
                        this.cf.bl(e);
                    }
                }
            }
            this.jz();
        }
        sc(a, b) {
            let c = new List$1(Series.$, 0);
            for (let d of fromEnum(this.axes)) {
                if (d.c7 != null) {
                    for (let e of fromEnum(d.c4())) {
                        if (!c.contains(e)) {
                            c.add(e);
                        }
                    }
                }
                d.bn = null;
                d.bh = null;
                this.l0(d);
                this.cf.dt(d);
                d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.sd));
                this.cf.du(d);
                this.l5();
            }
            for (let f of fromEnum(this.series)) {
                if (!c.contains(f)) {
                    c.add(f);
                }
            }
            for (let g of fromEnum(c)) {
                g.l0(false);
            }
        }
        sd(a, b) {
            let c = typeCast(Axis.$, a);
            if (c == null) {
                return;
            }
            this.jz();
            if (this.axisRangeChanged != null) {
                this.axisRangeChanged(this, new ChartAxisRangeChangedEventArgs(this, c, b.oldMinimumValue, b.minimumValue, b.oldMaximumValue, b.maximumValue));
            }
            if (c.ai != null) {
                c.ai.hm();
            }
            c.hm();
            let d = this.da;
            if (typeCast(CategoryAxisBase.$, c) !== null) {
                d = true;
            }
            for (let e of fromEnum(c.c4())) {
                e.et = true;
                this.jz();
                e.l0(d);
            }
            if (c.bh != null) {
                for (let f of fromEnum(c.bh.series)) {
                    XamDataChart.sf(c, d, f);
                }
            }
            for (let g of fromEnum(this.axes)) {
                if (g != c && g.ai != null && g.ai == c) {
                    g.hm();
                }
            }
        }
        static sf(a, b, c) {
        }
        mp(a, b) {
            super.mp(a, b);
            if (this.axes == null) {
                return;
            }
            for (let c of fromEnum(this.axes)) {
                c.bn = this.actualSyncLink;
                c.bh = this;
            }
        }
        getFontInfo() {
            this.qa = this.p9.fj;
            return this.qa;
        }
        sj() {
            this.cf.eb();
            for (let a of fromEnum(this.axes)) {
                a.hq(false);
            }
            for (let b of fromEnum(this.series)) {
                b.bx.bj();
                b.l0(false);
            }
        }
        getFontBrush() {
            return this.p9.fr;
        }
        jd() {
            super.jd();
            let a = new List$1(Axis.$, 0);
            for (let b = 0; b < this.axes.count; b++) {
                a.add(this.axes._inner[b]);
            }
            for (let c = 0; c < a.count; c++) {
                this.axes.remove(a._inner[c]);
                if (typeCast(CategoryAxisBase.$, a._inner[c]) !== null) {
                    let d = a._inner[c];
                    this.l2(d.name, true);
                    d.itemsSource = null;
                }
                a._inner[c].hf(null, null);
            }
        }
        os() {
            return this.p9.fn;
        }
        eh() {
            return true;
        }
        mj() {
            super.mj();
            if (!this.d7) {
                return;
            }
            for (let a of fromEnum(this.axes)) {
                this.mi(a);
            }
        }
        di() {
            if (this.qk) {
                return true;
            }
            return this.qg();
        }
        qg() {
            for (let a = 0; a < this.series.count; a++) {
                if (this.series._inner[a].d4 || this.series._inner[a].d0) {
                    return true;
                }
            }
            for (let b = 0; b < this.axes.count; b++) {
                if (this.axes._inner[b].b4 || this.axes._inner[b].cg) {
                    return true;
                }
            }
            return false;
        }
        ce() {
            return new XamDataChartView(this);
        }
        k5(a) {
            super.k5(a);
            this.p9 = a;
        }
        lx() {
            for (let a = 0; a < this.p2.count; a++) {
                this.p2._inner[a].ck = true;
                this.p2._inner[a].hq(false);
            }
            super.lx();
        }
        get q4() {
            return this.qs;
        }
        set q4(a) {
            let b = this.qs;
            this.qs = a;
            if (this.qs != b) {
                this.qd = true;
                this.ll(XamDataChart.ro, b, this.qs);
            }
        }
        get q6() {
            return this.qu;
        }
        set q6(a) {
            let b = this.qu;
            this.qu = a;
            if (this.qu != b) {
                this.qd = true;
                this.ll(XamDataChart.rq, b, this.qu);
            }
        }
        get q5() {
            return this.qt;
        }
        set q5(a) {
            let b = this.qt;
            this.qt = a;
            if (this.qt != b) {
                this.qd = true;
                this.ll(XamDataChart.rp, b, this.qt);
            }
        }
        get q3() {
            return this.qr;
        }
        set q3(a) {
            let b = this.qr;
            this.qr = a;
            if (this.qr != b) {
                this.qd = true;
                this.ll(XamDataChart.rn, b, this.qr);
            }
        }
        get rg() {
            return this.q0;
        }
        set rg(a) {
            this.q0 = a;
            this.se();
        }
        get ri() {
            return this.q2;
        }
        set ri(a) {
            this.q2 = a;
            this.se();
        }
        get rh() {
            return this.q1;
        }
        set rh(a) {
            this.q1 = a;
            this.se();
        }
        get rf() {
            return this.qz;
        }
        set rf(a) {
            this.qz = a;
            this.se();
        }
        pi(a) {
            let b = super.pi(a);
            if (a.isEmpty) {
                return Rect.empty;
            }
            if (this.q4 == 0 && this.q6 == 0 && this.q5 == 0 && this.q3 == 0) {
                return Rect.empty;
            }
            if (this.q4 + this.q5 >= a.width || this.q6 + this.q3 >= a.height) {
                return Rect.empty;
            }
            let c = new Rect(0, a.left + this.q4, a.top + this.q6, a.width - this.q4 - this.q5, a.height - this.q6 - this.q3);
            return c;
        }
        po() {
            let a = this.pv;
            let b = this.pw;
            let c = this.pk;
            if (c.isEmpty || a.isEmpty) {
                return a;
            }
            if (c.containsRect(a)) {
                return a;
            }
            if (a.containsRect(c)) {
                return c;
            }
            return a;
        }
        rm() {
            return this.p8.exportVisualData(this);
        }
        r0() {
            let cvd_ = this.rm();
            cvd_.scaleByViewport();
            return (cvd_.serialize());
        }
        le() {
            super.le();
            for (let a = 0; a < this.axes.count; a++) {
                let b = this.axes._inner[a];
                let c = 50;
                if (!isNaN_(b.av.bd)) {
                    c = b.av.bd;
                }
                b.du = c;
            }
        }
        lz() {
            super.lz();
            for (let a = 0; a < this.axes.count; a++) {
                let b = this.axes._inner[a];
                b.du = NaN;
                b.ck = true;
                b.hq(false);
            }
        }
        qq(a) {
            let b = new List$1(Axis.$, 0);
            for (let c of fromEnum(this.series)) {
                let d = c.an(a);
                if (d != null) {
                    b.add(d);
                }
            }
            return b;
        }
    }
    XamDataChart.$t = /*@__PURE__*/ markType(XamDataChart, 'XamDataChart', SeriesViewer.$);
    XamDataChart.rc = 0;
    XamDataChart.rb = 0;
    XamDataChart.ro = "ActualPlotAreaMarginLeft";
    XamDataChart.rq = "ActualPlotAreaMarginTop";
    XamDataChart.rp = "ActualPlotAreaMarginRight";
    XamDataChart.rn = "ActualPlotAreaMarginBottom";
    XamDataChart.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, XamDataChart, 'll', ['AlignsGridLinesToPixels:qe:sk', [0, true], 'AutoExpandMarginExtraPadding:q9:sl', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'AutoExpandMarginMaximumValue:ra:sm', [1, 60], 'ComputedPlotAreaMarginMode:p4:sn', [ComputedPlotAreaMarginMode_$type, /*@__PURE__*/ enumGetBox(ComputedPlotAreaMarginMode_$type, 0)], 'DefaultAxisMajorStroke:s1:so', [Brush.$, null], 'DefaultAxisMinorStroke:s2:sp', [Brush.$, null], 'DefaultAxisStroke:s3:sq', [Brush.$, null], 'GridMode:p6:sr', [GridMode_$type, /*@__PURE__*/ enumGetBox(GridMode_$type, 2)], 'HorizontalZoomable:qh:ss', [0, false], 'IsHorizontalZoomEnabled:qi:st', [0, false], 'IsSquare:qk:su', [0, false], 'IsVerticalZoomEnabled:ql:sv', [0, false], 'ShouldAutoExpandMarginForInitialLabels:qn:sw', [0, false], 'ShouldClipGridlines:qo:sx', [0, true], 'VerticalZoomable:qp:sy', [0, false], 'WindowScaleHorizontal:rj:sz', [1, NaN], 'WindowScaleVertical:rk:s0', [1, NaN]]);
    return XamDataChart;
})();
/**
 * @hidden
 */
export let LabelPanelArranger = /*@__PURE__*/ (() => {
    class LabelPanelArranger extends Base {
        static e(a, b) {
            for (let c of fromEnum(a)) {
                let d = c.ac;
                let e = d.ai;
                e = LabelPanelArranger.a(c, d, e);
                let f = LabelPanelArranger.b(c);
                let g = 0;
                let h = 0;
                let i = 0;
                if (d.b3()) {
                    c.ae.ac();
                    i = c.bd;
                }
                else {
                    i = c.be(b);
                }
                g = i;
                h = i;
                if (c.ac.ay != null && c.ac.ay.visibility != 0) {
                    h = 0;
                    g = 0;
                }
                if (c.ao()) {
                    switch (f) {
                        case 0:
                            b.y = Math.max(0, b.top + h);
                            b.height = Math.max(0, b.height - h);
                            d.ay.c = 0;
                            break;
                        case 4:
                            if (e != null && (c.bc - b.top < h && typeCast(HorizontalAxisLabelPanel.$, c) !== null)) {
                                d.ay.c = 5;
                            }
                            else {
                                d.ay.c = 4;
                            }
                            break;
                        case 5:
                            if (e != null && (b.bottom - c.bc < h && typeCast(HorizontalAxisLabelPanel.$, c) !== null)) {
                                if (d.ay != null) {
                                    d.ay.c = 4;
                                }
                            }
                            else {
                                if (d.ay != null) {
                                    d.ay.c = 5;
                                }
                            }
                            break;
                        case 1:
                        default:
                            if (d.ay != null) {
                                d.ay.c = 1;
                            }
                            b.height = Math.max(0, b.height - h);
                            break;
                    }
                }
                if (typeCast(VerticalAxisLabelPanel.$, c) !== null) {
                    switch (f) {
                        case 3:
                            b.width = Math.max(0, b.width - g);
                            d.ay.c = 3;
                            break;
                        case 6:
                            if (e != null && c.bc - b.left < g) {
                                d.ay.c = 7;
                            }
                            else {
                                d.ay.c = 6;
                            }
                            break;
                        case 7:
                            if (e != null && b.right - c.bc < g) {
                                d.ay.c = 6;
                            }
                            else {
                                d.ay.c = 7;
                            }
                            break;
                        case 2:
                        default:
                            if (d.ay != null) {
                                d.ay.c = 2;
                            }
                            b.x = Math.max(0, b.left + g);
                            b.width = Math.max(0, b.width - g);
                            break;
                    }
                }
                if (c.ac.b4) {
                    if (d.ay != null) {
                        d.ay.c = f;
                    }
                }
            }
            return b;
        }
        static a(a, b, c) {
            return b.aj();
        }
        static b(a) {
            if (a == null) {
                return 1;
            }
            else {
                let b = a.ac;
                if (b != null && b.ay != null) {
                    let c = b.ay.c;
                    if (!a.au(c)) {
                        return a.ah();
                    }
                    return c;
                }
                else {
                    return a.ah();
                }
            }
        }
        static c(a, b, c, d) {
            let e = a.ac;
            let f = e.ai;
            f = LabelPanelArranger.a(a, e, f);
            let g = LabelPanelArranger.b(a);
            let h;
            let i = a.be(c);
            let j = Math.max(0, i);
            let k = Math.max(0, i);
            if (a.ac != null && a.ac.ay != null && a.ac.ay.visibility == 1) {
                return;
            }
            switch (g) {
                case 3:
                    b.g = b.g - k;
                    b.d = b.d - k;
                    h = new Rect(0, b.g, c.top, k, c.height);
                    d(a, h);
                    break;
                case 2:
                    h = new Rect(0, b.f, c.top, k, c.height);
                    d(a, h);
                    b.f = b.f + k;
                    b.c = b.c + k;
                    break;
                case 7:
                    if (f != null) {
                        h = new Rect(0, b.f + a.bc, c.top, k, c.height);
                    }
                    else {
                        b.d = b.d - k;
                        h = new Rect(0, b.d, c.top, k, c.height);
                    }
                    d(a, h);
                    break;
                case 6:
                    if (f != null) {
                        h = new Rect(0, b.f + a.bc - k, c.top, k, c.height);
                    }
                    else {
                        h = new Rect(0, b.c, c.top, k, c.height);
                        b.c = b.c + k;
                    }
                    d(a, h);
                    break;
                case 1:
                    b.a = b.a - j;
                    b.b = b.b - j;
                    h = new Rect(0, c.left, b.a, c.width, j);
                    d(a, h);
                    break;
                case 0:
                    h = new Rect(0, c.left, b.h, c.width, j);
                    d(a, h);
                    b.h = b.h + j;
                    b.e = b.e + j;
                    break;
                case 5:
                    if (f != null) {
                        h = new Rect(0, c.left, b.h + a.bc, c.width, j);
                    }
                    else {
                        b.b = b.b - j;
                        h = new Rect(0, c.left, b.b, c.width, j);
                    }
                    d(a, h);
                    break;
                case 4:
                    if (f != null) {
                        h = new Rect(0, c.left, b.h + a.bc - j, c.width, j);
                    }
                    else {
                        h = new Rect(0, c.left, b.e, c.width, j);
                        b.e = b.e + j;
                    }
                    d(a, h);
                    break;
            }
            if (a.ac.b4) {
                h = new Rect(0, c.left, c.top, c.width, c.height);
                d(a, h);
            }
        }
        static d(a, b, c, d) {
            let e = new List$1(AxisLabelPanelBase.$, 0);
            let f = new List$1(AxisLabelPanelBase.$, 0);
            for (let g of fromEnum(a)) {
                let h = LabelPanelArranger.b(g);
                switch (h) {
                    case 1:
                    case 2:
                    case 0:
                    case 3:
                        f.add(g);
                        break;
                    case 5:
                    case 6:
                    case 4:
                    case 7:
                        e.add(g);
                        break;
                }
            }
            for (let i of fromEnum(f)) {
                LabelPanelArranger.c(i, b, c, d);
            }
            for (let j of fromEnum(e)) {
                LabelPanelArranger.c(j, b, c, d);
            }
        }
    }
    LabelPanelArranger.$t = /*@__PURE__*/ markType(LabelPanelArranger, 'LabelPanelArranger');
    return LabelPanelArranger;
})();
/**
 * @hidden
 */
export let ChartContentManager = /*@__PURE__*/ (() => {
    class ChartContentManager extends DependencyObject {
        constructor(a) {
            super();
            this.l = null;
            this.r = new Dictionary$2(ChartContentType_$type, Dictionary$2.$.specialize(DependencyObject.$, ContentInfo.$), 0);
            this.t = new List$1(Series.$, 0);
            this.m = false;
            this.v = null;
            this.q = false;
            this.o = false;
            this.n = false;
            this.p = false;
            this.p = true;
            this.o = true;
            this.n = true;
            this.r.addItem(0, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
            this.r.addItem(1, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
            this.r.addItem(2, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
            this.l = a;
        }
        get u() {
            return this.t;
        }
        set u(a) {
            this.t = a;
        }
        k(a, b, c) {
            let d = this.j(a, b);
            d.a = c;
            return d;
        }
        ad(a, b) {
            let c = this.r.item(a);
            if (c.containsKey(b)) {
                c.removeItem(b);
            }
            let d = typeCast(Series.$, b);
            if (d != null && this.u.contains(d)) {
                this.u.remove(d);
            }
        }
        aa(a) {
            let b = this.v;
            this.v = a;
            if (this.m && b == null && this.v != null) {
                this.v.setTimeout(runOn(this, this.w), 0);
            }
        }
        z() {
            if (!this.m) {
                this.m = true;
                if (this.v != null) {
                    this.v.setTimeout(runOn(this, this.w), 0);
                }
                else {
                }
            }
        }
        ac(a, b, c, d) {
            let e = c;
            if (!e.c) {
                e.b = d;
            }
            else {
                if (!d) {
                    e.b = false;
                }
            }
            if (!e.c) {
                e.c = true;
                this.z();
            }
        }
        j(a, b) {
            let c = this.r.item(a);
            let d = null;
            if (!((() => { let e = c.tryGetValue(b, d); d = e.p1; return e.ret; })())) {
                d = new ContentInfo();
                d.h = b;
                c.addItem(b, d);
                let e = typeCast(Series.$, b);
                if (e != null && !this.u.contains(e)) {
                    if (e.dn) {
                        let f = e.be();
                        let g = this.u.indexOf(f) + 1;
                        g += e.g3();
                        if (this.u.count <= g || f.g8() == 0 || g == -1) {
                            this.u.add(e);
                        }
                        else {
                            this.u.insert(g, e);
                        }
                    }
                    else {
                        this.u.add(e);
                    }
                }
            }
            return d;
        }
        y() {
            this.w();
        }
        w() {
            if (this.l == null || this.r == null) {
                return;
            }
            if (!this.m) {
                return;
            }
            this.m = false;
            if (this.l != null) {
                this.l.i5();
            }
            for (let a of fromEnum(this.s())) {
                a.f();
            }
            if (!this.m) {
                this.l.lm();
            }
        }
        *_s() {
            let a = null;
            a = this.r.item(1);
            for (let b of fromEnum(a.values)) {
                yield b;
            }
            a = this.r.item(0);
            let c = new List$1(ContentInfo.$, 0);
            for (let d of fromEnum(this.u)) {
                if (!d.c6) {
                    c.add(a.item(d));
                }
            }
            for (let e of fromEnum(this.u)) {
                if (e.c6) {
                    c.add(a.item(e));
                }
            }
            for (let f of fromEnum(c)) {
                yield f;
            }
            a = this.r.item(2);
            for (let g of fromEnum(a.values)) {
                yield g;
            }
        }
        s() {
            return toEnum(() => this._s());
        }
        x(a) {
            for (let b of fromEnum(this.r.item(1).values)) {
                b.h.hb(a);
            }
            for (let c of fromEnum(this.r.item(1).values)) {
                c.f();
            }
            for (let d of fromEnum(this.r.item(1).values)) {
                d.h.hx();
            }
        }
        ae(a, b, c, d) {
            c.i = d;
        }
        ab(a, b) {
            if (!b.e) {
                b.e = true;
                this.z();
            }
        }
    }
    ChartContentManager.$t = /*@__PURE__*/ markType(ChartContentManager, 'ChartContentManager', DependencyObject.$);
    return ChartContentManager;
})();
/**
 * @hidden
 */
export let ContentInfo = /*@__PURE__*/ (() => {
    class ContentInfo extends Base {
        constructor() {
            super(...arguments);
            this.h = null;
            this.a = null;
            this.b = false;
            this.c = false;
            this.i = null;
            this.e = false;
        }
        get d() {
            if (this.i.isEmpty) {
                return false;
            }
            if (this.i.width == 0 && this.i.height == 0) {
                return false;
            }
            return true;
        }
        g() {
            if (this.e && typeCast(Axis.$, this.h) !== null) {
                this.e = false;
                let a = this.c;
                this.c = true;
                let b = this.h.cw(true);
                if (!b) {
                    this.c = a;
                }
            }
        }
        f() {
            this.g();
            if (typeCast(Axis.$, this.h) !== null) {
                let a = typeCast(Axis.$, this.h);
                if (a.ai != null) {
                    let b = a.ai;
                    if (b.a5 != null && b.a5.e) {
                        b.a5.g();
                    }
                }
            }
            if (this.c) {
                this.c = false;
                this.a(this.b);
                this.b = false;
            }
        }
    }
    ContentInfo.$t = /*@__PURE__*/ markType(ContentInfo, 'ContentInfo');
    return ContentInfo;
})();
/**
 * @hidden
 */
export let Series = /*@__PURE__*/ (() => {
    class Series extends Control {
        constructor() {
            super();
            this.bx = null;
            this.hc = 0;
            this.o6 = null;
            this.gv = null;
            this.cj = null;
            this.a5 = null;
            this.a3 = null;
            this.cb = null;
            this.mr = null;
            this.e5 = new Dictionary$2(String_$type, String_$type, 0);
            this.e4 = new Dictionary$2(String_$type, FastReflectionHelper.$, 0);
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.renderRequested = null;
            this.eu = false;
            this.bw = null;
            this.as = null;
            this.co = true;
            this.em = false;
            this.en = false;
            this.cp = false;
            this.cu = false;
            this.b4 = null;
            this.b9 = null;
            this.fa = null;
            this.bc = null;
            this.ci = null;
            this.gs = null;
            this.mo = null;
            this.az = null;
            this.b3 = 0;
            this.b2 = 0;
            this.cw = false;
            this.ff = NaN;
            this.fc = NaN;
            this.fd = NaN;
            this.fe = NaN;
            this.ok = null;
            this.ol = null;
            this.fr = DeviceUtils.g(2);
            this.bi = 1;
            this.fb = 0.2;
            this.cn = false;
            this.by = 1;
            this.bq = 1;
            this.hf = null;
            this.bf = new SeriesComponentsForView();
            this.cq = false;
            this.hr = null;
            this.gu = null;
            this._coercionMethods = null;
            this.cm = false;
            this.bm = 0;
            this.bl = 0;
            this.cl = null;
            this.ow = { $type: Point_$type, x: NaN, y: NaN };
            this.fg = NaN;
            this.fh = NaN;
            DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
            DVContainer.instance.registerIfLoaded("InteractivityFactoryManager");
            DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
            this.hc = Series.gx++;
            this.et = true;
            this.o6 = Rect.empty;
            this.bx = this.bu();
            this.bx.bu = Rect.empty;
            this.lh(this.bx);
            this.bx.n = true;
            this.bx.as();
            this.bx.n = false;
            this.ab = Series.$;
            this.ci = (a, b) => {
                if (this.ca == null || !this.ca.dl) {
                    this.mn(b.oldRect, b.newRect);
                }
            };
            this.bc = (a, b) => this.lm(a, b.propertyName, b.oldValue, b.newValue);
            this.gs = (a, b) => {
                if (this.ca != null) {
                    this.et = true;
                    this.ca.j0();
                }
                this.kk(b.action, b.position, b.count, b.propertyName);
            };
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.lm(a, b.propertyName, b.oldValue, b.newValue));
            this.mr = new Canvas();
            this.cb = new DoubleAnimator(0, 1, this.ha);
            let a = this.cb;
            a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.j9));
            this.g(Series.n9, ((() => {
                let $ret = new Binding(1, "Visibility");
                $ret.d = this;
                return $ret;
            })()));
            this.bn = this.bo();
            this.bz = this.b0();
        }
        get gw() {
            return this.gv;
        }
        set gw(a) {
            this.gv = a;
            this.cb.u(this.gv);
        }
        provideRenderer(a) {
            this.gw = a;
        }
        jb() {
            return this.a4.a$r(this);
        }
        mh(a) {
        }
        mg(a) {
        }
        mi(a) {
        }
        j9(a, b) {
            this.gn = this.cb.o;
        }
        get ck() {
            if (this.cj == null) {
                this.cj = new SRProvider(this.gw);
            }
            if (this.cj.l == null) {
                if (this.gw != null) {
                    this.cj.l = this.gw;
                }
                else if (this.ca != null && this.ca.cf != null && this.ca.cf.j != null && this.ca.cf.j.ae != null) {
                    this.cj.l = this.ca.cf.j.ae;
                }
            }
            return this.cj;
        }
        get a6() {
            if (this.a5 == null) {
                this.a5 = DVContainer.instance.createInstance(ISeriesVisualDataManager_$type, () => this.ck.q);
            }
            return this.a5;
        }
        get e6() {
            return this.a4.a$h;
        }
        get a4() {
            if (this.a3 == null) {
                this.a3 = DVContainer.instance.createInstance(ISeriesInteractionManager_$type, () => this.ck.n);
                if (this.toolTip != null) {
                    this.a3.a$aj(this, this.toolTip);
                }
            }
            return this.a3;
        }
        get dt() {
            return DVContainer.instance.checkLoaded("InteractivityFactoryManager");
        }
        lh(a) {
        }
        lf() {
            this.ka(this.a0, this.a0);
            if (this.ch == null && this.b5 != null && this.itemsSource != null) {
                this.ch = this.b5.getFastItemsSource(this.itemsSource);
            }
            this.bx.av();
        }
        lg() {
            this.kg();
            if (this.ch != null && this.b5 != null && this.itemsSource != null) {
                this.ch = this.b5.releaseFastItemsSource(this.itemsSource);
            }
            this.bx.aw();
        }
        bv() {
            return this.bu();
        }
        bu() {
            return new SeriesView(this);
        }
        e0() {
            return false;
        }
        hk(a, b) {
            return null;
        }
        onLegendItemOver(a) {
        }
        onLegendItemPointerUp(a) {
        }
        onLegendItemPointerDown(a) {
        }
        onLegendItemEnter(a) {
            if (this.dr && this.dt && this.ca != null && (this.ca.a6 == 0 || this.ca.a6 == 2) && this.bj != 1) {
                this.a4.a$v(this, a, { $type: Point_$type, x: NaN, y: NaN }, false, true, false, a == null, this == this.ca.bj, false);
            }
        }
        onLegendItemLeave(a) {
            if (this.dr && this.dt && this.ca != null && (this.ca.a6 == 0 || this.ca.a6 == 2) && this.bj != 1) {
                this.a4.a$v(this, a, { $type: Point_$type, x: NaN, y: NaN }, false, true, true, a == null, this == this.ca.bj, false);
            }
        }
        ja(a) {
            if (!this.e5.containsKey(a)) {
                let b = a.charAt(0).toUpperCase() + a.substr(1);
                this.e5.addItem(a, b);
            }
            return this.e5.item(a);
        }
        hl(a, b, c) {
            let d = null;
            if (!this.e4.containsKey(b)) {
                d = new FastReflectionHelper(false, c);
                this.e4.addItem(b, d);
            }
            else {
                d = this.e4.item(b);
            }
            d.propertyName = c;
            return d.getPropertyValue(a);
        }
        fw(a) {
            return this.g0(a);
        }
        g2(a) {
            return -1;
        }
        get_d3() {
            return false;
        }
        get d3() {
            return this.get_d3();
        }
        ar() {
            return null;
        }
        g0(a) {
            return -1;
        }
        pg() {
            return new Thickness(1, 0, 0, 0, 0);
        }
        hh(a) {
            return null;
        }
        hm(a, b) {
            return a.hh(b);
        }
        ax(a, b, c, d) {
            return a.av(b, c, d);
        }
        ay(a, b, c, d) {
            return a.aw(b, c, d);
        }
        gz() {
            return -1;
        }
        g3() {
            return -1;
        }
        g8() {
            return -1;
        }
        get container() {
            return this.ca;
        }
        get hasSubItems() {
            return this.cz();
        }
        cz() {
            return false;
        }
        forSubItems(a) {
            this.kt(a);
        }
        kt(a) {
        }
        ku(a) {
        }
        i9() {
            return null;
        }
        op() {
            return this.oj;
        }
        oq() {
            return this.oo;
        }
        resolveLegendIndex() {
            return this.g9;
        }
        be() {
            return null;
        }
        get_c6() {
            return false;
        }
        get c6() {
            return this.get_c6();
        }
        get_c3() {
            return false;
        }
        get c3() {
            return this.get_c3();
        }
        get_c2() {
            return false;
        }
        get c2() {
            return this.get_c2();
        }
        get_c5() {
            return false;
        }
        get c5() {
            return this.get_c5();
        }
        get_c4() {
            return true;
        }
        get c4() {
            return this.get_c4();
        }
        get_isVertical() {
            return false;
        }
        get isVertical() {
            return this.get_isVertical();
        }
        get_dn() {
            return false;
        }
        get dn() {
            return this.get_dn();
        }
        get_c8() {
            return false;
        }
        get c8() {
            return this.get_c8();
        }
        get_c7() {
            return false;
        }
        get c7() {
            return this.get_c7();
        }
        get_dv() {
            return false;
        }
        get dv() {
            return this.get_dv();
        }
        get_du() {
            return false;
        }
        get du() {
            return this.get_du();
        }
        get_ea() {
            return false;
        }
        get ea() {
            return this.get_ea();
        }
        get_db() {
            return false;
        }
        get db() {
            return this.get_db();
        }
        get_c9() {
            return false;
        }
        get c9() {
            return this.get_c9();
        }
        get_ee() {
            return false;
        }
        get ee() {
            return this.get_ee();
        }
        get_d2() {
            return false;
        }
        get d2() {
            return this.get_d2();
        }
        get_d1() {
            return false;
        }
        get d1() {
            return this.get_d1();
        }
        get_dz() {
            return false;
        }
        get dz() {
            return this.get_dz();
        }
        get_dy() {
            return false;
        }
        get dy() {
            return this.get_dy();
        }
        get_ec() {
            return false;
        }
        get ec() {
            return this.get_ec();
        }
        get_eb() {
            return false;
        }
        get eb() {
            return this.get_eb();
        }
        get_d8() {
            return false;
        }
        get d8() {
            return this.get_d8();
        }
        get_d0() {
            return false;
        }
        get d0() {
            return this.get_d0();
        }
        get_d6() {
            return false;
        }
        get d6() {
            return this.get_d6();
        }
        get_d4() {
            return false;
        }
        get d4() {
            return this.get_d4();
        }
        get_isStacked() {
            return false;
        }
        get isStacked() {
            return this.get_isStacked();
        }
        get_di() {
            return false;
        }
        get di() {
            return this.get_di();
        }
        get_d5() {
            return false;
        }
        get d5() {
            return this.get_d5();
        }
        get_da() {
            return false;
        }
        get da() {
            return this.get_da();
        }
        get_dp() {
            return false;
        }
        get dp() {
            return this.get_dp();
        }
        get_d7() {
            return false;
        }
        get d7() {
            return this.get_d7();
        }
        get_ed() {
            return false;
        }
        get ed() {
            return this.get_ed();
        }
        bd() {
            return null;
        }
        get_c0() {
            return false;
        }
        get c0() {
            return this.get_c0();
        }
        get_dl() {
            return false;
        }
        get dl() {
            return this.get_dl();
        }
        get_dk() {
            return false;
        }
        get dk() {
            return this.get_dk();
        }
        get_dj() {
            return false;
        }
        get dj() {
            return this.get_dj();
        }
        get_dm() {
            return false;
        }
        get dm() {
            return this.get_dm();
        }
        get_dd() {
            return false;
        }
        get dd() {
            return this.get_dd();
        }
        get_de() {
            return false;
        }
        get de() {
            return this.get_de();
        }
        fu(a, b, c, d, e) {
            return Number.POSITIVE_INFINITY;
        }
        fv(a, b, c, d, e, f, g) {
            return this.a4.a$j(this, a, b, c, d, e, f, g);
        }
        get_e2() {
            return false;
        }
        get e2() {
            return this.get_e2();
        }
        ga(a, b, c, d, e, f, g, h) {
            return this.a4.a$m(this, a, b, c, d, e, f, g, h);
        }
        f0(a, b, c, d, e, f, g, h) {
            return this.a4.a$l(this, a, b, c, d, e, f, g, h);
        }
        g7(a, b, c, d, e) {
            return this.a4.a$o(this, a, b, c, d, e);
        }
        fz(a) {
            return (a ? 10 : 3);
        }
        ah(a) {
            return null;
        }
        ai(a) {
            return null;
        }
        eo(a, b) {
            return this.a4.a$d(this, a, b);
        }
        aj(a, b, c, d, e, f) {
            return this.a4.a$a(this, a, b, c, d, e, f);
        }
        eq(a, b, c) {
            return this.a4.a$e(this, a, b, c);
        }
        er(a, b) {
            return this.a4.a$f(this, a, b);
        }
        g5(a, b, c, d, e) {
            return this.a4.a$n(this, a, b, c, d, e);
        }
        fy(a, b) {
            return this.a4.a$k(this, a, b);
        }
        g6(a, b) {
            return -1;
        }
        g4(a, b) {
            return -1;
        }
        f8(a, b, c) {
            return NaN;
        }
        o2(a, b, c) {
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        pb(a) {
            return Rect.empty;
        }
        ak(a) {
            let b = this.pb(a);
            if (!b.isEmpty) {
                let c = new Array(1);
                c[0] = b;
                return c;
            }
            return null;
        }
        pc(a) {
            return this.pb(this.o5(a));
        }
        al(a) {
            return this.ak(this.o5(a));
        }
        pd(a) {
            return Rect.empty;
        }
        pe(a) {
            return this.pd(this.o5(a));
        }
        es(a, b) {
            return this.a4.a$g(this, a, b);
        }
        o4(a, b, c, d, e, f, g, h, i) {
            return this.a4.a$al(this, a, b, c, d, e, f, g, h, i);
        }
        f4(a, b, c) {
            return this.f8(a, b, c);
        }
        oy(a, b, c) {
            return this.o2(a, b, c);
        }
        f6(a, b, c) {
            return this.f8(a, b, c);
        }
        o0(a, b, c) {
            return this.o2(a, b, c);
        }
        o3(a, b, c) {
            let d = this.o5(a);
            return this.o2(d, b, c);
        }
        f9(a, b, c) {
            let d = this.o5(a);
            return this.f8(d, b, c);
        }
        oz(a, b, c) {
            let d = this.o5(a);
            return this.oy(d, b, c);
        }
        f5(a, b, c) {
            let d = this.o5(a);
            return this.f4(d, b, c);
        }
        o1(a, b, c) {
            let d = this.o5(a);
            return this.o0(d, b, c);
        }
        f7(a, b, c) {
            let d = this.o5(a);
            return this.f6(d, b, c);
        }
        g1(a) {
            let b = this.o5(a);
            return this.g0(b);
        }
        f1() {
            return 0;
        }
        fx(a) {
            let b = this.o5(a);
            return this.fw(b);
        }
        hi(a) {
            let b = this.o5(a);
            return this.hh(b);
        }
        cx(a, b, c) {
            return false;
        }
        raisePropertyChanged(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        get_hasMarkers() {
            return false;
        }
        get hasMarkers() {
            return this.get_hasMarkers();
        }
        kx() {
        }
        om() {
            return null;
        }
        on() {
            return null;
        }
        mv() {
            return null;
        }
        ft() {
            return NaN;
        }
        o5(a) {
            let b = this.ca != null ? this.ca.pj : this.bx.bu;
            let c = this.bx.bv;
            let d = { $type: Point_$type, x: c.left + c.width * (a.x - b.left) / b.width, y: c.top + c.height * (a.y - b.top) / b.height };
            return d;
        }
        ox(a) {
            let b = this.ca != null ? this.ca.pj : this.bx.bu;
            let c = this.bx.bv;
            let d = b.left + (a.x - c.left) / c.width * b.width;
            let e = b.top + (a.y - c.top) / c.height * b.height;
            return { $type: Point_$type, x: d, y: e };
        }
        hn(a, b) {
            let c = this.bx.c(a);
            let d = c != null ? c.item : null;
            if (d == null) {
                let e = this.o5(b);
                d = this.hh(e);
            }
            return d;
        }
        eh(a) {
            return false;
        }
        ap(a) {
            return new AxisRange(NaN, NaN);
        }
        aq(a) {
            return new AxisRange(NaN, NaN);
        }
        ao(a, b, c) {
            this.kq();
            if (!this.isVertical) {
                if (this.fm == 0 && this.fp == 0) {
                    return a;
                }
                let d = new ScalerParams(0, c, this.ca.pv, b.cc, this.getEffectiveViewport());
                d.b = this.f2();
                let e = b.d8(a.c, d);
                let f = b.d8(a.b, d);
                if (b.cc) {
                    f += this.fm;
                    e -= this.fp;
                }
                else {
                    f -= this.fp;
                    e += this.fm;
                }
                let g = b.eb(e, d);
                let h = b.eb(f, d);
                return new AxisRange(g, h);
            }
            else {
                return a;
            }
        }
        kq() {
            if (isNaN_(this.fp)) {
                let a = this.pg();
                this.fp = a.e;
                if (isNaN_(this.fp)) {
                    this.fp = 0;
                }
            }
            if (isNaN_(this.fm)) {
                let b = this.pg();
                this.fm = b.b;
                if (isNaN_(this.fm)) {
                    this.fm = 0;
                }
            }
            if (isNaN_(this.fn)) {
                let c = this.pg();
                this.fn = c.c;
                if (isNaN_(this.fn)) {
                    this.fn = 0;
                }
            }
            if (isNaN_(this.fo)) {
                let d = this.pg();
                this.fo = d.d;
                if (isNaN_(this.fo)) {
                    this.fo = 0;
                }
            }
        }
        l0(a) {
            this.em = false;
            if (this.ca != null) {
                this.ca.ap.ac(0, this, this.as, a);
                if (this.renderRequested != null) {
                    let b = new RenderRequestedEventArgs();
                    b.animate = a;
                    this.renderRequested(this, b);
                    a = b.animate;
                }
            }
        }
        kn(a) {
            this.l1(a);
            this.em = false;
        }
        l1(a) {
            if (this.ew && !this.ek()) {
                this.ev = false;
            }
        }
        kd() {
            if (this.eu && !this.ew) {
                this.cb.r = truncate(Math.max(this.gb(), this.gc()));
                this.ki();
            }
        }
        ki() {
        }
        l2(a, b) {
            if (this.bw == null) {
                this.bw = this.bu();
                this.bw.q = true;
                if (this.ca != null) {
                    this.ca.am.l(this.bw);
                    this.bw.a = this.ca.am;
                }
                this.bw.as();
            }
            this.bw.bu = a;
        }
        lz(a, b, c, d, e) {
            this.a4.a$t(this, a, b, d, e);
        }
        getEffectiveViewport1(a) {
            if (this.ca == null) {
                return Rect.empty;
            }
            if (a.p) {
                return this.ca.pk;
            }
            if (a.q) {
                if (this.ca.pk.isEmpty) {
                    return this.ca.pk;
                }
                let b = this.ca.pp(a.bu, this.ca.pv, this.ca.pk);
                return b;
            }
            return this.ca.pk;
        }
        o7(a) {
            if (this.ca == null || this.ca.pj.isEmpty) {
                return a.bu;
            }
            if (a.p) {
                return a.bu;
            }
            if (a.q) {
                if (this.ca.pk.isEmpty) {
                    return a.bu;
                }
                if (this.ca.pj.equals1(this.ca.pv)) {
                    return a.bu;
                }
                let b = this.ca.pp(a.bu, this.ca.pv, this.ca.pk);
                let c = this.ca.pn(a.bu, b, this.ca.pg);
                return c;
            }
            return this.ca.pj;
        }
        pa(a) {
            if (!this.pf.equals1(a)) {
                return Rect.empty;
            }
            return this.getEffectiveViewport();
        }
        o9(a) {
            if (this.ca == null || this.ca.pk.isEmpty) {
                return Rect.empty;
            }
            let b = this.ca.pk;
            let c = a.bu;
            let d = (b.left - c.left) / c.width;
            let e = (b.top - c.top) / c.height;
            let f = (b.right - c.left) / c.width;
            let g = (b.bottom - c.top) / c.height;
            return new Rect(0, d, e, f - d, g - e);
        }
        getEffectiveViewport() {
            return this.getEffectiveViewport1(this.bx);
        }
        lu() {
            this.lv(null);
        }
        get_cy() {
            return false;
        }
        get cy() {
            return this.get_cy();
        }
        get_c1() {
            return this.bj == 2 || this.bj == 4;
        }
        get c1() {
            return this.get_c1();
        }
        lv(a) {
            if (this.dt) {
                this.a4.a$ae(this, a);
            }
        }
        lw(a) {
            if (this.dt) {
                this.a4.a$af(this, a, this.ca);
            }
        }
        getViewInfo(a, b) {
            a = this.bx.bu;
            b = this.bx.bv;
            return {
                p0: a,
                p1: b
            };
        }
        e3(a, b, c) {
            if (a.width == 0 || a.height == 0) {
                return false;
            }
            if (this.dn) {
                return true;
            }
            return this._visibility == 0;
        }
        kh(a, b) {
            if (a) {
                this.et = true;
            }
        }
        cs() {
            return this.ct(this.bx);
        }
        ct(a) {
            let b = a.bu;
            let c = a.bv;
            if (!this.e3(b, c, a)) {
                this.kh(true, a);
                return true;
            }
            return false;
        }
        li(a, b) {
            this.bx.bu = b;
            this.mm(a, b);
            if (this.ca != null) {
                this.ca.ap.ae(0, this, this.as, b);
            }
        }
        mn(a, b) {
        }
        mm(a, b) {
        }
        get et() {
            return this.co;
        }
        set et(a) {
            this.co = a;
        }
        ks(a) {
            a.ko();
        }
        k8() {
            this.en = false;
            this.et = true;
            if (this.ca != null) {
                this.ca.j0();
            }
        }
        k2() {
            this.md();
            this.lj();
        }
        k7() {
            this.en = false;
            this.et = true;
            if (this.ca != null) {
                this.ca.jz();
            }
        }
        get_ds() {
            return true;
        }
        get ds() {
            return this.get_ds();
        }
        get_isUsableInLegend() {
            return true;
        }
        get isUsableInLegend() {
            return this.get_isUsableInLegend();
        }
        ld() {
            this.bx.ao();
        }
        k9() {
            this.lj();
        }
        lj() {
            this.bx.az();
            this.ll(false);
            this.me();
        }
        lk() {
            this.bx.az();
            this.ll(true);
        }
        eg() {
            return false;
        }
        ll(a) {
            if (this.as == null || this.as.c) {
                return;
            }
            let b = this.bx.bu;
            let c = this.bx.bv;
            let d = this.e3(b, c, this.bx);
            let e = this.ca != null && this.ca.d1 && this.bw != null && this.e3(this.bw.bu, this.bw.bv, this.bw);
            if (d) {
                if (a) {
                    this.em = !this.eg();
                    this.kn(false);
                }
                else {
                    this.l0(false);
                    this.em = !this.eg();
                }
            }
            if (e) {
                if (!this.et) {
                    this.k7();
                    this.en = true;
                }
            }
        }
        get ev() {
            return this.cp;
        }
        set ev(a) {
            this.cp = a;
        }
        get ew() {
            if (this.ev == false) {
                return false;
            }
            return this.gc() > 0;
        }
        v() {
            super.v();
            this.raisePropertyChanged("Opacity", this._opacity, this._opacity);
        }
        w(a, b) {
            super.w(a, b);
            this.raisePropertyChanged("Visibility", enumGetBox(Visibility_$type, a), enumGetBox(Visibility_$type, b));
        }
        lc() {
        }
        lm(a, b, c, d) {
            switch (b) {
                case "SyncLink":
                    if (typeCast(SyncLink.$, c) !== null) {
                        let e = c;
                        e.propertyUpdated = delegateRemove(e.propertyUpdated, this.bc);
                        this.lt(typeCast(IFastItemsSourceProvider_$type, c));
                    }
                    if (typeCast(SyncLink.$, d) !== null) {
                        let f = d;
                        f.propertyUpdated = delegateCombine(f.propertyUpdated, this.bc);
                        this.ls(typeCast(IFastItemsSourceProvider_$type, d));
                    }
                    if (this.g9 == -1) {
                        this.g9 = XamDataChart.rl(this);
                    }
                    break;
                case Series.$$p[24]:
                    this.br = this.bt();
                    this.mc();
                    this.ko();
                    this.lj();
                    break;
                case SeriesViewer.$$p[1]:
                case SeriesViewer.$$p[14]:
                case SeriesViewer.$$p[13]:
                case SeriesViewer.$$p[15]:
                    this.ko();
                    break;
                case "HighlightingMode":
                    this.bj = this.bk();
                    break;
                case "SeriesViewer":
                    if (typeCast(SeriesViewer.$, c) !== null) {
                        this.gw = null;
                        let g = c;
                        g.windowRectChanged = delegateRemove(g.windowRectChanged, this.ci);
                        let h = c.series;
                        h.collectionChanged = delegateRemove(h.collectionChanged, this.fa);
                        let i = c;
                        i.propertyUpdated = delegateRemove(i.propertyUpdated, this.bc);
                        c.ap.ad(0, this);
                        this.lv(c);
                        this.bx.ak(c);
                    }
                    if (typeCast(SeriesViewer.$, d) !== null) {
                        this.gw = d.cf.j.ae;
                        let j = d;
                        j.windowRectChanged = delegateCombine(j.windowRectChanged, this.ci);
                        let k = d.series;
                        k.collectionChanged = delegateCombine(k.collectionChanged, this.fa);
                        let l = d;
                        l.propertyUpdated = delegateCombine(l.propertyUpdated, this.bc);
                        this.as = d.ap.k(0, this, runOn(this, this.kn));
                        this.bx.ag(d);
                        this.bj = this.bk();
                        this.ma();
                        this.kp();
                        this.hc = this.ca.gc();
                    }
                    if (this.ca == null) {
                        this.externalObject._ensureTooltipDestroyed();
                        this.cb.w();
                    }
                    if (this.g9 != -1) {
                        this.md();
                    }
                    if (this.g9 == -1 || d == null) {
                        this.g9 = XamDataChart.rl(this);
                    }
                    this.a0 = this.a1();
                    this.kb(typeCast(SeriesViewer.$, c), typeCast(SeriesViewer.$, d));
                    break;
                case Series.$$p[34]:
                    if (this.bx != null) {
                        this.bx.ay();
                    }
                    break;
                case "HitTestMode":
                    this.bn = this.bo();
                    break;
                case "ActualHitTestMode":
                    if (this.ca != null) {
                        this.ca.lw();
                    }
                    break;
                case "LegendItemBadgeTemplate":
                case "LegendItemTemplate":
                case Series.$$p[19]:
                case Series.$$p[18]:
                    this.md();
                    this.lj();
                    break;
                case Series.$$p[21]:
                    this.mb();
                    break;
                case Series.$$p[5]:
                case Series.$$p[9]:
                case Series.$$p[25]:
                case Series.$$p[10]:
                case Series.$$p[11]:
                    this.ko();
                    this.lj();
                    break;
                case "Index":
                    if (typeGetValue(c) != typeGetValue(d)) {
                        this.lc();
                        this.br = this.bt();
                        this.mc();
                        this.mb();
                        this.ko();
                        this.lj();
                    }
                    break;
                case "RadiusX":
                case "RadiusY":
                case "RoundedCornersLocation":
                    this.lj();
                    break;
                case Series.$$p[8]:
                    this.ma();
                    this.lj();
                    break;
                case Series.$$p[32]:
                case Series.$$p[12]:
                case Series.$$p[22]:
                    this.lj();
                    break;
                case Series.$$p[16]:
                    this.ld();
                    this.lj();
                    break;
                case Series.$$p[42]:
                case Series.$$p[28]:
                case Series.$$p[27]:
                case Series.$$p[29]:
                case Series.$$p[30]:
                    this.lj();
                    break;
                case Series.$$p[33]:
                    this.mc();
                    if (this.a7 == 1) {
                        this.me();
                    }
                    break;
                case Series.$$p[2]:
                case Series.$$p[3]:
                    this.lj();
                    break;
                case Series.$$p[1]:
                case Series.$$p[6]:
                case Series.$$p[7]:
                    this.ok = this.of;
                    this.ol = this.oi;
                    this.fr = this.fl;
                    this.oh = this.oi;
                    this.og = this.of;
                    this.lj();
                    this.bx.bj();
                    if (this.toolTip != null && this.a3 != null) {
                        this.a4.a$aj(this, this.toolTip);
                    }
                    break;
                case "Visibility":
                    this.bx.bk();
                    break;
                case "ItemsSource":
                    if (this.b5 != null) {
                        this.ls(this.b5);
                    }
                    break;
                case Series.$$p[13]:
                    if (c != d && d != null) {
                        this.ev = true;
                    }
                    this.k8();
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        let m = c;
                        m.event = delegateRemove(m.event, this.gs);
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        let n = d;
                        n.event = delegateCombine(n.event, this.gs);
                    }
                    break;
                case "Legend":
                    if (d != null) {
                        if (a == this) {
                            d.seriesOwner = this;
                        }
                        else if (typeCast(XamDataChart.$, a) !== null) {
                            d.chartOwner = a;
                        }
                    }
                    this.a0 = this.a1();
                    break;
                case "ActualLegend":
                    this.ka(typeCast(IChartLegend_$type, c), typeCast(IChartLegend_$type, d));
                    break;
                case "LegendItem":
                    this.kc(typeCast(Control.$, c), typeCast(Control.$, d));
                    break;
                case Series.$$p[20]:
                    this.bx.at();
                    break;
                case Series.$$p[35]:
                    if (this.a3 != null) {
                        this.a4.a$aj(this, this.toolTip);
                    }
                    break;
                case "CrosshairPoint":
                    if (this.ca != null) {
                        this.mk(this.ca.o8);
                    }
                    if (this.ca != null) {
                        if (!this.cu) {
                            this.ca.lo(this, this.hh(this.ca.o8));
                        }
                    }
                    break;
                case Series.$$p[26]:
                    this.l0(false);
                    this.k7();
                    break;
                case Series.$$p[46]:
                    this.fp = this.gr;
                    if (this.ca != null) {
                        this.ca.jr();
                    }
                    break;
                case Series.$$p[43]:
                    this.fm = this.go;
                    if (this.ca != null) {
                        this.ca.jr();
                    }
                    break;
                case Series.$$p[36]:
                case Series.$$p[37]:
                    this.cb.w();
                    this.cb.r = this.ha;
                    this.cb.b = this.cc;
                    this.l0(false);
                    break;
                case "DiscreteLegendItemTemplate":
                    this.l0(false);
                    break;
                case "VisibilityProxy":
                    if (c != d) {
                        this.l0(false);
                    }
                    this.k7();
                    this.bx.bk();
                    break;
                case Series.$$p[17]:
                    this.bj = this.bk();
                    this.l0(false);
                    break;
                case Series.$$p[14]:
                    this.fj = isNaN_(this.gd) ? 0.2 : this.gd;
                    break;
                case Series.$$p[31]:
                    this.kp();
                    break;
                case "FinalValue":
                    this.mj();
                    break;
                case Series.$$p[47]:
                    this.bz = this.b0();
                    break;
            }
        }
        mc() {
            let a = this.br;
            let b = this.gm;
            if (isNaN_(b)) {
                b = DeviceUtils.g(2);
            }
            if (a == 2) {
                b = 1;
            }
            if (this.fl != b) {
                this.fl = b;
            }
            this.fr = this.fl;
        }
        mk(a) {
            if (this.ca != null && this.ca.dv && this.bj != 1 && this.ca.ds) {
                if (isNaN_(a.x) || isNaN_(a.y)) {
                    this.a4.a$v(this, null, a, false, false, false, false, this.ca.bj == this, true);
                }
                else {
                    this.a4.a$v(this, this.hh(a), a, false, false, false, false, this.ca.bj == this, false);
                }
            }
        }
        kp() {
            if (this.ca != null && (this.externalObject.owner)) {
                let sv_ = this.ca;
                this.externalObject.owner._ensureDefaultTooltip(this.externalObject);
                ;
            }
        }
        get_dr() {
            return false;
        }
        get dr() {
            return this.get_dr();
        }
        km(a) {
            a.cu = true;
        }
        get b5() {
            return this.b4;
        }
        set b5(a) {
            if (this.b5 != a) {
                let b = this.b5;
                this.b4 = a;
                this.raisePropertyChanged("SyncLink", b, this.b5);
            }
        }
        get ca() {
            return this.b9;
        }
        set ca(a) {
            if (this.ca != a) {
                let b = this.ca;
                this.b9 = a;
                this.raisePropertyChanged("SeriesViewer", b, this.b9);
            }
        }
        get b8() {
            return typeCast(XamDataChart.$, this.ca);
        }
        set b8(a) {
            this.ca = a;
        }
        get itemsSource() {
            return this.c(Series.ng);
        }
        set itemsSource(a) {
            this.h(Series.ng, a);
        }
        kk(a, b, c, d) {
            if (this.ca != null) {
                this.ca.lp();
            }
        }
        get legend() {
            return this.c(Series.nm);
        }
        set legend(a) {
            this.h(Series.nm, a);
        }
        get mq() {
            if (this.mo == null && this.a0 != null) {
                this.mo = this.mp();
            }
            return this.mo;
        }
        set mq(a) {
            if (this.mq != a) {
                let b = this.mq;
                this.mo = a;
                this.raisePropertyChanged("LegendItem", b, this.mo);
            }
        }
        ho() {
            return this.mp();
        }
        mp() {
            let a = typeCast(ContentControl.$, this.mo);
            let b = this.legendItemTemplate;
            if (b == null) {
                b = this.bx.bl(this.b3);
            }
            if (b != null) {
                if (a == null) {
                    a = new ContentControl();
                }
                a.content = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this;
                    $ret.item = null;
                    return $ret;
                })());
                a.ah = b;
            }
            else {
                a = null;
            }
            return a;
        }
        get a0() {
            return this.az;
        }
        set a0(a) {
            if (this.a0 != a) {
                let b = this.az;
                this.az = a;
                this.raisePropertyChanged("ActualLegend", b, this.az);
            }
        }
        get legendItemBadgeTemplate() {
            return this.c(Series.nj);
        }
        set legendItemBadgeTemplate(a) {
            this.h(Series.nj, a);
        }
        mu() {
            return this.legendItemBadgeTemplate;
        }
        get legendItemTemplate() {
            return this.c(Series.nk);
        }
        set legendItemTemplate(a) {
            this.h(Series.nk, a);
        }
        get mt() {
            return this.c(Series.m8);
        }
        set mt(a) {
            this.h(Series.m8, a);
        }
        get g9() {
            return typeGetValue(this.c(Series.nc));
        }
        set g9(a) {
            this.h(Series.nc, a);
        }
        ml() {
            this.md();
        }
        ko() {
            this.md();
        }
        md() {
            this.k7();
            if (this.g9 < 0) {
                return;
            }
            if (this.oj != null) {
                this.bx.a7();
                this.bx.ah();
            }
            else {
                this.of = this.ca == null ? null : this.ca.ou(this.g9);
            }
            if (this.br == 2) {
                this.bx.a8();
                this.oi = this.of;
            }
            else {
                if (this.oo != null) {
                    this.bx.a8();
                    this.bx.ai();
                }
                else {
                    this.oi = this.ca == null ? null : this.ca.o0(this.g9);
                }
            }
            if ((this.d6 || this.dp) && this.d2) {
                this.of = this.oi;
            }
            else if ((this.d6 || this.dp) && this.c7) {
                this.oi = this.of;
            }
            else if ((this.d6 || this.dp) && this.du) {
                this.oi = this.of;
            }
            else if (this.ec && this.a9 == 2) {
                this.of = this.oi;
            }
        }
        cr() {
            return this.cb.f();
        }
        l8() {
            this.cb.v();
        }
        get fp() {
            return this.ff;
        }
        set fp(a) {
            this.ff = a;
        }
        get fm() {
            return this.fc;
        }
        set fm(a) {
            this.fc = a;
        }
        get fn() {
            return this.fd;
        }
        set fn(a) {
            this.fd = a;
        }
        get fo() {
            return this.fe;
        }
        set fo(a) {
            this.fe = a;
        }
        get bj() {
            return this.bi;
        }
        set bj(a) {
            let b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.raisePropertyChanged("ActualHighlightingMode", enumGetBox(SeriesHighlightingMode_$type, b), enumGetBox(SeriesHighlightingMode_$type, this.bi));
            }
        }
        bk() {
            if (!this.dr) {
                return 1;
            }
            if (this.ca != null) {
                if (this.ca.bq != 1 && this.ca.bq != 0 && !this.dc) {
                    return this.ca.bq;
                }
            }
            if (this.dq) {
                return 2;
            }
            return 1;
        }
        d9(a) {
            switch (a) {
                case 2:
                case 4: return true;
            }
            return false;
        }
        get fj() {
            return this.fb;
        }
        set fj(a) {
            let b = this.fb;
            this.fb = a;
            if (b != this.fb) {
                this.raisePropertyChanged("ActualHighlightingFadeOpacity", b, this.fb);
            }
        }
        get_dh() {
            return true;
        }
        get dh() {
            return this.get_dh();
        }
        ma() {
            let a = (typeCast(XamDataChart.$, this.ca));
            if (a != null) {
                this.fi = isNaN_(this.fq) ? a.p9.fk : this.fq;
            }
        }
        mb() {
            this.fk = isNaN_(this.ge) ? this.gi() : this.ge;
        }
        gi() {
            return 1;
        }
        get df() {
            return this.cn;
        }
        set df(a) {
            this.cn = a;
        }
        get bz() {
            return this.by;
        }
        set bz(a) {
            this.by = a;
        }
        b0() {
            if (this.b1 == 0) {
                return 1;
            }
            return this.b1;
        }
        get br() {
            return this.bq;
        }
        set br(a) {
            this.bq = a;
        }
        bt() {
            if (this.bs == 0) {
                return 1;
            }
            return this.bs;
        }
        au(a) {
            return ((() => {
                let $ret = new DataContext();
                $ret.series = this;
                $ret.item = a;
                return $ret;
            })());
        }
        b6() {
            return 1;
        }
        ly() {
            this.bx.a3();
        }
        l3() {
            this.ev = true;
            this.l0(true);
        }
        lx() {
            this.ke();
        }
        ke() {
        }
        ky() {
        }
        static *_e8(a, b, c) {
            for (let d = b; d < c; d++) {
                yield a(d);
            }
        }
        static e8(a, b, c) {
            return toEnum(() => Series._e8(a, b, c));
        }
        static e7(a, b) {
            return Series.e8(a, 0, b);
        }
        bg() {
            return this.bf;
        }
        l4(a) {
            this.mf(a);
        }
        gb() {
            return this.ha;
        }
        gc() {
            return this.hb;
        }
        get_ex() {
            return this.cq;
        }
        set_ex(a) {
            this.cq = a;
        }
        get ex() {
            return this.get_ex();
        }
        set ex(a) {
            this.set_ex(a);
        }
        get ej() {
            return this.ex;
        }
        kf() {
            this.a4.a$s();
        }
        av(a, b, c) {
            return null;
        }
        aw(a, b, c) {
            return null;
        }
        le(a, b, c, d) {
            this.a4.a$y(this, a, b, c, d);
        }
        l7(a) {
            this.a4.a$ai(this, a);
        }
        kb(a, b) {
            if (this.a0 != null && this.mq != null) {
                if (b == null && this.a0.containsChild(this.mq)) {
                    this.a0.removeChild(this.mq);
                }
                if (b != null && !this.a0.containsChild(this.mq) && this.ph != 1) {
                    this.a0.addChildInOrder(this.mq, this);
                }
            }
        }
        kg() {
            if (this.a0 == null || this.mq == null) {
                return;
            }
            this.a0.removeChild(this.mq);
        }
        ka(a, b) {
            if (this.mq != null) {
                if (a != null && a.containsChild(this.mq)) {
                    a.removeChild(this.mq);
                }
                if (this.ca != null && b != null && !b.containsChild(this.mq) && this.ph != 1) {
                    b.addChildInOrder(this.mq, this);
                }
            }
        }
        kc(a, b) {
            if (this.a0 != null) {
                if (a != null && this.a0.containsChild(a)) {
                    this.a0.removeChild(a);
                }
                if (this.ca != null && b != null && this.ph != 1) {
                    this.a0.addChildInOrder(b, this);
                }
            }
        }
        lt(a) {
            this.ch = a.releaseFastItemsSource(this.itemsSource);
        }
        ls(a) {
            this.ch = a.getFastItemsSource(this.itemsSource);
        }
        a1() {
            if (this.legend != null) {
                return this.legend;
            }
            if (this.ca != null && this.ca.legend != null) {
                return this.ca.legend;
            }
            return null;
        }
        ek() {
            return false;
        }
        ei(a) {
            return (a && this.gb() > 0) || this.cr() || (this.ew && this.ek() && this.gc() > 0);
        }
        kl(a) {
            if (a != null) {
                a.bx(this);
            }
        }
        lr(a) {
            if (a != null) {
                a.cn(this);
            }
        }
        bh() {
            return this.bx.g();
        }
        mf(a) {
            this.bx.a9(a);
        }
        l6(a, b) {
            this.a4.a$ah(this, a, b);
        }
        get_ez() {
            return false;
        }
        get ez() {
            return this.get_ez();
        }
        ln(a, b) {
            this.bx.ar(a, b);
        }
        lp(a) {
            this.li(this.pf, a);
        }
        kw(a) {
            if (this.ch != null) {
                this.ch.handleCollectionChanged(a);
            }
        }
        k5(a, b, c) {
            this.kw(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
        }
        k1() {
            this.kw(new NotifyCollectionChangedEventArgs(0, 4));
        }
        k3(a, b) {
            this.kw(new NotifyCollectionChangedEventArgs(1, 0, b, a));
        }
        k4(a, b) {
            this.kw(new NotifyCollectionChangedEventArgs(1, 1, b, a));
        }
        l9() {
            this.l0(false);
        }
        ep(a, b) {
            return false;
        }
        get_coercionMethods() {
            return this._coercionMethods;
        }
        set_coercionMethods(a) {
            this._coercionMethods = a;
        }
        get coercionMethods() {
            return this.get_coercionMethods();
        }
        set coercionMethods(a) {
            this.set_coercionMethods(a);
        }
        get_expectFunctions() {
            return this.cm;
        }
        set_expectFunctions(a) {
            let b = this.cm;
            this.cm = a;
            if (b != this.cm) {
                this.raisePropertyChanged("ExpectFunctions", b, this.cm);
            }
        }
        get expectFunctions() {
            return this.get_expectFunctions();
        }
        set expectFunctions(a) {
            this.set_expectFunctions(a);
        }
        at(a, b) {
            return null;
        }
        get bp() {
            return this.bm;
        }
        set bp(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.raisePropertyChanged("HitTestMode", enumGetBox(SeriesHitTestMode_$type, b), enumGetBox(SeriesHitTestMode_$type, this.bm));
            }
        }
        bo() {
            return this.bp == 0 ? 2 : this.bp;
        }
        get bn() {
            return this.bl;
        }
        set bn(a) {
            let b = this.bl;
            this.bl = a;
            if (b != this.bl) {
                this.raisePropertyChanged("ActualHitTestMode", enumGetBox(SeriesHitTestMode_$type, b), enumGetBox(SeriesHitTestMode_$type, this.bl));
            }
        }
        ce(a) {
            if (a == null) {
                return this.ch.registerColumn(null, null, false);
            }
            let b = null;
            let c = SeriesViewer.b1(a, this.coercionMethods);
            b = c.a;
            return this.ch.registerColumn(a, b, this.expectFunctions);
        }
        cf(a) {
            if (a == null) {
                return this.ch.registerColumnInt(null, null, false);
            }
            let b = null;
            let c = SeriesViewer.b1(a, this.coercionMethods);
            b = c.a;
            return this.ch.registerColumnInt(a, b, this.expectFunctions);
        }
        cg(a) {
            if (a == null) {
                return this.ch.registerColumnObject(null, null, false);
            }
            let b = null;
            let c = SeriesViewer.b1(a, this.coercionMethods);
            b = c.a;
            return this.ch.registerColumnObject(a, b, this.expectFunctions);
        }
        get pf() {
            return this.bx != null ? this.bx.bu : Rect.empty;
        }
        get_dx() {
            return false;
        }
        get dx() {
            return this.get_dx();
        }
        get_dw() {
            return false;
        }
        get dw() {
            return this.get_dw();
        }
        l5(a, b) {
        }
        kj(a, b) {
            this.a6.copyVisualData(a, b);
        }
        hg() {
            let a = this.a6.exportVisualData(this, this.pf);
            this.kr(a);
            this.bx.al(a);
            return a;
        }
        kr(a) {
        }
        kz(a) {
            if (this.ow.x != a.x || this.ow.y != a.y) {
                this.ow = a;
                this.lb(a);
            }
        }
        lb(a) {
        }
        k0() {
        }
        k6() {
        }
        an(a) {
            return null;
        }
        ag() {
            return null;
        }
        f2() {
            return NaN;
        }
        static f3(a, b) {
            if (a == null || a.count == 0) {
                return NaN;
            }
            if (b != null && b.i$b != null) {
                if (b.i$b.count != a.count) {
                    return NaN;
                }
                for (let c = 0; c < a.count; c++) {
                    if (!isNaN_(a.item(b.i$b._inner[c])) && a.item(b.i$b._inner[c]) != 0) {
                        return a.item(b.i$b._inner[c]);
                    }
                }
            }
            for (let d = 0; d < a.count; d++) {
                if (!isNaN_(a.item(d)) && a.item(d) != 0) {
                    return a.item(d);
                }
            }
            return NaN;
        }
        la() {
        }
        get fs() {
            return this.fg;
        }
        set fs(a) {
            let b = this.fs;
            if (a != b) {
                this.fg = a;
                this.raisePropertyChanged("FinalValue", b, this.fs);
            }
        }
        get gg() {
            return this.fh;
        }
        set gg(a) {
            let b = this.gg;
            if (a != b) {
                this.fh = a;
                this.raisePropertyChanged("PercentChange", b, this.gg);
            }
        }
        mj() {
            let a = this.f2();
            this.gg = (this.fs - a) / a * 100;
        }
        hj(a) {
            return null;
        }
        get h5() {
            return !stringIsNullOrWhiteSpace(this.ck.bz) ? this.ck.bz : "Open";
        }
        get hu() {
            return !stringIsNullOrWhiteSpace(this.ck.bw) ? this.ck.bw : "Close";
        }
        get hv() {
            return !stringIsNullOrWhiteSpace(this.ck.bx) ? this.ck.bx : "High";
        }
        get h3() {
            return !stringIsNullOrWhiteSpace(this.ck.by) ? this.ck.by : "Low";
        }
        get ia() {
            return !stringIsNullOrWhiteSpace(this.ck.b0) ? this.ck.b0 : "Volume";
        }
        get h9() {
            return !stringIsNullOrWhiteSpace(this.ck.b9) ? this.ck.b9 : "Value";
        }
        get h7() {
            return !stringIsNullOrWhiteSpace(this.ck.m) ? this.ck.m : "Radius";
        }
        me() {
            this.ms = this.mu();
            this.bx.bj();
        }
        am() {
            let a = this.a9;
            if (a == 0) {
                a = this.ba();
            }
            let b = 0;
            if (a == 3) {
                if (this.dl || this.dk || this.ee) {
                    b = 6;
                }
                else if (this.dj) {
                    b = 7;
                }
                else {
                    b = 5;
                }
            }
            else if (a == 4) {
                if (this.hasMarkers) {
                    b = 8;
                }
                else {
                    b = 0;
                }
            }
            else if (a == 2) {
                if (this.hasMarkers && !this.c6) {
                    b = 1;
                }
                else {
                    b = 2;
                }
            }
            else if (a == 1) {
                b = 0;
            }
            else if (a == 5) {
                b = 3;
            }
            else if (a == 6) {
                b = 4;
            }
            else if (a == 7) {
                b = 9;
            }
            return b;
        }
        a8(a) {
            return a;
        }
        ba() {
            if (this.c7 || this.c9 || this.db || this.d1 || this.d8 || this.dl || this.dj || this.dk || this.ec || this.ee) {
                return this.a8(3);
            }
            else if (this.dv || this.ea || this.d2 || this.du || this.ed) {
                return this.a8(2);
            }
            else if (this.c6 || this.dz || this.dy) {
                return this.a8(1);
            }
            else if (this.c0) {
                return this.a8(4);
            }
            return this.a8(1);
        }
    }
    Series.$t = /*@__PURE__*/ markType(Series, 'Series', Control.$, [INotifyPropertyChanged_$type, IProvidesViewport_$type, ILegendSeries_$type, ILegendSeriesInternal_$type, ILegendOwner_$type, ILegendTemplateProvider_$type]);
    Series.gx = 0;
    Series.n9 = /*@__PURE__*/ DependencyProperty.i("VisibilityProxy", Visibility_$type, Series.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(Visibility_$type, 0), (a, b) => a.raisePropertyChanged("VisibilityProxy", b.oldValue, b.newValue)));
    Series.ng = /*@__PURE__*/ DependencyProperty.i("ItemsSource", IEnumerable_$type, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        if (c.b5 != null) {
            c.b5.releaseFastItemsSource(b.oldValue);
        }
        a.raisePropertyChanged("ItemsSource", b.oldValue, b.newValue);
    }));
    Series.nm = /*@__PURE__*/ DependencyProperty.i("Legend", IChartLegend_$type, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("Legend", b.oldValue, b.newValue);
    }));
    Series.nj = /*@__PURE__*/ DependencyProperty.i("LegendItemBadgeTemplate", DataTemplate.$, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("LegendItemBadgeTemplate", b.oldValue, b.newValue);
        if (c.mq != null) {
            c.mq = c.mp();
        }
    }));
    Series.nk = /*@__PURE__*/ DependencyProperty.i("LegendItemTemplate", DataTemplate.$, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("LegendItemTemplate", b.oldValue, b.newValue);
        if (c.mq != null) {
            c.mq = c.mp();
        }
    }));
    Series.m8 = /*@__PURE__*/ DependencyProperty.i("DiscreteLegendItemTemplate", DataTemplate.$, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("DiscreteLegendItemTemplate", b.oldValue, b.newValue);
    }));
    Series.nc = /*@__PURE__*/ DependencyProperty.i("Index", Number_$type, Series.$, /*@__PURE__*/ new PropertyMetadata(2, -1, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("Index", b.oldValue, b.newValue);
        if (c.mq != null) {
            c.mq = c.mp();
        }
    }));
    Series.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, Series, 'raisePropertyChanged', ['ActualAreaFillOpacity:fi:mw', [1, 1], 'ActualBrush:of:mx', [Brush.$], 'ActualLegendItemBadgeBrush:og:my', [Brush.$], 'ActualLegendItemBadgeOutline:oh:mz', [Brush.$], 'ActualLegendItemBadgeTemplate:ms:m0', [DataTemplate.$], 'ActualMarkerFillOpacity:fk:m1', [1, 1], 'ActualOutline:oi:m2', [Brush.$], 'ActualThickness:fl:m3', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'AreaFillOpacity:fq:m4', [1, NaN], 'Brush:oj:m5', [Brush.$, null], 'DashArray:os:m6', [DoubleCollection.$], 'DashCap:ot:m7', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)], 'EndCap:ou:m9', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'FastItemsSource:ch:na', [IFastItemsSource_$type], 'HighlightingFadeOpacity:gd:nb', [1, NaN], 'IsComponentHighlightingModeIgnored:dc:nd', [0, false], 'IsDropShadowEnabled:dg:ne', [0, false], 'IsHighlightingEnabled:dq:nf', [0, false], 'LegendItemBadgeMode:a7:nh', [LegendItemBadgeMode_$type, /*@__PURE__*/ enumGetBox(LegendItemBadgeMode_$type, 0)], 'LegendItemBadgeShape:a9:ni', [LegendItemBadgeShape_$type, /*@__PURE__*/ enumGetBox(LegendItemBadgeShape_$type, 0)], 'LegendItemVisibility:ph:nl', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'MarkerFillOpacity:ge:nn', [1, NaN], 'MiterLimit:gf:no', [1, 0], 'MouseOverEnabled:ef:np', [0, true], 'OutlineMode:bs:nq', [SeriesOutlineMode_$type, /*@__PURE__*/ enumGetBox(SeriesOutlineMode_$type, 0)], 'Outline:oo:nr', [Brush.$, null], 'Resolution:gh:ns', [1, 1], 'ShadowBlur:gj:nt', [1, NaN], 'ShadowColor:or:nu', [Color.$], 'ShadowOffsetX:gk:nv', [1, NaN], 'ShadowOffsetY:gl:nw', [1, NaN], 'ShowDefaultTooltip:el:nx', [0, false], 'StartCap:ov:ny', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'Thickness:gm:nz', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'Title:hp:n0', [4, "Series Title"], 'ToolTip::n1', [4, null], 'TransitionDuration:ha:n2', [1, 0], 'TransitionEasingFunction:cc:n3', [Delegate_$type, null], 'TransitionInDuration:hb:n4', [1, 1000], 'TransitionInEasingFunction:cd:n5', [Delegate_$type, null], 'TransitionInSpeedType:b7:n6', [TransitionInSpeedType_$type, /*@__PURE__*/ enumGetBox(TransitionInSpeedType_$type, 0)], 'TransitionProgress:gn:n7', [1, 0], 'UseSingleShadow:e1:n8', [0, true], 'VisibleRangeMarginBottom:go:oa', [1, NaN], 'VisibleRangeMarginLeft:gp:ob', [1, NaN], 'VisibleRangeMarginRight:gq:oc', [1, NaN], 'VisibleRangeMarginTop:gr:od', [1, NaN], 'VisibleRangeMode:b1:oe', [SeriesVisibleRangeMode_$type, /*@__PURE__*/ enumGetBox(SeriesVisibleRangeMode_$type, 0)]]);
    return Series;
})();
/**
 * @hidden
 */
export let MarkerSeries = /*@__PURE__*/ (() => {
    class MarkerSeries extends Series {
        constructor() {
            super();
            this.pm = 1;
            this.pi = 1;
            this.qc = null;
        }
        pg() {
            if (this.pr != 1 && this.pr != 13) {
                let a = this.pq.cq();
                let b = (a.width / 2) + (this.pw / 2);
                let c = (a.height / 2) + (this.pw / 2);
                return new Thickness(1, b, c, b, c);
            }
            return new Thickness(1, 0, 0, 0, 0);
        }
        lh(a) {
            super.lh(a);
            this.pq = a;
        }
        get_hasMarkers() {
            return true;
        }
        om() {
            return this.qr;
        }
        on() {
            return this.qs;
        }
        mv() {
            return this.qc;
        }
        get pn() {
            return this.pm;
        }
        set pn(a) {
            this.pm = a;
        }
        pp() {
            if (this.po == 0) {
                return 1;
            }
            return this.po;
        }
        mh(a) {
            super.mh(a);
            this.po = a;
        }
        get pj() {
            return this.pi;
        }
        set pj(a) {
            this.pi = a;
        }
        pl() {
            if (this.pk == 0) {
                return 1;
            }
            return this.pk;
        }
        mg(a) {
            super.mg(a);
            this.pk = a;
        }
        mi(a) {
            super.mi(a);
            this.pw = a;
        }
        ft() {
            return this.pw;
        }
        static get qe() {
            if (MarkerSeries.qa == null) {
                MarkerSeries.qa = new DataTemplate();
            }
            return MarkerSeries.qa;
        }
        get qt() {
            return this.c(MarkerSeries.qi);
        }
        set qt(a) {
            this.h(MarkerSeries.qi, a);
        }
        pt() {
            return this.qc != null && ((this.pr != 1 && this.pr != 0) || this.qd != null);
        }
        lc() {
            super.lc();
            this.pn = this.pp();
            this.pj = this.pl();
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case "MarkerBrush":
                case MarkerSeries.$$p[9]:
                case MarkerSeries.$$p[5]:
                case MarkerSeries.$$p[7]:
                case MarkerSeries.$$p[8]:
                    this.md();
                    this.lj();
                    break;
                case MarkerSeries.$$p[4]:
                    this.pn = this.pp();
                    this.md();
                    this.lj();
                    break;
                case MarkerSeries.$$p[3]:
                    this.pj = this.pl();
                    this.md();
                    this.lj();
                    break;
                case MarkerSeries.$$p[2]:
                    this.qc = d;
                    if (c == MarkerSeries.qe || d == MarkerSeries.qe || (c == null || d != null)) {
                        this.pq.cg();
                        let e = typeCast(MarkerSeriesView.$, this.bw);
                        if (e != null) {
                            e.cg();
                        }
                        this.l0(false);
                    }
                    this.bx.bj();
                    if (this.toolTip != null && this.dt) {
                        this.a4.a$aj(this, this.toolTip);
                    }
                    this.k7();
                    break;
                case MarkerSeries.$$p[10]:
                    this.pq.cn(this.pv);
                    this.l0(false);
                    break;
                case MarkerSeries.$$p[0]:
                case MarkerSeries.$$p[1]:
                    if (this.c0) {
                        this.og = this.om();
                        this.oh = this.on();
                    }
                    break;
            }
        }
        static p0(a) {
            switch (a) {
                case 3:
                case 13: return SeriesViewer.$$p[2];
                case 4: return SeriesViewer.$$p[34];
                case 5: return SeriesViewer.$$p[26];
                case 6: return SeriesViewer.$$p[28];
                case 7: return SeriesViewer.$$p[5];
                case 8: return SeriesViewer.$$p[18];
                case 9: return SeriesViewer.$$p[7];
                case 10: return SeriesViewer.$$p[31];
                case 11: return SeriesViewer.$$p[19];
                case 12: return SeriesViewer.$$p[8];
                case 0:
                case 1:
                default: return null;
            }
        }
        static ps(a, b) {
            let c = 1;
            let d = 0;
            if (a != null && a.ca != null) {
                d = a.ca.a9;
            }
            if (a == null || a.ca == null) {
                c = 1;
                return c;
            }
            if (b != 2 && b != 0) {
                c = b;
            }
            else {
                if (d == 4) {
                    c = 3;
                }
                else if (d == 5) {
                    c = 4;
                }
                else if (d == 9) {
                    c = 8;
                }
                else if (d == 11) {
                    c = 10;
                }
                else if (d == 8) {
                    c = 7;
                }
                else if (d == 7) {
                    c = 6;
                }
                else if (d == 10) {
                    c = 9;
                }
                else if (d == 12) {
                    c = 11;
                }
                else if (d == 6) {
                    c = 5;
                }
                else if (d == 13) {
                    c = 12;
                }
                else if (d == 1) {
                    c = 1;
                }
                else if (d == 0) {
                    if (a.dw) {
                        c = 1;
                    }
                    else {
                        c = 3;
                    }
                }
                else if (d == 3 || d == 2) {
                    if (d == 2) {
                        if (a.dw) {
                            c = 1;
                            return c;
                        }
                    }
                    if (a.g9 < 0) {
                        c = 1;
                    }
                    else {
                        let e = [3, 4, 8, 10, 7, 6, 9, 11, 5, 12];
                        c = e[a.g9 % e.length];
                    }
                }
            }
            return c;
        }
        md() {
            super.md();
            if (this.g9 < 0) {
                return;
            }
            if (this.pq.b2()) {
                this.pq.ce();
                this.pq.b8();
            }
            else {
                let a = MarkerSeries.ps(this, this.pr);
                let b = MarkerSeries.p0(a);
                if (b == null) {
                    this.qb = MarkerSeries.qe;
                }
                else {
                    this.pq.cb(b);
                }
            }
            if (this.qt != null && this.pr != 13) {
                this.pq.cc();
                this.pq.b9();
            }
            else {
                if (this.pr == 13) {
                    this.qr = this.bx.bq();
                }
                else {
                    if (this.pj != 2) {
                        if (this.ca != null) {
                            let c = this.ca.oy(this.g9);
                            if (!isNaN_(this.fk) && this.fk != 1) {
                                c = BrushUtil.o(c, this.fk);
                            }
                            this.qr = c;
                        }
                        else {
                            this.qr = null;
                        }
                    }
                }
            }
            if (this.qu != null) {
                this.pq.cd();
                this.pq.ca();
            }
            else {
                if (this.pr == 13) {
                    this.qs = this.bx.bq();
                }
                else {
                    if (this.pn == 2) {
                        this.qs = this.qr;
                    }
                    else {
                        this.qs = this.ca == null ? null : this.ca.oz(this.g9);
                    }
                }
            }
            if (this.pj == 2 && this.qt == null && this.pr != 13) {
                if (this.qs != null) {
                    let d = this.qs;
                    if (!isNaN_(this.fk) && this.fk != 1) {
                        d = BrushUtil.o(d, this.fk);
                    }
                    this.qr = d;
                }
                else {
                    this.qr = null;
                }
            }
        }
        kr(a) {
            super.kr(a);
            this.a6.exportMarkerVisualData(this, a);
        }
        pu(a, b) {
            if (this.hasMarkers && this.pt()) {
                let c = this.pe(a);
                if (c.isEmpty) {
                    return false;
                }
                let d = RectUtil.r(c, this.fz(b));
                if (d.containsPoint(a)) {
                    return true;
                }
            }
            return false;
        }
        at(a, b) {
            let c = this.pq.by(a);
            let d = null;
            if (c != null) {
                d = c.content;
            }
            return d;
        }
    }
    MarkerSeries.$t = /*@__PURE__*/ markType(MarkerSeries, 'MarkerSeries', Series.$);
    MarkerSeries.qa = null;
    MarkerSeries.qi = /*@__PURE__*/ DependencyProperty.i("MarkerBrush", Brush.$, MarkerSeries.$, /*@__PURE__*/ new PropertyMetadata(1, (a, b) => {
        let c = (typeCast(MarkerSeries.$, a));
        c.raisePropertyChanged("MarkerBrush", b.oldValue, b.newValue);
    }));
    MarkerSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, MarkerSeries, 'raisePropertyChanged', ['ActualMarkerBrush:qr:qf', [Brush.$], 'ActualMarkerOutline:qs:qg', [Brush.$], 'ActualMarkerTemplate:qb:qh', [DataTemplate.$, null], 'MarkerFillMode:pk:qj', [MarkerFillMode_$type, /*@__PURE__*/ enumGetBox(MarkerFillMode_$type, 0)], 'MarkerOutlineMode:po:qk', [MarkerOutlineMode_$type, /*@__PURE__*/ enumGetBox(MarkerOutlineMode_$type, 0)], 'MarkerOutline:qu:ql', [Brush.$], 'MarkerStyle:qv:qm', [Style.$], 'MarkerTemplate:qd:qn', [DataTemplate.$, null], 'MarkerThickness:pw:qo', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'MarkerType:pr:qp', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 1)], 'UseLightweightMarkers:pv:qq', [0, false]]);
    return MarkerSeries;
})();
/**
 * @hidden
 */
export let SyncLink = /*@__PURE__*/ (() => {
    class SyncLink extends FrameworkElement {
        constructor() {
            super();
            this.ai = null;
            this.af = new Dictionary$2(IEnumerable_$type, FastItemsSourceReference.$, 0);
            this.aq = null;
            this.ab = null;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.am(a, b.propertyName, b.oldValue, b.newValue));
            this.ab = new ChartCollection();
            let a = this.ab;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.aj));
            this.aq = new Rect(0, 0, 0, 1, 1);
        }
        am(a, b, c, d) {
        }
        releaseFastItemsSource(a) {
            if (a != null) {
                let b = null;
                if (((() => { let c = this.af.tryGetValue(a, b); b = c.p1; return c.ret; })())) {
                    --b.b;
                    if (b.b == 0) {
                        this.af.removeItem(a);
                    }
                }
            }
            return null;
        }
        static ad(a) {
            return ((() => {
                let $ret = new FastItemsSource();
                $ret.e = a;
                return $ret;
            })());
        }
        getFastItemsSource(a) {
            if (SyncLink.ah == null) {
                SyncLink.ah = SyncLink.ad;
            }
            let b = null;
            if (a != null) {
                let c = null;
                if (!((() => { let d = this.af.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
                    b = SyncLink.ah(a);
                    c = new FastItemsSourceReference(b);
                    this.af.addItem(a, c);
                }
                c.b++;
                b = c.a;
            }
            return b;
        }
        ae(a) {
            let b = null;
            if (a != null) {
                let c = null;
                if (!((() => { let d = this.af.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
                    return null;
                }
                b = c.a;
            }
            return b;
        }
        ar(a, b, c) {
            return this.as(a, b, c, false);
        }
        as(a, b, c, d) {
            if (!c.isEmpty) {
                c = new Rect(0, c.left, c.top, c.width, c.height);
                let e = a.f5;
                if (b == a) {
                    if (!d) {
                        if (!b.d4()) {
                            c.x = b.pw.x;
                            c.width = b.pw.width;
                        }
                        if (!b.d5()) {
                            c.y = b.pw.y;
                            c.height = b.pw.height;
                        }
                    }
                }
                else {
                    let f = SyncManager.a(b);
                    if (f == null || !f.synchronizeHorizontally) {
                        c.x = b.pw.x;
                        c.width = b.pw.width;
                    }
                    if (f == null || !f.synchronizeVertically) {
                        c.y = b.pw.y;
                        c.height = b.pw.height;
                    }
                }
                let g = 0.5 * (c.left + c.right);
                let h = 0.5 * (c.top + c.bottom);
                let i = c.width;
                let j = c.height;
                let k = MathUtil.b(c.width, e, 1);
                let l = MathUtil.b(c.height, e, 1);
                let m = false;
                if (a.ep() && !a.pv.isEmpty) {
                    let n = a.pv;
                    let o = n.width / n.height;
                    let p = k * n.width;
                    let q = l * n.height;
                    let r = p / q;
                    if (r != o) {
                        if (q * o > p) {
                            p = q * o;
                            k = p / n.width;
                        }
                        else {
                            q = p / o;
                            l = q / n.height;
                        }
                    }
                }
                else if (a.di()) {
                    let s = false;
                    let t = false;
                    if (Math.abs(k - a.pg.width) > e) {
                        s = true;
                    }
                    if (Math.abs(l - a.pg.height) > e) {
                        t = true;
                    }
                    let u = a.js(k, l, s, t);
                    k = u.p0;
                    l = u.p1;
                    k = MathUtil.b(k, e, 1);
                    l = MathUtil.b(l, e, 1);
                }
                else if (b.ek && c.width < 1) {
                    let v = 1.7976931348623157E+308;
                    let w = -1.7976931348623157E+308;
                    let x = c.left;
                    let y = c.right;
                    let z = c.top;
                    let aa = c.bottom;
                    let ab = c.width;
                    let ac = c.height;
                    if (b.by == 1) {
                        if (x < 0) {
                            x = 0;
                            y = x + ab;
                        }
                        if (y > 1) {
                            y = 1;
                            x = y - ab;
                        }
                        if (z < 0) {
                            z = 0;
                            aa = z + ac;
                        }
                        if (aa > 1) {
                            aa = 1;
                            z = aa - ac;
                        }
                    }
                    let ad = new Rect(0, x, z, y - x, aa - z);
                    for (let ae = 0; ae < b.series.count; ae++) {
                        let af = b.series._inner[ae];
                        if (af.c6) {
                            continue;
                        }
                        let ag = af.ag();
                        let ah = null;
                        for (let ai = 0; ai < ag.length; ai++) {
                            if (ag[ai].cj) {
                                ah = ag[ai];
                            }
                        }
                        if (ah != null) {
                            let aj = new Rect(0, 0, 0, 1, 1);
                            let ak = new ScalerParams(0, aj, aj, ah.cc, b.pp(aj, b.pv, b.pk));
                            ak.b = af.f2();
                            let al = af.aq(ad);
                            let am = al == null || al.c == 1.7976931348623157E+308 || isNaN_(al.c);
                            if (am) {
                                continue;
                            }
                            let an = ah.d8(al.c, ak);
                            let ao = ah.d8(al.b, ak);
                            if (ah.cc) {
                                let ap = an;
                                an = ao;
                                ao = ap;
                            }
                            w = Math.max(w, an);
                            v = Math.min(v, ao);
                            if (af.bz == 2) {
                                if (ah.ce) {
                                    let aq = ah;
                                    let ar = aq.k5;
                                    ar = ah.dt(ar, ak);
                                    let as = ah.d8(ar, ak);
                                    w = Math.max(w, as);
                                    v = Math.min(v, as);
                                }
                            }
                        }
                    }
                    let at = (v == 1.7976931348623157E+308 || w == -1.7976931348623157E+308 || isNaN_(v) || isNaN_(w));
                    if (!at) {
                        c = new Rect(0, c.left, v, c.width, w - v);
                        k = c.width;
                        l = c.height;
                        m = true;
                    }
                }
                let au = k != i;
                let av = l != j;
                let aw = au && !m ? g - 0.5 * k : c.left;
                let ax = av && !m ? h - 0.5 * l : c.top;
                let ay = au && !m ? g + 0.5 * k : c.right;
                let az = av && !m ? h + 0.5 * l : c.bottom;
                if (b.by == 1) {
                    if (aw < 0) {
                        aw = 0;
                        ay = aw + k;
                    }
                    if (ay > 1) {
                        ay = 1;
                        aw = ay - k;
                    }
                    if (ax < 0) {
                        ax = 0;
                        az = ax + l;
                    }
                    if (az > 1) {
                        az = 1;
                        ax = az - l;
                    }
                }
                c = new Rect(0, aw, ax, ay - aw, az - ax);
            }
            return c;
        }
        get ag() {
            return this.ab;
        }
        aj(a, b) {
            if (b.newItems != null) {
                for (let c of fromEn(b.newItems)) {
                    if (c.pw.isEmpty) {
                        c.pw = this.ar(null, c, this.aq);
                    }
                }
            }
        }
        ak(a, b) {
            for (let c of fromEnum(this.ag)) {
                if (c == a) {
                    c.o8 = { $type: Point_$type, x: b.x, y: b.y };
                }
                else {
                    let d = { $type: Point_$type, x: b.x, y: b.y };
                    let e = SyncManager.a(c);
                    if (e == null || !e.synchronizeHorizontally) {
                        d.x = NaN;
                    }
                    if (e == null || !e.synchronizeVertically) {
                        d.y = NaN;
                    }
                    c.o8 = d;
                }
            }
        }
        al(a, b) {
            for (let c of fromEnum(this.ag)) {
                c.pq = this.ar(a, c, b);
            }
        }
        ao(a, b) {
            this.ap(a, b, false);
        }
        ap(a, b, c) {
            let d = b.isEmpty || isNaN_(b.x) || isNaN_(b.y) || isNaN_(b.width) || isNaN_(b.height);
            if (!d && !a.dg) {
                for (let e of fromEnum(this.ag)) {
                    e.dg = true;
                    e.pw = this.as(a, e, b, c);
                    e.dg = false;
                }
            }
        }
        an(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
    }
    SyncLink.$t = /*@__PURE__*/ markType(SyncLink, 'SyncLink', FrameworkElement.$, [INotifyPropertyChanged_$type, IFastItemsSourceProvider_$type]);
    SyncLink.ah = null;
    return SyncLink;
})();
/**
 * @hidden
 */
export let SyncLinkManager = /*@__PURE__*/ (() => {
    class SyncLinkManager extends Base {
        constructor() {
            super();
            this.d = null;
            this.d = new Dictionary$2(String_$type, SyncLink.$, 0);
        }
        static instance() {
            if (SyncLinkManager.b == null) {
                SyncLinkManager.b = new SyncLinkManager();
            }
            return SyncLinkManager.b;
        }
        get e() {
            return this.d.count;
        }
        getLink(a) {
            let b;
            if (((() => { let c = this.d.tryGetValue(a, b); b = c.p1; return c.ret; })())) {
                return b;
            }
            b = new SyncLink();
            b.ai = a;
            this.d.addItem(a, b);
            return b;
        }
        releaseLink(a) {
            if (a.ag.count == 0 && a.ai != null && this.d.containsKey(a.ai)) {
                this.d.removeItem(a.ai);
            }
        }
    }
    SyncLinkManager.$t = /*@__PURE__*/ markType(SyncLinkManager, 'SyncLinkManager');
    SyncLinkManager.b = null;
    return SyncLinkManager;
})();
/**
 * @hidden
 */
export let SyncManager = /*@__PURE__*/ (() => {
    class SyncManager extends Base {
        static e(a) {
            let b = SyncManager.a(a);
            if (b == null) {
                return;
            }
            if (!a.d0) {
                return;
            }
            if (a.syncChannel != b.syncChannel) {
                return;
            }
            SyncManager.b(a, a.syncChannel, null);
        }
        static c(a) {
            let b = SyncManager.a(a);
            if (b == null) {
                return;
            }
            if (a.d0 && a.syncChannel == b.syncChannel) {
                return;
            }
            let c = null;
            if (a.d0) {
                c = a.syncChannel;
            }
            SyncManager.b(a, c, b.syncChannel);
        }
        static b(a, b, c) {
            if (a != null) {
                if (stringIsNullOrEmpty(c)) {
                    let d = a.actualSyncLink;
                    a.actualSyncLink = null;
                    a.actualSyncLink = new SyncLink();
                    if (d != null) {
                        SyncLinkManager.instance().releaseLink(d);
                    }
                    a.syncChannel = null;
                }
                else {
                    if (!stringIsNullOrEmpty(b)) {
                        let e = a.actualSyncLink;
                        a.actualSyncLink = null;
                        if (e != null) {
                            SyncLinkManager.instance().releaseLink(e);
                        }
                    }
                    a.actualSyncLink = SyncLinkManager.instance().getLink(c);
                    a.syncChannel = c;
                }
            }
        }
        static d(a, b) {
            a.syncSettings = b;
        }
        static a(a) {
            return a.syncSettings;
        }
    }
    SyncManager.$t = /*@__PURE__*/ markType(SyncManager, 'SyncManager');
    return SyncManager;
})();
/**
 * @hidden
 */
export let ChartCollection = /*@__PURE__*/ (() => {
    class ChartCollection extends ObservableCollection$1 {
        constructor() {
            super(SeriesViewer.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    ChartCollection.$t = /*@__PURE__*/ markType(ChartCollection, 'ChartCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(SeriesViewer.$));
    return ChartCollection;
})();
/**
 * @hidden
 */
export let SeriesCollection = /*@__PURE__*/ (() => {
    class SeriesCollection extends ObservableCollection$1 {
        constructor() {
            super(Series.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    SeriesCollection.$t = /*@__PURE__*/ markType(SeriesCollection, 'SeriesCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(Series.$));
    return SeriesCollection;
})();
/**
 * @hidden
 */
export let PlotAreaMouseEventArgs = /*@__PURE__*/ (() => {
    class PlotAreaMouseEventArgs extends EventArgs {
        constructor(a, b, c) {
            super();
            this._chartPosition = null;
            this._plotAreaPosition = null;
            this._isDuringManipulation = false;
            this._viewer = null;
            this.viewer = a;
            this.chartPosition = b;
            this.plotAreaPosition = c;
        }
        get chartPosition() {
            return this._chartPosition;
        }
        set chartPosition(a) {
            this._chartPosition = a;
        }
        get plotAreaPosition() {
            return this._plotAreaPosition;
        }
        set plotAreaPosition(a) {
            this._plotAreaPosition = a;
        }
        get isDuringManipulation() {
            return this._isDuringManipulation;
        }
        set isDuringManipulation(a) {
            this._isDuringManipulation = a;
        }
        get viewer() {
            return this._viewer;
        }
        set viewer(a) {
            this._viewer = a;
        }
    }
    PlotAreaMouseEventArgs.$t = /*@__PURE__*/ markType(PlotAreaMouseEventArgs, 'PlotAreaMouseEventArgs', EventArgs.$);
    return PlotAreaMouseEventArgs;
})();
/**
 * @hidden
 */
export let PlotAreaMouseButtonEventArgs = /*@__PURE__*/ (() => {
    class PlotAreaMouseButtonEventArgs extends EventArgs {
        constructor(a, b, c) {
            super();
            this._chartPosition = null;
            this._plotAreaPosition = null;
            this._manipulationOccurred = false;
            this._viewer = null;
            this.viewer = a;
            this.chartPosition = b;
            this.plotAreaPosition = c;
        }
        get chartPosition() {
            return this._chartPosition;
        }
        set chartPosition(a) {
            this._chartPosition = a;
        }
        get plotAreaPosition() {
            return this._plotAreaPosition;
        }
        set plotAreaPosition(a) {
            this._plotAreaPosition = a;
        }
        get manipulationOccurred() {
            return this._manipulationOccurred;
        }
        set manipulationOccurred(a) {
            this._manipulationOccurred = a;
        }
        get viewer() {
            return this._viewer;
        }
        set viewer(a) {
            this._viewer = a;
        }
    }
    PlotAreaMouseButtonEventArgs.$t = /*@__PURE__*/ markType(PlotAreaMouseButtonEventArgs, 'PlotAreaMouseButtonEventArgs', EventArgs.$);
    return PlotAreaMouseButtonEventArgs;
})();
/**
 * @hidden
 */
export let ChartCursorEventArgs = /*@__PURE__*/ (() => {
    class ChartCursorEventArgs extends EventArgs {
        constructor(a, b, c) {
            super();
            this._item = null;
            this._series = null;
            this._seriesViewer = null;
            this.seriesViewer = a;
            this.series = b;
            this.item = c;
        }
        toString() {
            return this.seriesViewer.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "");
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        get seriesViewer() {
            return this._seriesViewer;
        }
        set seriesViewer(a) {
            this._seriesViewer = a;
        }
        get chart() {
            return typeCast(XamDataChart.$, this.seriesViewer);
        }
    }
    ChartCursorEventArgs.$t = /*@__PURE__*/ markType(ChartCursorEventArgs, 'ChartCursorEventArgs', EventArgs.$);
    return ChartCursorEventArgs;
})();
/**
 * @hidden
 */
export let DataChartMouseButtonEventArgs = /*@__PURE__*/ (() => {
    class DataChartMouseButtonEventArgs extends EventArgs {
        constructor(a, b, c, d) {
            super();
            this.g = null;
            this._item = null;
            this._series = null;
            this._chart = null;
            this.chart = a;
            this.series = b;
            this.item = c;
            this.g = d;
        }
        toString() {
            return this.chart.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "") + ", " + this.getPosition(null).toString();
        }
        get handled() {
            return this.g.handled;
        }
        set handled(a) {
            this.g.handled = a;
        }
        getPosition(a) {
            return this.g.getPosition(a);
        }
        get originalSource() {
            return this.g.originalSource;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        get chart() {
            return this._chart;
        }
        set chart(a) {
            this._chart = a;
        }
    }
    DataChartMouseButtonEventArgs.$t = /*@__PURE__*/ markType(DataChartMouseButtonEventArgs, 'DataChartMouseButtonEventArgs', EventArgs.$);
    return DataChartMouseButtonEventArgs;
})();
/**
 * @hidden
 */
export let ChartMouseEventArgs = /*@__PURE__*/ (() => {
    class ChartMouseEventArgs extends EventArgs {
        constructor(a, b, c, d) {
            super();
            this.f = null;
            this._item = null;
            this._series = null;
            this._chart = null;
            this.chart = a;
            this.series = b;
            this.item = c;
            this.f = d;
        }
        toString() {
            return this.chart.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "") + ", " + this.getPosition(null).toString();
        }
        getPosition(a) {
            return this.f.getPosition(a);
        }
        get originalSource() {
            return this.f.originalSource;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        get chart() {
            return this._chart;
        }
        set chart(a) {
            this._chart = a;
        }
    }
    ChartMouseEventArgs.$t = /*@__PURE__*/ markType(ChartMouseEventArgs, 'ChartMouseEventArgs', EventArgs.$);
    return ChartMouseEventArgs;
})();
/**
 * @hidden
 */
export let AxisComponentsForView = /*@__PURE__*/ (() => {
    class AxisComponentsForView extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
        }
    }
    AxisComponentsForView.$t = /*@__PURE__*/ markType(AxisComponentsForView, 'AxisComponentsForView');
    return AxisComponentsForView;
})();
/**
 * @hidden
 */
export let AxisLabelPanelBaseView = /*@__PURE__*/ (() => {
    class AxisLabelPanelBaseView extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.av = null;
            this.e = null;
            this.au = Rect.empty;
            this.c = null;
            this.h = 0;
            this.i = NaN;
            this.a = a;
        }
        aa(a, b, c, d, e, f) {
            let g = typeCast(FrameworkElement.$, a);
            if (g != null) {
                g._visibility = 0;
                if (b.width == 0 && b.height == 0) {
                    g._visibility = 1;
                }
                let h = b.height - (d + f);
                let i = b.width - (c + e);
                g.n = b.left + c;
                g.o = b.top + d;
                if (i < 0) {
                    i = 0;
                }
                if (h < 0) {
                    h = 0;
                }
                g.l = h;
                g.m = i;
                if (g.j != null) {
                    let j = g.j;
                    let k = j.j._inner[0];
                    k.k = k.k + g.n;
                    k.l = k.l + g.o;
                }
            }
        }
        z(a, b, c, d, e, f, g, h) {
            let i = Math.max(e, Math.max(f, Math.max(g, h)));
            let j = new Thickness(0, i);
            if (this.a.ar) {
                j = new Thickness(0, Math.sqrt((i * i) / 2));
            }
            let k = c.d;
            if (isNaN_(k.c) || isNaN_(k.e) || isNaN_(k.d) || isNaN_(k.b)) {
                k = j;
            }
            if (k.c > j.c || k.e > j.e || k.d > j.d || k.b > j.b) {
                k = j;
            }
            let l = new Rect(0, d.left - k.c, d.top - k.e, d.width + k.c + k.d, d.height + k.e + k.b);
            let m = a.j;
            a.j = null;
            this.aa(a, l, e, f, g, h);
            a.j = m;
            a.width = a.m;
            a.height = a.l;
        }
        ad(a) {
            let b = a;
            b.j = null;
        }
        ag(a) {
        }
        ah(a, b) {
        }
        ai(a, b) {
            let c = typeCast(FrameworkElement.$, a);
            let d = 0;
            let e = 0;
            let f = new TransformGroup();
            let g = ((() => {
                let $ret = new RotateTransform();
                $ret.j = b;
                $ret.k = d;
                $ret.l = e;
                return $ret;
            })());
            f.j.add(g);
            c.j = f;
        }
        aq(a, b, c, d, e, f, g, h, i) {
            let j = Math.max(e, Math.max(f, Math.max(g, h)));
            let k = new Thickness(0, j);
            if (this.a.ar) {
                k = new Thickness(0, Math.sqrt((j * j) / 2));
            }
            let l = c.d;
            if (isNaN_(l.c) || isNaN_(l.e) || isNaN_(l.d) || isNaN_(l.b)) {
                l = k;
            }
            if (l.c > k.c || l.e > k.e || l.d > k.d || l.b > k.b) {
                l = k;
            }
            let m = b.j;
            let n = new TransformGroup();
            let o = a.n + l.c;
            let p = a.o + l.e;
            n.j.add(m);
            a.j = n;
        }
        x(a, b, c, d) {
            let e = a.ak.length;
            let f = a.ak;
            let g = a.ak;
            while ((this.m(a) + c + d) > b && e > 0) {
                e--;
                f = f.substr(0, e) + "\u2026";
                a.ak = f;
            }
            a.ak = g;
            return f;
        }
        ae() {
            if (this.e == null) {
                return;
            }
            let a = this.g();
            for (let b of fromEnum(a)) {
                let c = typeCast(FrameworkElement.$, b);
                if (c != null) {
                    this.a.cb(c);
                }
                this.a.b2(b);
            }
        }
        g() {
            let a = this.a.ax();
            let b = this.a.aw();
            if (!this.a.ac.c0) {
                return a;
            }
            else {
                return b;
            }
        }
        l(a) {
            return this.h;
        }
        n(a) {
            return this.l(a) + this.r() + this.o();
        }
        am() {
            this.av = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                $ret.ab = false;
                return $ret;
            })());
        }
        m(a) {
            let b = a;
            if (b != null && b.ak != null) {
                return this.e.e(b);
            }
            return 0;
        }
        w(a) {
            let b = a;
            if (b != null && b.ak != null) {
                return this.m(a) + this.p() + this.q();
            }
            return 0;
        }
        ac() {
            this.a.bd = this.a.ac.ee();
        }
        aj() {
            this.af();
            this.a.c0(new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
        }
        f() {
            return this.e;
        }
        ak(a) {
            this.e = a;
        }
        y() {
            if (this.a.cu.isEmpty) {
                return;
            }
            let a = this.a.a9;
            this.a.cy(new Size(1, this.a.cu.width, this.a.cu.height));
            if (this.a.a9 != a) {
                this.a.ac.bf.jq();
                this.al();
            }
        }
        al() {
        }
        ao(a) {
            this.e.w(a);
        }
        an() {
            if (this.e == null) {
                return;
            }
            if (this.e.d) {
                if (this.a.ac.bh != null && this.a.ac.bh.fh != 1) {
                    this.e.z();
                    this.e.aa(this.a.ac.bh.fh, this.a.ac.bh.fh);
                }
                this.af();
                this.au = this.a.cu;
                let a = this.a.ac.bf.getFontBrush();
                if (this.a.af != null && this.a.af.textColor != null) {
                    a = this.a.af.textColor;
                }
                if (this.a.j != null) {
                    this.e.z();
                    this.e.j(this.a.j);
                }
                let b = false;
                for (let c of fromEnum(this.g())) {
                    let d = typeCast(TextBlock.$, c);
                    if (d != null) {
                        if (d.s != 0) {
                            b = true;
                            continue;
                        }
                        d.am = a;
                        if (d.j != null) {
                            this.e.z();
                            this.e.j(d.j);
                        }
                        this.ao(d);
                        if (d.j != null) {
                            this.e.y();
                        }
                    }
                }
                if (b) {
                    for (let e of fromEnum(this.a.ab)) {
                        let f = typeCast(Rectangle.$, e);
                        if (f != null) {
                            if (f.s == 0) {
                                continue;
                            }
                            if (f.j != null) {
                                this.e.z();
                                this.e.j(f.j);
                            }
                            this.e.v(f);
                            if (f.j != null) {
                                this.e.y();
                            }
                        }
                        let g = typeCast(TextBlock.$, e);
                        if (g != null) {
                            if (g.s == 0) {
                                continue;
                            }
                            if (g.j != null) {
                                this.e.z();
                                this.e.j(g.j);
                            }
                            if (g.am == null) {
                                g.am = a;
                            }
                            this.e.w(g);
                            if (g.j != null) {
                                this.e.y();
                            }
                        }
                    }
                }
                if (this.a.j != null) {
                    this.e.y();
                }
                this.ap();
                a = this.as();
                this.e.ac(this.d());
                let h = this.a.ac.h6;
                if (h != null) {
                    h.am = a;
                    if (h.j != null) {
                        this.e.z();
                        this.e.j(h.j);
                    }
                    this.e.w(h);
                    if (h.j != null) {
                        this.e.y();
                    }
                }
                if (this.a.ac.bh != null && this.a.ac.bh.fh != 1) {
                    this.e.y();
                }
            }
        }
        d() {
            let a = this.a.ac.bh.getFontInfo();
            if (this.a.ac.be != null && this.a.ac.be.textStyle != null) {
                a = this.a.ac.be.g(this.a.ac.bh.cf.j.ae);
            }
            else {
                let b = this.a.ac.bh.ch();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        as() {
            let a = this.a.ac.bf.getFontBrush();
            if (this.a.ac.be != null && this.a.ac.be.textColor != null) {
                a = this.a.ac.be.textColor;
            }
            else {
                let b = this.a.ac.bh.ov();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        af() {
            if (this.e == null) {
                return;
            }
            let a = this.a.ac.bh.getFontInfo();
            if (this.a.af != null && this.a.af.textStyle != null) {
                a = this.a.af.g(this.a.ac.bh.cf.j.ae);
            }
            if (this.c != a) {
                this.c = a;
                this.ar();
            }
            this.e.ac(a);
        }
        ar() {
            if (this.a.ac != null && this.a.ac.bh != null) {
                if (this.a.af == null || this.a.af.textStyle == null) {
                    this.h = this.a.ac.bh.cf.a9;
                    return;
                }
                if (this.h == 0) {
                    this.h = this.a.ac.bh.cf.a9;
                }
                let a = this.h;
                let b = this.a.ac.bh.getFontInfo();
                if (this.a.af != null && this.a.af.textStyle != null) {
                    b = this.a.af.g(this.a.ac.bh.cf.j.ae);
                }
                let c = FontUtil.getCurrentFontHeight(this.a.ac.bh.cf.j.ae, b);
                this.h = c;
                if (a != this.h) {
                    this.a.ac.bh.jq();
                }
            }
        }
        j() {
            if (this.a.ac.gp == null) {
                return 0;
            }
            if (this.a.ac.be != null && this.a.ac.be.visibility == 1) {
                return 0;
            }
            if (!isNaN_(this.i)) {
                return this.i;
            }
            let a = this.d();
            if (this.a.ac.bh == null) {
                return this.h;
            }
            this.i = FontUtil.getCurrentFontHeight(this.a.ac.bh.cf.j.ae, a);
            return this.i;
        }
        k() {
            if (this.a.ac.be != null && this.a.ac.be.visibility == 1) {
                return 0;
            }
            if (this.e == null) {
                return 0;
            }
            let a = this.a.ac.h6;
            if (a != null && a.ak != null) {
                this.e.ac(this.d());
                let b = this.e.e(a);
                this.af();
                return b;
            }
            return 0;
        }
        ap() {
            if (this.a.ab.count == 0) {
                return;
            }
            if (this.a.ac.jf == null) {
                this.av._stroke = this.a.ac.bf.os();
            }
            else {
                this.av._stroke = this.a.ac.jf;
            }
            this.av.ac = this.a.ac.e1;
            this.e.s(this.av);
        }
        ab(a) {
        }
        aw() {
            return this.a.ac.bh.py();
        }
        v() {
            if (this.a.ac.be != null && !isNaN_(this.a.ac.be.topMargin)) {
                return Math.max(0, this.a.ac.be.topMargin);
            }
            else {
                return this.aw().e;
            }
        }
        s() {
            if (this.a.ac.be != null && !isNaN_(this.a.ac.be.bottomMargin)) {
                return Math.max(0, this.a.ac.be.bottomMargin);
            }
            else {
                return this.aw().b;
            }
        }
        t() {
            if (this.a.ac.be != null && !isNaN_(this.a.ac.be.leftMargin)) {
                return Math.max(0, this.a.ac.be.leftMargin);
            }
            else {
                return this.aw().c;
            }
        }
        u() {
            if (this.a.ac.be != null && !isNaN_(this.a.ac.be.rightMargin)) {
                return Math.max(0, this.a.ac.be.rightMargin);
            }
            else {
                return this.aw().d;
            }
        }
        at() {
            return this.av.ak.d;
        }
        b() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.ac.jf;
                $ret.c = this.a.ac.e1;
                return $ret;
            })());
            if (this.a.ac != null && typeCast(XamDataChart.$, this.a.ac.bf) !== null) {
                let b = this.a.ac.bf;
                if (b.qe && b.b6 != 2 && b.b6 != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        r() {
            if (this.a.af == null) {
                return 0;
            }
            return Math.max(0, this.a.af.topMargin);
        }
        p() {
            if (this.a.af == null) {
                return 0;
            }
            return Math.max(0, this.a.af.leftMargin);
        }
        q() {
            if (this.a.af == null) {
                return 0;
            }
            return Math.max(0, this.a.af.rightMargin);
        }
        o() {
            if (this.a.af == null) {
                return 0;
            }
            return Math.max(0, this.a.af.bottomMargin);
        }
    }
    AxisLabelPanelBaseView.$t = /*@__PURE__*/ markType(AxisLabelPanelBaseView, 'AxisLabelPanelBaseView');
    return AxisLabelPanelBaseView;
})();
/**
 * @hidden
 */
export let AxisView = /*@__PURE__*/ (() => {
    class AxisView extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a7 = null;
            this.a8 = null;
            this.ba = null;
            this.a9 = null;
            this.b = new AxisComponentsFromView();
            this.h = null;
            this.k = null;
            this.j = null;
            this._isDirty = false;
            this.bb = null;
            this.a5 = Rect.empty;
            this.a = a;
            this.bb = new Rectangle();
        }
        ag() {
            this.a7 = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                return $ret;
            })());
            this.ba = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                $ret.ab = false;
                $ret.stroke = null;
                return $ret;
            })());
            this.a8 = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                $ret.ab = false;
                return $ret;
            })());
            this.a9 = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                $ret.ab = false;
                return $ret;
            })());
            this.a.jf = AxisDefaults.j;
            this.a.e0 = AxisDefaults.d;
            this.a.e1 = AxisDefaults.e;
            this.a.ef = AxisDefaults.b;
            this.a.ei = AxisDefaults.c;
            this.a.ez = AxisDefaults.a;
        }
        ai(a) {
        }
        ax() {
            let a = new TextBlock();
            return a;
        }
        aq(a) {
            a._visibility = 0;
            a.s = 0;
            if (a.x == null) {
                this.a.av.ab.add(a);
            }
        }
        as(a) {
            a._visibility = 1;
        }
        ar(a) {
            if (this.a.av.ab.contains(a)) {
                this.a.av.ab.remove(a);
            }
        }
        bc() {
            let a = new Rectangle();
            return a;
        }
        p(a) {
            if (a.x == null) {
                this.d.ab.add(a);
            }
            a._visibility = 0;
        }
        r(a) {
            a._visibility = 1;
        }
        q(a) {
            if (this.a.av.ab.contains(a)) {
                this.a.av.ab.remove(a);
            }
        }
        aj() {
        }
        m() {
            return true;
        }
        get index() {
            if (this.a.bh != null && this.a.bh.dx) {
                return this.a.bh.series.count + 1;
            }
            let a = typeCast(XamDataChart.$, this.a.bf);
            let b = 0;
            if (a == null) {
                return 0;
            }
            if (a != null && a.p6 == 1) {
                let c = 0;
                for (let d = 0; d < this.a.bh.series.count; d++) {
                    if (this.a.bh.series._inner[d].isStacked) {
                        c += this.a.bh.series._inner[d].g8();
                    }
                    else {
                        c++;
                    }
                }
                b = c;
            }
            return b + a.axes.indexOf(this.a);
        }
        ad() {
            this.d.ca();
            this.d.by();
        }
        ab() {
            this.d.b5();
        }
        x() {
            if (this.d != null) {
                this.d.ab.clear();
            }
            this.z(this.a7.ak.d);
            this.z(this.ba.ak.d);
            this.z(this.a8.ak.d);
            this.z(this.a9.ak.d);
            this.ae();
        }
        av(a) {
            this.a7._visibility = a;
            this.a8._visibility = a;
            this.ba._visibility = a;
            this.a9._visibility = a;
        }
        an() {
        }
        w(a) {
            this.a.ck = true;
            if (this.a.bh != null) {
                this.a.bh.jq();
            }
            this.a.hp();
        }
        c() {
            this.b.a = this.a7;
            this.b.b = this.a8;
            this.b.c = this.a9;
            this.b.d = this.ba;
            return this.b;
        }
        z(a) {
            if (a != null) {
                a.clear();
            }
        }
        ay() {
            return this.a7.ak.d;
        }
        e() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.je;
                $ret.c = this.a.ez;
                $ret.f = this.a.ji;
                return $ret;
            })());
            if (typeCast(XamDataChart.$, this.a.bf) !== null) {
                let b = this.a.bf;
                if (b.qe && b.b6 != 2 && b.b6 != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        a1() {
            return this.ba.ak.d;
        }
        az() {
            return this.a8.ak.d;
        }
        f() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.jb;
                $ret.c = this.a.ef;
                $ret.f = this.a.jg;
                return $ret;
            })());
            if (typeCast(XamDataChart.$, this.a.bf) !== null) {
                let b = this.a.bf;
                if (b.qe && b.b6 != 2 && b.b6 != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        a0() {
            return this.a9.ak.d;
        }
        g() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.jc;
                $ret.c = this.a.ei;
                $ret.f = this.a.jh;
                return $ret;
            })());
            if (typeCast(XamDataChart.$, this.a.bf) !== null) {
                let b = this.a.bf;
                if (b.qe && b.b6 != 2 && b.b6 != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        get d() {
            return this.a.ap().a;
        }
        at(a, b, c) {
            this.d.ac = a;
            this.d.cx = b;
            this.d.cw = c;
            this.ae();
        }
        y() {
            this.d.ab.clear();
            this.ae();
        }
        ap(a) {
            this.d.br = a;
            this.ae();
        }
        au(a, b) {
            this.d.a5 = a;
            this.d.a6 = b;
        }
        ao(a) {
            this.d.bc = a;
        }
        v() {
        }
        o(a) {
            return null;
        }
        n(dataItem_) {
            if (this.a.at != null) {
                return this.a.at(dataItem_);
            }
            if (this.a.ah != null) {
                return this.a.ah.i(dataItem_);
            }
            let label_ = this.a.fj;
            let a = typeof dataItem_ === 'number' && typeof label_ === 'string';
            let labelValue_ = null;
            if (this.h != null) {
                labelValue_ = this.h.getPropertyValue(dataItem_);
                if ((labelValue_ === undefined)) {
                    labelValue_ = label_;
                }
            }
            else {
                labelValue_ = a ? stringFormat(label_, dataItem_) : (typeof dataItem_[label_] != 'undefined') ? dataItem_[label_] : label_;
                ;
            }
            if (this.a.expectFunctions) {
                if ((typeof (labelValue_) == 'function')) {
                    labelValue_ = labelValue_();
                }
            }
            return labelValue_;
        }
        af(a, b) {
            this.j = a;
            this.k = b;
        }
        get isDirty() {
            return this._isDirty;
        }
        set isDirty(a) {
            this._isDirty = a;
        }
        ae() {
            if (this.a.bf == null || this.j == null) {
                return;
            }
            if (!this.isDirty) {
                this.isDirty = true;
                this.a.bf.al.o(this.j, this.k);
            }
        }
        undirty(a) {
            this.isDirty = false;
            this.al(a);
        }
        al(a) {
            if (this.j == null) {
                return;
            }
            if (this.j.d) {
                if (this.a.bh != null && this.a.bh.fh != 1) {
                    this.j.z();
                    this.j.aa(this.a.bh.fh, this.a.bh.fh);
                }
                let b = this.a.bf.pl();
                if (a) {
                    this.j.k(b.left, b.top, b.width, b.height);
                }
                if (a) {
                    if (this.a.bh.o1 != null && !this.a.js.isEmpty) {
                        this.bb.o = this.a.js.top;
                        this.bb.n = this.a.js.left;
                        this.bb.width = this.a.js.width;
                        this.bb.height = this.a.js.height;
                        this.bb._fill = this.a.bh.o1;
                        this.j.v(this.bb);
                    }
                }
                this.j.z();
                this.j.ae(this.a.js);
                this.am();
                this.j.y();
                if (this.a.bh != null && this.a.bh.fh != 1) {
                    this.j.y();
                }
            }
            if (this.k.d) {
                if (this.a.bh != null && this.a.bh.fh != 1) {
                    this.k.z();
                    this.k.aa(this.a.bh.fh, this.a.bh.fh);
                }
                let c = this.a5;
                let d = this.a.bf.pl();
                if (!c.isEmpty && a) {
                    this.k.k(d.left, d.top, d.width, d.height);
                }
                if (this.a.bh != null && this.a.bh.fh != 1) {
                    this.k.y();
                }
            }
        }
        postRender() {
            this.d.cf();
        }
        am() {
            if (this.j.d) {
                this.a7._stroke = this.a.ja;
                this.ba._fill = this.a.jd;
                this.a9._stroke = this.a.i9;
                this.a8._stroke = this.a.i8;
                this.a9.ac = this.a.ei;
                this.a8.ac = this.a.ef;
                this.a7.ac = this.a.ez;
                this.a9.ai = this.a.jh;
                this.a8.ai = this.a.jg;
                this.a7.ai = this.a.ji;
                this.a5 = this.a.js;
                this.j.s(this.a7);
                this.j.s(this.ba);
                this.j.s(this.a8);
                this.j.s(this.a9);
            }
        }
        ac() {
            this.ae();
        }
        aa(a) {
            if (a != null) {
                a.al.r(this);
                a.cf.cn();
            }
        }
        u(a) {
            if (a != null) {
                a.al.l(this);
                this.ae();
            }
        }
        i() {
            if (this.a.bh == null || this.a.bh.cf.j.ae == null) {
                return null;
            }
            return FontUtil.getFont(this.a.bh.cf.j.ae);
        }
        l() {
            return this.j == null;
        }
        ak() {
            if (this.a.b4 || this.a.cg) {
                return;
            }
            if (this.a.gp == null) {
                this.a.h6 = null;
                this.a.ck = true;
                this.a.hp();
                return;
            }
            if (this.a.h6 == null) {
                let a = new TextBlock();
                a.ak = this.a.gp;
                a.dataContext = this.a.be;
                this.a.h6 = a;
            }
            else {
                this.a.h6.ak = this.a.gp;
                this.a.h6.dataContext = this.a.be;
            }
            this.a.ck = true;
            this.a.hp();
        }
        t() {
            let a;
            let b = new AxisLabelSettings();
            if (this.a.b4) {
                a = "ui-angular-axis-labels";
                b.margin = 0;
            }
            else if (this.a.cj) {
                a = "ui-vertical-axis-labels";
                b.location = 2;
            }
            else if (this.a.a1 == 3) {
                a = "ui-radial-axis-labels";
                b.location = 5;
            }
            else {
                a = "ui-horizontal-axis-labels";
                b.location = 1;
            }
            this.s(b, a);
        }
        aw() {
            if (this.a.bh == null) {
                return;
            }
            let a = this.a.bh.p9;
            let b = a.fq;
            let c = a.fp;
            if (this.a.je == null) {
                if (b == null) {
                    this.a.je = a.fn;
                }
                else if (b.color.l != 0) {
                    this.a.je = b;
                }
            }
            if (this.a.jb == null) {
                if (c == null) {
                    this.a.jb = a.fn;
                }
                else if (c.color.l != 0) {
                    this.a.jb = c;
                }
            }
        }
        s(a, b) {
            this.a.e4.startCSSQuery();
            let c = this.a.e4.getCssDefaultPropertyValue(b, "margin-top");
            let d = this.a.e4.getCssDefaultPropertyValue(b, "margin-right");
            let e = this.a.e4.getCssDefaultPropertyValue(b, "margin-bottom");
            let f = this.a.e4.getCssDefaultPropertyValue(b, "margin-left");
            let g = this.a.e4.getCssDefaultPropertyValue(b, "text-align");
            let h = this.a.e4.getCssDefaultPropertyValue(b, "vertical-align");
            let i = this.a.e4.getCssDefaultPropertyValue(b, "color");
            this.a.e4.endCSSQuery();
            if (c != null) {
                a.topMargin = parseFloat(c);
            }
            if (d != null) {
                a.rightMargin = parseFloat(d);
            }
            if (e != null) {
                a.bottomMargin = parseFloat(e);
            }
            if (f != null) {
                a.leftMargin = parseFloat(f);
            }
            if (i != null) {
                if (a.textColor == null) {
                    a.textColor = new Brush();
                }
                a.textColor._fill = i;
            }
            if (g != null) {
                switch (g) {
                    case "right":
                        a.horizontalAlignment = 2;
                        break;
                    case "left":
                        a.horizontalAlignment = 0;
                        break;
                    default:
                        a.horizontalAlignment = 1;
                        break;
                }
            }
            if (h != null) {
                switch (h) {
                    case "top":
                        a.verticalAlignment = 0;
                        break;
                    case "bottom":
                        a.verticalAlignment = 2;
                        break;
                    default:
                        a.verticalAlignment = 1;
                        break;
                }
            }
            this.a.ay = a;
        }
        preRender() {
            if (this.a.bh != null) {
                this.a.bh.jf();
            }
        }
        isValid() {
            return this.a != null && !this.a.js.isEmpty;
        }
        a2(a) {
            return { $type: Point_$type, x: a.n, y: a.o };
        }
        a3() {
            return { $type: Point_$type, x: this.a.av.cu.left, y: this.a.av.cu.top };
        }
        a6() {
            let a = this.a.av.cu;
            return a;
        }
        a4(a) {
            return { $type: Point_$type, x: a.n, y: a.o };
        }
        bd(a) {
            let b = this.a.av.ae.t();
            let c = this.a.av.ae.v();
            let d = this.a.av.ae.u();
            let e = this.a.av.ae.s();
            return new Thickness(1, b, c, d, e);
        }
        ah() {
            if (FastReflectionHelper.needsHelper(this.a.fj)) {
                this.h = new FastReflectionHelper(true, this.a.fj);
            }
            else {
                this.h = null;
            }
        }
    }
    AxisView.$t = /*@__PURE__*/ markType(AxisView, 'AxisView', Base.$, [ISchedulableRender_$type]);
    return AxisView;
})();
/**
 * @hidden
 */
export let CategoryAxisBaseView = /*@__PURE__*/ (() => {
    class CategoryAxisBaseView extends AxisView {
        constructor(a) {
            super(a);
            this.be = null;
            this.be = a;
        }
        o(a) {
            let b = 0;
            if (this.be.categoryMode == 0) {
                b = truncate(Math.round(a));
            }
            else {
                b = truncate(Math.floor(a));
            }
            if (b < 0 || b > this.a.kr - 1) {
                return null;
            }
            let c = this.a.j6.item(b);
            let d = this.n(c);
            if (d == null) {
                return null;
            }
            return d.toString();
        }
        bf(a) {
            let b = 0;
            let c = false;
            for (let d = 0; d < a.count; d++) {
                let e = typeCast(FrameworkElement.$, a._inner[d]);
                if (e == null) {
                    e = this.a.bq.item(d);
                    let f = a._inner[d] == null ? "" : a._inner[d].toString();
                    let g = e.ak;
                    let h = 0;
                    let i = 0;
                    if (g != null) {
                        h = g.length;
                    }
                    if (f != null) {
                        i = f.length;
                    }
                    if (h != i) {
                        c = true;
                    }
                    e.ak = f;
                    b++;
                }
                else {
                    this.d.ab.add(e);
                }
            }
            if (c) {
                this.a.ck = true;
            }
            this.a.gx();
            return b;
        }
    }
    CategoryAxisBaseView.$t = /*@__PURE__*/ markType(CategoryAxisBaseView, 'CategoryAxisBaseView', AxisView.$);
    return CategoryAxisBaseView;
})();
/**
 * @hidden
 */
export let HorizontalAxisLabelPanelBaseView = /*@__PURE__*/ (() => {
    class HorizontalAxisLabelPanelBaseView extends AxisLabelPanelBaseView {
        constructor(a) {
            super(a);
            this.ax = null;
            this.ax = a;
        }
        az() {
        }
        ay() {
            return false;
        }
        a0(a) {
            let b = this.a.bn();
            let c, d;
            c = this.ax.c9();
            d = this.ax.c6();
            let e = this.a.af != null ? this.a.af.verticalAlignment : 1;
            let f = this.a.a9;
            let g = a.count;
            let h = this.a.cu;
            let i = this.ax.c8();
            let j = i / 2;
            for (let k = 0; k < g; k++) {
                let l = a._inner[k];
                let m = l.height / 2;
                switch (e) {
                    case 0:
                        l.y = h.top + c;
                        break;
                    case 1:
                    case 3:
                        l.y = (h.top + c + j) - m;
                        break;
                    case 2:
                        l.y = (h.bottom - d) - l.height;
                        break;
                }
            }
        }
    }
    HorizontalAxisLabelPanelBaseView.$t = /*@__PURE__*/ markType(HorizontalAxisLabelPanelBaseView, 'HorizontalAxisLabelPanelBaseView', AxisLabelPanelBaseView.$);
    return HorizontalAxisLabelPanelBaseView;
})();
/**
 * @hidden
 */
export let NumericAxisBaseView = /*@__PURE__*/ (() => {
    class NumericAxisBaseView extends AxisView {
        constructor(a) {
            super(a);
            this.be = null;
            this.be = a;
        }
        bf() {
        }
        o(a) {
            let b = this.be.j6.d(this.be.js, this.be.bh.pg, this.be.jn(), this.be.jm());
            return this.be.j6.w(b, a, -1, NaN);
        }
    }
    NumericAxisBaseView.$t = /*@__PURE__*/ markType(NumericAxisBaseView, 'NumericAxisBaseView', AxisView.$);
    return NumericAxisBaseView;
})();
/**
 * @hidden
 */
export let VerticalAxisLabelPanelView = /*@__PURE__*/ (() => {
    class VerticalAxisLabelPanelView extends AxisLabelPanelBaseView {
        constructor(a) {
            super(a);
            this.ax = null;
            this.ax = a;
        }
        ay() {
        }
        d() {
            let a = this.a.ac.bh.getFontInfo();
            if (this.a.ac.be != null && this.a.ac.be.textStyle != null) {
                a = this.a.ac.be.g(this.a.ac.bh.cf.j.ae);
            }
            else {
                let b = this.a.ac.bh.ci();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        aw() {
            return this.a.ac.bh.pz();
        }
        as() {
            let a = this.a.ac.bf.getFontBrush();
            if (this.a.ac.be != null && this.a.ac.be.textColor != null) {
                a = this.a.ac.be.textColor;
            }
            else {
                let b = this.a.ac.bh.ow();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        az(a, b) {
            let c, d;
            c = this.ax.c3();
            d = this.ax.c5();
            let e = this.a.af != null ? this.a.af.horizontalAlignment : 1;
            let f = this.a.a9;
            let g = this.ax.c6();
            let h = g / 2;
            let i = this.a.cu;
            for (let j = 0; j < a.count; j++) {
                let k = a._inner[j];
                let l = k.width / 2;
                switch (e) {
                    case 0:
                        k.x = i.left + c;
                        break;
                    case 1:
                    case 3:
                        k.x = (i.left + c + h) - l;
                        break;
                    case 2:
                        k.x = (i.right - d) - k.width;
                        break;
                }
            }
        }
    }
    VerticalAxisLabelPanelView.$t = /*@__PURE__*/ markType(VerticalAxisLabelPanelView, 'VerticalAxisLabelPanelView', AxisLabelPanelBaseView.$);
    return VerticalAxisLabelPanelView;
})();
/**
 * @hidden
 */
export let XamDataChartView = /*@__PURE__*/ (() => {
    class XamDataChartView extends SeriesViewerView {
        constructor(a) {
            super(a);
            this.fi = null;
            this.fr = null;
            this.fn = null;
            this.fo = null;
            this.fq = null;
            this.fp = null;
            this.fk = 0;
            this.fl = 0;
            this.fj = null;
            this.fi = a;
        }
        fm(a) {
            this.p.al.p();
        }
        dp() {
            super.dp();
            if (this.b.count == 0 && this.y != null) {
                if (this.p.fh != 1) {
                    this.y.z();
                    this.y.aa(this.p.fh, this.p.fh);
                }
                this.y.k(0, 0, this.a8, this.a7);
                if (this.p.fh != 1) {
                    this.y.y();
                }
            }
        }
        d1() {
            let a, b;
            let c = 1, d = 0;
            let e = false;
            let f = this.j.e();
            let g;
            let h = this.j.a6(c, g, a, b, d, e);
            c = h.p0;
            g = h.p1;
            a = h.p2;
            b = h.p3;
            d = h.p4;
            e = h.p5;
            if (isNaN_(this.p.f2)) {
                this.p.f2 = g[0];
            }
            if (isNaN_(this.p.ft)) {
                this.p.ft = g[1];
            }
            if (isNaN_(this.p.fm)) {
                this.p.fm = g[2];
            }
            if (isNaN_(this.p.fq)) {
                this.p.fq = g[3];
            }
            this.fi.s3 = f.i;
            this.fi.s1 = AxisDefaults.h;
            this.fi.s2 = AxisDefaults.i;
            this.fi.qe = e;
            this.fq = a;
            this.fp = b;
            this.fi.ag = f.a;
            this.fi.aj = f.f;
            this.fi.ah = f.b != null ? f.b : new BrushCollection();
            this.fi.ai = f.c != null ? f.c : new BrushCollection();
            if (this.fi.ah.count == 0) {
                for (let i = 0; i < f.a.count; i++) {
                    this.fi.ah.add(f.a.item(i));
                }
            }
            if (f.c.count == 0) {
                for (let j = 0; j < f.f.count; j++) {
                    this.fi.ai.add(f.f.item(j));
                }
            }
            this.fo = f.j;
            this.fr = f.k;
            this.fj = f.h;
            this.fn = f.i;
            this.fk = c;
            for (let k of fromEnum(this.fi.series)) {
                k.ma();
            }
            this.fl = d;
        }
        dy() {
            this.fb.ac = Defaults.j;
            this.fa.ac = Defaults.j;
            this.fb._stroke = this.fo;
            this.fa._stroke = this.fo;
            super.dy();
        }
    }
    XamDataChartView.$t = /*@__PURE__*/ markType(XamDataChartView, 'XamDataChartView', SeriesViewerView.$);
    return XamDataChartView;
})();
/**
 * @hidden
 */
export let SeriesView = /*@__PURE__*/ (() => {
    class SeriesView extends Base {
        constructor(a) {
            super();
            this.e = null;
            this.s = false;
            this.h = null;
            this.d = null;
            this._isDirty = false;
            this.bw = null;
            this.bn = null;
            this.v = 0;
            this.br = Rect.empty;
            this.bm = new Brush();
            this.f = new SeriesComponentsFromView();
            this.k = null;
            this.l = null;
            this.bs = null;
            this.bt = null;
            this.m = false;
            this.a = null;
            this.r = false;
            this.n = false;
            this.p = false;
            this.ad = null;
            this.v = NaN;
            this.r = true;
            this.e = a;
            this.q = false;
            this.bw = new Rectangle();
            this.s = false;
        }
        getDefaultTooltipTemplate() {
            return this.e.a4.a$q(this.e);
        }
        ap() {
            if (this.e.dt) {
                this.e.a4.a$u(this.e);
            }
        }
        j() {
            return new DOMExecutionContext(this.e.ca.cf.j.ae);
        }
        get i() {
            if (this.h == null) {
                this.h = this.j();
            }
            return this.h;
        }
        as() {
            if (!this.q) {
                this.e.fq = 0.8;
                this.e.b3 = 0;
                this.e.b2 = 1;
                this.d = new DataContext();
                this.d.series = this.e;
                this.e.cd = EasingFunctions.cubicEase;
                this.af();
            }
        }
        getEffectiveViewport() {
            return this.e.getEffectiveViewport1(this);
        }
        az() {
            this.aq();
        }
        aj() {
        }
        get w() {
            if (this.e.ca != null) {
                return this.e.ca.cf.j.ae;
            }
            return null;
        }
        get isDirty() {
            return this._isDirty;
        }
        set isDirty(a) {
            this._isDirty = a;
        }
        get_index() {
            if (this.e == null || this.e.ca == null) {
                return 0;
            }
            if (this.e.ca.dx) {
                if (this.e.dp) {
                    return this.e.ca.series.indexOf(this.e);
                }
                else {
                    let a = this.e.ca.series.indexOf(this.e);
                    if (a >= 0) {
                        return a;
                    }
                    for (let b = 0; b < this.e.ca.series.count; b++) {
                        if (this.e.ca.series._inner[b].dp) {
                            let c = this.e.ca.series._inner[b].bd();
                            if (c == this.e) {
                                return b;
                            }
                        }
                    }
                    return a;
                }
            }
            let d = typeCast(XamDataChart.$, this.e.b8);
            let e = 0;
            if (d != null) {
                if (d.p6 == 2 || d.p6 == 0) {
                    e = d.axes.count;
                }
            }
            let f = 0;
            for (let g = 0; g < this.e.ca.series.count; g++) {
                if (this.e.ca.series._inner[g] == this.e) {
                    break;
                }
                if (this.e.ca.series._inner[g].isStacked) {
                    f += this.e.ca.series._inner[g].g8();
                }
                else {
                    f++;
                }
            }
            return e + f;
        }
        get index() {
            return this.get_index();
        }
        aq() {
            if (this.e.ca == null) {
                return;
            }
            if (!this.isDirty) {
                this.isDirty = true;
                this.a.o(this.k, this.l);
            }
        }
        undirty(a) {
            this.isDirty = false;
            this.a4(a);
        }
        au() {
            this.aq();
        }
        bq() {
            if (this.bn == null) {
                this.bn = ((() => {
                    let $ret = new Brush();
                    $ret.color = Color.u(0, 0, 0, 0);
                    return $ret;
                })());
            }
            return this.bn;
        }
        u() {
            if (!isNaN_(this.v)) {
                return this.v;
            }
            if (this.e.ca != null) {
                return this.e.ca.fh;
            }
            else {
                return 1;
            }
        }
        a4(a) {
            if (this.k == null) {
                return;
            }
            if (this.br.isEmpty) {
                this.br = this.bu;
            }
            let b = this.br;
            let c = this.e.ca.pl();
            let d = c.left;
            let e = c.top;
            let f = c.width;
            let g = c.height;
            let h = this.u();
            if (this.p) {
                d = this.bu.left;
                e = this.bu.top;
                f = this.bu.width;
                g = this.bu.height;
            }
            if (this.k.d) {
                if (h != 1) {
                    this.k.z();
                    this.k.aa(h, h);
                }
                if (a) {
                    this.k.k(d, e, f, g);
                }
                if (a) {
                    if (this.e.ca.o1 != null && !this.bu.isEmpty) {
                        this.bw.o = this.bu.top;
                        this.bw.n = this.bu.left;
                        this.bw.width = this.bu.width;
                        this.bw.height = this.bu.height;
                        this.bw._fill = this.e.ca.o1;
                        this.k.v(this.bw);
                    }
                }
                if (h != 1) {
                    this.k.y();
                }
            }
            if (this.l != null && this.r) {
                if (this.l.d) {
                    if (this.e.ca != null && h != 1) {
                        this.l.z();
                        this.l.aa(h, h);
                    }
                    if (!b.isEmpty && a) {
                        this.l.k(b.left, b.top, b.width, b.height);
                    }
                    this.ba(true);
                    this.a6(this.l, true);
                    this.a5(this.l, true);
                    if (h != 1) {
                        this.l.y();
                    }
                }
            }
            if (this.k.d && this.r) {
                if (h != 1) {
                    this.k.z();
                    this.k.aa(h, h);
                }
                this.k.z();
                if (!this.q && Rect.l_op_Inequality(this.e.o6, null) && !this.e.o6.isEmpty && (this.e.o6.width != 1 || this.e.o6.height != 1)) {
                    this.k.ae(new Rect(0, this.bu.left + this.bu.width * this.e.o6.left, this.bu.top + this.bu.height * this.e.o6.top, this.bu.width * this.e.o6.width, this.bu.height * this.e.o6.height));
                }
                else {
                    this.k.ae(this.bu);
                }
                this.ba(false);
                this.k.ad(this.e._opacity);
                if (this.e.dg && this.e.dh && !this.q) {
                    if (this.e.e1) {
                        this.k.o(this.e.or.colorString, 0, this.e.gk, this.e.gl);
                        let i = this.e.ca.cf.j.x;
                        let j = this.e.ca.cf.j.ak;
                        if (h != 1) {
                            i.z();
                            i.aa(h, h);
                        }
                        i.k(c.left, c.top, c.width, c.height);
                        this.a6(i, false);
                        this.a5(i, false);
                        this.k.m(j.getNativeElement(), 1, 0, 0, c.width, c.height);
                        if (h != 1) {
                            i.y();
                        }
                    }
                    else {
                        this.k.o(this.e.or.colorString, this.e.gj, this.e.gk, this.e.gl);
                        this.a6(this.k, false);
                        this.a5(this.k, false);
                    }
                    this.k.l();
                }
                else {
                    this.a6(this.k, false);
                    this.a5(this.k, false);
                }
                this.k.ad(1);
                this.k.y();
                if (h != 1) {
                    this.k.y();
                }
            }
        }
        bd(a, b, c) {
            if (c) {
                this.bf(a, b);
            }
            else {
                this.be(a, b);
            }
        }
        bg(a, b, c) {
            if (c) {
                this.bi(a, b);
            }
            else {
                this.bh(a, b);
            }
        }
        aa(a, b) {
            if (b) {
                return this.ab(a);
            }
            else {
                return this.ac(a);
            }
        }
        ab(a) {
            return null;
        }
        ac(a) {
            return null;
        }
        be(a, b) {
        }
        bh(a, b) {
        }
        bf(a, b) {
        }
        bi(a, b) {
        }
        ba(a) {
            if (a) {
                this.bc();
            }
            else {
                this.bb();
            }
        }
        bb() {
        }
        bc() {
        }
        bp(a) {
            return this.bo();
        }
        bo() {
            let a = this.e.hc;
            let num_ = (a + 1) * 1000;
            let b = ((num_ & 0x3F) << 2);
            num_ = (num_ >> 6);
            let c = ((num_ & 0x3F) << 2);
            num_ = (num_ >> 6);
            let d = ((num_ & 0x3F) << 2);
            this.bm._fill = "rgb(" + b + "," + c + "," + d + ")";
            return this.bm;
        }
        a6(a, b) {
            this.br = this.bu;
        }
        a5(a, b) {
        }
        ax() {
        }
        am() {
        }
        an() {
        }
        g() {
            return this.f;
        }
        a9(a) {
        }
        t() {
            return true;
        }
        aw() {
        }
        av() {
        }
        a7() {
            this.e.of = null;
        }
        ah() {
            this.e.of = this.e.oj;
        }
        a8() {
            this.e.oi = null;
        }
        ai() {
            this.e.oi = this.e.oo;
        }
        c(a) {
            if (typeCast(DataContext.$, a) !== null) {
                return a;
            }
            return null;
        }
        ar(a, b) {
            this.k = a;
            this.l = b;
        }
        get bu() {
            return this.bs;
        }
        set bu(a) {
            this.bs = a;
        }
        get_bv() {
            if (this.p) {
                return this.bt;
            }
            else if (this.q) {
                return XamDataChart.ps;
            }
            else {
                return this.e.ca != null ? this.e.ca.pg : Rect.empty;
            }
        }
        get bv() {
            return this.get_bv();
        }
        get q() {
            return this.m;
        }
        set q(a) {
            this.m = a;
        }
        ak(a) {
            if (a != null) {
                this.a.r(this);
                if (this.e.bw != null) {
                    this.e.bw.a.r(this.e.bw);
                }
            }
        }
        ag(a) {
            if (a != null) {
                if (this.e.ez) {
                    this.k = this.e.ca.cf.z;
                    a.cf.a.l(this);
                    this.a = a.cf.a;
                }
                else {
                    this.k = this.e.ca.cf.y;
                    a.al.l(this);
                    this.a = a.al;
                }
                if (this.e.bw != null) {
                    a.am.l(this.e.bw);
                    this.e.bw.a = a.am;
                    this.e.bw.aq();
                }
                if (this.e.dt) {
                    for (let b of fromEnum(this.e.a4.a$h.keys)) {
                        a.ak.l(this.e.a4.a$h.item(b));
                        this.e.a4.a$h.item(b).a = a.ak;
                        this.e.a4.a$h.item(b).aq();
                    }
                }
                this.aq();
            }
        }
        postRender() {
            this.a0();
        }
        a0() {
        }
        b(a) {
            return null;
        }
        a2(a) {
            this.e.bw.k = a.a;
        }
        al(a) {
        }
        bj() {
            if (this.n) {
                return;
            }
            if (this.e.ca != null) {
                let a = (this.e.legend != null) ? this.e.legend : this.e.ca.legend;
                if (a != null && this.e.mq != null && a.containsChild(this.e.mq)) {
                    a.removeChild(this.e.mq);
                    let b = this.e.ho();
                    b.content.actualItemBrush = this.e.of;
                    b.content.outline = this.e.oi;
                    b.content.thickness = this.e.fl;
                    a.addChildInOrder(this.e.mq, this.e);
                }
            }
        }
        at() {
            this.e.ka(this.e.a0, this.e.a0);
        }
        ay() {
            this.bj();
        }
        getViewInfo(a, b) {
            a = this.bu;
            b = this.bv;
            return {
                p0: a,
                p1: b
            };
        }
        o() {
            return this.k != null;
        }
        bk() {
            this.r = this.e._visibility == 0;
            this.aq();
        }
        a3() {
            this.e.a4.a$ag(this.e);
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.or = a;
            this.e.gj = 5;
            this.e.gk = 5;
            this.e.gl = 5;
        }
        ao() {
        }
        preRender() {
            if (this.e.ca != null && !this.q) {
                this.e.ca.jf();
            }
        }
        isValid() {
            return true;
        }
        a1(a) {
            this.k = a.a;
        }
        bl(type_) {
            let legendTemplates_ = TypeRegistrar.get("LegendTemplates");
            let a = (legendTemplates_.resolveLegendItemTemplate(type_));
            return a;
        }
    }
    SeriesView.$t = /*@__PURE__*/ markType(SeriesView, 'SeriesView', Base.$, [ISchedulableRender_$type, IProvidesViewport_$type]);
    return SeriesView;
})();
/**
 * @hidden
 */
export let MarkerSeriesView = /*@__PURE__*/ (() => {
    class MarkerSeriesView extends SeriesView {
        constructor(a) {
            super(a);
            this.b1 = null;
            this.b5 = 1;
            this.b7 = Defaults.ab;
            this.b6 = 3;
            this.b4 = null;
            this.b3 = false;
            this.bx = new Marker();
            this.co = null;
            this.bx = new Marker();
            this.bx.content = new DataContext();
            this.b1 = a;
        }
        as() {
            super.as();
            this.b4 = new List$1(Marker.$, 0);
            this.co = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.c;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
        }
        cg() {
            for (let a of fromEnum(this.b4)) {
                a.ah = this.b1.qc;
            }
            this.aq();
        }
        cq() {
            if (this.k == null) {
                return new Size(1, 0, 0);
            }
            let a = new DataTemplatePassInfo();
            a.isHitTestRender = false;
            a.context = this.k.g();
            a.viewportTop = this.bu.top;
            a.viewportLeft = this.bu.left;
            a.viewportWidth = this.bu.width;
            a.viewportHeight = this.bu.height;
            a.passID = "TestMeasure";
            let b = new DataTemplateRenderInfo();
            b.isHitTestRender = false;
            b.passInfo = a;
            let c = new DataTemplateMeasureInfo();
            c.passInfo = a;
            let d = this.k.g();
            c.context = d;
            b.context = d;
            let e = 0;
            let f = 0;
            if (this.b1.qc != null && this.b1.qc.passStarting != null) {
                this.b1.qc.passStarting(a);
            }
            let g = this.b1.qc;
            if (this.b4.count > 0) {
                let h = this.b4._inner[0];
                c.data = h.content;
                c.width = h.width;
                c.height = h.height;
                c.renderOffsetX = 0;
                c.renderOffsetY = 0;
                c.renderContext = this.k;
                g = h.ah;
            }
            let i = 0;
            let j = 0;
            if (g != null && g.measure != null) {
                g.measure(c);
                i = c.width;
                j = c.height;
            }
            if (this.b1.qc != null && this.b1.qc.passCompleted != null) {
                this.b1.qc.passCompleted(a);
            }
            return new Size(1, i, j);
        }
        cn(a) {
        }
        b0() {
            let a = new Marker();
            a.content = ((() => {
                let $ret = new DataContext();
                $ret.series = this.e;
                return $ret;
            })());
            a.ah = this.b1.qc;
            this.b4.add(a);
            return a;
        }
        cj(a) {
            a._visibility = 0;
        }
        cl(a) {
            a._visibility = 1;
        }
        ck(a) {
            this.b4.remove(a);
        }
        b2() {
            return this.b1.qd != null;
        }
        ce() {
            this.b1.qb = null;
        }
        b8() {
            this.b1.qb = this.b1.qd;
        }
        cp(a) {
            let b = a.n;
            let c = a.o;
            let d = a.m;
            let e = a.l;
            return new Rect(0, b - d / 2, c - d / 2, d, e);
        }
        cb(a) {
            switch (a) {
                case SeriesViewer.$$p[2]:
                    this.b1.qb = this.b1.ca.mu;
                    break;
                case SeriesViewer.$$p[34]:
                    this.b1.qb = this.b1.ca.m3;
                    break;
                case SeriesViewer.$$p[26]:
                    this.b1.qb = this.b1.ca.m0;
                    break;
                case SeriesViewer.$$p[28]:
                    this.b1.qb = this.b1.ca.m1;
                    break;
                case SeriesViewer.$$p[5]:
                    this.b1.qb = this.b1.ca.mv;
                    break;
                case SeriesViewer.$$p[18]:
                    this.b1.qb = this.b1.ca.my;
                    break;
                case SeriesViewer.$$p[7]:
                    this.b1.qb = this.b1.ca.mw;
                    break;
                case SeriesViewer.$$p[31]:
                    this.b1.qb = this.b1.ca.m2;
                    break;
                case SeriesViewer.$$p[19]:
                    this.b1.qb = this.b1.ca.mz;
                    break;
                case SeriesViewer.$$p[8]:
                    this.b1.qb = this.b1.ca.mx;
                    break;
            }
        }
        cc() {
            this.b1.qr = null;
        }
        b9() {
            if (!isNaN_(this.e.fk) && this.e.fk != 1) {
                let a = BrushUtil.o(this.b1.qt, this.e.fk);
                this.b1.qr = a;
            }
            else {
                this.b1.qr = this.b1.qt;
            }
        }
        cd() {
            this.b1.qs = null;
        }
        ca() {
            this.b1.qs = this.b1.qu;
        }
        cm() {
            this.aq();
        }
        bh(a, b) {
            super.bh(a, b);
            if (!this.b3) {
                let c = a;
                let d = c.content;
                if (d != null) {
                    d.actualItemBrush = this.b1.qr;
                    if (d.itemBrush != null) {
                        d.actualItemBrush = d.itemBrush;
                    }
                    d.outline = this.b1.qs;
                    d.thickness = this.b1.pw;
                }
            }
        }
        bi(a, b) {
            super.bi(a, b);
            let c = a;
            this.bx._visibility = c._visibility;
            this.bx.ah = c.ah;
            this.bx.width = c.width;
            this.bx.height = c.height;
            this.bx.m = c.m;
            this.bx.l = c.l;
            this.bx.n = c.n;
            this.bx.o = c.o;
            let d = this.bp(b);
            let e = this.bx.content;
            let f = c.content;
            e.item = f.item;
            e.series = f.series;
            e.thickness = f.thickness;
            if (e != null) {
                e.actualItemBrush = d;
                e.outline = d;
                e.thickness = this.b5 + this.b6;
            }
        }
        b(a) {
            if (a >= 0 && a < this.b4.count) {
                return this.b4._inner[a].content;
            }
            return super.b(a);
        }
        a5(a, b) {
            super.a5(a, b);
            if (a.d) {
                let c = new DataTemplatePassInfo();
                c.isHitTestRender = b;
                c.context = a.g();
                c.viewportTop = this.bu.top;
                c.viewportLeft = this.bu.left;
                c.viewportWidth = this.bu.width;
                c.viewportHeight = this.bu.height;
                c.passID = "Markers";
                let d = new DataTemplateRenderInfo();
                d.isHitTestRender = b;
                d.passInfo = c;
                let e = new DataTemplateMeasureInfo();
                e.passInfo = c;
                let f = false;
                let g = a.g();
                e.context = g;
                d.context = g;
                let h = 0;
                let i = 0;
                if (this.b1.qc != null && this.b1.qc.passStarting != null) {
                    this.b1.qc.passStarting(c);
                }
                for (let j = 0; j < this.b4.count; j++) {
                    let k = this.b4._inner[j];
                    if (k._visibility == 1) {
                        continue;
                    }
                    this.bg(k, j, b);
                    if (b) {
                        k = this.bx;
                    }
                    if (!f) {
                        e.data = k.content;
                        e.width = k.width;
                        e.height = k.height;
                        e.renderOffsetX = 0;
                        e.renderOffsetY = 0;
                        e.renderContext = a;
                        let l = k.ah;
                        if (l.measure != null) {
                            e.data = k.content;
                            l.measure(e);
                            f = e.isConstant;
                            if (f) {
                                h = e.width;
                                i = e.height;
                            }
                        }
                        d.availableWidth = e.width;
                        d.availableHeight = e.height;
                        d.renderOffsetX = e.renderOffsetX;
                        d.renderOffsetY = e.renderOffsetY;
                        d.renderContext = a;
                    }
                    else {
                        d.availableWidth = h;
                        d.availableHeight = i;
                    }
                    if (!isNaN_(k.width) && !isInfinity(k.width)) {
                        d.availableWidth = k.width;
                    }
                    if (!isNaN_(k.height) && !isInfinity(k.height)) {
                        d.availableHeight = k.height;
                    }
                    a.p(d, k);
                    k.m = d.availableWidth;
                    k.l = d.availableHeight;
                    k.ai = d.renderOffsetX;
                    k.aj = d.renderOffsetY;
                }
                if (this.b1.qc != null && this.b1.qc.passCompleted != null) {
                    this.b1.qc.passCompleted(c);
                }
            }
        }
        ch(a) {
            a.create = runOn(this, this.b0);
            a.destroy = runOn(this, this.ck);
            a.activate = runOn(this, this.cj);
            a.disactivate = runOn(this, this.cl);
        }
        ci(a) {
            a.create = runOn(this, this.b0);
            a.destroy = runOn(this, this.ck);
            a.activate = runOn(this, this.cj);
            a.disactivate = runOn(this, this.cl);
        }
        by(a) {
            let b = this.bz(a, 0);
            if (b == null) {
                b = this.bz(a, 3);
            }
            return b;
        }
        bz(a, b) {
            let c;
            let d;
            let e;
            let f;
            for (let g = this.b4.count - 1; g >= 0; g--) {
                let h = this.b4._inner[g];
                if (h._visibility == 1 || h._opacity == 0) {
                    continue;
                }
                c = (h.m / 2) + b;
                d = (h.l / 2) + b;
                e = h.ai;
                f = h.aj;
                if ((h.n + e) - c <= a.x && (h.n + e) + c >= a.x && (h.o + f) - d <= a.y && (h.o + f) + d >= a.y) {
                    return h;
                }
            }
            return null;
        }
    }
    MarkerSeriesView.$t = /*@__PURE__*/ markType(MarkerSeriesView, 'MarkerSeriesView', SeriesView.$);
    return MarkerSeriesView;
})();
/**
 * @hidden
 */
export let ChartAxisRangeChangedEventArgs = /*@__PURE__*/ (() => {
    class ChartAxisRangeChangedEventArgs extends EventArgs {
        constructor(a, b, c, d, e, f) {
            super();
            this._chart = null;
            this._axis = null;
            this._oldMinimumValue = 0;
            this._minimumValue = 0;
            this._oldMaximumValue = 0;
            this._maximumValue = 0;
            this.chart = a;
            this.axis = b;
            this.oldMinimumValue = c;
            this.minimumValue = d;
            this.oldMaximumValue = e;
            this.maximumValue = f;
        }
        get chart() {
            return this._chart;
        }
        set chart(a) {
            this._chart = a;
        }
        get axis() {
            return this._axis;
        }
        set axis(a) {
            this._axis = a;
        }
        get oldMinimumValue() {
            return this._oldMinimumValue;
        }
        set oldMinimumValue(a) {
            this._oldMinimumValue = a;
        }
        get minimumValue() {
            return this._minimumValue;
        }
        set minimumValue(a) {
            this._minimumValue = a;
        }
        get oldMaximumValue() {
            return this._oldMaximumValue;
        }
        set oldMaximumValue(a) {
            this._oldMaximumValue = a;
        }
        get maximumValue() {
            return this._maximumValue;
        }
        set maximumValue(a) {
            this._maximumValue = a;
        }
    }
    ChartAxisRangeChangedEventArgs.$t = /*@__PURE__*/ markType(ChartAxisRangeChangedEventArgs, 'ChartAxisRangeChangedEventArgs', EventArgs.$);
    return ChartAxisRangeChangedEventArgs;
})();
(function (v) { callStaticConstructors(); })(true);
//# sourceMappingURL=SeriesViewer_combined.js.map
