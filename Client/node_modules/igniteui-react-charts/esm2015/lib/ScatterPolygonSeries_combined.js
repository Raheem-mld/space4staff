/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ShapeSeriesBase } from "./ShapeSeriesBase";
import { ShapeAxisInfoCache } from "./ShapeAxisInfoCache";
import { StyleSelector } from "./StyleSelector";
import { DependencyProperty } from "igniteui-react-core";
import { Style } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { DataTemplate } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { Base, runOn, enumGetBox, Number_$type, typeCast, fromEnum, markType, markDep, PointUtil } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { ShapeSeriesViewBase } from "./ShapeSeriesViewBase";
import { Marker } from "./Marker";
import { MarkerSeries } from "./MarkerSeries";
import { BrushUtil } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { RectUtil } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { DataTemplateMeasureInfo } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { Defaults } from "./Defaults";
import { DataTemplatePassInfo } from "igniteui-react-core";
import { DataTemplateRenderInfo } from "igniteui-react-core";
import { MarkerVisualData } from "./MarkerVisualData";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let ScatterPolygonSeries = /*@__PURE__*/ (() => {
    class ScatterPolygonSeries extends ShapeSeriesBase {
        constructor() {
            super();
            this.sj = null;
            this.sg = new ScalerParams(1, ScatterPolygonSeries.tp, ScatterPolygonSeries.tp, false);
            this.sh = new ScalerParams(1, ScatterPolygonSeries.tp, ScatterPolygonSeries.tp, false);
            this.s5 = null;
            this.sb = 1;
            this.r7 = 1;
            this.ab = ScatterPolygonSeries.$;
        }
        get_d1() {
            return true;
        }
        get_dw() {
            return true;
        }
        qq() {
            return this.sl();
        }
        rp(a) {
            let b = a;
            b.cv(this.tr);
            b.cw(this.sk);
            super.rp(a);
            if (this.ct(a)) {
                return;
            }
            let c, d;
            let e = a.getViewInfo(c, d);
            c = e.p0;
            d = e.p1;
            let f = this.getEffectiveViewport1(a);
            this.sg = new ScalerParams(1, d, c, this.pz.cc);
            this.sg.c = f;
            this.sh = new ScalerParams(1, d, c, this.p1.cc);
            this.sh.c = f;
            if (c.width < 1 || c.height < 1) {
                return;
            }
            this.sj = ((() => {
                let $ret = new ShapeAxisInfoCache();
                $ret.a = this.pz;
                $ret.b = this.p1;
                $ret.e = this.pz.cc;
                $ret.f = this.p1.cc;
                $ret.d = this.ch;
                $ret.c = this.p9;
                return $ret;
            })());
            if (this.sl()) {
                let g = new Dictionary$2(Base.$, OwnedPoint.$, 0);
                b.dd.l(g, 400, d, c, this.gh);
                b.dd.j(g, false);
                if (this.qo()) {
                    this.s2(a);
                }
            }
        }
        s2(a) {
            a.dh = true;
            this.p6.aw(this, this.qo(), runOn(this, this.po));
            let b = this.p6.d;
            let c = b != null;
            let d = this.getEffectiveViewport1(a);
            let e = this.ch == null ? 0 : this.ch.count;
            a.dt((f) => {
                if (f._visibility == 0) {
                    let g = f.ak;
                    let h = f.content;
                    if (h == null) {
                        h = new DataContext();
                        f.content = h;
                    }
                    if (c) {
                        this.rk(g, e, a.q);
                    }
                    this.p6.ac(f, h);
                }
            });
        }
        sl() {
            return this.s5 != null && ((this.sf != 1 && this.sf != 0) || this.s6 != null);
        }
        bu() {
            return new ScatterPolygonSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.si = a;
        }
        get_hasMarkers() {
            return true;
        }
        om() {
            return this.tl;
        }
        on() {
            return this.tm;
        }
        mv() {
            return this.s4;
        }
        ft() {
            return this.sn;
        }
        get sc() {
            return this.sb;
        }
        set sc(a) {
            this.sb = a;
        }
        se() {
            if (this.sd == 0) {
                return 1;
            }
            return this.sd;
        }
        mh(a) {
            super.mh(a);
            this.sd = a;
        }
        get r8() {
            return this.r7;
        }
        set r8(a) {
            this.r7 = a;
        }
        sa() {
            if (this.r9 == 0) {
                return 2;
            }
            return this.r9;
        }
        mg(a) {
            super.mg(a);
            this.r9 = a;
        }
        mi(a) {
            super.mi(a);
            this.sn = a;
        }
        md() {
            super.md();
            if (this.g9 < 0) {
                return;
            }
            if (this.s6 != null) {
                this.si.ds();
                this.si.dp();
            }
            else {
                let a = MarkerSeries.ps(this, this.sf);
                let b = MarkerSeries.p0(a);
                if (b == null) {
                    this.s4 = MarkerSeries.qe;
                }
                else {
                    this.si.dl(b);
                }
            }
            if (this.tn != null && this.sf != 13) {
                this.si.dq();
                this.si.dm();
            }
            else {
                if (this.sf == 13) {
                    this.tl = this.bx.bq();
                }
                else {
                    if (this.r8 != 2) {
                        if (this.ca != null) {
                            let c = this.ca.oy(this.g9);
                            if (!isNaN_(this.fk) && this.fk != 1) {
                                c = BrushUtil.o(c, this.fk);
                            }
                            this.tl = c;
                        }
                        else {
                            this.tl = null;
                        }
                    }
                }
            }
            if (this.to != null) {
                this.si.dr();
                this.si.dn();
            }
            else {
                if (this.sf == 13) {
                    this.tm = this.bx.bq();
                }
                else {
                    if (this.sd == 2) {
                        this.tm = this.tl;
                    }
                    else {
                        this.tm = this.ca == null ? null : this.ca.oz(this.g9);
                    }
                }
            }
            if (this.r8 == 2 && this.tn == null && this.sf != 13) {
                if (this.tm != null) {
                    let d = this.tm;
                    if (!isNaN_(this.fk) && this.fk != 1) {
                        d = BrushUtil.o(d, this.fk);
                    }
                    this.tl = d;
                }
                else {
                    this.tl = null;
                }
            }
        }
        lc() {
            super.lc();
            this.sc = this.se();
            this.r8 = this.sa();
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case ScatterPolygonSeries.$$p[3]:
                case ScatterPolygonSeries.$$p[11]:
                case ScatterPolygonSeries.$$p[7]:
                case ScatterPolygonSeries.$$p[9]:
                case ScatterPolygonSeries.$$p[10]:
                    this.md();
                    this.lj();
                    break;
                case ScatterPolygonSeries.$$p[6]:
                    this.sc = this.se();
                    this.md();
                    this.lj();
                    break;
                case ScatterPolygonSeries.$$p[5]:
                    this.r8 = this.sa();
                    this.md();
                    this.lj();
                    break;
                case ScatterPolygonSeries.$$p[2]:
                    this.s5 = d;
                    if (c == MarkerSeries.qe || d == MarkerSeries.qe || (c == null || d != null)) {
                        this.si.du();
                        this.l0(false);
                    }
                    this.bx.bj();
                    if (this.toolTip != null && this.dt) {
                        this.a4.a$aj(this, this.toolTip);
                    }
                    this.l0(false);
                    this.k7();
                    break;
                case ScatterPolygonSeries.$$p[12]:
                    this.si.cv(this.tr);
                    this.l0(false);
                    this.k7();
                    break;
                case ScatterPolygonSeries.$$p[13]:
                    this.si.cw(this.sk);
                    this.l0(false);
                    this.k7();
                    break;
                case ScatterPolygonSeries.$$p[4]:
                    this.l0(false);
                    this.k7();
                    break;
                case ScatterPolygonSeries.$$p[0]:
                case ScatterPolygonSeries.$$p[1]:
                    if (this.sl()) {
                        this.l0(false);
                    }
                    break;
            }
        }
        at(a, b) {
            let c = this.si.b1(a);
            let d = null;
            if (c != null) {
                d = c.content;
            }
            if (d != null) {
                return d;
            }
            return super.at(a, b);
        }
        s3(a, b) {
            let c = new List$1(Base.$, 0);
            for (let d of fromEnum(b.c)) {
                if (!a.containsKey(d)) {
                    c.add1(d);
                }
            }
            for (let e of fromEnum(c)) {
                b.h(e);
            }
        }
        cx(a, b, c) {
            if (!this.hasMarkers) {
                return false;
            }
            let d = this.pz;
            let e = new ScalerParams(1, this.ca.pg, this.pf, d.cc);
            e.c = this.getEffectiveViewport1(this.bx);
            let f = this.p1;
            let g = new ScalerParams(1, this.ca.pg, this.pf, f.cc);
            g.c = this.getEffectiveViewport1(this.bx);
            a.clear();
            this.si.dt((h) => {
                if (h._visibility == 0) {
                    let i = new SeriesPointOfInterest();
                    let j = h.n;
                    let k = h.o;
                    if (j < this.pf.left || j > this.pf.right || k < this.pf.top || k > this.pf.bottom) {
                        return;
                    }
                    i.b = d.eb(j, e);
                    i.c = f.eb(k, g);
                    i.a = h.content;
                    a.add(i);
                }
            });
            return true;
        }
        r5(a, b, c, d, e) {
            if (c == null || c.length != this.sj.d.count) {
                c = new Array(this.sj.d.count);
                for (let f = 0; f < this.sj.d.count; f++) {
                    c[f] = PointUtil.create();
                }
            }
            let g = ((() => {
                let $ret = new ScalerParams(1, d, e, this.pz.cc);
                $ret.c = this.getEffectiveViewport1(a);
                return $ret;
            })());
            let h = ((() => {
                let $ret = new ScalerParams(1, d, e, this.p1.cc);
                $ret.c = this.getEffectiveViewport1(a);
                return $ret;
            })());
            let i = this.o7(a);
            let j = this.sj.a.eb(i.left, g);
            let k = this.sj.a.eb(i.right, g);
            let l = this.sj.b.eb(i.bottom, h);
            let m = this.sj.b.eb(i.top, h);
            if (this.sj.e) {
                let n = j;
                j = k;
                k = n;
            }
            if (this.sj.f) {
                let o = l;
                l = m;
                m = o;
            }
            let p = this.sj;
            let q = p.a;
            let r = p.b;
            let s;
            let t;
            let u = g.d.left;
            let v = g.d.right;
            let w = h.d.top;
            let x = h.d.bottom;
            for (let y = 0; y < this.sj.d.count; y++) {
                s = 0;
                t = 0;
                let z = null;
                let aa = a.b9.tryGetValue(y, z);
                z = aa.p1;
                if (z == null) {
                    c[y].x = NaN;
                    c[y].y = NaN;
                }
                else {
                    let ab = z.c;
                    let ac = RectUtil.l(ab);
                    s = ac.x;
                    t = ac.y;
                    if (s >= u && s <= v && t >= w && t <= x) {
                        c[y].x = s;
                        c[y].y = t;
                    }
                    else {
                        c[y].x = NaN;
                        c[y].y = NaN;
                    }
                }
            }
            return c;
        }
        sm(a, b) {
            if (b == null) {
                b = new List$1(Number_$type, 2, a.e);
            }
            else {
                b.clear();
            }
            let c = 0;
            let d = this.ch;
            for (let e of fromEnum(a.c)) {
                b.add(d.indexOf(e));
                c++;
            }
            return b;
        }
    }
    ScatterPolygonSeries.$t = /*@__PURE__*/ markType(ScatterPolygonSeries, 'ScatterPolygonSeries', ShapeSeriesBase.$);
    ScatterPolygonSeries.tp = /*@__PURE__*/ new Rect(0, 0, 0, 1, 1);
    ScatterPolygonSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ScatterPolygonSeries, 'raisePropertyChanged', ['ActualMarkerBrush:tl:s7', [Brush.$], 'ActualMarkerOutline:tm:s8', [Brush.$], 'ActualMarkerTemplate:s4:s9', [DataTemplate.$, null], 'MarkerBrush:tn:ta', [Brush.$], 'MarkerCollisionAvoidance:r6:tb', [CollisionAvoidanceType_$type, /*@__PURE__*/ enumGetBox(CollisionAvoidanceType_$type, 0)], 'MarkerFillMode:r9:tc', [MarkerFillMode_$type, /*@__PURE__*/ enumGetBox(MarkerFillMode_$type, 0)], 'MarkerOutlineMode:sd:td', [MarkerOutlineMode_$type, /*@__PURE__*/ enumGetBox(MarkerOutlineMode_$type, 0)], 'MarkerOutline:to:te', [Brush.$], 'MarkerStyle:tq:tf', [Style.$], 'MarkerTemplate:s6:tg', [DataTemplate.$, null], 'MarkerThickness:sn:th', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'MarkerType:sf:ti', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 1)], 'ShapeStyle:tr:tj', [Style.$, null], 'ShapeStyleSelector:sk:tk', [StyleSelector.$, null]]);
    return ScatterPolygonSeries;
})();
/**
 * @hidden
 */
export let ScatterPolygonSeriesView = /*@__PURE__*/ (() => {
    class ScatterPolygonSeriesView extends ShapeSeriesViewBase {
        constructor(a) {
            super(a);
            this.dh = false;
            this.c8 = null;
            this.dj = null;
            this.de = null;
            this.dc = null;
            this.dg = false;
            this.df = null;
            this.dk = null;
            this.c9 = new Marker();
            this.d1 = null;
            this.c9 = new Marker();
            this.c9.content = new DataContext();
            this.de = a;
            this.df = new HashPool$2(Base.$, Marker.$);
            this.dk = new List$1(Marker.$, 0);
            this.dv(this.df);
            this.dc = new NumericMarkerManager(1, (b) => this.df.item(b), (b) => this.de.sj.d.item(b), runOn(this, this.dz), runOn(this, this.c7), runOn(this, this.di), () => this.de.r6);
            this.dc.q = runOn(this, this.d2);
        }
        as() {
            super.as();
            if (!this.q) {
                this.de.to = Defaults.am;
                this.de.gm = Defaults.z;
                this.de.sn = Defaults.y;
                this.de.sf = Defaults.f;
                this.de.r9 = Defaults.b;
            }
        }
        get dd() {
            return this.dc;
        }
        dz(a) {
            this.de.s3(a, this.df);
        }
        c7() {
            this.c8 = this.de.r5(this, this.df, this.c8, this.bv, this.bu);
            return this.c8;
        }
        di() {
            this.dj = this.de.sm(this.df, this.dj);
            return this.dj;
        }
        c2(a, b) {
            return this.c3(a, b, true);
        }
        cj(a, b, c) {
            super.cj(a, b, c);
            ShapeSeriesViewBase.ci(this, a, b);
        }
        ch(a, b) {
            let c = a;
            if (c == null) {
                return;
            }
            c.ak = b;
        }
        dt(a) {
            this.df.f(a);
        }
        dv(a) {
            a.create = runOn(this, this.db);
            a.destroy = runOn(this, this.dx);
            a.activate = runOn(this, this.dw);
            a.disactivate = runOn(this, this.dy);
        }
        db() {
            let a = new Marker();
            if (!this.dg) {
                a.content = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this.e;
                    return $ret;
                })());
            }
            a.ah = this.e.s4;
            this.dk.add(a);
            return a;
        }
        b1(a) {
            let b = this.da(a, 0);
            if (b == null) {
                b = this.da(a, 3);
            }
            return b;
        }
        da(a, b) {
            let c;
            let d;
            let e;
            let f;
            for (let g = this.dk.count - 1; g >= 0; g--) {
                let h = this.dk._inner[g];
                if (h._visibility == 1 || h._opacity == 0) {
                    continue;
                }
                c = (h.m / 2) + b;
                d = (h.l / 2) + b;
                e = h.ai;
                f = h.aj;
                if ((h.n + e) - c <= a.x && (h.n + e) + c >= a.x && (h.o + f) - d <= a.y && (h.o + f) + d >= a.y) {
                    return h;
                }
            }
            return null;
        }
        dx(a) {
            a.content = null;
            this.dk.remove(a);
        }
        dw(a) {
            a._visibility = 0;
        }
        dy(a) {
            if (a.content != null) {
                (typeCast(DataContext.$, a.content)).item = null;
            }
            a._visibility = 1;
        }
        d0(a) {
            this.dg = a;
        }
        bh(a, b) {
            super.bh(a, b);
            if (!this.dh) {
                let c = a;
                let d = c.content;
                if (d != null) {
                    if (this.de.tl != null) {
                        d.actualItemBrush = this.de.tl;
                    }
                    else {
                        d.actualItemBrush = this.b3.of;
                    }
                    if (this.de.tl != null) {
                        d.outline = this.de.tm;
                    }
                    else {
                        d.outline = this.b3.oi;
                    }
                    d.thickness = this.de.sn;
                }
            }
        }
        bi(a, b) {
            super.bi(a, b);
            let c = a;
            this.c9._visibility = c._visibility;
            this.c9.ah = c.ah;
            this.c9.width = c.width;
            this.c9.height = c.height;
            this.c9.m = c.m;
            this.c9.l = c.l;
            this.c9.n = c.n;
            this.c9.o = c.o;
            let d = this.bp(b);
            let e = this.c9.content;
            let f = c.content;
            e.item = f.item;
            e.series = f.series;
            e.thickness = f.thickness;
            if (e != null) {
                e.actualItemBrush = d;
                e.outline = d;
                e.thickness = this.de.sn + 3;
            }
        }
        a5(a, b) {
            super.a5(a, b);
            let c = new DataTemplatePassInfo();
            c.isHitTestRender = b;
            c.context = a.g();
            c.viewportTop = this.bu.top;
            c.viewportLeft = this.bu.left;
            c.viewportWidth = this.bu.width;
            c.viewportHeight = this.bu.height;
            c.passID = "Markers";
            let d = new DataTemplateRenderInfo();
            d.passInfo = c;
            d.isHitTestRender = b;
            let e = new DataTemplateMeasureInfo();
            e.passInfo = c;
            let f = false;
            let g = a.g();
            e.context = g;
            d.context = g;
            let h = 0;
            let i = 0;
            if (this.de.s4 != null && this.de.s4.passStarting != null) {
                this.de.s4.passStarting(c);
            }
            for (let j = 0; j < this.dk.count; j++) {
                let k = this.dk._inner[j];
                if (k._visibility == 1) {
                    continue;
                }
                this.bg(k, j, b);
                if (b) {
                    k = this.c9;
                }
                if (!f) {
                    e.width = k.width;
                    e.height = k.height;
                    e.renderOffsetX = 0;
                    e.renderOffsetY = 0;
                    e.renderContext = a;
                    let l = k.ah;
                    if (l.measure != null) {
                        e.data = k.content;
                        l.measure(e);
                        f = e.isConstant;
                        if (f) {
                            h = e.width;
                            i = e.height;
                        }
                    }
                    d.availableWidth = e.width;
                    d.availableHeight = e.height;
                    d.renderOffsetX = e.renderOffsetX;
                    d.renderOffsetY = e.renderOffsetY;
                    d.renderContext = a;
                }
                else {
                    d.availableWidth = h;
                    d.availableHeight = i;
                }
                if (!isNaN_(k.width) && !isInfinity(k.width)) {
                    d.availableWidth = k.width;
                }
                if (!isNaN_(k.height) && !isInfinity(k.height)) {
                    d.availableHeight = k.height;
                }
                a.p(d, k);
                k.m = d.availableWidth;
                k.l = d.availableHeight;
                k.ai = d.renderOffsetX;
                k.aj = d.renderOffsetY;
            }
            if (this.de.s4 != null && this.de.s4.passCompleted != null) {
                this.de.s4.passCompleted(c);
            }
        }
        ds() {
            this.de.s4 = null;
        }
        dp() {
            this.de.s4 = null;
            this.de.s4 = this.de.s6;
        }
        dq() {
            this.de.tl = null;
        }
        dm() {
            this.de.tl = null;
            if (!isNaN_(this.e.fk) && this.e.fk != 1) {
                let a = BrushUtil.o(this.de.tn, this.e.fk);
                this.de.tl = a;
            }
            else {
                this.de.tl = this.de.tn;
            }
        }
        dr() {
            this.de.tm = null;
        }
        dn() {
            this.de.tm = null;
            this.de.tm = this.de.to;
        }
        dl(a) {
            switch (a) {
                case "CircleMarkerTemplate":
                    this.de.s4 = this.de.ca.mu;
                    break;
                case "TriangleMarkerTemplate":
                    this.de.s4 = this.de.ca.m3;
                    break;
                case "PyramidMarkerTemplate":
                    this.de.s4 = this.de.ca.m0;
                    break;
                case "SquareMarkerTemplate":
                    this.de.s4 = this.de.ca.m1;
                    break;
                case "DiamondMarkerTemplate":
                    this.de.s4 = this.de.ca.mv;
                    break;
                case "PentagonMarkerTemplate":
                    this.de.s4 = this.de.ca.my;
                    break;
                case "HexagonMarkerTemplate":
                    this.de.s4 = this.de.ca.mw;
                    break;
                case "TetragramMarkerTemplate":
                    this.de.s4 = this.de.ca.my;
                    break;
                case "PentagramMarkerTemplate":
                    this.de.s4 = this.de.ca.mz;
                    break;
                case "HexagramMarkerTemplate":
                    this.de.s4 = this.de.ca.mx;
                    break;
            }
        }
        du() {
            for (let a of fromEnum(this.dk)) {
                a.ah = this.de.s4;
            }
            this.aq();
        }
        d2(a) {
            if (this.d1 == null) {
                this.d1 = new DataTemplateMeasureInfo();
                this.d1.context = this.k.g();
            }
            this.d1.width = a.width;
            this.d1.height = a.height;
            this.d1.data = a.content;
            let b = a.ah;
            if (b.measure != null) {
                b.measure(this.d1);
            }
            return new Size(1, this.d1.width, this.d1.height);
        }
        al(a) {
            let b = a;
            super.al(b);
            for (let c of fromEnum(this.df.c)) {
                let d = this.df.item(c);
                if (d._visibility != 1) {
                    let e = typeCast(ScatterPolygonSeries.$, this.e);
                    let f = this.e.a6.getMarkerVisualData(e, d, e.s4);
                    b.markerShapes.add(typeCast(MarkerVisualData.$, f));
                }
            }
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'><span";
            let b = this.e.a4.a$r(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.de.hp + "</span><br/>";
            a += "</div>";
            return a;
        }
    }
    ScatterPolygonSeriesView.$t = /*@__PURE__*/ markType(ScatterPolygonSeriesView, 'ScatterPolygonSeriesView', ShapeSeriesViewBase.$);
    return ScatterPolygonSeriesView;
})();
//# sourceMappingURL=ScatterPolygonSeries_combined.js.map
