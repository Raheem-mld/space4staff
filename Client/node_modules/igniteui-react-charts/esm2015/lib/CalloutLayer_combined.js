/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnnotationLayer } from "./AnnotationLayer";
import { DependencyProperty } from "igniteui-react-core";
import { Base, String_$type, typeCast, enumGetBox, fromEnum, runOn, delegateCombine, delegateRemove, Point_$type, Date_$type, markType, markDep } from "igniteui-react-core";
import { Series } from "./Series";
import { Brush } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { CalloutCollisionMode_$type } from "./CalloutCollisionMode";
import { FontUtil } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { CalloutLayerFrame } from "./CalloutLayerFrame";
import { HashSet$1 } from "igniteui-react-core";
import { CalloutAnnotationWrapper } from "./CalloutAnnotationWrapper";
import { List$1 } from "igniteui-react-core";
import { LinkedList$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { LinkedListNode$1 } from "igniteui-react-core";
import { LabelCollisionManager } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { CalloutAnnotation } from "./CalloutAnnotation";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { CalloutLabelUpdatingEventArgs } from "./CalloutLabelUpdatingEventArgs";
import { CalloutSeriesSelectingEventArgs } from "./CalloutSeriesSelectingEventArgs";
import { CalloutStyleUpdatingEventArgs } from "./CalloutStyleUpdatingEventArgs";
import { QuadTreeBoundingBox } from "igniteui-react-core";
import { LabelCollisionInfo } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { ViewportUtils } from "./ViewportUtils";
import { Size } from "igniteui-react-core";
import { CalloutContentUpdatingEventArgs } from "./CalloutContentUpdatingEventArgs";
import { CalloutKey } from "./CalloutKey";
import { DataContext } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { FastItemObjectColumn } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { BrushUtil } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { Line } from "igniteui-react-core";
import { CalloutViewHelper } from "./CalloutViewHelper";
import { Rectangle } from "igniteui-react-core";
import { TranslateTransform } from "igniteui-react-core";
/**
 * @hidden
 */
export let CalloutLayer = /*@__PURE__*/ (() => {
    class CalloutLayer extends AnnotationLayer {
        constructor() {
            super();
            this.calloutStyleUpdating = null;
            this.qx = null;
            this.qy = null;
            this.qz = null;
            this.qw = null;
            this.qv = null;
            this.rm = new HashSet$1(CalloutAnnotationWrapper.$, 0);
            this.rp = new List$1(CalloutAnnotationWrapper.$, 0);
            this.rq = new List$1(CalloutAnnotationWrapper.$, 0);
            this.qt = null;
            this.rn = new LinkedList$1(CalloutAnnotationWrapper.$);
            this.rk = new Dictionary$2(CalloutAnnotationWrapper.$, LinkedListNode$1.$.specialize(CalloutAnnotationWrapper.$), 0);
            this.q5 = null;
            this.ui = new Rect(0, 0, 0, 1, 1);
            this.rc = false;
            this.r0 = 0;
            this.uh = Rect.empty;
            this.ra = false;
            this.rb = false;
            this.calloutContentUpdating = null;
            this.calloutLabelUpdating = null;
            this.calloutSeriesSelecting = null;
            this.ro = new List$1(SeriesPointOfInterest.$, 0);
            this.re = false;
            this.rf = false;
            this.rs = 0;
            this.rd = false;
            this.q9 = true;
            FastItemObjectColumn.m();
            this.ps = true;
            let a = new CalloutLayerFrame();
            let b = new CalloutLayerFrame();
            let c = new CalloutLayerFrame();
            let d = this.ha / 1000;
            this.pk = a;
            this.pj = b;
            this.pl = c;
            this.ab = CalloutLayer.$;
        }
        get_c2() {
            return true;
        }
        s9(a, b) {
            this.rq.clear();
            this.l0(false);
        }
        kk(a, b, c, d) {
            super.kk(a, b, c, d);
            let e = this.rl();
            switch (a) {
                case 3:
                    this.tl(b, e);
                    break;
                case 1:
                    for (let f = b; f < b + c; f++) {
                        let g = new CalloutAnnotation();
                        let h = new CalloutAnnotationWrapper();
                        h.b = g;
                        h.b.series = this.qs;
                        this.rq.insert(f, h);
                        this.tl(f, e);
                    }
                    break;
                case 0:
                    this.rq.v(b, c);
                    break;
                case 2:
                    for (let i = b; i < b + c; i++) {
                        this.tl(i, e);
                    }
                    break;
                case 4:
                    this.rq.clear();
                    for (let j = 0; j < this.ch.count; j++) {
                        let k = new CalloutAnnotation();
                        let l = new CalloutAnnotationWrapper();
                        l.b = k;
                        l.b.series = this.qs;
                        this.rq.add(l);
                        this.tl(j, e);
                    }
                    break;
            }
            this.l0(true);
        }
        ei(a) {
            return false;
        }
        rl() {
            let a = new Dictionary$2(String_$type, Series.$, 0);
            if (this.ca != null) {
                for (let b = 0; b < this.ca.series.count; b++) {
                    let c = this.ca.series._inner[b];
                    if (c.name != null && !a.containsKey(c.name)) {
                        a.addItem(c.name, c);
                    }
                }
            }
            return a;
        }
        tl(a, b) {
            if (this.q4 == null || this.q2 == null) {
                return;
            }
            let c = a;
            if (this.q3 != null) {
                c = this.q3.item(a);
            }
            let d = this.q4.item(a);
            let e = this.q2.item(a);
            let f = this.rq._inner[a];
            if (this.q1 != null) {
                if (f.b.aa != this.q1.item(a)) {
                    f.b.key = this.q1.item(a);
                }
            }
            if (this.rk.containsKey(f)) {
                f.b = this.rk.item(f).c.b;
            }
            f.b.xValue = c;
            f.b.yValue = d;
            if (this.calloutLabelUpdating != null) {
                let g = ((() => {
                    let $ret = new CalloutLabelUpdatingEventArgs();
                    $ret.c = c;
                    $ret.d = d;
                    $ret.item = this.ch.item(a);
                    return $ret;
                })());
                this.calloutLabelUpdating(this, g);
                if (g.b != null && !Base.equalsStatic(g.b, f.b.am)) {
                    let h = g.b;
                    f.b.text = h != null ? h.toString() : "";
                }
            }
            else {
                f.b.text = e != null ? e.toString() : "";
            }
            if (this.q0 != null) {
                f.b.content = this.q0.item(a);
            }
            else {
                f.b.content = this.ch.item(a);
            }
            if (this.calloutSeriesSelecting != null) {
                let i = ((() => {
                    let $ret = new CalloutSeriesSelectingEventArgs();
                    $ret.c = c;
                    $ret.d = d;
                    $ret.item = this.ch.item(a);
                    return $ret;
                })());
                this.calloutSeriesSelecting(this, i);
                if (i.a != null) {
                    f.b.series = i.a;
                }
                else if (i.e != null) {
                    if (b.containsKey(i.e)) {
                        f.b.series = b.item(i.e);
                    }
                }
            }
            this.tm(f);
        }
        tm(a) {
            let b = new Thickness(0, 3);
            if (isNaN_(this.uk.c) || isNaN_(this.uk.e) || isNaN_(this.uk.d) || isNaN_(this.uk.b)) {
                b = new Thickness(0, 3);
            }
            else {
                b = this.uk;
            }
            let c = this.ud != null ? this.ud : this.qp.ci(a.b.l);
            let d = this.ug != null ? this.ug : this.qp.cl();
            let e = this.uf != null ? this.uf : this.qp.ck();
            let f = this.ue != null ? this.ue : this.qp.cj(a.b.l);
            let g = isNaN_(this.ry) ? 0 : this.ry;
            if (this.ri && this.calloutStyleUpdating != null) {
                let h = new CalloutStyleUpdatingEventArgs();
                h.item = a.b.z;
                h.xValue = a.b.ab;
                h.yValue = a.b.ac;
                h.series = a.b.l;
                h.background = c;
                h.textColor = d;
                h.outline = e;
                h.leaderBrush = f;
                h.strokeThickness = g;
                this.calloutStyleUpdating(this, h);
                c = h.background;
                d = h.textColor;
                e = h.outline;
                f = h.leaderBrush;
                g = h.strokeThickness;
            }
            a.b.backgroundPadding = b;
            a.b.background = c;
            a.b.textColor = d;
            a.b.outline = e;
            a.b.leaderBrush = f;
            a.b.strokeThickness = g;
        }
        hk(a, b) {
            let c = this.ja(b);
            if (c == CalloutLayer.$$p[19]) {
                return this.hl(a, b, this.sv);
            }
            if (c == CalloutLayer.$$p[24]) {
                return this.hl(a, b, this.s4);
            }
            if (c == CalloutLayer.$$p[25]) {
                return this.hl(a, b, this.s7);
            }
            if (c == CalloutLayer.$$p[18]) {
                return this.hl(a, b, this.ss);
            }
            if (c == CalloutLayer.$$p[14]) {
                return this.hl(a, b, this.sm);
            }
            return super.hk(a, b);
        }
        get q2() {
            return this.qx;
        }
        set q2(a) {
            if (this.qx != a) {
                let b = this.qx;
                this.qx = a;
                this.raisePropertyChanged("LabelColumn", b, this.qx);
            }
        }
        get q3() {
            return this.qy;
        }
        set q3(a) {
            if (this.qy != a) {
                let b = this.qy;
                this.qy = a;
                this.raisePropertyChanged("XColumn", b, this.qy);
            }
        }
        get q4() {
            return this.qz;
        }
        set q4(a) {
            if (this.qz != a) {
                let b = this.qz;
                this.qz = a;
                this.raisePropertyChanged("YColumn", b, this.qz);
            }
        }
        get q1() {
            return this.qw;
        }
        set q1(a) {
            if (this.qw != a) {
                let b = this.qw;
                this.qw = a;
                this.raisePropertyChanged("KeyColumn", b, this.qw);
            }
        }
        get q0() {
            return this.qv;
        }
        set q0(a) {
            if (this.qv != a) {
                let b = this.qv;
                this.qv = a;
                this.raisePropertyChanged("ContentColumn", b, this.qv);
            }
        }
        tb(a, b) {
            if (b.propertyName == CalloutAnnotation.$$p[13] || b.propertyName == CalloutAnnotation.$$p[14]) {
                let c = a.k;
                if (!this.rm.contains(c)) {
                    this.rm.add_1(c);
                    this.rp.add(c);
                    this.l0(false);
                }
            }
        }
        bu() {
            return new CalloutLayerView(this);
        }
        lh(a) {
            super.lh(a);
            this.qp = a;
        }
        get uk() {
            return new Thickness(1, this.ru, this.rw, this.rv, this.rt);
        }
        get qu() {
            if (this.qt == null) {
                this.qt = FontUtil.toFontInfo(this.gw, this.s0);
            }
            return this.qt;
        }
        p3(a, b) {
            if (this.qs == null || this.qs == a) {
                if (!this.as.c) {
                    this.l0(b);
                }
            }
        }
        p5(a, b) {
            super.p5(a, b);
            let c = a;
            c.p.clear();
            c.q.clear();
            c.m.clear();
            c.f.clear();
            c.h.clear();
            c.g.clear();
            c.j.clear();
            c.l.clear();
            c.k.clear();
            c.i.clear();
            c.n.clear();
            c.o.clear();
            c.t.clear();
            c.u.clear();
            c.r.clear();
            c.s.clear();
            let d = this.rr();
            let e = new List$1(CalloutAnnotationWrapper.$, 0);
            if (this.rg) {
                if (this.pq(this.qs)) {
                    this.ti(this.qs, c, e);
                }
                else {
                    for (let f of fromEnum(this.ca.series)) {
                        if (this.pq(f)) {
                            this.ti(f, c, e);
                        }
                    }
                }
            }
            this.th(c, d, e);
        }
        mn(a, b) {
            super.mn(a, b);
            let c = b.width - this.ui.width;
            let d = b.height - this.ui.height;
            let e = 0;
            if (Math.abs(c) > Math.abs(d)) {
                e = c;
                this.rs = c * this.pf.width;
            }
            else {
                e = d;
                this.rs = d * this.pf.height;
            }
            if (e > 0 && this.rs > 5) {
                this.rf = true;
            }
            if (e < 0 && this.rs > 5) {
                this.re = true;
            }
        }
        mm(a, b) {
            super.mm(a, b);
            if (!a.equals1(b)) {
                this.rd = true;
            }
        }
        get uj() {
            return this.uh;
        }
        set uj(a) {
            this.uh = a;
        }
        th(a, b, c) {
            if (this.ca != null) {
                this.ui = this.ca.pg;
            }
            if (this.pf.isEmpty) {
                return;
            }
            this.uj = new Rect(0, this.pf.left, this.pf.top, this.pf.width, this.pf.height);
            if (this.q5 != null && this.sj != null && this.sj != this.q5.ak) {
                this.td();
            }
            if (this.q5 == null) {
                let d = this.q6();
                if (d != null) {
                    this.q5 = d;
                    let e = this.q5;
                    e.labelsMoved = delegateCombine(e.labelsMoved, runOn(this, this.ta));
                }
                else {
                    let f = this.o7(this.bx);
                    let g = 0;
                    if (this.qs != null) {
                        if (this.qs.isVertical) {
                            g = 2;
                        }
                    }
                    else {
                        let h = false;
                        if (this.ca != null && this.ca.series.count > 0) {
                            h = true;
                            for (let i of fromEnum(this.ca.series)) {
                                if (!i.c6) {
                                    if (!i.isVertical) {
                                        h = false;
                                    }
                                }
                            }
                        }
                        if (h) {
                            g = 2;
                        }
                    }
                    this.q5 = new LabelCollisionManager(this.pf.right, this.pf.bottom, this.pf, this.qp.j(), this.rx, this.q7(), g, this.r4(), this.r3(), this.rh);
                    if (this.sj != null) {
                        this.q5.ak = this.sj;
                        this.q5.ai = this;
                    }
                    let j = this.q5;
                    j.labelsMoved = delegateCombine(j.labelsMoved, runOn(this, this.ta));
                }
            }
            if (this.re) {
                this.re = false;
                if (this.q5.ag > 2) {
                    this.rc = true;
                }
            }
            if (this.rf) {
                this.rf = false;
                if (this.rs > 5) {
                    this.rc = true;
                }
            }
            if (this.rd) {
                this.rd = false;
                this.q5.ay(this.pf.right, this.pf.bottom, this.pf);
                this.rc = true;
            }
            let k = new HashSet$1(CalloutAnnotationWrapper.$, 0);
            let l = new HashSet$1(CalloutAnnotationWrapper.$, 0);
            let m = new List$1(CalloutAnnotationWrapper.$, 0);
            let n = new List$1(CalloutAnnotationWrapper.$, 0);
            let o = new HashSet$1(CalloutAnnotationWrapper.$, 0);
            for (let p = 0; p < b.count; p++) {
                o.add_1(b._inner[p]);
            }
            for (let q = 0; q < c.count; q++) {
                o.add_1(c._inner[q]);
            }
            let r = this.rn.c;
            while (r != null) {
                let s = r.a;
                if (!o.contains(r.c)) {
                    n.add(r.c);
                    l.add_1(r.c);
                    let t = r.c.b;
                    t.propertyChanged = delegateRemove(t.propertyChanged, runOn(this, this.tb));
                    this.rn.h(r);
                    this.rk.removeItem(r.c);
                    this.q5.ax(r.c.c);
                }
                r = s;
            }
            for (let u = 0; u < b.count; u++) {
                if (!this.rk.containsKey(b._inner[u])) {
                    this.rn.f(b._inner[u]);
                    let v = b._inner[u].b;
                    v.propertyChanged = delegateCombine(v.propertyChanged, runOn(this, this.tb));
                    this.rk.addItem(b._inner[u], this.rn.d);
                    m.add(b._inner[u]);
                    k.add_1(b._inner[u]);
                    this.rc = true;
                }
            }
            for (let w = 0; w < c.count; w++) {
                if (!this.rk.containsKey(c._inner[w])) {
                    this.rn.f(c._inner[w]);
                    this.rk.addItem(c._inner[w], this.rn.d);
                    let x = c._inner[w].b;
                    x.propertyChanged = delegateCombine(x.propertyChanged, runOn(this, this.tb));
                    m.add(c._inner[w]);
                    k.add_1(c._inner[w]);
                    this.rc = true;
                }
            }
            if (this.ra == true) {
                this.ra = false;
                this.rc = true;
            }
            if (this.rp.count > 0) {
                this.rc = true;
                this.rp.clear();
                this.rm.clear();
            }
            r = this.rn.c;
            while (r != null) {
                let y = this.q8(r.c);
                if (y == null) {
                    return;
                }
                if (!Base.equalsStatic(y, r.c.c.c)) {
                    let z = false;
                    if (r.c.c.c == null) {
                        z = true;
                    }
                    let aa = r.c.c;
                    aa.o = y.b;
                    aa.p = y.c;
                    if (!isNaN_(aa.o) && !isNaN_(aa.p)) {
                        aa.n = y.e;
                        aa.m = y.d;
                        if (aa.b == null) {
                            this.q5.p(aa);
                        }
                        if (z) {
                            this.q5.al(aa);
                        }
                        else {
                            this.q5.au(aa);
                        }
                    }
                }
                r = r.a;
            }
            let ab = this.q5.ah();
            let ac = this.q5.q();
            if (this.rc && (ab != 0 || ac)) {
                this.rc = false;
                this.r0 = 0x7FFFFFFF;
                if (this.sj != null) {
                    let ad = true;
                    for (let ae = 0; ae < this.ca.series.count; ae++) {
                        let af = this.ca.series._inner[ae];
                        if (af.c6 && typeCast(CalloutLayer.$, af) !== null) {
                            let ag = af;
                            if (ag.sj == this.sj) {
                                if (!ag.uj.equals1(this.q5.a0)) {
                                    ad = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (ad) {
                        this.q5.az();
                    }
                    else {
                        this.q5.am();
                        this.q5.an();
                    }
                }
                else {
                    this.q5.az();
                }
            }
            else {
                this.q5.an();
            }
            let ah = this.rn.c;
            while (ah != null) {
                let ai = ah.c;
                a.m.add1(ai);
                a.f.add(ai.b.bh);
                a.h.add(ai.b.bj);
                a.g.add(ai.b.bi);
                a.j.add(ai.b.backgroundPadding.c);
                a.l.add(ai.b.backgroundPadding.e);
                a.k.add(ai.b.backgroundPadding.d);
                a.i.add(ai.b.backgroundPadding.b);
                a.n.add(ai.b.x);
                a.o.add(ai.b.bk);
                a.p.add1(ai.b.am);
                a.q.add1(ai.b.z);
                let aj = ai.c;
                a.t.add(ai.c.o - (ai.c.g - ai.c.l));
                a.u.add(ai.c.p - (ai.c.h - ai.c.k));
                a.r.add(ai.c.g - ai.c.l);
                a.s.add(ai.c.h - ai.c.k);
                ah = ah.a;
            }
        }
        td() {
            if (this.q5 != null) {
                let a = this.rn.c;
                while (a != null) {
                    let b = a.c.c;
                    if (b != null) {
                        this.q5.ax(b);
                    }
                    a = a.a;
                }
                let c = this.q5;
                c.labelsMoved = delegateRemove(c.labelsMoved, runOn(this, this.ta));
                this.q5 = null;
            }
            this.tc();
        }
        q6() {
            if (this.ca == null) {
                return null;
            }
            for (let a = 0; a < this.ca.series.count; a++) {
                let b = this.ca.series._inner[a];
                if (b.c6 && typeCast(CalloutLayer.$, b) !== null) {
                    let c = b;
                    if (c != this) {
                        if (c.sj != null && c.sj == this.sj) {
                            if (c.q5 != null) {
                                return c.q5;
                            }
                        }
                    }
                }
            }
            return null;
        }
        r3() {
            return 20000;
        }
        r4() {
            return 300;
        }
        q7() {
            switch (this.qm) {
                case 0: return 2;
                case 2: return 1;
                case 3: return 2;
                case 1: return 0;
            }
            return 2;
        }
        ta(a) {
            let b = this.q5.ah();
            if (b < this.r0) {
                this.r0 = b;
                this.l0(false);
            }
        }
        q8(a) {
            let b = this.qs;
            if (a.b.l != null) {
                b = a.b.l;
            }
            if (b == null) {
                for (let c = 0; c < this.ca.series.count; c++) {
                    let d = this.ca.series._inner[c];
                    if (!d.c6) {
                        b = d;
                        break;
                    }
                }
            }
            if (b == null) {
                return null;
            }
            let e = b.ag();
            let f = b.f2();
            let g = null;
            let h = null;
            let i = false;
            for (let j = 0; j < e.length; j++) {
                if (e[j].b4) {
                    i = true;
                    g = e[j];
                }
                else if (e[j].cg) {
                    i = true;
                    h = e[j];
                }
                else if (e[j].cj) {
                    h = e[j];
                }
                else {
                    g = e[j];
                }
            }
            if (g == null || h == null) {
                return null;
            }
            if (!g.ci() || !h.ci()) {
                return null;
            }
            let k = 0;
            let l = 0;
            if (g.b6 && g.categoryMode != 0) {
                if (b.di) {
                    k = b.getOffsetValue();
                }
                else if (b.da) {
                    k = b.getOffsetValue();
                }
            }
            if (h.b6 && h.categoryMode != 0) {
                if (b.da) {
                    l = b.getOffsetValue();
                }
            }
            let m = new ScalerParams(0, this.ca.pg, g.js, g.cc, g.jn());
            m.b = f;
            let n = new ScalerParams(0, this.ca.pg, h.js, h.cc, h.jn());
            n.b = f;
            let o = 0;
            let p = 0;
            if (i) {
                o = g.d8(this.rz(a.b.ab), m) + k;
                p = h.d8(this.rz(a.b.ac), n) + l;
                let q = o;
                let r = p;
                let s = { $type: Point_$type, x: 0.5, y: 0.5 };
                let t = s.x + (r * Math.cos(q));
                o = ViewportUtils.c(t, m.e, m.d);
                let u = s.y + (r * Math.sin(q));
                p = ViewportUtils.f(u, n.e, n.d);
            }
            else {
                o = g.d8(this.rz(a.b.ab), m) + k;
                p = h.d8(this.rz(a.b.ac), n) + l;
            }
            let v = new QuadTreeBoundingBox();
            v.b = o;
            v.c = p;
            v.e = 3;
            v.d = 3;
            v.g = a.b;
            return v;
        }
        rz(a) {
            if (typeCast(Date_$type, a) !== null) {
                return a.getTime();
            }
            if (a == null) {
                return 0;
            }
            return a;
        }
        rr() {
            let a = new List$1(CalloutAnnotationWrapper.$, 0);
            for (let b = 0; b < this.rq.count; b++) {
                if (stringIsNullOrEmpty(this.rq._inner[b].b.am)) {
                    continue;
                }
                if (this.rq._inner[b].c == null) {
                    let c = new LabelCollisionInfo();
                    this.rq._inner[b].c = c;
                    let d = this.qp.cn(this.r5(this.rq._inner[b]), this.rq._inner[b].b.backgroundPadding);
                    c.k = d.height / 2;
                    c.l = d.width / 2;
                }
                let e = this.q8(this.rq._inner[b]);
                if (e == null || e.b < this.pf.left || e.b > this.pf.right || e.c < this.pf.top || e.c > this.pf.bottom) {
                    continue;
                }
                a.add(this.rq._inner[b]);
            }
            return a;
        }
        r5(a) {
            return a.b.am;
        }
        pq(a) {
            if (!super.pq(a)) {
                return false;
            }
            if (this.sx != null) {
                if (a.dn) {
                    let b = a.i9();
                    if (!Base.equalsStatic(this.sx, b)) {
                        return false;
                    }
                }
                else {
                    if (!Base.equalsStatic(this.sx, a.name)) {
                        return false;
                    }
                }
            }
            return true;
        }
        la() {
            super.la();
            if (!this.as.c && !this.cr()) {
                return;
            }
            if (this.q9) {
                this.q9 = false;
                this.tf();
            }
            if (this.cr()) {
                this.tk(this.pl, false);
            }
            else {
                this.tk(this.pj, false);
            }
        }
        tg() {
            if (!this.rb) {
                this.rb = true;
                this.l0(true);
            }
        }
        ti(a, b, c) {
            let d = false;
            if (this.rb) {
                this.rb = false;
                d = true;
            }
            if (a.cx(this.ro, this.rj, this.r1)) {
                let e = this.ro;
                for (let f = 0; f < this.ro.count; f++) {
                    let g = e._inner[f];
                    let h = g.a.item != null ? g.a.item : g.a;
                    let i = a;
                    let j = new CalloutKey(h, i);
                    let k = new CalloutAnnotationWrapper();
                    let l = new CalloutAnnotation();
                    k.b = l;
                    l.key = j;
                    let m = false;
                    if (this.rk.containsKey(k)) {
                        k = this.rk.item(k).c;
                        l = k.b;
                        m = d;
                    }
                    else {
                        m = true;
                    }
                    let n = l.ab;
                    let o = l.ac;
                    if (this.rz(n) != this.rz(g.b)) {
                        l.xValue = g.b;
                    }
                    if (this.rz(o) != this.rz(g.c)) {
                        l.yValue = g.c;
                    }
                    l.series = a;
                    let p = false;
                    if (g.d != l.aw) {
                        l.aw = g.d;
                        p = true;
                    }
                    if (m || p) {
                        if (this.calloutLabelUpdating != null) {
                            let q = ((() => {
                                let $ret = new CalloutLabelUpdatingEventArgs();
                                $ret.c = l.ab;
                                $ret.d = l.ac;
                                $ret.item = h;
                                return $ret;
                            })());
                            this.calloutLabelUpdating(this, q);
                            if (q.b != null && !Base.equalsStatic(q.b, k.b.am)) {
                                let r = q.b;
                                k.b.text = r != null ? r.toString() : "";
                            }
                        }
                        else {
                            if (g.d != null) {
                                l.text = g.d;
                            }
                        }
                    }
                    if (l.am == null) {
                        continue;
                    }
                    if (m || p) {
                        if (this.calloutContentUpdating != null) {
                            let s = ((() => {
                                let $ret = new CalloutContentUpdatingEventArgs();
                                $ret.c = l.ab;
                                $ret.d = l.ac;
                                $ret.item = h;
                                $ret.a = h;
                                return $ret;
                            })());
                            this.calloutContentUpdating(this, s);
                            if (s.a != null && s.a != k.b.z) {
                                k.b.content = s.a;
                            }
                        }
                        else {
                            if (h != null && h != k.b.z) {
                                k.b.content = h;
                            }
                        }
                    }
                    if (m) {
                        this.tm(k);
                    }
                    if (k.c == null) {
                        let t = new LabelCollisionInfo();
                        k.c = t;
                        let u = this.qp.cn(this.r5(k), k.b.backgroundPadding);
                        t.k = u.height / 2;
                        t.l = u.width / 2;
                    }
                    let v = this.q8(k);
                    if (v == null || v.b < this.pf.left || v.b > this.pf.right || v.c < this.pf.top || v.c > this.pf.bottom) {
                        continue;
                    }
                    c.add(k);
                }
            }
        }
        bo() {
            return 1;
        }
        at(a, b) {
            let c = this.q5.d(a, b);
            if (c == null) {
                return null;
            }
            return c.u;
        }
        ep(a, b) {
            if (this.q5 == null) {
                return false;
            }
            return this.q5.d(a, b) != null;
        }
        tk(a, b) {
            let c = 0;
            let d = new HashSet$1(CalloutAnnotationWrapper.$, 0);
            for (c = 0; c < a.p.count; c++) {
                let e = a.m._inner[c];
                if (isNaN_(a.t._inner[c]) || isNaN_(a.u._inner[c])) {
                    continue;
                }
                let f = this.qp.b8.item(e);
                d.add_1(e);
                if (f.f != a.p._inner[c]) {
                    f.f = a.p._inner[c];
                    let g = f.s();
                }
                f.c = a.n._inner[c];
                f.k = a.f._inner[c];
                f.n = a.o._inner[c];
                f.m = f.c > 0 ? a.h._inner[c] : this.bx.bq();
                f.l = a.g._inner[c];
                f.v = new Thickness(1, a.j._inner[c], a.l._inner[c], a.k._inner[c], a.i._inner[c]);
                this.qp.cg(f, Math.min(a.r._inner[c], a.r._inner[c] + a.t._inner[c]), Math.min(a.s._inner[c], a.s._inner[c] + a.u._inner[c]));
                this.qp.ch(f, e, a.q._inner[c]);
                f.p = { $type: Point_$type, x: a.t._inner[c], y: a.u._inner[c] };
            }
            let h = new List$1(CalloutAnnotationWrapper.$, 0);
            for (let i of fromEnum(this.qp.b8.c)) {
                if (!d.contains(i)) {
                    h.add(i);
                }
            }
            for (let j = 0; j < h.count; j++) {
                this.qp.b8.h(h._inner[j]);
            }
        }
        p8(a, b) {
            super.p8(a, b);
            if (this.cr()) {
                this.tk(this.pl, true);
            }
            else {
                this.tk(this.pj, false);
            }
        }
        eg() {
            return true;
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case CalloutLayer.$$p[22]:
                    this.qt = null;
                    this.qp.cf();
                    this.l0(true);
                    break;
                case CalloutLayer.$$p[20]:
                case CalloutLayer.$$p[21]:
                    this.l0(true);
                    break;
                case CalloutLayer.$$p[13]:
                    this.l0(true);
                    break;
                case "SeriesViewer":
                    if (c != null) {
                        let e = c;
                        e.seriesAnimating = delegateRemove(e.seriesAnimating, runOn(this, this.tj));
                    }
                    if (d != null) {
                        let f = d;
                        f.seriesAnimating = delegateCombine(f.seriesAnimating, runOn(this, this.tj));
                    }
                    if (d == null) {
                        this.td();
                    }
                    break;
                case CalloutLayer.$$p[15]:
                case CalloutLayer.$$p[16]:
                case CalloutLayer.$$p[1]:
                case CalloutLayer.$$p[5]:
                case CalloutLayer.$$p[4]:
                case CalloutLayer.$$p[7]:
                case CalloutLayer.$$p[9]:
                case CalloutLayer.$$p[8]:
                case CalloutLayer.$$p[6]:
                case CalloutLayer.$$p[11]:
                case CalloutLayer.$$p[12]:
                    this.te();
                    break;
                case CalloutLayer.$$p[19]:
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.q2);
                        this.q2 = this.cg(this.sv);
                    }
                    break;
                case "LabelColumn":
                    this.te();
                    break;
                case CalloutLayer.$$p[14]:
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.q0);
                        this.q0 = this.cg(this.sm);
                    }
                    break;
                case "ContentColumn":
                    this.te();
                    break;
                case CalloutLayer.$$p[24]:
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.q3);
                        this.q3 = stringIsNullOrEmpty(this.s4) == false ? this.cg(this.s4) : null;
                    }
                    break;
                case "XColumn":
                    this.te();
                    break;
                case CalloutLayer.$$p[25]:
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.q4);
                        this.q4 = this.cg(this.s7);
                    }
                    break;
                case "YColumn":
                    this.te();
                    break;
                case CalloutLayer.$$p[18]:
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.q1);
                        this.q1 = this.cg(this.ss);
                    }
                    break;
                case "KeyColumn":
                    this.te();
                    break;
                case "FastItemsSource":
                    this.ra = true;
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.q2);
                        c.deregisterColumn(this.q0);
                        c.deregisterColumn(this.q3);
                        c.deregisterColumn(this.q4);
                        c.deregisterColumn(this.q1);
                        this.q2 = null;
                        this.q0 = null;
                        this.q3 = null;
                        this.q4 = null;
                        this.q1 = null;
                        this.rq.clear();
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.q2 = this.cg(this.sv);
                        this.q0 = this.cg(this.sm);
                        if (stringIsNullOrEmpty(this.s4) == false) {
                            this.q3 = this.cg(this.s4);
                        }
                        this.q4 = this.cg(this.s7);
                        this.q1 = this.cg(this.ss);
                    }
                    this.te();
                    break;
            }
        }
        tj(a) {
            if (a.c6) {
                return;
            }
            if ((a == this.qs || this.qs == null) && this.rg) {
                this.l0(false);
            }
        }
        te() {
            if (this.q9 == false) {
                this.q9 = true;
                this.l0(false);
            }
        }
        tc() {
            this.qp.b8.clear();
            this.rn.g();
            this.rk.clear();
        }
        tf() {
            if (this.q4 == null || this.q2 == null) {
                let a = this.rn.c;
                while (a != null) {
                    this.tm(a.c);
                    a = a.a;
                }
                return;
            }
            let b = this.rl();
            for (let c = 0; c < this.q4.count; c++) {
                let d;
                if (this.rq.count <= c) {
                    let e = new CalloutAnnotation();
                    d = new CalloutAnnotationWrapper();
                    d.b = e;
                    d.b.series = this.qs;
                    this.rq.add(d);
                }
                else {
                    d = this.rq._inner[c];
                }
                this.tl(c, b);
            }
        }
    }
    CalloutLayer.$t = /*@__PURE__*/ markType(CalloutLayer, 'CalloutLayer', AnnotationLayer.$);
    CalloutLayer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CalloutLayer, 'raisePropertyChanged', ['AutoCalloutLabelPrecision:r1:tn', [1, 5], 'CalloutBackground:ud:to', [Brush.$, null], 'CalloutCollisionMode:qm:tp', [CalloutCollisionMode_$type, /*@__PURE__*/ enumGetBox(CalloutCollisionMode_$type, 3)], 'CalloutInterpolatedValuePrecision:r2:tq', [1, -1], 'CalloutLeaderBrush:ue:tr', [Brush.$, null], 'CalloutOutline:uf:ts', [Brush.$, null], 'CalloutPaddingBottom:rt:tt', [1, NaN], 'CalloutPaddingLeft:ru:tu', [1, NaN], 'CalloutPaddingRight:rv:tv', [1, NaN], 'CalloutPaddingTop:rw:tw', [1, NaN], 'CalloutPositionPadding:rx:tx', [1, 10], 'CalloutStrokeThickness:ry:ty', [1, NaN], 'CalloutTextColor:ug:tz', [Brush.$, null], 'CollisionChannel:sj:t0', [2, null], 'ContentMemberPath:sm:t1', [2, null], 'IsAutoCalloutBehaviorEnabled:rg:t2', [0, false], 'IsCalloutOffsettingEnabled:rh:t3', [0, true], 'IsCustomCalloutStyleEnabled:ri:t4', [0, false], 'KeyMemberPath:ss:t5', [2, null], 'LabelMemberPath:sv:t6', [2, null], 'TargetSeriesName:sx:t7', [2, null], 'TargetSeries:qs:t8', [Series.$, null], 'TextStyle:s0:t9', [2, null], 'UseValueForAutoCalloutLabels:rj:ua', [0, true], 'XMemberPath:s4:ub', [2, null], 'YMemberPath:s7:uc', [2, null]]);
    return CalloutLayer;
})();
/**
 * @hidden
 */
export let CalloutLayerView = /*@__PURE__*/ (() => {
    class CalloutLayerView extends AnnotationLayerView {
        constructor(a) {
            super(a);
            this.b4 = null;
            this.b9 = null;
            this.b8 = null;
            this.ca = NaN;
            this.b5 = null;
            this.b4 = a;
            this.b9 = new List$1(CalloutView.$, 0);
        }
        as() {
            super.as();
            this.b8 = ((() => {
                let $ret = new HashPool$2(CalloutAnnotationWrapper.$, CalloutView.$);
                $ret.create = runOn(this, this.b6);
                $ret.activate = runOn(this, this.cc);
                $ret.disactivate = runOn(this, this.ce);
                $ret.destroy = runOn(this, this.cd);
                return $ret;
            })());
        }
        b6() {
            let a = new CalloutView(this);
            this.b9.add(a);
            return a;
        }
        cc(a) {
            a.w = 0;
        }
        ce(a) {
            a.w = 1;
        }
        cd(a) {
            this.b9.remove(a);
        }
        cm(a) {
            if (a == null) {
                return a;
            }
            return BrushUtil.l(a, 0.1);
        }
        a6(a, b) {
            super.a6(a, b);
            a.ac(this.b7());
            if (a.d && !b) {
                for (let c = 0; c < this.b9.count; c++) {
                    let d = this.b9._inner[c];
                    if (d.w == 0) {
                        d.h(a);
                    }
                }
            }
        }
        b7() {
            if (this.b4.qu != null) {
                return this.b4.qu;
            }
            return this.e.ca.getFontInfo();
        }
        al(a) {
            super.al(a);
            for (let b = 0; b < this.b9.count; b++) {
                let c = this.b9._inner[b];
                if (c.w != 0) {
                    continue;
                }
                c.g(this.b4, this.b7(), a);
            }
        }
        co(a) {
            this.k.ac(this.b7());
            this.ca = this.cb();
            return new Size(1, this.k.f(a.ak), this.ca);
        }
        cb() {
            let a = this.b7();
            if (isNaN_(this.ca)) {
                let b = FontUtil.getCurrentFontHeight(this.e.ca.cf.j.ae, a);
                this.ca = b;
            }
            return this.ca;
        }
        cn(a, b) {
            if (this.b5 == null) {
                this.b5 = new CalloutView(this);
            }
            this.b5.f = a;
            this.b5.v = b;
            let c = this.b5.s();
            this.b5.f = null;
            return c;
        }
        cg(a, b, c) {
            a.d = b;
            a.e = c;
        }
        ch(a, b, c) {
            a.i(this.e, b, c);
        }
        ci(a) {
            if (a != null) {
                return this.cm(a.ok);
            }
            return this.e.ok;
        }
        cl() {
            return ((() => {
                let $ret = new Brush();
                $ret.color = Color.u(255, 255, 255, 255);
                return $ret;
            })());
        }
        ck() {
            return ((() => {
                let $ret = new Brush();
                $ret.color = Color.u(255, 255, 255, 255);
                return $ret;
            })());
        }
        cj(a) {
            if (a != null) {
                return this.cm(a.of);
            }
            return this.e.of;
        }
        cf() {
            this.ca = NaN;
        }
    }
    CalloutLayerView.$t = /*@__PURE__*/ markType(CalloutLayerView, 'CalloutLayerView', AnnotationLayerView.$);
    return CalloutLayerView;
})();
/**
 * @hidden
 */
export let CalloutView = /*@__PURE__*/ (() => {
    class CalloutView extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.w = 0;
            this.j = null;
            this.r = null;
            this.o = { $type: Point_$type, x: 0, y: 0 };
            this.q = null;
            this.u = new Thickness(0, 0);
            this.t = null;
            this.d = 0;
            this.e = 0;
            this.b = null;
            this.q = new Line();
            this.q.ab = false;
            this.q._stroke = ((() => {
                let $ret = new Brush();
                $ret.color = Color.u(255, 0, 0, 0);
                return $ret;
            })());
            this.q.ac = 2;
            this.j = new TextBlock();
            this.r = new Rectangle();
            this.r.ac = 0;
            this.a = a;
            this.w = 0;
        }
        h(a) {
            a.z();
            a.af(this.d, this.e);
            let b = new TranslateTransform();
            b.j = this.t.c;
            b.k = this.t.e;
            this.r.j = b;
            a.r(this.q);
            a.z();
            this.r.width = this.j.m + this.u.c + this.u.d;
            this.r.height = this.j.l + this.u.e + this.u.b;
            a.j(this.r.j);
            a.v(this.r);
            this.j.o = this.u.e;
            this.j.n = this.u.c;
            a.w(this.j);
            a.y();
            a.y();
        }
        get p() {
            return this.o;
        }
        set p(a) {
            if (this.o.x != a.x || this.o.y != a.y) {
                let b = this.s();
                let c = b.height;
                let d = b.width;
                this.o = a;
                let e = CalloutViewHelper.b(this.p, d, c, this.q);
                this.t = e;
            }
        }
        get n() {
            return this.j.am;
        }
        set n(a) {
            this.j.am = a;
        }
        get m() {
            return this.r._stroke;
        }
        set m(a) {
            this.r._stroke = a;
        }
        get l() {
            return this.q._stroke;
        }
        set l(a) {
            this.q._stroke = a;
        }
        get k() {
            return this.r._fill;
        }
        set k(a) {
            this.r._fill = a;
        }
        get c() {
            return this.r.ac;
        }
        set c(a) {
            this.r.ac = a;
        }
        get v() {
            return this.u;
        }
        set v(a) {
            this.u = a;
        }
        get f() {
            return this.j.ak;
        }
        set f(a) {
            if (a == null) {
                this.j.ak = "";
            }
            else {
                this.j.ak = a.toString();
            }
            let b = this.s();
            let c = b.height;
            let d = b.width;
            let e = CalloutViewHelper.b(this.p, d, c, this.q);
            this.t = e;
        }
        s() {
            let a = this.a.co(this.j);
            this.j.m = a.width;
            this.j.l = a.height;
            return new Size(1, a.width + this.u.c + this.u.d, a.height + this.u.e + this.u.b);
        }
        i(a, b, c) {
            if (this.b == null) {
                this.b = new DataContext();
            }
            this.b.series = a;
            this.b.item = c;
            if (b.c != null) {
                b.c.u = this.b;
            }
        }
        g(a, b, c) {
            a.a6.exportCalloutData(this.d, this.e, this.t.c, this.t.e, c, this.r, this.j, b, this.q, "callout", ["Main", "Callout"]);
        }
    }
    CalloutView.$t = /*@__PURE__*/ markType(CalloutView, 'CalloutView');
    return CalloutView;
})();
//# sourceMappingURL=CalloutLayer_combined.js.map
