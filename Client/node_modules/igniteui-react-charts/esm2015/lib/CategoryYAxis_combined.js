/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CategoryAxisBase } from "./CategoryAxisBase";
import { DependencyProperty } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Base, typeCast, Array_$type, Number_$type, markType } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { NumericScaler } from "./NumericScaler";
import { VerticalAxisLabelPanel } from "./VerticalAxisLabelPanel";
import { MathUtil } from "igniteui-react-core";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { LinearCategorySnapper } from "./LinearCategorySnapper";
import { NumericXAxis } from "./NumericXAxis";
import { LabelPosition } from "./LabelPosition";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
import { AxisDefaults } from "./AxisDefaults";
/**
 * @hidden
 */
export let CategoryYAxis = /*@__PURE__*/ (() => {
    class CategoryYAxis extends CategoryAxisBase {
        constructor() {
            super();
            this.lq = 0;
            this.lr = 0;
            this.ly = 1;
            this.lx = 1;
            this.kd = new List$1(Number_$type, 0);
            this.ab = CategoryYAxis.$;
        }
        a3() {
            return new CategoryYAxisView(this);
        }
        ha(a) {
            super.ha(a);
            this.lo = a;
        }
        get_cj() {
            return true;
        }
        d7() {
            return this.js.height;
        }
        ll(a, b, c) {
            return this.lm(a, b, c, true);
        }
        ln(a) {
            if (typeCast(List$1.$.specialize(Array_$type), a) !== null) {
                return a.asArray();
            }
            return null;
        }
        g4(a, b, c, d, e) {
            let f;
            let g = e.e;
            let h = e.d;
            let i = e.c;
            let j = e.a;
            let k = !i.isEmpty;
            let l = this.categoryMode == 0 ? this.kq - 1 : this.kq;
            if (l < 0) {
                l = 0;
            }
            let m = i.top;
            let n = i.height;
            let o = g.top;
            let p = g.height;
            let q = h.top;
            let r = h.height;
            let s = 0;
            let t = 1;
            let u = this.ln(a);
            let v = false;
            if (u != null) {
                v = true;
            }
            let w;
            for (let x = 0; x < b.count; x++) {
                w = b.item(x);
                for (let y = c; y < d; y++) {
                    if (v) {
                        f = u[y];
                    }
                    else {
                        f = a.item(y);
                    }
                    if (k) {
                        let z = l >= 1 ? (f[w]) / (l) : l == 0 ? 0.5 : NaN;
                        if (!j) {
                            z = 1 - z;
                        }
                        z = m + n * (z - s) / t;
                        let aa = (z - e.d.top) / e.d.height;
                        aa = e.d.top + e.d.height * (aa - e.e.top) / e.e.height;
                        f[w] = aa;
                    }
                    else {
                        let ab = l >= 1 ? (f[w]) / (l) : l == 0 ? 0.5 : NaN;
                        if (!j) {
                            ab = 1 - ab;
                        }
                        ab = q + r * (ab - o) / p;
                        f[w] = ab;
                    }
                }
            }
        }
        get lv() {
            return this.c(CategoryYAxis.l7);
        }
        set lv(a) {
            this.h(CategoryYAxis.l7, a);
        }
        lp() {
            return !isNaN_(this.lv);
        }
        get ls() {
            return this.lq;
        }
        set ls(a) {
            if (this.ls != a) {
                let b = this.lq;
                this.lq = a;
                this.hk("ActualInterval", b, this.ls);
            }
        }
        ej() {
            return this.ls;
        }
        get lw() {
            return this.c(CategoryYAxis.l8);
        }
        set lw(a) {
            this.h(CategoryYAxis.l8, a);
        }
        get lt() {
            return this.lr;
        }
        set lt(a) {
            if (this.lt != a) {
                let b = this.lr;
                this.lr = a;
                this.hk("ActualMinorInterval", b, this.lt);
            }
        }
        get l0() {
            return this.ly;
        }
        set l0(a) {
            this.ly = a;
        }
        get lz() {
            return this.lx;
        }
        set lz(a) {
            this.lx = a;
        }
        d8(a, b) {
            if (!b.c.isEmpty) {
                let c = this.lu(a, NumericScaler.ac, b.c);
                c = (c - b.d.top) / b.d.height;
                c = b.d.top + b.d.height * (c - b.e.top) / b.e.height;
                return c;
            }
            return this.lu(a, b.e, b.d);
        }
        lu(a, b, c) {
            let d = this.categoryMode == 0 ? this.kq - 1 : this.kq;
            if (d < 0) {
                d = 0;
            }
            let e = d >= 1 ? (a) / (d) : d == 0 ? 0.5 : NaN;
            if (!this.cd) {
                e = 1 - e;
            }
            return c.top + c.height * (e - b.top) / b.height;
        }
        eb(a, b) {
            if (!b.c.isEmpty) {
                let c = b.e.top + b.e.height * (a - b.d.top) / b.d.height;
                c = (c * b.d.height) + b.d.top;
                c = this.getUnscaledValue3(c, NumericScaler.ac, b.c, this.categoryMode);
                return c;
            }
            return this.getUnscaledValue3(a, b.e, b.d, this.categoryMode);
        }
        ec(a, b, c) {
            if (!b.c.isEmpty) {
                let d = b.e.top + b.e.height * (a - b.d.top) / b.d.height;
                d = (d * b.d.height) + b.d.top;
                d = this.getUnscaledValue3(d, NumericScaler.ac, b.c, c);
                return d;
            }
            return this.getUnscaledValue3(a, b.e, b.d, c);
        }
        getUnscaledValue3(a, b, c, d) {
            let e = b.top + (a - c.top) * b.height / c.height;
            if (!this.cd) {
                e = 1 - e;
            }
            let f = d == 0 ? this.kq - 1 : this.kq;
            if (f < 0) {
                f = 0;
            }
            return e * f;
        }
        l6(a, b) {
            if (a == NaN || b == NaN || this.j6 == null || this.j6.count == 0) {
                return;
            }
            let c = a / this.j6.count;
            let d = b / this.j6.count;
            this.bh.pw = new Rect(0, this.bh.pw.x, 1 - d, this.bh.pw.width, d - c);
        }
        au() {
            return new VerticalAxisLabelPanel();
        }
        dv() {
            return this.lv;
        }
        getCategorySize(a, b, c) {
            let d = this.jq(b, c);
            return d.height / (this.kq * a.height);
        }
        ki(a, b, c) {
            let d = 0;
            if (!isNaN_(this.kf)) {
                d = MathUtil.b(this.kf, 0, 1);
            }
            let e = 0;
            if (!isNaN_(this.km)) {
                e = Math.min(this.km, 1);
            }
            let f = 1 - 0.5 * d;
            let g = this.getCategorySize(a, b, c) * f / (this.ks - (this.ks - 1) * e);
            return g;
        }
        getGroupCenter(a, b, c, d) {
            let e = 0.5;
            if (this.ks > 1) {
                let f = 0;
                if (!isNaN_(this.kf)) {
                    f = MathUtil.b(this.kf, 0, 1);
                }
                let g = 0;
                if (!isNaN_(this.km)) {
                    g = Math.min(this.km, 1);
                }
                let h = 1 - 0.5 * f;
                let i = h / (this.ks - (this.ks - 1) * g);
                let j = (h - i) / (this.ks - 1);
                e = 0.25 * f + 0.5 * i + a * j;
            }
            return this.getCategorySize(b, c, d) * e;
        }
        l5(a) {
            let b = this.bh != null ? this.bh.pg : Rect.empty;
            b = b.copy();
            let c = this.js;
            let d = new Rect(0, 0, 0, 1, 1);
            let e = this.jp();
            let f = new ScalerParams(0, d, d, this.cc, e);
            let g = !b.isEmpty && !c.isEmpty && this.j6 != null ? this.j6.indexOf(a) : -1;
            let h = g > -1 ? this.d8(g, f) : NaN;
            if (!isNaN_(h) && this.bh.d0) {
                if (!isNaN_(h)) {
                    if (h < b.top + 0.1 * b.height) {
                        h = h + 0.4 * b.height;
                        b.y = h - 0.5 * b.height;
                    }
                    if (h > b.bottom - 0.1 * b.height) {
                        h = h - 0.4 * b.height;
                        b.y = h - 0.5 * b.height;
                    }
                }
                this.bh.mt(b, false, true);
            }
        }
        cx() {
            if (this.ck && this.cy) {
                this.bb = this.ba();
            }
            if (this.j6 == null) {
                return false;
            }
            let a = this.j6.count;
            if (a != this.lz) {
                let b = new AxisRangeChangedEventArgs(0, 1, 1, this.lz, a);
                this.lz = a;
                this.hl(b);
                return true;
            }
            return false;
        }
        j9(a) {
            if (a == null) {
                return false;
            }
            let b = this.bd();
            if (b == null) {
                return false;
            }
            return b.synchronizeVertically;
        }
        hr(a) {
            super.hr(a);
            let b = this.bh != null ? this.bh.pg : Rect.empty;
            let c = this.js;
            let d = this.jn();
            let e = this.jm();
            let f = new ScalerParams(0, b, c, this.cc, d);
            let g = this.a4.ay();
            let h = this.a4.a1();
            let i = this.a4.az();
            let j = this.a4.a0();
            let k = this.a4.e();
            let l = this.a4.f();
            let m = this.a4.g();
            this.h0();
            this.g0(g);
            this.g0(h);
            this.g0(i);
            this.g0(j);
            this.c5.clear();
            this.c6.clear();
            this.kd.clear();
            this.a4.at(this, b, c);
            if (b.isEmpty || c.isEmpty) {
                this.bq.count = 0;
                this.bp.count = 0;
                this.bo.count = 0;
            }
            if (this.bq.count == 0 && this.bp.count == 0) {
                this.a4.y();
            }
            if (this.ay != null) {
                this.ay.registerAxis(this);
            }
            if (this.itemsSource == null || this.j6 == null || this.j6.count == 0) {
                this.bq.count = 0;
                this.bp.count = 0;
                this.bo.count = 0;
                this.a4.y();
                return;
            }
            if (!b.isEmpty && !c.isEmpty) {
                let n = this.eb(e.top, f);
                let o = this.eb(e.bottom, f);
                if (!this.cc) {
                    n = Math.ceil(n);
                    o = Math.floor(o);
                }
                else {
                    n = Math.floor(n);
                    o = Math.ceil(o);
                }
                let p = c.left;
                let q = 0;
                if (this.ai != null) {
                    let r = typeCast(NumericXAxis.$, this.ai);
                    if (r != null) {
                        let s = this.hv(p, q, b, c, d, c.left, c.right);
                        p = s.p0;
                        q = s.p1;
                    }
                }
                this.h1(g, p, c, k, true);
                this.a4.ao(q);
                let t = Math.min(n, o);
                let u = Math.max(n, o);
                let v = new LinearCategorySnapper(1, t, u, e.height, this.lv, this.categoryMode, this.el());
                let w = v.g;
                while (!this.lp() && w < 10 && this.ct(w, b, c, d)) {
                    w--;
                }
                if (v.g != w) {
                    v = new LinearCategorySnapper(1, t, u, e.height, w, this.categoryMode, this.el());
                }
                let x = Math.floor((t - 0) / v.g);
                let y = Math.ceil((u - 0) / v.g);
                if (!isNaN_(x) && !isNaN_(y)) {
                    let z = truncate(x);
                    let aa = truncate(y);
                    let ab = this.d8(0 + z * v.g, f);
                    let ac = Math.abs(this.d8(v.g, f) - this.d8(0, f));
                    this.av.br = this.d8(v.g, f);
                    for (let ad = z; ad <= aa; ++ad) {
                        let ae = this.d8(0 + (ad + 1) * v.g, f);
                        if (ab <= e.bottom) {
                            if (ad % 2 == 0) {
                                this.g9(h, ab, ae, c);
                            }
                            this.g8(i, ab, c, l, false);
                            this.kd.add(ab);
                        }
                        if (this.categoryMode != 0 && this.ks != 0 && this.cs) {
                            if (this.lw > 0 && this.lw < v.g) {
                                let af = ac * this.lw;
                                if (!this.cc) {
                                    let ag = ab;
                                    while (ag - af > ae) {
                                        ag -= af;
                                        if (Math.abs(ag - ae) < 0.0001) {
                                            break;
                                        }
                                        this.g8(j, ag, c, m, false);
                                    }
                                }
                                else {
                                    let ah = ab;
                                    while (ah + af < ae) {
                                        ah += af;
                                        if (Math.abs(ah - ae) < 0.0001) {
                                            break;
                                        }
                                        this.g8(j, ah, c, m, false);
                                    }
                                }
                                this.lt = this.lw;
                            }
                            else {
                                for (let ai = 0; ai < truncate(v.g); ai++) {
                                    for (let aj = 0; aj < this.ks; aj++) {
                                        let ak = this.getGroupCenter(aj, b, c, d);
                                        if (!this.cc) {
                                            ak = -ak;
                                        }
                                        let al = this.d8(ai + ad * v.g, f) + ak;
                                        this.g8(j, al, c, m, false);
                                    }
                                }
                                this.lt = 0.5;
                            }
                        }
                        let am = ab;
                        if (this.categoryMode != 0) {
                            let an = this.d8(ad * v.g + 1, f);
                            am = (ab + an) / 2;
                        }
                        if (am <= e.bottom && am >= e.top) {
                            let ao = 0;
                            if (v.g >= 1) {
                                ao = ad * truncate(Math.floor(v.g));
                            }
                            else {
                                if ((ad * v.g) * 2 % 2 == 0) {
                                    ao = truncate(Math.floor(ad * v.g));
                                }
                                else {
                                    ao = -1;
                                }
                            }
                            if (this.j6 != null && ao < this.j6.count && ao >= 0) {
                                let ap = this.j6.item(ao);
                                let aq = this.fi(ap);
                                if (!isNaN_(am) && !isInfinity(am) && aq != null) {
                                    if ((typeof aq === 'string') && Base.equalsStatic(aq, "")) {
                                    }
                                    else {
                                        this.c5.add1(aq);
                                        this.c6.add(new LabelPosition(am));
                                    }
                                }
                            }
                        }
                        ab = ae;
                    }
                }
                this.ls = v.g;
                if ((this.ay == null || this.ay.visibility == 0) && this.ai != null) {
                    if (this.ay != null && (this.ay.location == 6 || this.ay.location == 7)) {
                        this.bh.jq();
                    }
                }
                this.a4.au(this.c5, this.c6);
                this.ld();
            }
        }
        get_a1() {
            return 1;
        }
        get a1() {
            return this.get_a1();
        }
        get isVertical() {
            return this.cj;
        }
        j$c(a, b) {
            return this.eb.apply(this, arguments);
        }
        j$b(a, b) {
            return this.d8.apply(this, arguments);
        }
        j$d(a, b, c, d, e) {
            this.g4.apply(this, arguments);
        }
        j$e(a, b, c, d) {
            this.g5.apply(this, arguments);
        }
        j$f(a, b, c, d) {
            this.g6.apply(this, arguments);
        }
        get j$a() {
            return this.cc;
        }
    }
    CategoryYAxis.$t = /*@__PURE__*/ markType(CategoryYAxis, 'CategoryYAxis', CategoryAxisBase.$);
    CategoryYAxis.l7 = /*@__PURE__*/ DependencyProperty.i("Interval", Number_$type, CategoryYAxis.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        a.hk("Interval", b.oldValue, b.newValue);
        a.hq(false);
    }));
    CategoryYAxis.l8 = /*@__PURE__*/ DependencyProperty.i("MinorInterval", Number_$type, CategoryYAxis.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        (typeCast(CategoryYAxis.$, a)).hk("MinorInterval", b.oldValue, b.newValue);
        (typeCast(CategoryYAxis.$, a)).hq(false);
    }));
    return CategoryYAxis;
})();
/**
 * @hidden
 */
export let CategoryYAxisView = /*@__PURE__*/ (() => {
    class CategoryYAxisView extends CategoryAxisBaseView {
        constructor(a) {
            super(a);
            this.bg = null;
            this.bg = a;
        }
        ag() {
            super.ag();
            this.a.e0 = AxisDefaults.f;
        }
    }
    CategoryYAxisView.$t = /*@__PURE__*/ markType(CategoryYAxisView, 'CategoryYAxisView', CategoryAxisBaseView.$);
    return CategoryYAxisView;
})();
//# sourceMappingURL=CategoryYAxis_combined.js.map
