/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Series } from "./Series";
import { DependencyProperty } from "igniteui-react-core";
import { IEnumerable_$type, runOn, delegateCombine, delegateRemove, typeCast, markType, markDep } from "igniteui-react-core";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { Triangulator } from "igniteui-react-core";
import { TriangulationStatusEventArgs } from "igniteui-react-core";
import { FastItemsSource } from "igniteui-react-core";
import { SeriesViewer } from "./SeriesViewer";
import { Axis } from "./Axis";
import { AxisRange } from "./AxisRange";
import { PropertyMetadata } from "igniteui-react-core";
/**
 * @hidden
 */
export let ScatterTriangulationSeries = /*@__PURE__*/ (() => {
    class ScatterTriangulationSeries extends Series {
        constructor() {
            super(...arguments);
            this.pp = null;
            this.pq = null;
            this.py = false;
            this.pl = null;
            this.triangulationStatusChanged = null;
            this.p1 = null;
            this.pm = null;
            this.pn = null;
            this.po = null;
        }
        ke() {
            super.ke();
            this.pi = null;
            this.pj = null;
        }
        hk(a, b) {
            let c = this.ja(b);
            if (c == ScatterTriangulationSeries.$$p[6]) {
                return this.hl(a, b, this.qg);
            }
            if (c == ScatterTriangulationSeries.$$p[8]) {
                return this.hl(a, b, this.qk);
            }
            return super.hk(a, b);
        }
        get pv() {
            return this.pp;
        }
        set pv(a) {
            let b = this.pv != a;
            if (b) {
                let c = this.pv;
                this.pp = a;
                this.raisePropertyChanged("XColumn", c, this.pv);
            }
        }
        get pw() {
            return this.pq;
        }
        set pw(a) {
            let b = this.pw != a;
            if (b) {
                let c = this.pw;
                this.pq = a;
                this.raisePropertyChanged("YColumn", c, this.pw);
            }
        }
        l1(a) {
            let b = this.ch != null && this.px == null && this.p1 == null && this.pv != null && this.pw != null && this.pv.count >= 3 && this.pw.count >= 3 && !this.py;
            if (b) {
                this.qo();
                this.py = true;
            }
        }
        qo() {
            this.pl = new Triangulator(this.ch.count, this.pv, this.pw);
            let a = this.pl;
            a.triangulationStatusChanged = delegateCombine(a.triangulationStatusChanged, runOn(this, this.qp));
            this.pl.y();
        }
        qm() {
            if (this.pl == null) {
                return;
            }
            this.pl.r();
            let a = this.pl;
            a.triangulationStatusChanged = delegateRemove(a.triangulationStatusChanged, runOn(this, this.qp));
            this.pl = null;
        }
        qp(a, b) {
            if (this.triangulationStatusChanged != null) {
                this.triangulationStatusChanged(this, new TriangulationStatusEventArgs(b.currentStatus));
            }
            if (b.currentStatus >= 100) {
                if (this.pl == null) {
                    return;
                }
                let c = this.pl;
                c.triangulationStatusChanged = delegateRemove(c.triangulationStatusChanged, runOn(this, this.qp));
                this.p1 = this.pl.n();
                this.pl = null;
                let d = ((() => {
                    let $ret = new FastItemsSource();
                    $ret.e = this.p1;
                    return $ret;
                })());
                this.ps = this.pr(d, "v1");
                this.pt = this.pr(d, "v2");
                this.pu = this.pr(d, "v3");
                this.l0(false);
            }
        }
        pr(a, b) {
            if (b == null) {
                return a.registerColumnInt(null, null, false);
            }
            let c = null;
            let d = SeriesViewer.b1(b, this.coercionMethods);
            c = d.a;
            return a.registerColumnInt(b, c, this.expectFunctions);
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case "FastItemsSource":
                    let e = typeCast(IFastItemsSource_$type, c);
                    if (e != null) {
                        e.deregisterColumn(this.pv);
                        e.deregisterColumn(this.pw);
                        this.pv = null;
                        this.pw = null;
                    }
                    this.qn();
                    let f = typeCast(IFastItemsSource_$type, d);
                    if (f != null) {
                        this.pv = this.ce(this.qg);
                        this.pw = this.ce(this.qk);
                    }
                    this.l0(false);
                    break;
                case ScatterTriangulationSeries.$$p[6]:
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.pv);
                        this.pv = this.ce(this.qg);
                    }
                    this.qn();
                    this.l0(false);
                    this.k7();
                    break;
                case ScatterTriangulationSeries.$$p[8]:
                    if (this.ch != null) {
                        this.ch.deregisterColumn(this.pw);
                        this.pw = this.ce(this.qk);
                    }
                    this.qn();
                    this.l0(false);
                    this.k7();
                    break;
                case ScatterTriangulationSeries.$$p[5]:
                    if (c != null) {
                        (typeCast(Axis.$, c)).bx(this);
                    }
                    if (d != null) {
                        (typeCast(Axis.$, d)).cn(this);
                    }
                    if ((this.pi != null && !this.pi.cv()) || (d == null && c != null)) {
                        this.l0(false);
                    }
                    this.k7();
                    break;
                case ScatterTriangulationSeries.$$p[7]:
                    if (c != null) {
                        (typeCast(Axis.$, c)).bx(this);
                    }
                    if (d != null) {
                        (typeCast(Axis.$, d)).cn(this);
                    }
                    if ((this.pj != null && !this.pj.cv()) || (d == null && c != null)) {
                        this.l0(false);
                    }
                    this.k7();
                    break;
                case ScatterTriangulationSeries.$$p[1]:
                    if (this.trianglesSource != null) {
                        this.qm();
                        this.px = ((() => {
                            let $ret = new FastItemsSource();
                            $ret.e = this.trianglesSource;
                            return $ret;
                        })());
                    }
                    else {
                        this.px = null;
                    }
                    break;
                case ScatterTriangulationSeries.$$p[0]:
                    let g = typeCast(IFastItemsSource_$type, c);
                    if (g != null) {
                        g.deregisterColumn(this.ps);
                        g.deregisterColumn(this.pt);
                        g.deregisterColumn(this.pu);
                        this.ps = null;
                        this.pt = null;
                        this.pu = null;
                    }
                    let h = typeCast(IFastItemsSource_$type, d);
                    if (h != null) {
                        this.ps = this.pr(h, this.p8);
                        this.pt = this.pr(h, this.qa);
                        this.pu = this.pr(h, this.qc);
                    }
                    this.l0(false);
                    this.k7();
                    break;
                case ScatterTriangulationSeries.$$p[2]:
                    if (this.px != null) {
                        this.px.deregisterColumn(this.ps);
                        this.ps = this.pr(this.px, this.p8);
                    }
                    this.l0(false);
                    this.k7();
                    break;
                case ScatterTriangulationSeries.$$p[3]:
                    if (this.px != null) {
                        this.px.deregisterColumn(this.pt);
                        this.pt = this.pr(this.px, this.qa);
                    }
                    this.l0(false);
                    this.k7();
                    break;
                case ScatterTriangulationSeries.$$p[4]:
                    if (this.px != null) {
                        this.px.deregisterColumn(this.pu);
                        this.pu = this.pr(this.px, this.qc);
                    }
                    this.l0(false);
                    this.k7();
                    break;
                case "XColumn":
                    if (this.pi != null) {
                        this.pi.cv();
                    }
                    break;
                case "YColumn":
                    if (this.pj != null) {
                        this.pj.cv();
                    }
                    break;
            }
        }
        p0(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        pz(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        e3(a, b, c) {
            return super.e3(a, b, c) && this.ch != null && this.pi != null && this.pj != null && this.pi.bh != null && this.pj.bh != null && a.width > 0 && a.height > 0 && this.ps != null && this.ps.count > 0 && this.pt != null && this.pt.count > 0 && this.pu != null && this.pu.count > 0 && this.pv != null && this.pv.count > 0 && this.pw != null && this.pw.count > 0;
        }
        qn() {
            if (this.trianglesSource == null) {
                this.p1 = null;
                this.ps = null;
                this.pt = null;
                this.pu = null;
                this.py = false;
            }
        }
        ky() {
            super.ky();
            if (this.pi != null) {
                this.pi.hp();
            }
            if (this.pj != null) {
                this.pj.hp();
            }
        }
        kk(a, b, c, d) {
            super.kk(a, b, c, d);
            this.qn();
            this.l0(false);
        }
        ap(a) {
            if (a != null && a == this.pi && this.pv != null) {
                return new AxisRange(this.pv.minimum, this.pv.maximum);
            }
            if (a != null && a == this.pj && this.pw != null) {
                return new AxisRange(this.pw.minimum, this.pw.maximum);
            }
            return null;
        }
        mn(a, b) {
            this.l0(false);
        }
        mm(a, b) {
            this.l0(false);
        }
        get ps() {
            return this.pm;
        }
        set ps(a) {
            let b = this.ps != a;
            if (b) {
                let c = this.ps;
                this.pm = a;
                this.raisePropertyChanged("TriangleVertexColumn1", c, this.ps);
            }
        }
        get pt() {
            return this.pn;
        }
        set pt(a) {
            let b = this.pt != a;
            if (b) {
                let c = this.pt;
                this.pn = a;
                this.raisePropertyChanged("TriangleVertexColumn2", c, this.pt);
            }
        }
        get pu() {
            return this.po;
        }
        set pu(a) {
            let b = this.pu != a;
            if (b) {
                let c = this.pu;
                this.po = a;
                this.raisePropertyChanged("TriangleVertexColumn3", c, this.pu);
            }
        }
        get_d7() {
            return true;
        }
        get_dw() {
            return true;
        }
    }
    ScatterTriangulationSeries.$t = /*@__PURE__*/ markType(ScatterTriangulationSeries, 'ScatterTriangulationSeries', Series.$);
    ScatterTriangulationSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ScatterTriangulationSeries, 'raisePropertyChanged', ['FastTrianglesSource:px:qq', [IFastItemsSource_$type, null], 'TrianglesSource::qr', [IEnumerable_$type, null], 'TriangleVertexMemberPath1:p8:qs', [2, null], 'TriangleVertexMemberPath2:qa:qt', [2, null], 'TriangleVertexMemberPath3:qc:qu', [2, null], 'XAxis:pi:qv', [NumericXAxis.$, null], 'XMemberPath:qg:qw', [2, null], 'YAxis:pj:qx', [NumericYAxis.$, null], 'YMemberPath:qk:qy', [2, null]]);
    return ScatterTriangulationSeries;
})();
//# sourceMappingURL=ScatterTriangulationSeries.js.map
