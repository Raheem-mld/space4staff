/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnchoredRadialSeries } from "./AnchoredRadialSeries";
import { DependencyProperty } from "igniteui-react-core";
import { Point_$type, runOn, markType, markDep, fromEnum } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { PathGeometry } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { PolyLineSegment } from "igniteui-react-core";
import { ViewportUtils } from "./ViewportUtils";
import { PropertyMetadata } from "igniteui-react-core";
import { AnchoredRadialSeriesView } from "./AnchoredRadialSeriesView";
import { Defaults } from "./Defaults";
/**
 * @hidden
 */
export let RadialColumnSeries = /*@__PURE__*/ (() => {
    class RadialColumnSeries extends AnchoredRadialSeries {
        constructor() {
            super();
            this.ab = RadialColumnSeries.$;
        }
        get_db() {
            return true;
        }
        get_dw() {
            return true;
        }
        bu() {
            return new RadialColumnSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.tf = a;
        }
        ac() {
            super.ac();
            this.l0(false);
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case RadialColumnSeries.$$p[0]:
                case RadialColumnSeries.$$p[1]:
                    this.lj();
                    break;
            }
        }
        preferredCategoryMode(a) {
            return a != null && a == this.qz ? 2 : 0;
        }
        kh(a, b) {
            super.kh(a, b);
            let c = b;
            if (a) {
                c.c1.count = 0;
            }
        }
        get_cy() {
            return true;
        }
        f1() {
            return this.qz.ki(this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        r4(a, b) {
            super.r4(a, b);
            let c = a.f;
            let d = b.bv;
            let e = b.bu;
            let f = this.getEffectiveViewport1(b);
            let g = this.o7(b);
            let h = this.q6.j7(e, d, f, g);
            let i = b;
            let j = this.q6;
            let k = Math.max(0, 0.5 * j.l9);
            k = Math.max(k, h.minLength * 0.9);
            let l = ViewportUtils.d(k, d, e);
            let m = this.qz.ki(d, e, f);
            let n = Math.max(0.1 * this.q6.ma, k);
            let o = this.q7.d(0, n, d, e);
            let p = this.q7.e(0, n, d, e);
            let q = this.q7.d(m, n, d, e);
            let r = this.q7.e(m, n, d, e);
            let s = Math.sqrt((o - q) * (o - q) + (p - r) * (p - r));
            let t = { $type: Point_$type, x: ViewportUtils.c(0.5, d, e), y: ViewportUtils.f(0.5, d, e) };
            let u = this.si.count;
            this.rd.a0(this, this.rp(), runOn(this, this.qw), this.rr(b), this.rs(b));
            this.rd.r = this.tg;
            this.rd.s = this.th;
            this.rd.k = this.tg;
            this.rd.l = this.th;
            let v = false;
            let w = this.rd.b;
            if (w != null) {
                v = true;
            }
            let x = this.qz;
            let y = new ScalerParams(1, b.bv, b.bu, x.cc);
            y.c = this.getEffectiveViewport();
            for (let z = 0; z < c.count; ++z) {
                let aa = Math.min(a.f._inner[z][2], h.maxLength * 1.1);
                let ab = this.q7.d(a.f._inner[z][0], aa, d, e);
                let ac = this.q7.e(a.f._inner[z][0], aa, d, e);
                let ad = Math.sqrt((ab - t.x) * (ab - t.x) + (ac - t.y) * (ac - t.y));
                let ae = ad;
                let af = l;
                if (v) {
                    this.sz(c, z, u, x, y, b.q);
                }
                let ag = this.rd.k;
                let ah = this.rd.l;
                let ai = a.f._inner[z][0] - (Math.PI / 2);
                let aj = i.c1.item(z);
                let ak = 0 - (s / 2);
                let al = (s / 2);
                let am = Math.max(af, ae);
                let an = Math.min(af, ae);
                let ao = Math.cos(ai);
                let ap = Math.sin(ai);
                let aq = { $type: Point_$type, x: t.x + (ak * ao - am * ap), y: t.y + (ak * ap + am * ao) };
                let ar = { $type: Point_$type, x: t.x + (al * ao - am * ap), y: t.y + (al * ap + am * ao) };
                let as = { $type: Point_$type, x: t.x + (al * ao - an * ap), y: t.y + (al * ap + an * ao) };
                let at = { $type: Point_$type, x: t.x + (ak * ao - an * ap), y: t.y + (ak * ap + an * ao) };
                let au = new PathGeometry();
                let av = new PathFigure();
                av._startPoint = aq;
                av._isClosed = true;
                let aw = new PolyLineSegment();
                aw._points.add(ar);
                aw._points.add(as);
                aw._points.add(at);
                av._segments.add(aw);
                au.c.add(av);
                aj.ak = au;
                this.rd.ad(aj, false, false, false, false);
            }
            i.c1.count = c.count;
            this.tf.c6();
        }
    }
    RadialColumnSeries.$t = /*@__PURE__*/ markType(RadialColumnSeries, 'RadialColumnSeries', AnchoredRadialSeries.$);
    RadialColumnSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, RadialColumnSeries, 'raisePropertyChanged', ['RadiusX:tg:tk', [1, 0], 'RadiusY:th:tl', [1, 0]]);
    return RadialColumnSeries;
})();
/**
 * @hidden
 */
export let RadialColumnSeriesView = /*@__PURE__*/ (() => {
    class RadialColumnSeriesView extends AnchoredRadialSeriesView {
        constructor(a) {
            super(a);
            this.c0 = null;
            this.c1 = null;
            this.c2 = null;
            this.c8 = new Path();
            this.c0 = a;
            this.c1 = ((() => {
                let $ret = new Pool$1(Path.$);
                $ret.create = runOn(this, this.c9);
                $ret.activate = runOn(this, this.c3);
                $ret.disactivate = runOn(this, this.c5);
                $ret.destroy = runOn(this, this.c4);
                return $ret;
            })());
        }
        as() {
            super.as();
            this.c2 = new List$1(Path.$, 0);
            if (!this.q) {
                this.cr.pr = Defaults.c;
                this.cr.gh = Defaults.h;
                this.cr.gm = Defaults.i;
            }
        }
        c9() {
            let a = new Path();
            this.c2.add(a);
            a._visibility = 1;
            return a;
        }
        c3(a) {
            a._visibility = 0;
        }
        c5(a) {
            a._visibility = 1;
        }
        c4(a) {
            this.c2.remove(a);
        }
        c7(a, b, c, d, e, f) {
            this.aq();
        }
        be(a, b) {
            super.be(a, b);
            let c = a;
        }
        bf(a, b) {
            super.bf(a, b);
            let c = a;
        }
        ac(a) {
            return this.c2._inner[a];
        }
        ab(a) {
            let b = this.c2._inner[a];
            this.c8._visibility = b._visibility;
            this.c8.ak = b.ak;
            let c = this.bp(a);
            this.c8._fill = c;
            this.c8._stroke = c;
            this.c8.ac = this.e.fl + 3;
            return this.c8;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                for (let c = 0; c < this.c2.count; c++) {
                    let d = this.aa(c, b);
                    this.bd(d, c, b);
                    a.s(d);
                }
            }
        }
        al(a) {
            super.al(a);
            let b = 0;
            for (let c of fromEnum(this.c1.a)) {
                this.e.a6.exportPathData(a, c, "column" + b, ["Main", "Fill"]);
                b++;
            }
        }
        c6() {
            this.aq();
        }
    }
    RadialColumnSeriesView.$t = /*@__PURE__*/ markType(RadialColumnSeriesView, 'RadialColumnSeriesView', AnchoredRadialSeriesView.$);
    return RadialColumnSeriesView;
})();
//# sourceMappingURL=RadialColumnSeries_combined.js.map
