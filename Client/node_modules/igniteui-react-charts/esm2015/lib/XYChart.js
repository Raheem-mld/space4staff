/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DomainChart } from "./DomainChart";
import { fromEnum, enumGetBox, markType } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { VerticalAlignment_$type } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { YAxisLabelLocation_$type } from "./YAxisLabelLocation";
import { XAxisLabelLocation_$type } from "./XAxisLabelLocation";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { AxisDefaults } from "./AxisDefaults";
import { TitleSettings } from "./TitleSettings";
import { ScalerParams } from "./ScalerParams";
import { DeviceUtils } from "igniteui-react-core";
/**
 * @hidden
 */
export let XYChart = /*@__PURE__*/ (() => {
    class XYChart extends DomainChart {
        constructor() {
            super(...arguments);
            this.l0 = null;
            this.l1 = null;
            this.mh = 0;
            this.mj = 5;
            this.mi = 0;
            this.mg = 5;
            this.my = 5;
            this.m0 = 0;
            this.mz = 5;
            this.mx = 0;
            this.rr = null;
            this.ry = null;
            this.rp = null;
            this.rq = null;
            this.ms = 0;
            this.m9 = 0;
            this.mr = NaN;
            this.m8 = NaN;
            this.mu = NaN;
            this.nb = NaN;
            this.mt = NaN;
            this.na = NaN;
            this.mq = NaN;
            this.m7 = NaN;
            this.rx = null;
            this.r4 = null;
            this.oj = null;
            this.on = null;
            this.ol = null;
            this.op = null;
            this.oe = null;
            this.of = null;
            this.rs = null;
            this.rz = null;
            this.mk = DeviceUtils.g(1);
            this.m1 = DeviceUtils.g(1);
            this.ml = DeviceUtils.g(1);
            this.m2 = DeviceUtils.g(1);
            this.ru = null;
            this.r1 = null;
            this.rv = null;
            this.r2 = null;
            this.mm = DeviceUtils.g(1);
            this.m3 = DeviceUtils.g(1);
            this.mn = DeviceUtils.g(8);
            this.m4 = 0;
            this.rw = null;
            this.r3 = null;
            this.mo = DeviceUtils.g(1);
            this.m5 = DeviceUtils.g(1);
            this.ok = null;
            this.oo = null;
            this.rt = null;
            this.r0 = null;
            this.mf = 0;
            this.mw = 0;
            this.me = NaN;
            this.mv = NaN;
            this.mp = 0;
            this.m6 = -90;
            this.ma = false;
            this.mb = false;
            this.rk = 1;
            this.sn = 1;
            this.rj = 1;
            this.rl = 2;
            this.sl = 0;
            this.sm = 1;
            this.sr = 0;
            this.ss = 0;
            this.l8 = 4;
            this.l6 = 4;
            this.oi = null;
            this.lu = null;
            this.om = null;
            this.lv = null;
        }
        provideContainer(a) {
            if (a != null) {
                let b = this.ly();
                let c = this.lz();
                if (b != null) {
                    b.provideRenderer(a);
                }
                if (c != null) {
                    c.provideRenderer(a);
                }
            }
            super.provideContainer(a);
        }
        jl() {
            super.jl();
            let a = this.ly();
            let b = this.lz();
            if (a != null && a.ay != null) {
                this.r7 = a.ay.textColor;
            }
            if (b != null && b.ay != null) {
                this.se = b.ay.textColor;
            }
            this.sc = AxisDefaults.j;
            this.sj = AxisDefaults.j;
            this.r8 = AxisDefaults.h;
            this.sf = AxisDefaults.h;
            this.sb = AxisDefaults.g;
            this.si = AxisDefaults.g;
        }
        j7(a, b, c) {
            super.j7(a, b, c);
            switch (a) {
                case "XAxisLabelLeftMargin":
                    this.rb((d) => d.leftMargin = this.nj);
                    break;
                case "XAxisLabelTopMargin":
                    this.rb((d) => d.topMargin = this.nl);
                    break;
                case "XAxisLabelRightMargin":
                    this.rb((d) => d.rightMargin = this.nk);
                    break;
                case "XAxisLabelBottomMargin":
                    this.rb((d) => d.bottomMargin = this.ni);
                    break;
                case "YAxisLabelLeftMargin":
                    this.rg((d) => d.leftMargin = this.n0);
                    break;
                case "YAxisLabelTopMargin":
                    this.rg((d) => d.topMargin = this.n2);
                    break;
                case "YAxisLabelRightMargin":
                    this.rg((d) => d.rightMargin = this.n1);
                    break;
                case "YAxisLabelBottomMargin":
                    this.rg((d) => d.bottomMargin = this.nz);
                    break;
                case "ActualItemsSource":
                case "ShouldDisplayMockData":
                case "ShouldUseSkeletonStyleForMockData":
                    this.r5 = this.ln(this.r7);
                    this.r6 = this.ln(this.se);
                    break;
                case "XAxisLabelTextColor":
                    this.r5 = this.ln(this.r7);
                    break;
                case "YAxisLabelTextColor":
                    this.r6 = this.ln(this.se);
                    break;
                case "ActualXAxisLabelTextColor":
                    this.rb((d) => d.textColor = this.r5);
                    break;
                case "ActualYAxisLabelTextColor":
                    this.rg((d) => d.textColor = this.r6);
                    break;
                case "XAxisTitleMargin":
                    this.rd((d) => d.margin = this.nu);
                    break;
                case "YAxisTitleMargin":
                    this.ri((d) => d.margin = this.ob);
                    break;
                case "XAxisTitleLeftMargin":
                    this.rd((d) => d.leftMargin = this.nt);
                    break;
                case "YAxisTitleLeftMargin":
                    this.ri((d) => d.leftMargin = this.oa);
                    break;
                case "XAxisTitleTopMargin":
                    this.rd((d) => d.topMargin = this.nw);
                    break;
                case "YAxisTitleTopMargin":
                    this.ri((d) => d.topMargin = this.od);
                    break;
                case "XAxisTitleRightMargin":
                    this.rd((d) => d.rightMargin = this.nv);
                    break;
                case "YAxisTitleRightMargin":
                    this.ri((d) => d.rightMargin = this.oc);
                    break;
                case "XAxisTitleBottomMargin":
                    this.rd((d) => d.bottomMargin = this.ns);
                    break;
                case "YAxisTitleBottomMargin":
                    this.ri((d) => d.bottomMargin = this.n9);
                    break;
                case "XAxisTitleTextColor":
                    this.rd((d) => d.textColor = this.sd);
                    break;
                case "YAxisTitleTextColor":
                    this.ri((d) => d.textColor = this.sk);
                    break;
                case "XAxisFormatLabel":
                    this.q9((d) => d.at = this.l2);
                    break;
                case "YAxisFormatLabel":
                    this.re((d) => d.at = this.l3);
                    break;
            }
        }
        get l2() {
            return this.l0;
        }
        set l2(a) {
            let b = this.l2;
            if (a != b) {
                this.l0 = a;
                this.j6("XAxisFormatLabel", b, this.l2);
            }
        }
        get l3() {
            return this.l1;
        }
        set l3(a) {
            let b = this.l3;
            if (a != b) {
                this.l1 = a;
                this.j6("YAxisFormatLabel", b, this.l3);
            }
        }
        get nj() {
            return this.mh;
        }
        set nj(a) {
            let b = this.nj;
            if (a != b) {
                this.mh = a;
                this.j6("XAxisLabelLeftMargin", b, this.nj);
            }
        }
        get nl() {
            return this.mj;
        }
        set nl(a) {
            let b = this.nl;
            if (a != b) {
                this.mj = a;
                this.j6("XAxisLabelTopMargin", b, this.nl);
            }
        }
        get nk() {
            return this.mi;
        }
        set nk(a) {
            let b = this.nk;
            if (a != b) {
                this.mi = a;
                this.j6("XAxisLabelRightMargin", b, this.nk);
            }
        }
        get ni() {
            return this.mg;
        }
        set ni(a) {
            let b = this.ni;
            if (a != b) {
                this.mg = a;
                this.j6("XAxisLabelBottomMargin", b, this.ni);
            }
        }
        get n0() {
            return this.my;
        }
        set n0(a) {
            let b = this.n0;
            if (a != b) {
                this.my = a;
                this.j6("YAxisLabelLeftMargin", b, this.n0);
            }
        }
        get n2() {
            return this.m0;
        }
        set n2(a) {
            let b = this.n2;
            if (a != b) {
                this.m0 = a;
                this.j6("YAxisLabelTopMargin", b, this.n2);
            }
        }
        get n1() {
            return this.mz;
        }
        set n1(a) {
            let b = this.n1;
            if (a != b) {
                this.mz = a;
                this.j6("YAxisLabelRightMargin", b, this.n1);
            }
        }
        get nz() {
            return this.mx;
        }
        set nz(a) {
            let b = this.nz;
            if (a != b) {
                this.mx = a;
                this.j6("YAxisLabelBottomMargin", b, this.nz);
            }
        }
        get r7() {
            return this.rr;
        }
        set r7(a) {
            let b = this.r7;
            if (a != b) {
                this.rr = a;
                this.j6("XAxisLabelTextColor", b, this.r7);
            }
        }
        get se() {
            return this.ry;
        }
        set se(a) {
            let b = this.se;
            if (a != b) {
                this.ry = a;
                this.j6("YAxisLabelTextColor", b, this.se);
            }
        }
        get r5() {
            return this.rp;
        }
        set r5(a) {
            let b = this.rp;
            if (a != b) {
                this.rp = a;
                this.j6("ActualXAxisLabelTextColor", b, this.r5);
            }
        }
        get r6() {
            return this.rq;
        }
        set r6(a) {
            let b = this.rq;
            if (a != b) {
                this.rq = a;
                this.j6("ActualYAxisLabelTextColor", b, this.r6);
            }
        }
        get nu() {
            return this.ms;
        }
        set nu(a) {
            let b = this.nu;
            if (a != b) {
                this.ms = a;
                this.j6("XAxisTitleMargin", b, this.nu);
            }
        }
        get ob() {
            return this.m9;
        }
        set ob(a) {
            let b = this.ob;
            if (a != b) {
                this.m9 = a;
                this.j6("YAxisTitleMargin", b, this.ob);
            }
        }
        get nt() {
            return this.mr;
        }
        set nt(a) {
            let b = this.nt;
            if (a != b) {
                this.mr = a;
                this.j6("XAxisTitleLeftMargin", b, this.nt);
            }
        }
        get oa() {
            return this.m8;
        }
        set oa(a) {
            let b = this.oa;
            if (a != b) {
                this.m8 = a;
                this.j6("YAxisTitleLeftMargin", b, this.oa);
            }
        }
        get nw() {
            return this.mu;
        }
        set nw(a) {
            let b = this.nw;
            if (a != b) {
                this.mu = a;
                this.j6("XAxisTitleTopMargin", b, this.nw);
            }
        }
        get od() {
            return this.nb;
        }
        set od(a) {
            let b = this.od;
            if (a != b) {
                this.nb = a;
                this.j6("YAxisTitleTopMargin", b, this.od);
            }
        }
        get nv() {
            return this.mt;
        }
        set nv(a) {
            let b = this.nv;
            if (a != b) {
                this.mt = a;
                this.j6("XAxisTitleRightMargin", b, this.nv);
            }
        }
        get oc() {
            return this.na;
        }
        set oc(a) {
            let b = this.oc;
            if (a != b) {
                this.na = a;
                this.j6("YAxisTitleRightMargin", b, this.oc);
            }
        }
        get ns() {
            return this.mq;
        }
        set ns(a) {
            let b = this.ns;
            if (a != b) {
                this.mq = a;
                this.j6("XAxisTitleBottomMargin", b, this.ns);
            }
        }
        get n9() {
            return this.m7;
        }
        set n9(a) {
            let b = this.n9;
            if (a != b) {
                this.m7 = a;
                this.j6("YAxisTitleBottomMargin", b, this.n9);
            }
        }
        get sd() {
            return this.rx;
        }
        set sd(a) {
            let b = this.sd;
            if (a != b) {
                this.rx = a;
                this.j6("XAxisTitleTextColor", b, this.sd);
            }
        }
        get sk() {
            return this.r4;
        }
        set sk(a) {
            let b = this.sk;
            if (a != b) {
                this.r4 = a;
                this.j6("YAxisTitleTextColor", b, this.sk);
            }
        }
        j8(a, b, c) {
            super.j8(a, b, c);
            switch (a) {
                case "XAxisLabelTextStyle":
                    this.rb((d) => d.textStyle = this.o7);
                    break;
                case "YAxisLabelTextStyle":
                    this.rg((d) => d.textStyle = this.qc);
                    break;
                case "XAxisTitleTextStyle":
                    this.rd((d) => d.textStyle = this.pv);
                    break;
                case "YAxisTitleTextStyle":
                    this.ri((d) => d.textStyle = this.q0);
                    break;
            }
        }
        get o7() {
            return this.oj;
        }
        set o7(a) {
            let b = this.o7;
            if (a != b) {
                this.oj = a;
                this.j6("XAxisLabelTextStyle", b, this.o7);
            }
        }
        get qc() {
            return this.on;
        }
        set qc(a) {
            let b = this.qc;
            if (a != b) {
                this.on = a;
                this.j6("YAxisLabelTextStyle", b, this.qc);
            }
        }
        get pv() {
            return this.ol;
        }
        set pv(a) {
            let b = this.pv;
            if (a != b) {
                this.ol = a;
                this.j6("XAxisTitleTextStyle", b, this.pv);
            }
        }
        get q0() {
            return this.op;
        }
        set q0(a) {
            let b = this.q0;
            if (a != b) {
                this.op = a;
                this.j6("YAxisTitleTextStyle", b, this.q0);
            }
        }
        q6(a) {
            this.q3(a, (b) => b.leftMargin = this.nj);
            this.q3(a, (b) => b.topMargin = this.nl);
            this.q3(a, (b) => b.rightMargin = this.nk);
            this.q3(a, (b) => b.bottomMargin = this.ni);
            this.q3(a, (b) => b.textColor = this.r5);
            this.q4(a, (b) => b.textColor = this.sd);
            this.q4(a, (b) => b.leftMargin = this.nt);
            this.q4(a, (b) => b.topMargin = this.nw);
            this.q4(a, (b) => b.rightMargin = this.nv);
            this.q4(a, (b) => b.bottomMargin = this.ns);
            this.q3(a, (b) => b.textStyle = this.o7);
            this.q4(a, (b) => b.textStyle = this.pv);
        }
        q8(a) {
            this.q3(a, (b) => b.leftMargin = this.n0);
            this.q3(a, (b) => b.topMargin = this.n2);
            this.q3(a, (b) => b.rightMargin = this.n1);
            this.q3(a, (b) => b.bottomMargin = this.nz);
            this.q3(a, (b) => b.textColor = this.r6);
            this.q4(a, (b) => b.textColor = this.sk);
            this.q4(a, (b) => b.leftMargin = this.oa);
            this.q4(a, (b) => b.topMargin = this.od);
            this.q4(a, (b) => b.rightMargin = this.oc);
            this.q4(a, (b) => b.bottomMargin = this.n9);
            this.q3(a, (b) => b.textStyle = this.qc);
            this.q4(a, (b) => b.textStyle = this.q0);
        }
        ko(a) {
            let b = this.ab(a);
            let c = this.bb(a, b);
            if (c == null) {
                return;
            }
            c.itemsSource = a.data;
            c.name = this.gz(a);
            c.hp = this.g0(a, b);
            this.dataChart.series.add(c);
        }
        q9(a) {
            this.ra(a, null);
        }
        ra(a, b) {
            a(this.ly());
        }
        rf(a, b) {
            a(this.lz());
        }
        re(a) {
            this.rf(a, true);
        }
        rd(a) {
            this.q4(this.ly(), a);
        }
        ri(a) {
            this.q4(this.lz(), a);
        }
        rg(a) {
            this.q3(this.lz(), a);
        }
        rb(a) {
            this.q3(this.ly(), a);
        }
        nc(a) {
            let b = this.ly();
            return b.d8(a, new ScalerParams(1, this.lt, this.ls, b.cc));
        }
        ne(a) {
            let b = this.ly();
            return b.eb(a, new ScalerParams(1, this.lt, this.ls, b.cc));
        }
        nd(a) {
            let b = this.lz();
            return b.d8(a, new ScalerParams(1, this.lt, this.ls, b.cc));
        }
        nf(a) {
            let b = this.lz();
            return b.eb(a, new ScalerParams(1, this.lt, this.ls, b.cc));
        }
        kl(a) {
            super.kl(a);
            if (a == null) {
                return;
            }
            if (a.axes != null) {
                let b = this.ly();
                let c = this.lz();
                if (a.axes.contains(b)) {
                    a.axes.remove(b);
                }
                if (a.axes.contains(c)) {
                    a.axes.remove(c);
                }
            }
        }
        static os(a, b) {
            for (let c of fromEnum(b)) {
                let d = c.findMatchingHint(16);
                if (d != null) {
                    let e = d.path;
                    return e;
                }
            }
            return null;
        }
        jg(a) {
            super.jg(a);
            if (a == this.dataChart) {
                this.dataChart.axes.add(this.ly());
                this.dataChart.axes.add(this.lz());
            }
        }
        q5(a) {
            if (a != null && this.fd != null && a.e4 == null) {
                a.provideRenderer(this.fd);
            }
            a.jb = this.r8;
            a.ef = this.nm;
            a.jc = this.r9;
            a.ei = this.nn;
            a.je = this.sb;
            a.ez = this.no;
            a.jd = this.sa;
            a.e0 = this.np;
            a.jf = this.sc;
            a.e1 = this.nq;
            a.cy = true;
            let b = a == this.ly();
            if (b) {
                a.gp = this.pm;
            }
            a.fj = this.og;
            a.fz = this.oy;
            a.ag = this.lw;
            this.q3(a, (c) => c.angle = this.nh);
            this.q3(a, (c) => {
                if (c.extent != this.ng) {
                    c.extent = this.ng;
                }
            });
            this.q3(a, (c) => c.horizontalAlignment = this.rm);
            this.q3(a, (c) => c.verticalAlignment = this.so);
            this.q3(a, (c) => c.visibility = this.st);
            this.q3(a, (c) => c.location = this.l4(this.l7));
            this.q4(a, (c) => c.horizontalAlignment = this.rn);
            this.q4(a, (c) => c.angle = this.nr);
            this.q6(a);
        }
        q7(a) {
            if (a == null) {
                return;
            }
            if (this.fd != null && a.e4 == null) {
                a.provideRenderer(this.fd);
            }
            this.q3(a, (b) => b.angle = this.ny);
            this.q3(a, (b) => {
                if (b.extent != this.nx) {
                    b.extent = this.nx;
                }
            });
            this.q3(a, (b) => b.horizontalAlignment = this.ro);
            this.q3(a, (b) => b.verticalAlignment = this.sp);
            this.q3(a, (b) => b.visibility = this.su);
            this.q3(a, (b) => b.location = this.l5(this.l9));
            this.q4(a, (b) => b.verticalAlignment = this.sq);
            this.q4(a, (b) => b.angle = this.n8);
            a.jb = this.sf;
            a.ef = this.n3;
            a.jc = this.sg;
            a.ei = this.n4;
            a.je = this.si;
            a.ez = this.n5;
            a.jd = this.sh;
            a.e0 = this.n6;
            a.jf = this.sj;
            a.e1 = this.n7;
            let b = a == this.lz();
            if (b) {
                a.gp = this.qr;
            }
            a.fz = this.p3;
            a.ag = this.lx;
            this.q8(a);
        }
        jd() {
            super.jd();
            this.q5(this.ly());
            this.q7(this.lz());
        }
        q3(a, b) {
            if (a == null) {
                return;
            }
            if (a.ay == null) {
                a.ay = new AxisLabelSettings();
                a.ay.angle = a.dw();
                a.ay.bottomMargin = a.dx();
                a.ay.leftMargin = a.dy();
                a.ay.rightMargin = a.dz();
                a.ay.topMargin = a.d0();
                a.ay.horizontalAlignment = a.i6();
                a.ay.location = a.az();
                a.ay.verticalAlignment = a.jz();
            }
            b(a.ay);
        }
        q4(a, b) {
            if (a == null) {
                return;
            }
            if (a.be == null) {
                a.be = new TitleSettings();
                a.be.bottomMargin = a.d2();
                a.be.leftMargin = a.d3();
                a.be.rightMargin = a.d4();
                a.be.topMargin = a.d5();
                a.be.location = a.a0();
                a.be.angle = a.d1();
                a.be.horizontalAlignment = a.i7();
                a.be.verticalAlignment = a.j0();
            }
            b(a.be);
        }
        j6(a, b, c) {
            super.j6(a, b, c);
            switch (a) {
                case "XAxisLabelAngle":
                    this.rb((d) => d.angle = this.nh);
                    break;
                case "YAxisLabelAngle":
                    this.rg((d) => d.angle = this.ny);
                    break;
                case "XAxisLabelHorizontalAlignment":
                    this.rb((d) => d.horizontalAlignment = this.rm);
                    break;
                case "YAxisLabelHorizontalAlignment":
                    this.rg((d) => d.horizontalAlignment = this.ro);
                    break;
                case "XAxisLabelVerticalAlignment":
                    this.rb((d) => d.verticalAlignment = this.so);
                    break;
                case "YAxisLabelVerticalAlignment":
                    this.rg((d) => d.verticalAlignment = this.sp);
                    break;
                case "XAxisLabelVisibility":
                    this.rb((d) => d.visibility = this.st);
                    break;
                case "YAxisLabelVisibility":
                    this.rg((d) => d.visibility = this.su);
                    break;
                case "XAxisLabel":
                    this.q9((d) => d.fj = this.og);
                    break;
                case "YAxisLabel":
                    this.re((d) => d.fj = this.oh);
                    break;
                case "XAxisLabelFormat":
                    this.q9((d) => d.fz = this.oy);
                    break;
                case "XAxisLabelFormatSpecifiers":
                    this.q9((d) => d.ag = this.lw);
                    break;
                case "YAxisLabelFormat":
                    this.re((d) => d.fz = this.p3);
                    break;
                case "YAxisLabelFormatSpecifiers":
                    this.re((d) => d.ag = this.lx);
                    break;
                case "XAxisTitleAngle":
                    this.rd((d) => d.angle = this.nr);
                    break;
                case "YAxisTitleAngle":
                    this.ri((d) => d.angle = this.n8);
                    break;
                case "XAxisTitleAlignment":
                    this.rd((d) => d.horizontalAlignment = this.rn);
                    break;
                case "YAxisTitleAlignment":
                    this.ri((d) => d.verticalAlignment = this.sq);
                    break;
                case "XAxisTitle":
                    this.q9((d) => d.gp = this.pm);
                    break;
                case "YAxisTitle":
                    this.rf((d) => d.gp = this.qr, false);
                    break;
                case "XAxisMajorStroke":
                    this.ra((d) => d.jb = this.r8, a);
                    break;
                case "YAxisMajorStroke":
                    this.re((d) => d.jb = this.sf);
                    break;
                case "XAxisMajorStrokeThickness":
                    this.ra((d) => d.ef = this.nm, a);
                    break;
                case "YAxisMajorStrokeThickness":
                    this.re((d) => d.ef = this.n3);
                    break;
                case "XAxisMinorStroke":
                    this.q9((d) => d.jc = this.r9);
                    break;
                case "YAxisMinorStroke":
                    this.re((d) => d.jc = this.sg);
                    break;
                case "XAxisMinorStrokeThickness":
                    this.q9((d) => d.ei = this.nn);
                    break;
                case "YAxisMinorStrokeThickness":
                    this.re((d) => d.ei = this.n4);
                    break;
                case "XAxisTickLength":
                    this.q9((d) => d.e0 = this.np);
                    break;
                case "YAxisTickLength":
                    this.re((d) => d.e0 = this.n6);
                    break;
                case "XAxisTickStroke":
                    this.q9((d) => d.jf = this.sc);
                    break;
                case "YAxisTickStroke":
                    this.re((d) => d.jf = this.sj);
                    break;
                case "XAxisTickStrokeThickness":
                    this.q9((d) => d.e1 = this.nq);
                    break;
                case "YAxisTickStrokeThickness":
                    this.re((d) => d.e1 = this.n7);
                    break;
                case "XAxisStroke":
                    this.q9((d) => d.je = this.sb);
                    break;
                case "YAxisStroke":
                    this.re((d) => d.je = this.si);
                    break;
                case "XAxisStrokeThickness":
                    this.q9((d) => d.ez = this.no);
                    break;
                case "YAxisStrokeThickness":
                    this.re((d) => d.ez = this.n5);
                    break;
                case "XAxisExtent":
                    this.rb((d) => d.extent = this.ng);
                    break;
                case "YAxisExtent":
                    this.rg((d) => d.extent = this.nx);
                    break;
                case "XAxisStrip":
                    this.q9((d) => d.jd = this.sa);
                    break;
                case "YAxisStrip":
                    this.re((d) => d.jd = this.sh);
                    break;
                case "XAxisInverted":
                    this.q9((d) => d.cc = this.mc);
                    break;
                case "YAxisInverted":
                    this.re((d) => d.cc = this.md);
                    break;
                case "YAxisLabelLocation":
                    this.rh();
                    break;
                case "XAxisLabelLocation":
                    this.rc();
                    break;
            }
        }
        rh() {
            let a = this.l5(this.l9);
            if (a == 2 || a == 7) {
                this.ro = 2;
            }
            else {
                this.ro = 0;
            }
            this.rg((b) => b.location = a);
        }
        rc() {
            let a = this.l4(this.l7);
            if (a == 1 || a == 5) {
                this.so = 0;
            }
            else {
                this.so = 2;
            }
            this.rb((b) => b.location = a);
        }
        l5(a) {
            if (a == 0) {
                return 2;
            }
            else if (a == 1) {
                return 3;
            }
            else if (a == 3) {
                return 7;
            }
            else if (a == 2) {
                return 6;
            }
            else {
                if (this.ai == 1) {
                    return 3;
                }
                else {
                    return 2;
                }
            }
        }
        l4(a) {
            if (a == 1) {
                return 1;
            }
            else if (a == 0) {
                return 0;
            }
            else if (a == 3) {
                return 5;
            }
            else if (a == 2) {
                return 4;
            }
            else {
                return 1;
            }
        }
        get og() {
            return this.oe;
        }
        set og(a) {
            let b = this.og;
            if (a != b) {
                this.oe = a;
                this.j6("XAxisLabel", b, this.og);
            }
        }
        get oh() {
            return this.of;
        }
        set oh(a) {
            let b = this.oh;
            if (a != b) {
                this.of = a;
                this.j6("YAxisLabel", b, this.oh);
            }
        }
        get r8() {
            return this.rs;
        }
        set r8(a) {
            let b = this.r8;
            if (a != b) {
                this.rs = a;
                this.j6("XAxisMajorStroke", b, this.r8);
            }
        }
        get sf() {
            return this.rz;
        }
        set sf(a) {
            let b = this.sf;
            if (a != b) {
                this.rz = a;
                this.j6("YAxisMajorStroke", b, this.sf);
            }
        }
        get nm() {
            return this.mk;
        }
        set nm(a) {
            let b = this.nm;
            if (a != b) {
                this.mk = a;
                this.j6("XAxisMajorStrokeThickness", b, this.nm);
            }
        }
        get n3() {
            return this.m1;
        }
        set n3(a) {
            let b = this.n3;
            if (a != b) {
                this.m1 = a;
                this.j6("YAxisMajorStrokeThickness", b, this.n3);
            }
        }
        get nn() {
            return this.ml;
        }
        set nn(a) {
            let b = this.nn;
            if (a != b) {
                this.ml = a;
                this.j6("XAxisMinorStrokeThickness", b, this.nn);
            }
        }
        get n4() {
            return this.m2;
        }
        set n4(a) {
            let b = this.n4;
            if (a != b) {
                this.m2 = a;
                this.j6("YAxisMinorStrokeThickness", b, this.n4);
            }
        }
        get sa() {
            return this.ru;
        }
        set sa(a) {
            let b = this.sa;
            if (a != b) {
                this.ru = a;
                this.j6("XAxisStrip", b, this.sa);
            }
        }
        get sh() {
            return this.r1;
        }
        set sh(a) {
            let b = this.sh;
            if (a != b) {
                this.r1 = a;
                this.j6("YAxisStrip", b, this.sh);
            }
        }
        get sb() {
            return this.rv;
        }
        set sb(a) {
            let b = this.sb;
            if (a != b) {
                this.rv = a;
                this.j6("XAxisStroke", b, this.sb);
            }
        }
        get si() {
            return this.r2;
        }
        set si(a) {
            let b = this.si;
            if (a != b) {
                this.r2 = a;
                this.j6("YAxisStroke", b, this.si);
            }
        }
        get no() {
            return this.mm;
        }
        set no(a) {
            let b = this.no;
            if (a != b) {
                this.mm = a;
                this.j6("XAxisStrokeThickness", b, this.no);
            }
        }
        get n5() {
            return this.m3;
        }
        set n5(a) {
            let b = this.n5;
            if (a != b) {
                this.m3 = a;
                this.j6("YAxisStrokeThickness", b, this.n5);
            }
        }
        get np() {
            return this.mn;
        }
        set np(a) {
            let b = this.np;
            if (a != b) {
                this.mn = a;
                this.j6("XAxisTickLength", b, this.np);
            }
        }
        get n6() {
            return this.m4;
        }
        set n6(a) {
            let b = this.n6;
            if (a != b) {
                this.m4 = a;
                this.j6("YAxisTickLength", b, this.n6);
            }
        }
        get sc() {
            return this.rw;
        }
        set sc(a) {
            let b = this.sc;
            if (a != b) {
                this.rw = a;
                this.j6("XAxisTickStroke", b, this.sc);
            }
        }
        get sj() {
            return this.r3;
        }
        set sj(a) {
            let b = this.sj;
            if (a != b) {
                this.r3 = a;
                this.j6("YAxisTickStroke", b, this.sj);
            }
        }
        get nq() {
            return this.mo;
        }
        set nq(a) {
            let b = this.nq;
            if (a != b) {
                this.mo = a;
                this.j6("XAxisTickStrokeThickness", b, this.nq);
            }
        }
        get n7() {
            return this.m5;
        }
        set n7(a) {
            let b = this.n7;
            if (a != b) {
                this.m5 = a;
                this.j6("YAxisTickStrokeThickness", b, this.n7);
            }
        }
        get pm() {
            return this.ok;
        }
        set pm(a) {
            let b = this.pm;
            if (a != b) {
                this.ok = a;
                this.j6("XAxisTitle", b, this.pm);
            }
        }
        get qr() {
            return this.oo;
        }
        set qr(a) {
            let b = this.qr;
            if (a != b) {
                this.oo = a;
                this.j6("YAxisTitle", b, this.qr);
            }
        }
        get r9() {
            return this.rt;
        }
        set r9(a) {
            let b = this.r9;
            if (a != b) {
                this.rt = a;
                this.j6("XAxisMinorStroke", b, this.r9);
            }
        }
        get sg() {
            return this.r0;
        }
        set sg(a) {
            let b = this.sg;
            if (a != b) {
                this.r0 = a;
                this.j6("YAxisMinorStroke", b, this.sg);
            }
        }
        get nh() {
            return this.mf;
        }
        set nh(a) {
            let b = this.nh;
            if (a != b) {
                this.mf = a;
                this.j6("XAxisLabelAngle", b, this.nh);
            }
        }
        get ny() {
            return this.mw;
        }
        set ny(a) {
            let b = this.ny;
            if (a != b) {
                this.mw = a;
                this.j6("YAxisLabelAngle", b, this.ny);
            }
        }
        get ng() {
            return this.me;
        }
        set ng(a) {
            let b = this.ng;
            if (a != b) {
                this.me = a;
                this.j6("XAxisExtent", b, this.ng);
            }
        }
        get nx() {
            return this.mv;
        }
        set nx(a) {
            let b = this.nx;
            if (a != b) {
                this.mv = a;
                this.j6("YAxisExtent", b, this.nx);
            }
        }
        get nr() {
            return this.mp;
        }
        set nr(a) {
            let b = this.nr;
            if (a != b) {
                this.mp = a;
                this.j6("XAxisTitleAngle", b, this.nr);
            }
        }
        get n8() {
            return this.m6;
        }
        set n8(a) {
            let b = this.n8;
            if (a != b) {
                this.m6 = a;
                this.j6("YAxisTitleAngle", b, this.n8);
            }
        }
        get mc() {
            return this.ma;
        }
        set mc(a) {
            let b = this.mc;
            if (a != b) {
                this.ma = a;
                this.j6("XAxisInverted", b, this.mc);
            }
        }
        get md() {
            return this.mb;
        }
        set md(a) {
            let b = this.md;
            if (a != b) {
                this.mb = a;
                this.j6("YAxisInverted", b, this.md);
            }
        }
        get rn() {
            return this.rk;
        }
        set rn(a) {
            let b = this.rn;
            if (a != b) {
                this.rk = a;
                this.j6("XAxisTitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.rn));
            }
        }
        get sq() {
            return this.sn;
        }
        set sq(a) {
            let b = this.sq;
            if (a != b) {
                this.sn = a;
                this.j6("YAxisTitleAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, this.sq));
            }
        }
        get rm() {
            return this.rj;
        }
        set rm(a) {
            let b = this.rm;
            if (a != b) {
                this.rj = a;
                this.j6("XAxisLabelHorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.rm));
            }
        }
        get_ro() {
            return this.rl;
        }
        set_ro(a) {
            let b = this.ro;
            if (a != b) {
                this.rl = a;
                this.j6("YAxisLabelHorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.ro));
            }
        }
        get ro() {
            return this.get_ro();
        }
        set ro(a) {
            this.set_ro(a);
        }
        get so() {
            return this.sl;
        }
        set so(a) {
            let b = this.so;
            if (a != b) {
                this.sl = a;
                this.j6("XAxisLabelVerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, this.so));
            }
        }
        get sp() {
            return this.sm;
        }
        set sp(a) {
            let b = this.sp;
            if (a != b) {
                this.sm = a;
                this.j6("YAxisLabelVerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, this.sp));
            }
        }
        get st() {
            return this.sr;
        }
        set st(a) {
            let b = this.st;
            if (a != b) {
                this.sr = a;
                this.j6("XAxisLabelVisibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, this.st));
            }
        }
        get su() {
            return this.ss;
        }
        set su(a) {
            let b = this.su;
            if (a != b) {
                this.ss = a;
                this.j6("YAxisLabelVisibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, this.su));
            }
        }
        get_l9() {
            return this.l8;
        }
        set_l9(a) {
            let b = this.l9;
            if (a != b) {
                this.l8 = a;
                this.j6("YAxisLabelLocation", enumGetBox(YAxisLabelLocation_$type, b), enumGetBox(YAxisLabelLocation_$type, this.l9));
            }
        }
        get l9() {
            return this.get_l9();
        }
        set l9(a) {
            this.set_l9(a);
        }
        get_l7() {
            return this.l6;
        }
        set_l7(a) {
            let b = this.l7;
            if (a != b) {
                this.l6 = a;
                this.j6("XAxisLabelLocation", enumGetBox(XAxisLabelLocation_$type, b), enumGetBox(XAxisLabelLocation_$type, this.l7));
            }
        }
        get l7() {
            return this.get_l7();
        }
        set l7(a) {
            this.set_l7(a);
        }
        get oy() {
            return this.oi;
        }
        set oy(a) {
            let b = this.oi;
            if (a != b) {
                this.oi = a;
                this.j6("XAxisLabelFormat", b, this.oi);
            }
        }
        get lw() {
            return this.lu;
        }
        set lw(a) {
            let b = this.lu;
            if (a != b) {
                this.lu = a;
                this.j6("XAxisLabelFormatSpecifiers", b, this.lu);
            }
        }
        get p3() {
            return this.om;
        }
        set p3(a) {
            let b = this.om;
            if (a != b) {
                this.om = a;
                this.j6("YAxisLabelFormat", b, this.om);
            }
        }
        get lx() {
            return this.lv;
        }
        set lx(a) {
            let b = this.lv;
            if (a != b) {
                this.lv = a;
                this.j6("YAxisLabelFormatSpecifiers", b, this.lv);
            }
        }
    }
    XYChart.$t = /*@__PURE__*/ markType(XYChart, 'XYChart', DomainChart.$);
    return XYChart;
})();
//# sourceMappingURL=XYChart.js.map
