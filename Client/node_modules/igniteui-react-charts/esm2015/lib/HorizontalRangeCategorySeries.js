/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { RangeCategorySeries } from "./RangeCategorySeries";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Axis } from "./Axis";
import { Point_$type, runOn, typeCast, markType, markDep } from "igniteui-react-core";
import { RangeValueList } from "./RangeValueList";
import { ScalerParams } from "./ScalerParams";
import { CategoryXAxis } from "./CategoryXAxis";
import { PropertyMetadata } from "igniteui-react-core";
/**
 * @hidden
 */
export let HorizontalRangeCategorySeries = /*@__PURE__*/ (() => {
    class HorizontalRangeCategorySeries extends RangeCategorySeries {
        fetchXAxis() {
            return this.xAxis;
        }
        fetchYAxis() {
            return this.yAxis;
        }
        ke() {
            super.ke();
            this.xAxis = null;
            this.yAxis = null;
        }
        ah(a) {
            let b = this.aj(this.q2(), this.q3.f, this.r3(this.bx), this.r4(this.bx), this.o5(a), true);
            if (b == null) {
                return null;
            }
            let c = b[0];
            let d = b[1];
            let e = new Array(1);
            let f = new Array(2);
            f[0] = { $type: Point_$type, x: c[0], y: c[2] };
            f[1] = { $type: Point_$type, x: d[0], y: d[2] };
            e[0] = f;
            return e;
        }
        ai(a) {
            let b = this.aj(this.q2(), this.q3.f, this.r3(this.bx), this.r4(this.bx), this.o5(a), true);
            if (b == null) {
                return null;
            }
            let c = b[0];
            let d = b[1];
            let e = new Array(1);
            let f = new Array(2);
            f[0] = { $type: Point_$type, x: c[0], y: c[1] };
            f[1] = { $type: Point_$type, x: d[0], y: d[1] };
            e[0] = f;
            return e;
        }
        get_d5() {
            return true;
        }
        bo() {
            if (this.bp == 0) {
                return 1;
            }
            else {
                return super.bo();
            }
        }
        getOffsetValue() {
            return this.RangeFramePreparer.r(this.xAxis, this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        getCategoryWidth() {
            return this.xAxis.getCategorySize(this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        g4(a, b) {
            return this.g5(a, b, this.xAxis, runOn(this, this.r1), new RangeValueList(this.highColumn, this.lowColumn));
        }
        g6(a, b) {
            return this.g7(a, b, this.xAxis, runOn(this, this.r1), new RangeValueList(this.highColumn, this.lowColumn));
        }
        fu(a, b, c, d, e) {
            if (c == null) {
                return Number.POSITIVE_INFINITY;
            }
            let f = this.xAxis.kq;
            return this.fv(a, b, this.xAxis, d, e, f, runOn(this, this.r1));
        }
        f8(a, b, c) {
            if (this.ca == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.bx);
            let e = new ScalerParams(0, this.ca.pg, this.bx.bu, this.xAxis.cc, d);
            let f = this.RangeFramePreparer.r(this.xAxis, this.ca.pg, this.bx.bu, d);
            return this.ga(new RangeValueList(this.highColumn, this.lowColumn), a, this.xAxis, e, f, runOn(this, this.r1), b, c);
        }
        f6(a, b, c) {
            if (this.ca == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.bx);
            let e = new ScalerParams(0, this.ca.pg, this.bx.bu, this.xAxis.cc, d);
            let f = this.RangeFramePreparer.r(this.xAxis, this.ca.pg, this.bx.bu, d);
            return this.ga(this.lowColumn, a, this.xAxis, e, f, runOn(this, this.r1), b, c);
        }
        f4(a, b, c) {
            if (this.ca == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.bx);
            let e = new ScalerParams(0, this.ca.pg, this.bx.bu, this.xAxis.cc, d);
            let f = this.RangeFramePreparer.r(this.xAxis, this.ca.pg, this.bx.bu, d);
            return this.ga(this.highColumn, a, this.xAxis, e, f, runOn(this, this.r1), b, c);
        }
        oy(a, b, c) {
            return this.o4(a, b, c, this.RangeFramePreparer.r(this.xAxis, this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx)), this.yAxis, this.xAxis, runOn(this, this.f4), (d, e) => this.g7(d, e, this.xAxis, runOn(this, this.r1), this.highColumn), (d, e) => this.g5(d, e, this.xAxis, runOn(this, this.r1), this.highColumn));
        }
        o0(a, b, c) {
            return this.o4(a, b, c, this.RangeFramePreparer.r(this.xAxis, this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx)), this.yAxis, this.xAxis, runOn(this, this.f6), (d, e) => this.g7(d, e, this.xAxis, runOn(this, this.r1), this.lowColumn), (d, e) => this.g5(d, e, this.xAxis, runOn(this, this.r1), this.lowColumn));
        }
        o2(a, b, c) {
            return this.o4(a, b, c, this.RangeFramePreparer.r(this.xAxis, this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx)), this.yAxis, this.xAxis, null, null, null);
        }
        rx() {
            return this.yAxis != null && this.yAxis.cv();
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case HorizontalRangeCategorySeries.$$p[0]:
                    this.kl(typeCast(Axis.$, c));
                    this.lr(typeCast(Axis.$, d));
                    this.rc.cr.g(this.gh);
                    this.l0(false);
                    this.k7();
                    break;
                case HorizontalRangeCategorySeries.$$p[1]:
                    this.kl(typeCast(Axis.$, c));
                    this.lr(typeCast(Axis.$, d));
                    this.rc.cr.g(this.gh);
                    this.rx();
                    this.l0(false);
                    this.k7();
                    break;
            }
        }
        tb(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        ta(a) {
            if (typeCast(CategoryXAxis.$, a) !== null || a.b9) {
                return true;
            }
            return false;
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    HorizontalRangeCategorySeries.$t = /*@__PURE__*/ markType(HorizontalRangeCategorySeries, 'HorizontalRangeCategorySeries', RangeCategorySeries.$);
    HorizontalRangeCategorySeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, HorizontalRangeCategorySeries, 'raisePropertyChanged', ['XAxis::te', [CategoryAxisBase.$, null], 'YAxis::tf', [NumericYAxis.$, null]]);
    return HorizontalRangeCategorySeries;
})();
//# sourceMappingURL=HorizontalRangeCategorySeries.js.map
