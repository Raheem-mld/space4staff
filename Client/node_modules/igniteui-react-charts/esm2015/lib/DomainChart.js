/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, INotifyPropertyChanged_$type, BaseError, PropertyChangedEventArgs, Delegate_$type, fromEnum, String_$type, runOn, delegateCombine, EnumUtil, typeCast, delegateRemove, enumGetBox, markType, TypeRegistrar, getInstanceType } from "igniteui-react-core";
import { ArrayExtension } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesType_$type } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { Color } from "igniteui-react-core";
import { ColorUtil } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { SeriesOutlineMode_$type } from "./SeriesOutlineMode";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { MarkerAutomaticBehavior_$type } from "./MarkerAutomaticBehavior";
import { TrendLineType_$type } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode_$type } from "./ComputedPlotAreaMarginMode";
import { SeriesHighlightingMode_$type } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior_$type } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode_$type } from "./LegendHighlightingMode";
import { LegendItemBadgeShape_$type } from "./LegendItemBadgeShape";
import { LegendItemBadgeMode_$type } from "./LegendItemBadgeMode";
import { ToolTipType_$type } from "./ToolTipType";
import { CrosshairsDisplayMode_$type } from "./CrosshairsDisplayMode";
import { Defaults } from "./Defaults";
import { Series } from "./Series";
import { DeviceUtils } from "igniteui-react-core";
import { DataSeriesAdapter } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { Random } from "igniteui-react-core";
import { ObservableColorCollection } from "igniteui-react-core";
import { BrushCollectionUtil } from "igniteui-react-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { BrushUtil } from "igniteui-react-core";
import { IUnknownValuePlotting_$type } from "igniteui-react-core";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { isNaN_ } from "igniteui-react-core";
import { stringIsNullOrEmpty, stringEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let DomainChart = /*@__PURE__*/ (() => {
    class DomainChart extends Base {
        constructor() {
            super();
            this.fd = null;
            this.fc = null;
            this.cz = null;
            this.dn = NaN;
            this.fb = null;
            this.d1 = 0;
            this.d2 = 0;
            this.d3 = 0;
            this.d0 = 0;
            this.dw = 0;
            this.dy = 0;
            this.dx = 0;
            this.dv = 0;
            this.k9 = null;
            this.la = null;
            this.dk = NaN;
            this.d4 = NaN;
            this.du = NaN;
            this.di = NaN;
            this.e3 = 0;
            this.br = null;
            this.ew = null;
            this.cu = false;
            this.an = null;
            this.fr = null;
            this.ft = null;
            this.bp = null;
            this.c3 = null;
            this.propertyChanged = null;
            this.e2 = 0;
            this.co = false;
            this.aj = null;
            this.cy = null;
            this.seriesAdded = null;
            this.seriesRemoved = null;
            this.seriesPointerEnter = null;
            this.seriesPointerLeave = null;
            this.seriesPointerMove = null;
            this.seriesPointerDown = null;
            this.seriesPointerUp = null;
            this.calloutStyleUpdating = null;
            this.c2 = null;
            this.bu = null;
            this.bx = false;
            this.c9 = null;
            this.c7 = null;
            this.b = null;
            this.a = null;
            this.g = null;
            this.j = null;
            this.e = null;
            this.f = null;
            this.al = null;
            this.b3 = true;
            this.b5 = true;
            this.b7 = false;
            this.b8 = false;
            this.b4 = false;
            this.lr = new Rect(0, 0, 0, 1, 1);
            this.fs = null;
            this.fq = null;
            this.ky = 1;
            this.kx = 1;
            this.bn = 0;
            this.dt = 1;
            this.dz = NaN;
            this.bh = 0;
            this.az = 0;
            this.ax = 0;
            this.dl = NaN;
            this.dm = NaN;
            this.a4 = null;
            this.av = 4;
            this.h = null;
            this.i = null;
            this.e1 = 400;
            this.df = NaN;
            this.bw = false;
            this.k = null;
            this.bl = 0;
            this.d5 = DeviceUtils.g(1.5);
            this.bv = true;
            this.dq = NaN;
            this.ds = NaN;
            this.dr = NaN;
            this.dp = NaN;
            this.x = 0;
            this.bf = 0;
            this.bd = 0;
            this.ap = 0;
            this.at = 0;
            this.ar = 0;
            this.b6 = false;
            this.dg = DeviceUtils.g(2);
            this.dh = DeviceUtils.g(60);
            this.e4 = 7;
            this.bj = 0;
            this.z = 0;
            this.b1 = false;
            this.k6 = null;
            this.dj = NaN;
            this.k5 = null;
            this.b0 = true;
            this.k1 = null;
            this.k3 = null;
            this.k2 = null;
            this.k4 = null;
            this.ey = -1;
            this.ez = -1;
            this.b2 = false;
            this.k7 = null;
            this.k8 = null;
            this.e0 = -1;
            this.bz = false;
            this.by = false;
            this.c8 = null;
            this.fo = null;
            this.fp = null;
            this.fn = "CalloutLabel";
            this.fm = "CalloutContent";
            this.c2 = new List$1(Delegate_$type, 0);
            this.jj();
            this.i1();
        }
        provideContainer(a) {
            if (a == null) {
                this.jz((b) => b.provideContainer(null));
                return;
            }
            let b = this.fd;
            this.fd = a;
            if (this.bu != null && this.fd != null && b == null) {
                this.fd.setTimeout(this.bu, 0);
                this.bu = null;
            }
            let c = ((() => {
                let $ret = new XamDataChart();
                $ret.dt = true;
                return $ret;
            })());
            c.provideContainer(a);
            this.dataChart = c;
            this.jk();
        }
        destroy() {
            this.provideContainer(null);
        }
        jk() {
            if (this.dataChart == null) {
                return;
            }
            let a = this.dataChart.cf.j.e();
            this.n = a.a;
            this.r = a.f;
            this.p = a.b;
            this.q = a.c;
            this.t = a.g;
            this.ea = Defaults.j;
            this.jl();
        }
        jl() {
        }
        jh(a) {
            if (a == null) {
                return;
            }
            a.f1 = this.et;
            a.fz = this.er;
            a.f0 = this.es;
            a.fy = this.eq;
            a.o6 = this.lp;
            a.fv = this.em;
            a.fx = this.eo;
            a.fw = this.en;
            a.fu = this.el;
            a.o5 = this.lo;
            if (!isNaN_(this.ee)) {
                a.fr = this.ee;
            }
        }
        je() {
        }
        jn(a, b) {
            a.ha = this.e9;
            a.cc = this.bs;
        }
        j7(a, b, c) {
            switch (a) {
                case "TitleTopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.f1 = this.et;
                    }
                    break;
                case "TitleLeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.fz = this.er;
                    }
                    break;
                case "PixelScalingRatio":
                    if (this.dataChart != null) {
                        this.jz((d) => d.fr = this.ee);
                    }
                    break;
                case "TitleRightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.f0 = this.es;
                    }
                    break;
                case "TitleBottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.fy = this.eq;
                    }
                    break;
                case "TitleTextColor":
                    if (this.dataChart != null) {
                        this.dataChart.o6 = this.lp;
                    }
                    break;
                case "SubtitleLeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.fv = this.em;
                    }
                    break;
                case "SubtitleTopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.fx = this.eo;
                    }
                    break;
                case "SubtitleRightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.fw = this.en;
                    }
                    break;
                case "SubtitleBottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.fu = this.el;
                    }
                    break;
                case "SubtitleTextColor":
                    if (this.dataChart != null) {
                        this.dataChart.o5 = this.lo;
                    }
                    break;
                case "LeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.fq = this.eb;
                    }
                    break;
                case "TopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.f2 = this.eu;
                    }
                    break;
                case "RightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.ft = this.ek;
                    }
                    break;
                case "BottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.fm = this.d9;
                    }
                    break;
                case "TransitionDuration":
                    this.ja((d) => d.ha = this.e9);
                    break;
                case "TransitionEasingFunction":
                    this.ja((d) => d.cc = this.bs);
                    break;
            }
        }
        get tooltipTemplate() {
            return ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, 0);
        }
        set tooltipTemplate(a) {
            this.tooltipTemplates = a == null ? null : new List$1(Base.$, 1, [a]);
        }
        get tooltipTemplates() {
            return this.cz;
        }
        set tooltipTemplates(a) {
            let b = this.tooltipTemplates;
            if (a != b) {
                this.cz = a;
                this.j6("TooltipTemplates", b, this.tooltipTemplates);
            }
        }
        get ee() {
            return this.dn;
        }
        set ee(a) {
            let b = this.dn;
            if (a != b) {
                this.dn = a;
                this.j6("PixelScalingRatio", b, this.ee);
            }
        }
        get toolTip() {
            return this.fb;
        }
        set toolTip(a) {
            let b = this.toolTip;
            if (b != a) {
                this.fb = a;
                this.j6("ToolTip", b, this.toolTip);
            }
        }
        get er() {
            return this.d1;
        }
        set er(a) {
            let b = this.er;
            if (a != b) {
                this.d1 = a;
                this.j6("TitleLeftMargin", b, this.er);
            }
        }
        get es() {
            return this.d2;
        }
        set es(a) {
            let b = this.es;
            if (a != b) {
                this.d2 = a;
                this.j6("TitleRightMargin", b, this.es);
            }
        }
        get et() {
            return this.d3;
        }
        set et(a) {
            let b = this.et;
            if (a != b) {
                this.d3 = a;
                this.j6("TitleTopMargin", b, this.et);
            }
        }
        get eq() {
            return this.d0;
        }
        set eq(a) {
            let b = this.eq;
            if (a != b) {
                this.d0 = a;
                this.j6("TitleBottomMargin", b, this.eq);
            }
        }
        get em() {
            return this.dw;
        }
        set em(a) {
            let b = this.em;
            if (a != b) {
                this.dw = a;
                this.j6("SubtitleLeftMargin", b, this.em);
            }
        }
        get eo() {
            return this.dy;
        }
        set eo(a) {
            let b = this.eo;
            if (a != b) {
                this.dy = a;
                this.j6("SubtitleTopMargin", b, this.eo);
            }
        }
        get en() {
            return this.dx;
        }
        set en(a) {
            let b = this.en;
            if (a != b) {
                this.dx = a;
                this.j6("SubtitleRightMargin", b, this.en);
            }
        }
        get el() {
            return this.dv;
        }
        set el(a) {
            let b = this.el;
            if (a != b) {
                this.dv = a;
                this.j6("SubtitleBottomMargin", b, this.el);
            }
        }
        get lo() {
            return this.k9;
        }
        set lo(a) {
            let b = this.lo;
            if (a != b) {
                this.k9 = a;
                this.j6("SubtitleTextColor", b, this.lo);
            }
        }
        get lp() {
            return this.la;
        }
        set lp(a) {
            let b = this.lp;
            if (a != b) {
                this.la = a;
                this.j6("TitleTextColor", b, this.lp);
            }
        }
        get_eb() {
            return this.dk;
        }
        set_eb(a) {
            let b = this.eb;
            if (a != b) {
                this.dk = a;
                this.j6("LeftMargin", b, this.eb);
            }
        }
        get eb() {
            return this.get_eb();
        }
        set eb(a) {
            this.set_eb(a);
        }
        get eu() {
            return this.d4;
        }
        set eu(a) {
            let b = this.eu;
            if (a != b) {
                this.d4 = a;
                this.j6("TopMargin", b, this.eu);
            }
        }
        get ek() {
            return this.du;
        }
        set ek(a) {
            let b = this.ek;
            if (a != b) {
                this.du = a;
                this.j6("RightMargin", b, this.ek);
            }
        }
        get d9() {
            return this.di;
        }
        set d9(a) {
            let b = this.d9;
            if (a != b) {
                this.di = a;
                this.j6("BottomMargin", b, this.d9);
            }
        }
        get e9() {
            return this.e3;
        }
        set e9(a) {
            let b = this.e9;
            if (a != b) {
                this.e3 = a;
                this.j6("TransitionDuration", b, this.e9);
            }
        }
        get bs() {
            return this.br;
        }
        set bs(a) {
            let b = this.bs;
            if (a != b) {
                this.br = a;
                this.j6("TransitionEasingFunction", b, this.bs);
            }
        }
        ji(a) {
            if (this.dataChart == null) {
                return;
            }
            a.im = this.ih;
            a.h9 = this.h5;
        }
        jo(a, b) {
            this.jp(a, b);
        }
        jf() {
        }
        jp(a, b) {
            if (a == null) {
                return;
            }
            let toolTipTemplate_ = ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, b);
            if (toolTipTemplate_ == null) {
                a.el = true;
            }
            else {
                let series_ = a;
                a.el = false;
                series_.externalObject.tooltipTemplate = toolTipTemplate_;
            }
        }
        kv(a, b, c) {
        }
        ff(a) {
            return a;
            return null;
        }
        ex(a) {
            return null;
        }
        j8(a, b, c) {
            switch (a) {
                case "SubtitleTextStyle":
                    if (this.dataChart != null) {
                        this.dataChart.h9 = this.h5;
                    }
                    break;
                case "TitleTextStyle":
                    if (this.dataChart != null) {
                        this.dataChart.im = this.ih;
                    }
                    break;
                case "TooltipTemplate":
                    if (this.cu) {
                        return;
                    }
                    this.cu = true;
                    this.tooltipTemplate = this.ff(this.tooltipTemplate);
                    this.cu = false;
                    if (this.dataChart != null) {
                        this.dataChart.gh = this.tooltipTemplate;
                    }
                    this.toolTip = this.tooltipTemplate;
                    break;
                case "ToolTip":
                    this.jb((d, e) => this.jp(d, e));
                    break;
                case "TooltipTemplates":
                    if (this.tooltipTemplates == null) {
                        break;
                    }
                    this.cu = true;
                    this.jb((d, e) => {
                        let f = this.ff(ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, e));
                        let series_ = d;
                        let templ_ = f;
                        series_.externalObject.tooltipTemplate = templ_;
                    });
                    this.cu = false;
                    break;
            }
        }
        get ao() {
            return this.an;
        }
        set ao(a) {
            let b = this.ao;
            if (a != b) {
                this.an = a;
                this.j6("Widget", b, this.ao);
            }
        }
        get h5() {
            return this.fr;
        }
        set h5(a) {
            let b = this.h5;
            if (a != b) {
                this.fr = a;
                this.j6("SubtitleTextStyle", b, this.h5);
            }
        }
        get ih() {
            return this.ft;
        }
        set ih(a) {
            let b = this.ih;
            if (a != b) {
                this.ft = a;
                this.j6("TitleTextStyle", b, this.ih);
            }
        }
        get dataChart() {
            return this.bp;
        }
        set dataChart(a) {
            let b = this.dataChart;
            if (b != a) {
                this.bp = a;
                this.j6("DataChart", b, this.dataChart);
            }
        }
        onDetachedFromUI() {
            this.jz((a) => a.onDetachedFromUI());
        }
        onAttachedToUI() {
            this.jz((a) => a.onAttachedToUI());
        }
        jj() {
            this.c3 = new List$1(MarkerType_$type, 0);
            this.ac = new DataSeriesAdapter().e;
            if (this.d != null) {
                this.ac.includedProperties = this.d;
            }
            if (this.c != null) {
                this.ac.excludedProperties = this.c;
            }
            this.ac.supportedSeriesTypes = this.c5.toArray();
            this.ac.rules.clear();
            for (let a of fromEnum(this.c4)) {
                this.ac.rules.add(a);
            }
            let b = new List$1(String_$type, 0);
            for (let c of fromEnum(this.ac.rules)) {
                b.add(getInstanceType(c).typeName);
            }
            let d = this.ac.dataSeries;
            d.collectionChanged = delegateCombine(d.collectionChanged, runOn(this, this.j2));
        }
        cq(a) {
            return a != 24 && this.c5.contains(a);
        }
        notifyResized() {
            this.jz((a) => a.notifyContainerResized());
        }
        jx() {
            this.jz((a) => {
                for (let b = 0; b < a.series.count; b++) {
                    a.series._inner[b].k9();
                }
            });
        }
        i5() {
            if (this.dataChart == null) {
                return;
            }
            if (this.co) {
                this.kp();
            }
            this.dataChart.flush();
        }
        jc() {
            if (this.dataChart == null) {
                return;
            }
            this.dataChart.jk();
        }
        kd(a) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        i6(a) {
            this.i7((b, c) => a(b));
        }
        i7(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                a(this.dataChart.series._inner[b], b);
            }
        }
        ja(a) {
            this.jb((b, c) => a(b));
        }
        jb(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!c.c5) {
                    a(c, b);
                }
            }
        }
        i8(a) {
            this.i9((b, c) => a(b));
        }
        i9(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (c.c6) {
                    a(c, b);
                }
            }
        }
        km() {
            this.i6((a) => a.l3());
        }
        jz(a) {
            this.j0(a, true);
        }
        j0(a, b) {
            this.j1(a, b, null);
        }
        j1(a, b, c) {
            if (this.dataChart == null) {
                return;
            }
            a(this.dataChart);
        }
        cr(a) {
            if (!this.cq(a.suggestedSeries)) {
                return false;
            }
            let b = a.data;
            if (b == null) {
                return false;
            }
            return true;
        }
        cj() {
            if (this.dataChart == null) {
                return false;
            }
            return true;
        }
        gz(a) {
            let b = "series_" + (this.dataChart.series.count + 1) + "_" + EnumUtil.getName(DataSeriesType_$type, a.suggestedSeries);
            return b;
        }
        g0(a, b) {
            if (this.cm && this.cx) {
                let c = "";
                let d = 5 + Math.round(DomainChart.fk.nextDouble() * 4);
                for (let e = 0; e < d; e++) {
                    c = c + "\u2588";
                }
                return c;
            }
            if (stringIsNullOrEmpty(a.title)) {
                let f = EnumUtil.getName(DataSeriesType_$type, b);
                return f + (this.dataChart.series.count + 1);
            }
            else {
                return a.title;
            }
        }
        gy() {
            return stringEmpty();
        }
        kp() {
            if (this.dataChart == null) {
                return;
            }
            this.co = false;
            this.kr();
            if (this.actualItemsSource == null) {
                return;
            }
            let a = new List$1(MarkerType_$type, 0);
            for (let b of fromEnum(this.ac.dataSeries)) {
                a.add(this.a1(b.suggestedMarker));
            }
            this.c3 = a;
            let c = 0;
            for (let d of fromEnum(this.ac.dataSeries)) {
                if (!this.cr(d)) {
                    continue;
                }
                if (d.index < 0) {
                    d.index = c;
                }
                this.kn(d);
                this.ko(d);
                c++;
            }
            this.kw();
            this.i7(runOn(this, this.jm));
        }
        bc(seriesType_) {
            return (this.externalObject.createSeries(seriesType_).i);
        }
        a6() {
            return this.bc(28);
        }
        a8() {
            return this.bc(27);
        }
        a9() {
            return this.bc(29);
        }
        ba() {
            return this.bc(25);
        }
        a7() {
            return this.bc(26);
        }
        get ak() {
            if (TypeRegistrar.isRegistered("AnnotationLayerProxy")) {
                return TypeRegistrar.create("AnnotationLayerProxy");
            }
            else {
                throw new BaseError(1, "annotation layer module is not loaded, but is required.");
            }
        }
        get ch() {
            return (TypeRegistrar.isRegistered("AnnotationLayerProxy"));
        }
        ci(a) {
            if (!this.ch) {
                return false;
            }
            return this.ak.matchesType(a);
        }
        kw() {
            let a = this.c1("", true);
            if (a != null) {
                for (let b = 0; b < a.count; b++) {
                    this.dataChart.series.add(a._inner[b]);
                }
            }
        }
        ck() {
            return this.aa == 0 || this.aa == 4 || this.aa == 2;
        }
        cl() {
            return this.aa == 0 || this.aa == 4 || this.aa == 3;
        }
        c1(a, b) {
            if (!this.ch) {
                return null;
            }
            let c = new List$1(Series.$, 0);
            if (b) {
                if (this.bz) {
                    let d = 1;
                    if (this.c8 == null) {
                        for (let e of fromEnum(this.dataChart.series)) {
                            let f = this.a6();
                            this.ak.setTargetSeries(f, e);
                            this.ak.setCollisionChannel(f, "MainChartCollisionChannel");
                            this.ku(f, e, this.ac.dataSeries._inner[d - 1]);
                            f.name = a + getInstanceType(f).typeName + d.toString();
                            c.add(f);
                            d++;
                        }
                        ;
                    }
                    else {
                        let g = this.a6();
                        this.ku(g, null, this.ac.dataSeries._inner[d - 1]);
                        g.name = a + getInstanceType(g).typeName + d.toString();
                        c.add(g);
                    }
                }
            }
            switch (this.z) {
                case 0:
                case 4:
                case 3:
                case 2:
                    {
                        let h = this.a8();
                        this.ak.setCrosshairThickness(h, this.dj);
                        this.ak.setCrosshairUseInterpolation(h, !this.b1);
                        this.ak.setCrosshairHorizontalLineVisibility(h, this.ck() ? 0 : 1);
                        this.ak.setCrosshairHorizontalLineStroke(h, this.k5);
                        this.ak.setCrosshairVerticalLineVisibility(h, this.cl() ? 0 : 1);
                        this.ak.setCrosshairVerticalLineStroke(h, this.k6);
                        this.ak.setCrosshairOnAxesEnabled(h, this.b0);
                        this.ak.setCrosshairXAxisBackground(h, this.k1);
                        this.ak.setCrosshairXAxisForeground(h, this.k2);
                        this.ak.setCrosshairYAxisBackground(h, this.k3);
                        this.ak.setCrosshairYAxisForeground(h, this.k4);
                        this.ak.setCrosshairXAxisPrecision(h, this.ey);
                        this.ak.setCrosshairYAxisPrecision(h, this.ez);
                        c.add(h);
                        break;
                    }
                case 1:
                    {
                        break;
                    }
            }
            if (this.b2) {
                let i = this.a9();
                this.ak.setFinalValueBackground(i, this.k7);
                this.ak.setFinalValueForeground(i, this.k8);
                this.ak.setFinalValuePrecision(i, this.e0);
                c.add(i);
            }
            if (b) {
                switch (this.bj) {
                    case 1:
                        {
                            let j = this.ba();
                            c.add(j);
                            break;
                        }
                    case 2:
                        {
                            let k = this.a7();
                            c.add(k);
                            break;
                        }
                    case 3:
                        {
                            this.i6((l) => l.el = false);
                            break;
                        }
                    case 0:
                        {
                            this.i6((l) => l.el = true);
                            break;
                        }
                }
            }
            for (let l of fromEnum(c)) {
                if (stringIsNullOrEmpty(l.name) == false) {
                    continue;
                }
                l.name = a + getInstanceType(l).typeName;
            }
            return c;
        }
        ku(a, b, c) {
            a.itemsSource = this.c8 != null ? this.c8 : b.itemsSource;
            this.ak.setXMemberPath(a, this.fo);
            this.ak.setYMemberPath(a, this.fp);
            this.ak.setLabelMemberPath(a, this.fn);
            this.ak.setContentMemberPath(a, this.fm);
        }
        kr() {
            this.ks(this.dataChart);
        }
        ks(a) {
            if (a != null && a == this.dataChart) {
                this.kq();
            }
            if (a == null || a.series.count == 0) {
                return;
            }
            this.i6((b) => {
                if (this.ci(b) && this.ak.isCalloutLayer(b)) {
                    this.ak.removeCalloutStyleUpdating(b, runOn(this, this.kc));
                }
                this.kk(b);
            });
            for (let b of fromEnum(a.series)) {
                this.kt(b);
            }
            a.series.clear();
        }
        kt(a) {
            a.itemsSource = null;
            a.legend = null;
            a.ke();
        }
        j2(a, b) {
            if (this.dataChart == null) {
                return;
            }
            let c = b.oldItems == null ? "null" : b.oldItems.count.toString();
            let d = b.newItems == null ? "null" : b.newItems.count.toString();
            if (this.co) {
                return;
            }
            let e = this.kb(runOn(this, this.i3), this.co);
            this.co = e.p1;
        }
        i3() {
            this.kp();
        }
        lj(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.l, a);
        }
        lm(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.m, a);
        }
        lk(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.p, a);
        }
        ll(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.q, a);
        }
        lq(a) {
            let b = new Color();
            if (this.l == null || this.l.count == 0) {
                b = ArrayExtension.getModulus$1(Color.$, this.c0, a);
            }
            else {
                let c = ArrayExtension.getModulus$1(Brush.$, this.l, a);
                if (c == null) {
                    b = ArrayExtension.getModulus$1(Color.$, this.c0, a);
                }
                else {
                    b = ColorUtil.q(c);
                }
            }
            return b;
        }
        bt(a) {
            let b = new ObservableColorCollection();
            b.add(ColorUtil.v(a, 0.5));
            b.add(a);
            return b;
        }
        o(a) {
            let b = this.bt(a);
            let c = BrushCollectionUtil.a(b);
            return c;
        }
        get c0() {
            if (this.cy != null) {
                return this.cy;
            }
            this.cy = new List$1(Color.$, 0);
            this.cy.add(ColorUtil.r("#8BDC5C"));
            this.cy.add(ColorUtil.r("#8961A9"));
            this.cy.add(ColorUtil.r("#6DB1FF"));
            this.cy.add(ColorUtil.r("#82E9D9"));
            this.cy.add(ColorUtil.r("#EA3C63"));
            this.cy.add(ColorUtil.r("#735656"));
            this.cy.add(ColorUtil.r("#F8CE4F"));
            this.cy.add(ColorUtil.r("#A8A8B7"));
            this.cy.add(ColorUtil.r("#E051A9"));
            this.cy.add(ColorUtil.r("#FF903B"));
            return this.cy;
        }
        fe() {
            if (this.dataChart == null) {
                return null;
            }
            return this.dataChart.rm();
        }
        jq(a, b) {
        }
        jr(a, b, c) {
        }
        a1(a) {
            if (a == 2) {
                return 3;
            }
            else if (a == 12) {
                return 13;
            }
            else if (a == 6) {
                return 7;
            }
            else if (a == 8) {
                return 9;
            }
            else if (a == 11) {
                return 12;
            }
            else if (a == 1) {
                return 1;
            }
            else if (a == 7) {
                return 8;
            }
            else if (a == 10) {
                return 11;
            }
            else if (a == 4) {
                return 5;
            }
            else if (a == 5) {
                return 6;
            }
            else if (a == 9) {
                return 10;
            }
            else if (a == 3) {
                return 4;
            }
            else if (a == 13) {
                return 0;
            }
            return 2;
        }
        jw(source_, a, b, c) {
            if (this.ac != null) {
                this.ac.notifySetItem(source_, a, b, c);
            }
            if (this.dataChart != null) {
                this.dataChart.jy(source_, a, b, c);
            }
        }
        js(source_) {
            if (this.ac != null) {
                this.ac.notifyClearItems(source_);
            }
            if (this.dataChart != null) {
                this.dataChart.jt(source_);
            }
        }
        jt(source_, a, b) {
            if (this.ac != null) {
                this.ac.notifyInsertItem(source_, a, b);
            }
            if (this.dataChart != null) {
                this.dataChart.jw(source_, a, b);
            }
        }
        ju(source_, a, b) {
            if (this.ac != null) {
                this.ac.notifyRemoveItem(source_, a, b);
            }
            if (this.dataChart != null) {
                this.dataChart.jx(source_, a, b);
            }
        }
        ke(a) {
            if (this.seriesAdded != null && a != null) {
                this.seriesAdded(this, new ChartSeriesEventArgs(a));
            }
        }
        kk(a) {
            if (this.seriesRemoved != null && a != null) {
                this.seriesRemoved(this, new ChartSeriesEventArgs(a));
            }
        }
        kg(a, b) {
            if (this.seriesPointerEnter != null && a != null) {
                this.seriesPointerEnter(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        kh(a, b) {
            if (this.seriesPointerLeave != null && a != null) {
                this.seriesPointerLeave(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        ki(a, b) {
            if (this.seriesPointerMove != null && a != null) {
                this.seriesPointerMove(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        kf(a, b) {
            if (this.seriesPointerDown != null && a != null) {
                this.seriesPointerDown(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        kj(a, b) {
            if (this.seriesPointerUp != null && a != null) {
                this.seriesPointerUp(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        kc(a, b) {
            if (this.calloutStyleUpdating != null && a != null) {
                this.calloutStyleUpdating(this, b);
            }
        }
        ka(a) {
            if (!this.c2.contains(a)) {
                this.c2.add(a);
                let b = false;
                let c = this.kb(() => {
                    a();
                    this.c2.remove(a);
                }, b);
                b = c.p1;
            }
        }
        kb(a, b) {
            if (!b) {
                b = true;
                if (this.fd != null) {
                    this.fd.setTimeout(a, 0);
                }
                else {
                    this.bu = a;
                }
            }
            return {
                p1: b
            };
        }
        get_cs() {
            return true;
        }
        get cs() {
            return this.get_cs();
        }
        jg(a) {
            let b = a == this.dataChart;
            if (b) {
                a.ag = this.l;
            }
            if (b) {
                a.aj = this.m;
            }
            a.ah = this.p;
            a.ai = this.q;
            a.a9 = this.aw;
            a.legend = this.legend;
            a.qi = this.cn;
            a.ql = this.ct && this.cs;
            if (a.bq != this.bg || a.bo != this.be) {
                a.cf.b4(this.fd);
                a.bq = this.bg;
                a.bo = this.be;
            }
            a.p4 = this.y;
            if (!isNaN_(this.eg)) {
                a.rg = this.eg;
            }
            if (!isNaN_(this.ei)) {
                a.ri = this.ei;
            }
            if (!isNaN_(this.eh)) {
                a.rh = this.eh;
            }
            if (!isNaN_(this.ef)) {
                a.rf = this.ef;
            }
            a.a6 = this.aq;
            a.qn = this.cv;
            a.q9 = this.d7;
            a.ra = this.d8;
            a.seriesMouseEnter = delegateCombine(a.seriesMouseEnter, (c, d) => this.kg(d.series, d.item));
            a.seriesMouseLeave = delegateCombine(a.seriesMouseLeave, (c, d) => this.kh(d.series, d.item));
            a.seriesMouseMove = delegateCombine(a.seriesMouseMove, (c, d) => this.ki(d.series, d.item));
            a.seriesMouseLeftButtonDown = delegateCombine(a.seriesMouseLeftButtonDown, (c, d) => this.kf(d.series, d.item));
            a.seriesMouseLeftButtonUp = delegateCombine(a.seriesMouseLeftButtonUp, (c, d) => this.kj(d.series, d.item));
            if (b) {
                a.pw = this.lt;
            }
            if (b) {
                a.ie = this.h9;
            }
            a.om = this.k0;
            if (b) {
                a.h2 = this.hy;
            }
            a.ol = this.kz;
            a.qe = this.b9;
            a.da = this.ca;
            a.fq = this.eb;
            a.ft = this.ek;
            a.f2 = this.eu;
            a.fm = this.d9;
            if (a == this.dataChart) {
                this.kp();
            }
            this.jh(a);
            this.ji(a);
        }
        s(a) {
            if (!this.cw || !this.cx || this.itemsSource != null) {
                return a;
            }
            if (a == null) {
                return null;
            }
            let b = new BrushCollection();
            for (let c of fromEnum(a)) {
                let d = BrushUtil.r(c);
                b.add(d);
            }
            return b;
        }
        ln(a) {
            if (!this.cw || !this.cx || this.itemsSource != null) {
                return a;
            }
            let b = BrushUtil.g(0, 0, 0, 0);
            return b;
        }
        jm(a, b) {
            if (!isNaN_(this.ej)) {
                a.gh = this.ej;
            }
            if (!isNaN_(this.ep) && !a.c6) {
                a.gm = this.ep;
            }
            if (!isNaN_(this.ea) && a.c6) {
                a.gm = this.ea;
            }
            a.a9 = this.au;
            a.a7 = this.as;
            a.bs = this.bi;
            a.mh(this.a0);
            a.mg(this.ay);
            a.ge = this.ec;
            if (!isNaN_(this.ep)) {
                a.mi(this.ed);
            }
            if (!isNaN_(this.d6)) {
                a.fq = this.d6;
            }
            if (a.isUsableInLegend) {
                a.legend = this.legend;
            }
            if (typeCast(IUnknownValuePlotting_$type, a) !== null) {
                a.unknownValuePlotting = this.bo;
            }
            a.dq = this.cp;
            if (this.ci(a) && this.ak.isCalloutLayer(a)) {
                this.ak.setCalloutStyleUpdatingEventEnabled(a, this.cc);
                this.ak.addCalloutStyleUpdating(a, runOn(this, this.kc));
            }
            this.iz(a, b);
            this.i0(a, b);
            this.jn(a, b);
            this.jo(a, b);
            this.ke(a);
        }
        get cb() {
            return this.bx;
        }
        i4() {
            if (!this.bx) {
                this.bx = true;
                this.jd();
            }
        }
        jd() {
            this.je();
            this.jf();
        }
        kl(a) {
            this.ks(a);
        }
        i0(a, b) {
            let c = typeCast(ITrendLineSeries_$type, a);
            if (c != null) {
                c.trendLineBrush = ArrayExtension.getModulus$1(Brush.$, this.t, b);
                c.trendLineThickness = this.ev;
                c.trendLineType = this.bm;
                c.trendLinePeriod = this.fa;
            }
        }
        a3(a, b) {
            if (this.a5 == null || this.a5.count == 0) {
                if (this.c3 == null || this.c3.count == 0) {
                    return a != null && a.dw ? 1 : 2;
                }
                let c = ArrayExtension.getModulus$1(MarkerType_$type, this.c3, b);
                if (c == 0 && a != null) {
                    c = a.dw ? 1 : 2;
                    if (c == 2) {
                        c = this.a2(a);
                    }
                }
                if (c == 2) {
                    if (a == null) {
                        return 1;
                    }
                    else {
                        return 2;
                    }
                }
                return c;
            }
            return ArrayExtension.getModulus$1(MarkerType_$type, this.a5, b);
        }
        a2(a) {
            return 2;
        }
        dd() {
            if (this.itemsSource != null) {
                return this.itemsSource;
            }
            if (this.cw) {
                return this.de();
            }
            return null;
        }
        get_cm() {
            if (this.itemsSource == null && this.cw) {
                if (this.de() != null) {
                    return true;
                }
            }
            return false;
        }
        get cm() {
            return this.get_cm();
        }
        de() {
            return null;
        }
        j6(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            switch (a) {
                case "DataChart":
                    this.kl(typeCast(XamDataChart.$, b));
                    this.jg(typeCast(XamDataChart.$, c));
                    break;
                case "ShouldUseSkeletonStyleForMockData":
                case "ShouldDisplayMockData":
                    this.actualItemsSource = this.dd();
                    this.l = this.s(this.n);
                    this.m = this.s(this.r);
                    break;
                case "ActualBrushes":
                    this.j1((d) => d.ag = this.l, true, a);
                    break;
                case "ActualOutlines":
                    this.j1((d) => d.aj = this.m, true, a);
                    break;
                case "ActualItemsSource":
                    if (this.cw) {
                        this.l = this.s(this.n);
                        this.m = this.s(this.r);
                    }
                    this.ac.itemsSource = this.actualItemsSource;
                    break;
                case "ItemsSource":
                    this.actualItemsSource = this.dd();
                    break;
                case "IncludedProperties":
                    this.ac.includedProperties = this.d;
                    break;
                case "ExcludedProperties":
                    this.ac.excludedProperties = this.c;
                    break;
                case "Brushes":
                    this.l = this.s(this.n);
                    break;
                case "Outlines":
                    this.m = this.s(this.r);
                    break;
                case "Legend":
                    this.jz((d) => d.legend = this.legend);
                    break;
                case "HighlightingMode":
                    this.jz((d) => d.bq = this.bg);
                    break;
                case "HighlightingBehavior":
                    this.jz((d) => d.bo = this.be);
                    break;
                case "LegendHighlightingMode":
                    this.jz((d) => d.a6 = this.aq);
                    break;
                case "LegendItemBadgeShape":
                    this.jz((d) => d.a8 = this.au);
                    break;
                case "LegendItemBadgeMode":
                    this.jz((d) => d.a7 = this.as);
                    break;
                case "PlotAreaMarginLeft":
                    this.jz((d) => d.rg = this.eg);
                    break;
                case "PlotAreaMarginTop":
                    this.jz((d) => d.ri = this.ei);
                    break;
                case "PlotAreaMarginRight":
                    this.jz((d) => d.rh = this.eh);
                    break;
                case "PlotAreaMarginBottom":
                    this.jz((d) => d.rf = this.ef);
                    break;
                case "ComputedPlotAreaMarginMode":
                    this.jz((d) => d.p4 = this.y);
                    break;
                case "ShouldAutoExpandMarginForInitialLabels":
                    this.jz((d) => d.qn = this.cv);
                    break;
                case "AutoExpandMarginExtraPadding":
                    this.jz((d) => d.q9 = this.d7);
                    break;
                case "AutoExpandMarginMaximumValue":
                    this.jz((d) => d.ra = this.d8);
                    break;
                case "IsHorizontalZoomEnabled":
                    this.jz((d) => d.qi = this.cn);
                    break;
                case "IsVerticalZoomEnabled":
                    this.jz((d) => d.ql = this.ct);
                    break;
                case "WindowRect":
                    this.j0((d) => d.pw = this.lt, false);
                    break;
                case "Title":
                    this.j0((d) => d.ie = this.h9, false);
                    break;
                case "Subtitle":
                    this.j0((d) => d.h2 = this.hy, false);
                    break;
                case "TitleAlignment":
                    this.jz((d) => d.om = this.k0);
                    break;
                case "SubtitleAlignment":
                    this.jz((d) => d.ol = this.kz);
                    break;
                case "UnknownValuePlotting":
                    this.i6((d) => {
                        if (typeCast(IUnknownValuePlotting_$type, d) !== null) {
                            d.unknownValuePlotting = this.bo;
                        }
                    });
                    break;
                case "IsSeriesHighlightingEnabled":
                    this.i6((d) => d.dq = this.cp);
                    break;
                case "Thickness":
                    if (!isNaN_(this.ep)) {
                        this.ja((d) => d.gm = this.ep);
                    }
                    break;
                case "OutlineMode":
                    this.ja((d) => d.bs = this.bi);
                    break;
                case "MarkerFillOpacity":
                    this.ja((d) => d.ge = this.ec);
                    break;
                case "MarkerThickness":
                    if (!isNaN_(this.ed)) {
                        this.ja((d) => d.mi(this.ed));
                    }
                    break;
                case "MarkerOutlineMode":
                    this.ja((d) => d.mh(this.a0));
                    break;
                case "MarkerFillMode":
                    this.ja((d) => d.mg(this.ay));
                    break;
                case "Resolution":
                    if (!isNaN_(this.ej)) {
                        this.i6((d) => d.gh = this.ej);
                    }
                    break;
                case "AreaFillOpacity":
                    if (!isNaN_(this.d6)) {
                        this.i6((d) => d.fq = this.d6);
                    }
                    break;
                case "TrendLineBrushes":
                case "TrendLineType":
                case "TrendLineThickness":
                case "TrendLinePeriod":
                    this.i7((d, e) => this.i0(d, e));
                    break;
                case "MarkerMaxCount":
                    this.jb((d, e) => this.iz(d, e));
                    break;
                case "MarkerTypes":
                    let d = typeCast(ObservableCollection$1.$.specialize(MarkerType_$type), b);
                    if (d != null) {
                        d.collectionChanged = delegateRemove(d.collectionChanged, runOn(this, this.j4));
                    }
                    let e = typeCast(ObservableCollection$1.$.specialize(MarkerType_$type), c);
                    if (e != null) {
                        e.collectionChanged = delegateCombine(e.collectionChanged, runOn(this, this.j4));
                    }
                    this.jb((f, g) => this.iz(f, g));
                    break;
                case "MarkerAutomaticBehavior":
                    this.jz((f) => f.a9 = this.aw);
                    this.jb((f, g) => this.iz(f, g));
                    break;
                case "MarkerBrushes":
                    this.jz((f) => f.ah = this.p);
                    break;
                case "MarkerOutlines":
                    this.jz((f) => f.ai = this.q);
                    break;
                case "AlignsGridLinesToPixels":
                    this.jz((f) => f.qe = this.b9);
                    break;
                case "AnimateSeriesWhenAxisRangeChanges":
                    this.jz((f) => f.da = this.ca);
                    break;
                case "ToolTipType":
                case "CrosshairsDisplayMode":
                case "CrosshairsSnapToData":
                case "CrosshairsLineVerticalStroke":
                case "CrosshairsLineHorizontalStroke":
                case "CrosshairsLineThickness":
                case "CrosshairsAnnotationXAxisBackground":
                case "CrosshairsAnnotationXAxisTextColor":
                case "CrosshairsAnnotationYAxisBackground":
                case "CrosshairsAnnotationYAxisTextColor":
                case "CrosshairsAnnotationEnabled":
                case "CrosshairsAnnotationXAxisPrecision":
                case "CrosshairsAnnotationYAxisPrecision":
                case "FinalValueAnnotationsVisible":
                case "FinalValueAnnotationsPrecision":
                case "FinalValueAnnotationsTextColor":
                case "FinalValueAnnotationsBackground":
                case "CalloutsVisible":
                case "CalloutsItemsSource":
                case "CalloutsXMemberPath":
                case "CalloutsYMemberPath":
                case "CalloutsLabelMemberPath":
                case "CalloutsContentMemberPath":
                    let f = this.kb(runOn(this, this.i3), this.co);
                    this.co = f.p1;
                    break;
            }
            this.j7(a, b, c);
            this.j8(a, b, c);
        }
        j4(a, b) {
            this.jb((c, d) => this.iz(c, d));
        }
        get itemsSource() {
            return this.c9;
        }
        set itemsSource(a) {
            let b = this.itemsSource;
            if (b != a) {
                this.c9 = a;
                this.j6("ItemsSource", b, this.itemsSource);
            }
        }
        get actualItemsSource() {
            return this.c7;
        }
        set actualItemsSource(a) {
            let b = this.actualItemsSource;
            if (b != a) {
                this.c7 = a;
                this.j6("ActualItemsSource", b, this.actualItemsSource);
            }
        }
        get d() {
            return this.b;
        }
        set d(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.j6("IncludedProperties", b, this.b);
            }
        }
        get c() {
            return this.a;
        }
        set c(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.j6("ExcludedProperties", b, this.a);
            }
        }
        get n() {
            return this.g;
        }
        set n(a) {
            let b = this.n;
            if (a != b) {
                this.g = a;
                this.j6("Brushes", b, this.n);
            }
        }
        get r() {
            return this.j;
        }
        set r(a) {
            let b = this.r;
            if (a != b) {
                this.j = a;
                this.j6("Outlines", b, this.r);
            }
        }
        get l() {
            return this.e;
        }
        set l(a) {
            let b = this.e;
            if (a != b) {
                this.e = a;
                this.j6("ActualBrushes", b, this.l);
            }
        }
        get m() {
            return this.f;
        }
        set m(a) {
            let b = this.f;
            if (a != b) {
                this.f = a;
                this.j6("ActualOutlines", b, this.m);
            }
        }
        get legend() {
            return this.al;
        }
        set legend(a) {
            let b = this.legend;
            if (a != b) {
                this.al = a;
                this.j6("Legend", b, this.legend);
            }
        }
        get_cn() {
            return this.b3;
        }
        set_cn(a) {
            let b = this.cn;
            if (a != b) {
                this.b3 = a;
                this.j6("IsHorizontalZoomEnabled", b, this.cn);
            }
        }
        get cn() {
            return this.get_cn();
        }
        set cn(a) {
            this.set_cn(a);
        }
        get_ct() {
            return this.b5;
        }
        set_ct(a) {
            let b = this.ct;
            if (a != b) {
                this.b5 = a;
                this.j6("IsVerticalZoomEnabled", b, this.ct);
            }
        }
        get ct() {
            return this.get_ct();
        }
        set ct(a) {
            this.set_ct(a);
        }
        get_cw() {
            return this.b7;
        }
        set_cw(a) {
            let b = this.cw;
            if (a != b) {
                this.b7 = a;
                this.j6("ShouldDisplayMockData", b, this.cw);
            }
        }
        get cw() {
            return this.get_cw();
        }
        set cw(a) {
            this.set_cw(a);
        }
        get_cx() {
            return this.b8;
        }
        set_cx(a) {
            let b = this.cx;
            if (a != b) {
                this.b8 = a;
                this.j6("ShouldUseSkeletonStyleForMockData", b, this.cx);
            }
        }
        get cx() {
            return this.get_cx();
        }
        set cx(a) {
            this.set_cx(a);
        }
        get_cp() {
            return this.b4;
        }
        set_cp(a) {
            let b = this.cp;
            if (a != b) {
                this.b4 = a;
                this.j6("IsSeriesHighlightingEnabled", b, this.cp);
            }
        }
        get cp() {
            return this.get_cp();
        }
        set cp(a) {
            this.set_cp(a);
        }
        get lt() {
            return this.lr;
        }
        set lt(a) {
            let b = this.lt;
            if (Rect.l_op_Inequality(a, b)) {
                this.lr = a;
                this.j6("WindowRect", b, this.lt);
            }
        }
        get ls() {
            return this.dataChart != null ? this.dataChart.pv : Rect.empty;
        }
        get h9() {
            return this.fs;
        }
        set h9(a) {
            let b = this.h9;
            if (a != b) {
                this.fs = a;
                this.j6("Title", b, this.h9);
            }
        }
        get hy() {
            return this.fq;
        }
        set hy(a) {
            let b = this.hy;
            if (a != b) {
                this.fq = a;
                this.j6("Subtitle", b, this.hy);
            }
        }
        get k0() {
            return this.ky;
        }
        set k0(a) {
            let b = this.k0;
            if (b != a) {
                this.ky = a;
                this.j6("TitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.k0));
            }
        }
        get kz() {
            return this.kx;
        }
        set kz(a) {
            let b = this.kz;
            if (b != a) {
                this.kx = a;
                this.j6("SubtitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.kz));
            }
        }
        get bo() {
            return this.bn;
        }
        set bo(a) {
            let b = this.bo;
            if (a != b) {
                this.bn = a;
                this.j6("UnknownValuePlotting", enumGetBox(UnknownValuePlotting_$type, b), enumGetBox(UnknownValuePlotting_$type, this.bo));
            }
        }
        get_ej() {
            return this.dt;
        }
        set_ej(a) {
            let b = this.ej;
            if (a != b) {
                this.dt = a;
                this.j6("Resolution", b, this.ej);
            }
        }
        get ej() {
            return this.get_ej();
        }
        set ej(a) {
            this.set_ej(a);
        }
        get ep() {
            return this.dz;
        }
        set ep(a) {
            let b = this.ep;
            if (a != b) {
                this.dz = a;
                this.j6("Thickness", b, this.ep);
            }
        }
        get bi() {
            return this.bh;
        }
        set bi(a) {
            let b = this.bi;
            if (a != b) {
                this.bh = a;
                this.j6("OutlineMode", enumGetBox(SeriesOutlineMode_$type, b), enumGetBox(SeriesOutlineMode_$type, this.bi));
            }
        }
        get a0() {
            return this.az;
        }
        set a0(a) {
            let b = this.a0;
            if (a != b) {
                this.az = a;
                this.j6("MarkerOutlineMode", enumGetBox(MarkerOutlineMode_$type, b), enumGetBox(MarkerOutlineMode_$type, this.a0));
            }
        }
        get ay() {
            return this.ax;
        }
        set ay(a) {
            let b = this.ay;
            if (a != b) {
                this.ax = a;
                this.j6("MarkerFillMode", enumGetBox(MarkerFillMode_$type, b), enumGetBox(MarkerFillMode_$type, this.ay));
            }
        }
        get ec() {
            return this.dl;
        }
        set ec(a) {
            let b = this.ec;
            if (a != b) {
                this.dl = a;
                this.j6("MarkerFillOpacity", b, this.ec);
            }
        }
        get ed() {
            return this.dm;
        }
        set ed(a) {
            let b = this.ed;
            if (a != b) {
                this.dm = a;
                this.j6("MarkerThickness", b, this.ed);
            }
        }
        get a5() {
            return this.a4;
        }
        set a5(a) {
            let b = this.a5;
            if (a != b) {
                this.a4 = a;
                this.j6("MarkerTypes", b, this.a5);
            }
        }
        get aw() {
            return this.av;
        }
        set aw(a) {
            let b = this.aw;
            if (a != b) {
                this.av = a;
                this.j6("MarkerAutomaticBehavior", enumGetBox(MarkerAutomaticBehavior_$type, b), enumGetBox(MarkerAutomaticBehavior_$type, this.aw));
            }
        }
        get p() {
            return this.h;
        }
        set p(a) {
            let b = this.p;
            if (a != b) {
                this.h = a;
                this.j6("MarkerBrushes", b, this.p);
            }
        }
        get q() {
            return this.i;
        }
        set q(a) {
            let b = this.q;
            if (!Base.equalsStatic(a, b)) {
                this.i = a;
                this.j6("MarkerOutlines", b, this.q);
            }
        }
        get e8() {
            return this.e1;
        }
        set e8(a) {
            let b = this.e1;
            if (a != b) {
                this.e1 = a;
                this.j6("MarkerMaxCount", b, this.e1);
            }
        }
        get d6() {
            return this.df;
        }
        set d6(a) {
            let b = this.d6;
            if (a != b) {
                this.df = a;
                this.j6("AreaFillOpacity", b, this.d6);
            }
        }
        get ca() {
            return this.bw;
        }
        set ca(a) {
            let b = this.bw;
            if (a != b) {
                this.bw = a;
                this.j6("AnimateSeriesWhenAxisRangeChanges", b, this.bw);
            }
        }
        get t() {
            return this.k;
        }
        set t(a) {
            let b = this.t;
            if (a != b) {
                this.k = a;
                this.j6("TrendLineBrushes", b, this.t);
            }
        }
        get bm() {
            return this.bl;
        }
        set bm(a) {
            let b = this.bm;
            if (a != b) {
                this.bl = a;
                this.j6("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.bm));
            }
        }
        get ev() {
            return this.d5;
        }
        set ev(a) {
            let b = this.ev;
            if (a != b) {
                this.d5 = a;
                this.j6("TrendLineThickness", b, this.ev);
            }
        }
        get b9() {
            return this.bv;
        }
        set b9(a) {
            let b = this.b9;
            if (a != b) {
                this.bv = a;
                this.j6("AlignsGridLinesToPixels", b, this.b9);
            }
        }
        get eg() {
            return this.dq;
        }
        set eg(a) {
            let b = this.dq;
            this.dq = a;
            if (a != b) {
                this.j6("PlotAreaMarginLeft", b, a);
            }
        }
        get ei() {
            return this.ds;
        }
        set ei(a) {
            let b = this.ds;
            this.ds = a;
            if (a != b) {
                this.j6("PlotAreaMarginTop", b, a);
            }
        }
        get eh() {
            return this.dr;
        }
        set eh(a) {
            let b = this.dr;
            this.dr = a;
            if (a != b) {
                this.j6("PlotAreaMarginRight", b, a);
            }
        }
        get ef() {
            return this.dp;
        }
        set ef(a) {
            let b = this.dp;
            this.dp = a;
            if (a != b) {
                this.j6("PlotAreaMarginBottom", b, a);
            }
        }
        j5() {
        }
        get y() {
            return this.x;
        }
        set y(a) {
            let b = this.y;
            if (a != b) {
                this.x = a;
                this.j6("ComputedPlotAreaMarginMode", enumGetBox(ComputedPlotAreaMarginMode_$type, b), enumGetBox(ComputedPlotAreaMarginMode_$type, this.y));
            }
        }
        get bg() {
            return this.bf;
        }
        set bg(a) {
            let b = this.bg;
            if (a != b) {
                this.bf = a;
                this.j6("HighlightingMode", enumGetBox(SeriesHighlightingMode_$type, b), enumGetBox(SeriesHighlightingMode_$type, this.bg));
            }
        }
        get be() {
            return this.bd;
        }
        set be(a) {
            let b = this.be;
            if (a != b) {
                this.bd = a;
                this.j6("HighlightingBehavior", enumGetBox(SeriesHighlightingBehavior_$type, b), enumGetBox(SeriesHighlightingBehavior_$type, this.be));
            }
        }
        get aq() {
            return this.ap;
        }
        set aq(a) {
            let b = this.aq;
            if (a != b) {
                this.ap = a;
                this.j6("LegendHighlightingMode", enumGetBox(LegendHighlightingMode_$type, b), enumGetBox(LegendHighlightingMode_$type, this.aq));
            }
        }
        get au() {
            return this.at;
        }
        set au(a) {
            let b = this.au;
            if (a != b) {
                this.at = a;
                this.j6("LegendItemBadgeShape", enumGetBox(LegendItemBadgeShape_$type, b), enumGetBox(LegendItemBadgeShape_$type, this.au));
            }
        }
        get as() {
            return this.ar;
        }
        set as(a) {
            let b = this.as;
            if (a != b) {
                this.ar = a;
                this.j6("LegendItemBadgeMode", enumGetBox(LegendItemBadgeMode_$type, b), enumGetBox(LegendItemBadgeMode_$type, this.as));
            }
        }
        get cv() {
            return this.b6;
        }
        set cv(a) {
            let b = this.cv;
            if (a != b) {
                this.b6 = a;
                this.j6("ShouldAutoExpandMarginForInitialLabels", b, this.cv);
            }
        }
        get d7() {
            return this.dg;
        }
        set d7(a) {
            let b = this.d7;
            if (a != b) {
                this.dg = a;
                this.j6("AutoExpandMarginExtraPadding", b, this.d7);
            }
        }
        get d8() {
            return this.dh;
        }
        set d8(a) {
            let b = this.d8;
            if (a != b) {
                this.dh = a;
                this.j6("AutoExpandMarginMaximumValue", b, this.d8);
            }
        }
        get fa() {
            return this.e4;
        }
        set fa(a) {
            let b = this.fa;
            if (a != b) {
                this.e4 = a;
                this.j6("TrendLinePeriod", b, this.fa);
            }
        }
        get bk() {
            return this.bj;
        }
        set bk(a) {
            let b = this.bk;
            if (a != b) {
                this.bj = a;
                this.j6("ToolTipType", enumGetBox(ToolTipType_$type, b), enumGetBox(ToolTipType_$type, this.bk));
            }
        }
        get aa() {
            return this.z;
        }
        set aa(a) {
            let b = this.aa;
            if (a != b) {
                this.z = a;
                this.j6("CrosshairsDisplayMode", enumGetBox(CrosshairsDisplayMode_$type, b), enumGetBox(CrosshairsDisplayMode_$type, this.aa));
            }
        }
        get cf() {
            return this.b1;
        }
        set cf(a) {
            let b = this.cf;
            if (a != b) {
                this.b1 = a;
                this.j6("CrosshairsSnapToData", b, this.cf);
            }
        }
        get lg() {
            return this.k6;
        }
        set lg(a) {
            let b = this.lg;
            if (a != b) {
                this.k6 = a;
                this.j6("CrosshairsLineVerticalStroke", b, this.lg);
            }
        }
        get ea() {
            return this.dj;
        }
        set ea(a) {
            let b = this.ea;
            if (a != b) {
                this.dj = a;
                this.j6("CrosshairsLineThickness", b, this.ea);
            }
        }
        get lf() {
            return this.k5;
        }
        set lf(a) {
            let b = this.lf;
            if (a != b) {
                this.k5 = a;
                this.j6("CrosshairsLineHorizontalStroke", b, this.lf);
            }
        }
        get ce() {
            return this.b0;
        }
        set ce(a) {
            let b = this.ce;
            if (a != b) {
                this.b0 = a;
                this.j6("CrosshairsAnnotationEnabled", b, this.ce);
            }
        }
        get lb() {
            return this.k1;
        }
        set lb(a) {
            let b = this.lb;
            if (a != b) {
                this.k1 = a;
                this.j6("CrosshairsAnnotationXAxisBackground", b, this.lb);
            }
        }
        get ld() {
            return this.k3;
        }
        set ld(a) {
            let b = this.ld;
            if (a != b) {
                this.k3 = a;
                this.j6("CrosshairsAnnotationYAxisBackground", b, this.ld);
            }
        }
        get lc() {
            return this.k2;
        }
        set lc(a) {
            let b = this.lc;
            if (a != b) {
                this.k2 = a;
                this.j6("CrosshairsAnnotationXAxisTextColor", b, this.lc);
            }
        }
        get le() {
            return this.k4;
        }
        set le(a) {
            let b = this.le;
            if (a != b) {
                this.k4 = a;
                this.j6("CrosshairsAnnotationYAxisTextColor", b, this.le);
            }
        }
        get e5() {
            return this.ey;
        }
        set e5(a) {
            let b = this.e5;
            if (a != b) {
                this.ey = a;
                this.j6("CrosshairsAnnotationXAxisPrecision", b, this.e5);
            }
        }
        get e6() {
            return this.ez;
        }
        set e6(a) {
            let b = this.e6;
            if (a != b) {
                this.ez = a;
                this.j6("CrosshairsAnnotationYAxisPrecision", b, this.e6);
            }
        }
        get cg() {
            return this.b2;
        }
        set cg(a) {
            let b = this.cg;
            if (a != b) {
                this.b2 = a;
                this.j6("FinalValueAnnotationsVisible", b, this.cg);
            }
        }
        get lh() {
            return this.k7;
        }
        set lh(a) {
            let b = this.lh;
            if (a != b) {
                this.k7 = a;
                this.j6("FinalValueAnnotationsBackground", b, this.lh);
            }
        }
        get li() {
            return this.k8;
        }
        set li(a) {
            let b = this.li;
            if (a != b) {
                this.k8 = a;
                this.j6("FinalValueAnnotationsTextColor", b, this.li);
            }
        }
        get e7() {
            return this.e0;
        }
        set e7(a) {
            let b = this.e7;
            if (a != b) {
                this.e0 = a;
                this.j6("FinalValueAnnotationsPrecision", b, this.e7);
            }
        }
        get cd() {
            return this.bz;
        }
        set cd(a) {
            let b = this.cd;
            if (a != b) {
                this.bz = a;
                this.j6("CalloutsVisible", b, this.cd);
            }
        }
        get cc() {
            return this.by;
        }
        set cc(a) {
            let b = this.cc;
            if (a != b) {
                this.by = a;
                this.j6("CalloutStyleUpdatingEventEnabled", b, this.cc);
            }
        }
        get calloutsItemsSource() {
            return this.c8;
        }
        set calloutsItemsSource(a) {
            let b = this.calloutsItemsSource;
            if (a != b) {
                this.c8 = a;
                this.j6("CalloutsItemsSource", b, this.calloutsItemsSource);
            }
        }
        get gb() {
            return this.fo;
        }
        set gb(a) {
            let b = this.gb;
            if (a != b) {
                this.fo = a;
                this.j6("CalloutsXMemberPath", b, this.gb);
            }
        }
        get gd() {
            return this.fp;
        }
        set gd(a) {
            let b = this.gd;
            if (a != b) {
                this.fp = a;
                this.j6("CalloutsYMemberPath", b, this.gd);
            }
        }
        get f7() {
            return this.fn;
        }
        set f7(a) {
            let b = this.f7;
            if (a != b) {
                this.fn = a;
                this.j6("CalloutsLabelMemberPath", b, this.f7);
            }
        }
        get f4() {
            return this.fm;
        }
        set f4(a) {
            let b = this.f4;
            if (a != b) {
                this.fm = a;
                this.j6("CalloutsContentMemberPath", b, this.f4);
            }
        }
    }
    DomainChart.$t = /*@__PURE__*/ markType(DomainChart, 'DomainChart', Base.$, [INotifyPropertyChanged_$type]);
    DomainChart.fl = /*@__PURE__*/ new Random(0);
    DomainChart.fk = /*@__PURE__*/ new Random(0);
    return DomainChart;
})();
//# sourceMappingURL=DomainChart.js.map
