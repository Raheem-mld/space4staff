/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SplineSeriesBase } from "./SplineSeriesBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { typeCast, runOn, markType } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { SplineSeriesBaseView } from "./SplineSeriesBaseView";
import { Defaults } from "./Defaults";
import { ISortingAxis_$type } from "./ISortingAxis";
/**
 * @hidden
 */
export let SplineSeries = /*@__PURE__*/ (() => {
    class SplineSeries extends SplineSeriesBase {
        constructor() {
            super();
            this.uz = null;
            this.uz = new CategoryLineRasterizer();
            this.ab = SplineSeries.$;
        }
        get_ea() {
            return true;
        }
        bu() {
            return new SplineSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.u0 = a;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        kh(a, b) {
            super.kh(a, b);
            let c = b;
            c.dc();
        }
        sl(a, b) {
            super.sl(a, b);
            let c = b;
            let d = c.cr.d;
            let e = typeCast(SplineSeriesView.$, b);
            let f = a.f;
            let g = this.getEffectiveViewport1(b);
            this.rb.a0(this, this.rv(), runOn(this, this.qw), this.r3(b), this.r4(b));
            let h = false;
            let i = this.rb.b;
            if (i != null) {
                h = true;
            }
            if (h) {
                let j = new ScalerParams(0, b.bv, b.bu, this.tw.cc, g);
                this.sh(f, -1, this.valueColumn.count, this.tw, j, b.q);
            }
            let k = e.di;
            let l = e.dj;
            let m = e.dh;
            this.rb.ad(k, true, false, true, false);
            this.rb.ad(l, true, false, true, false);
            this.rb.ad(m, false, true, false, false);
            m._opacity = 0.75 * this.rb.j;
            if (b.cv(a)) {
                e.dd(f.count, f, true, 1, this.st(f, f.count - 1, b.bu, b.bv), d, this.gh);
                b.cy(a);
            }
        }
        get useHighMarkerFidelity() {
            return this.ry;
        }
    }
    SplineSeries.$t = /*@__PURE__*/ markType(SplineSeries, 'SplineSeries', SplineSeriesBase.$);
    return SplineSeries;
})();
/**
 * @hidden
 */
export let SplineSeriesView = /*@__PURE__*/ (() => {
    class SplineSeriesView extends SplineSeriesBaseView {
        constructor(a) {
            super(a);
            this.db = null;
            this.dl = new Path();
            this.dk = new Path();
            this.dm = new Path();
            this.dg = new Path();
            this.df = new Path();
            this.de = new Path();
            this.db = a;
        }
        as() {
            super.as();
            if (!this.q) {
                this.db.pr = Defaults.e;
            }
        }
        get di() {
            return this.dl;
        }
        get dj() {
            return this.dm;
        }
        get dh() {
            return this.dk;
        }
        dc() {
            this.dk.ak = null;
            this.dl.ak = null;
            this.dm.ak = null;
            this.aq();
        }
        dd(a, b, c, d, e, f, g) {
            this.db.uz.a = typeCast(ISortingAxis_$type, this.ct.fetchXAxis()) !== null ? true : false;
            this.db.uz.m(this.dl, this.dk, this.dm, a, b, c, d, e, f, g);
            this.aq();
        }
        bc() {
            super.bc();
            this.df.ak = this.dl.ak;
            this.dg.ak = this.dm.ak;
            this.de.ak = this.dk.ak;
            let a = this.bo();
            this.df._stroke = a;
            this.df.ac = this.e.fl + 3;
            this.dg._stroke = a;
            this.dg.ac = this.e.fl + 3;
            this.de._fill = a;
            this.de._opacity = 1;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.s(this.de);
                    a.s(this.df);
                    a.s(this.dg);
                }
                else {
                    a.s(this.dk);
                    a.s(this.dl);
                    a.s(this.dm);
                }
            }
        }
        al(a) {
            super.al(a);
            this.e.a6.exportPathData(a, this.dl, "lowerShape", ["Lower", "Main"]);
            this.e.a6.exportPathData(a, this.dm, "upperShape", ["Upper"]);
            this.e.a6.exportPathData(a, this.dk, "translucentShape", ["Translucent"]);
        }
    }
    SplineSeriesView.$t = /*@__PURE__*/ markType(SplineSeriesView, 'SplineSeriesView', SplineSeriesBaseView.$);
    return SplineSeriesView;
})();
//# sourceMappingURL=SplineSeries_combined.js.map
