/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnchoredRadialSeries } from "./AnchoredRadialSeries";
import { DependencyProperty } from "igniteui-react-core";
import { Point_$type, runOn, markType, markDep, fromEnum } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { PathGeometry } from "igniteui-react-core";
import { ViewportUtils } from "./ViewportUtils";
import { SliceCoords } from "./SliceCoords";
import { PathFigure } from "igniteui-react-core";
import { LineSegment } from "igniteui-react-core";
import { ArcSegment } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { AnchoredRadialSeriesView } from "./AnchoredRadialSeriesView";
import { Defaults } from "./Defaults";
import { DataContext } from "igniteui-react-core";
/**
 * @hidden
 */
export let RadialPieSeries = /*@__PURE__*/ (() => {
    class RadialPieSeries extends AnchoredRadialSeries {
        constructor() {
            super();
            this.ab = RadialPieSeries.$;
        }
        get_dy() {
            return true;
        }
        get_dw() {
            return true;
        }
        bu() {
            return new RadialPieSeriesView(this);
        }
        lh(a) {
            super.lh(a);
            this.tf = a;
        }
        preferredCategoryMode(a) {
            return a != null && a == this.qz ? 2 : 0;
        }
        kh(a, b) {
            super.kh(a, b);
            let c = b;
            if (a && c.c1 != null) {
                c.c1.count = 0;
            }
        }
        f1() {
            return this.qz.ki(this.bx.bv, this.bx.bu, this.getEffectiveViewport1(this.bx));
        }
        get_cy() {
            return true;
        }
        r4(a, b) {
            super.r4(a, b);
            let c = b;
            let d = b.bv;
            let e = b.bu;
            let f = this.getEffectiveViewport1(b);
            let g = this.o7(b);
            let h = this.q6.j7(e, d, f, g);
            let i = a.f;
            let j = this.q6;
            let k = Math.max(0, 0.5 * j.l9);
            let l = k;
            l = Math.max(l, h.minLength);
            let m = this.qz.ki(d, e, f);
            let n = { $type: Point_$type, x: 0.5, y: 0.5 };
            let o = this.tg;
            let p = this.th;
            let q = (o > 0 && p > 0);
            let r = this.si.count;
            this.rd.a0(this, this.rp(), runOn(this, this.qw), this.rr(b), this.rs(b));
            this.rd.r = this.tg;
            this.rd.s = this.th;
            this.rd.k = this.tg;
            this.rd.l = this.th;
            let s = false;
            let t = this.rd.b;
            if (t != null) {
                s = true;
            }
            let u = this.qz;
            let v = new ScalerParams(1, b.bv, b.bu, u.cc);
            v.c = this.getEffectiveViewport();
            let w = 0;
            for (let x = 0; x < i.count; ++x) {
                let y = c.c1.item(x);
                let z = i._inner[x][0];
                let aa = Math.min(i._inner[x][2], h.maxLength);
                if (s) {
                    this.sz(i, x, r, u, v, b.q);
                }
                let ab = this.rd.k;
                let ac = this.rd.l;
                q = (ab > 0 && ac > 0);
                let ad = null;
                if (q) {
                    ad = this.tm(d, e, z - (m * 0.5), z + (m * 0.5), l, aa, n, ab, ac);
                }
                else {
                    ad = this.tn(d, e, z - (m * 0.5), z + (m * 0.5), l, aa, n);
                }
                y.ak = ad;
                this.rd.ad(y, false, false, false, false);
                let ae = i._inner[x][2];
                if (ae > w) {
                    w = ae;
                }
            }
            c.cu = ViewportUtils.d(w, d, e);
            c.cv = { $type: Point_$type, x: ViewportUtils.c(n.x, d, e), y: ViewportUtils.f(n.y, d, e) };
            c.c1.count = i.count;
            c.c6();
        }
        tn(a, b, c, d, e, f, g) {
            let h = SliceCoords.b(a, b, c, d, e, f, g);
            let i = new PathFigure();
            i._startPoint = h.d;
            i._isClosed = true;
            i._segments.add(((() => {
                let $ret = new LineSegment(1);
                $ret.c = h.f;
                return $ret;
            })()));
            i._segments.add(((() => {
                let $ret = new ArcSegment();
                $ret.e = h.h;
                $ret.f = h.n;
                $ret.d = 1;
                $ret.b = h.c;
                return $ret;
            })()));
            i._segments.add(((() => {
                let $ret = new LineSegment(1);
                $ret.c = h.j;
                return $ret;
            })()));
            i._segments.add(((() => {
                let $ret = new ArcSegment();
                $ret.e = h.d;
                $ret.f = h.m;
                $ret.d = 0;
                $ret.b = h.c;
                return $ret;
            })()));
            let j = new PathGeometry();
            j.c.add(i);
            return j;
        }
        tm(a, b, c, d, e, f, g, h, i) {
            let j = SliceCoords.a(a, b, c, d, e, f, g, h, i);
            if (j == null) {
                return this.tn(a, b, c, d, e, f, g);
            }
            let k = new PathFigure();
            k._startPoint = j.d;
            k._isClosed = true;
            let l = ((c + ((d - c) * 0.5)) * 180 / Math.PI) + 90;
            let m = new Size(1, j.l.width * (e / f), j.l.height * (e / f));
            k._segments.add(((() => {
                let $ret = new ArcSegment();
                $ret.e = j.e;
                $ret.f = m;
                $ret.c = l;
                $ret.d = 1;
                $ret.b = false;
                return $ret;
            })()));
            k._segments.add(((() => {
                let $ret = new LineSegment(1);
                $ret.c = j.f;
                return $ret;
            })()));
            k._segments.add(((() => {
                let $ret = new ArcSegment();
                $ret.e = j.g;
                $ret.f = j.l;
                $ret.c = l;
                $ret.d = 1;
                $ret.b = false;
                return $ret;
            })()));
            k._segments.add(((() => {
                let $ret = new ArcSegment();
                $ret.e = j.h;
                $ret.f = j.n;
                $ret.d = 1;
                $ret.b = j.c;
                return $ret;
            })()));
            k._segments.add(((() => {
                let $ret = new ArcSegment();
                $ret.e = j.i;
                $ret.f = j.l;
                $ret.c = l;
                $ret.d = 1;
                $ret.b = false;
                return $ret;
            })()));
            k._segments.add(((() => {
                let $ret = new LineSegment(1);
                $ret.c = j.j;
                return $ret;
            })()));
            k._segments.add(((() => {
                let $ret = new ArcSegment();
                $ret.e = j.k;
                $ret.f = m;
                $ret.c = l;
                $ret.d = 1;
                $ret.b = false;
                return $ret;
            })()));
            k._segments.add(((() => {
                let $ret = new ArcSegment();
                $ret.e = j.d;
                $ret.f = j.m;
                $ret.d = 0;
                $ret.b = j.c;
                return $ret;
            })()));
            let n = new PathGeometry();
            n.c.add(k);
            return n;
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case RadialPieSeries.$$p[0]:
                case RadialPieSeries.$$p[1]:
                    this.lj();
                    break;
            }
        }
    }
    RadialPieSeries.$t = /*@__PURE__*/ markType(RadialPieSeries, 'RadialPieSeries', AnchoredRadialSeries.$);
    RadialPieSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, RadialPieSeries, 'raisePropertyChanged', ['RadiusX:tg:tk', [1, 2], 'RadiusY:th:tl', [1, 2]]);
    return RadialPieSeries;
})();
/**
 * @hidden
 */
export let RadialPieSeriesView = /*@__PURE__*/ (() => {
    class RadialPieSeriesView extends AnchoredRadialSeriesView {
        constructor(a) {
            super(a);
            this.c0 = null;
            this.c1 = null;
            this.c2 = null;
            this.c7 = new Path();
            this.c0 = a;
            this.c1 = ((() => {
                let $ret = new Pool$1(Path.$);
                $ret.create = runOn(this, this.c8);
                $ret.activate = runOn(this, this.c3);
                $ret.disactivate = runOn(this, this.c5);
                $ret.destroy = runOn(this, this.c4);
                return $ret;
            })());
        }
        as() {
            super.as();
            this.c2 = new List$1(Path.$, 0);
            if (!this.q) {
                this.cr.pr = Defaults.c;
                this.cr.gh = Defaults.h;
                this.cr.gm = Defaults.i;
            }
        }
        c8() {
            let a = ((() => {
                let $ret = new Path();
                $ret.dataContext = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this.e;
                    return $ret;
                })());
                return $ret;
            })());
            this.c2.add(a);
            a._visibility = 1;
            return a;
        }
        c3(a) {
            a._visibility = 0;
        }
        c5(a) {
            a._visibility = 1;
        }
        c4(a) {
            this.c2.remove(a);
        }
        be(a, b) {
            super.be(a, b);
            let c = a;
        }
        ac(a) {
            return this.c2._inner[a];
        }
        ab(a) {
            let b = this.c2._inner[a];
            this.c7._visibility = b._visibility;
            this.c7.ak = b.ak;
            let c = this.bp(a);
            this.c7._fill = c;
            this.c7._stroke = c;
            this.c7.ac = this.e.fl;
            return this.c7;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                for (let c = 0; c < this.c2.count; c++) {
                    let d = this.aa(c, b);
                    a.s(d);
                }
            }
        }
        c6() {
            this.aq();
        }
        al(a) {
            super.al(a);
            let b = 0;
            for (let c of fromEnum(this.c1.a)) {
                this.e.a6.exportPathData(a, c, "slice" + b, ["Main", "Fill"]);
                b++;
            }
        }
    }
    RadialPieSeriesView.$t = /*@__PURE__*/ markType(RadialPieSeriesView, 'RadialPieSeriesView', AnchoredRadialSeriesView.$);
    return RadialPieSeriesView;
})();
//# sourceMappingURL=RadialPieSeries_combined.js.map
