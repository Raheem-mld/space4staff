/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Series } from "./Series";
import { DependencyProperty } from "igniteui-react-core";
import { Point_$type, Boolean_$type, runOn, delegateRemove, typeCast, delegateCombine, fromEnum, fromEn, markType, markDep } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { XamDataChart } from "./XamDataChart";
import { Tuple$2 } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
export let AnnotationLayer = /*@__PURE__*/ (() => {
    class AnnotationLayer extends Series {
        constructor() {
            super();
            this.ql = null;
            this.pk = null;
            this.pj = null;
            this.pl = null;
            this.qj = { $type: Point_$type, x: NaN, y: NaN };
            this.pm = false;
            this.ql = { $type: Point_$type, x: NaN, y: NaN };
        }
        bu() {
            return new AnnotationLayerView(this);
        }
        lh(a) {
            super.lh(a);
            this.pi = a;
        }
        pq(a) {
            if (a == null) {
                return false;
            }
            if (a.c6) {
                return false;
            }
            if (a.ed) {
                return false;
            }
            if (a == this) {
                return false;
            }
            return a.e3(a.bx.bu, a.bx.bv, a.bx);
        }
        get_dd() {
            return this.pn;
        }
        bo() {
            if (this.bp == 0) {
                return 1;
            }
            else {
                return super.bo();
            }
        }
        get_ds() {
            return this.ps || this.pt;
        }
        get_isUsableInLegend() {
            return this.pt;
        }
        lm(a, b, c, d) {
            super.lm(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    let e = c;
                    let f = d;
                    if (e != null) {
                        this.qc(e.series);
                        let g = e.series;
                        g.collectionChanged = delegateRemove(g.collectionChanged, runOn(this, this.p9));
                        if (typeCast(XamDataChart.$, e) !== null) {
                            let h = e;
                            this.qb(h.axes);
                            let i = h.axes;
                            i.collectionChanged = delegateRemove(i.collectionChanged, runOn(this, this.pz));
                        }
                    }
                    if (f != null) {
                        this.p7(f.series);
                        let j = f.series;
                        j.collectionChanged = delegateCombine(j.collectionChanged, runOn(this, this.p9));
                        if (typeCast(XamDataChart.$, f) !== null) {
                            let k = f;
                            this.p6(k.axes);
                            let l = k.axes;
                            l.collectionChanged = delegateCombine(l.collectionChanged, runOn(this, this.pz));
                        }
                    }
                    break;
                case AnnotationLayer.$$p[3]:
                case AnnotationLayer.$$p[2]:
                    if (this.ds) {
                        if (this.g9 == -1) {
                            this.g9 = XamDataChart.rl(this);
                        }
                    }
                    else {
                        this.g9 = -1;
                        this.of = null;
                        this.oi = null;
                    }
                    if (this.ca != null) {
                        this.ca.kl();
                    }
                    this.l0(true);
                    break;
                case "TransitionProgress":
                    this.pl.c(this.gn, this.pk, this.pj);
                    if (this.ct(this.bx)) {
                        return;
                    }
                    if (this.gn == 1) {
                        this.p8(this.pj, this.bx);
                    }
                    else {
                        this.p8(this.pl, this.bx);
                    }
                    if (this.ca != null) {
                        this.ca.ln(this);
                    }
                    break;
                case AnnotationLayer.$$p[1]:
                    if (this.ca != null) {
                        this.ca.kj();
                    }
                    break;
                case AnnotationLayer.$$p[0]:
                    this.ql = this.qk;
                    this.lb(this.qk);
                    break;
                case "ShouldRenderAsOverlay":
                    if (this.ca != null) {
                        this.bx.ak(this.ca);
                        this.bx.ag(this.ca);
                    }
                    break;
            }
        }
        qc(a) {
            for (let b of fromEnum(a)) {
                if (!(b == this)) {
                    b.renderRequested = delegateRemove(b.renderRequested, runOn(this, this.qa));
                }
            }
            this.l0(true);
        }
        qb(a) {
            for (let b of fromEnum(a)) {
                b.renderRequested = delegateRemove(b.renderRequested, runOn(this, this.p0));
            }
            this.l0(true);
        }
        p7(a) {
            for (let b of fromEnum(a)) {
                if (!(b == this)) {
                    b.renderRequested = delegateCombine(b.renderRequested, runOn(this, this.qa));
                }
            }
            this.l0(true);
        }
        p6(a) {
            for (let b of fromEnum(a)) {
                b.renderRequested = delegateCombine(b.renderRequested, runOn(this, this.p0));
            }
            this.l0(true);
        }
        po(a) {
            if (a == null) {
                return false;
            }
            return true;
        }
        p0(a, b) {
            if (this.po(a)) {
                this.p2(a, b.animate);
            }
        }
        pp(a) {
            if (a == null) {
                return false;
            }
            if (a.c6) {
                return false;
            }
            return true;
        }
        qa(a, b) {
            if (this.pp(a)) {
                this.p3(a, b.animate);
            }
        }
        p2(a, b) {
        }
        p3(a, b) {
        }
        p9(a, b) {
            this.p4(b);
        }
        pz(a, b) {
            this.p1(b);
        }
        qh() {
            if (this.of != null) {
                return this.of;
            }
            return this.oj;
        }
        qi() {
            if (this.oi != null) {
                return this.oi;
            }
            return this.oo;
        }
        p1(a) {
            if (a.oldItems != null) {
                for (let b of fromEn(a.oldItems)) {
                    b.renderRequested = delegateRemove(b.renderRequested, runOn(this, this.p0));
                }
            }
            if (a.newItems != null) {
                for (let c of fromEn(a.newItems)) {
                    c.renderRequested = delegateCombine(c.renderRequested, runOn(this, this.p0));
                }
            }
            this.l0(true);
        }
        p4(a) {
            if (a.oldItems != null) {
                for (let b of fromEn(a.oldItems)) {
                    b.renderRequested = delegateRemove(b.renderRequested, runOn(this, this.qa));
                }
            }
            if (a.newItems != null) {
                for (let c of fromEn(a.newItems)) {
                    c.renderRequested = delegateCombine(c.renderRequested, runOn(this, this.qa));
                }
            }
            this.l0(true);
        }
        mn(a, b) {
            this.l0(false);
        }
        mm(a, b) {
            this.l0(true);
        }
        l1(a) {
            super.l1(a);
            if (this.ct(this.bx)) {
                return;
            }
            if (this.ei(a) && !this.em) {
                let b = this.pk;
                if (this.cr()) {
                    if (this.cb.g) {
                        this.cb.t();
                    }
                    this.pk = this.pl;
                    this.pl = b;
                }
                else {
                    this.pk = this.pj;
                    this.pj = b;
                }
                this.p5(this.pj, this.bx);
                this.l8();
            }
            else {
                if (!this.em) {
                    this.p5(this.pj, this.bx);
                }
                this.p8(this.pj, this.bx);
            }
        }
        get_c6() {
            return true;
        }
        p5(a, b) {
        }
        p8(a, b) {
            this.pi.b1();
        }
        py(a) {
            let b = { $type: Point_$type, x: this.qj.x, y: this.qj.y };
            if (a.isVertical) {
                if (isNaN_(this.qj.y)) {
                    return new Tuple$2(Boolean_$type, Point_$type, false, b);
                }
                if (isNaN_(this.qj.x)) {
                    b.x = 0;
                    return new Tuple$2(Boolean_$type, Point_$type, true, b);
                }
            }
            else {
                if (isNaN_(this.qj.x)) {
                    return new Tuple$2(Boolean_$type, Point_$type, false, b);
                }
                if (isNaN_(this.qj.y)) {
                    b.y = 0;
                    return new Tuple$2(Boolean_$type, Point_$type, true, b);
                }
            }
            return new Tuple$2(Boolean_$type, Point_$type, true, b);
        }
        lb(a) {
            super.lb(a);
            if (isNaN_(this.ql.x) && isNaN_(this.ql.y)) {
                if (isNaN_(a.x) && isNaN_(a.y)) {
                    this.pi.b0();
                    return;
                }
                else {
                    this.pi.b2();
                    this.qj = a;
                }
            }
            else {
                this.pi.b2();
                this.qj = this.ql;
            }
            this.l0(true);
        }
        e3(a, b, c) {
            let d = super.e3(a, b, c);
            if (!this.bx.t()) {
                d = false;
                return d;
            }
            return d;
        }
        get_ez() {
            return this.pr;
        }
        get pr() {
            return this.pm;
        }
        set pr(a) {
            let b = this.pm;
            this.pm = a;
            this.raisePropertyChanged("ShouldRenderAsOverlay", b, this.pm);
        }
    }
    AnnotationLayer.$t = /*@__PURE__*/ markType(AnnotationLayer, 'AnnotationLayer', Series.$);
    AnnotationLayer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, AnnotationLayer, 'raisePropertyChanged', ['CursorPosition:qk:qd', [Point_$type, { $type: Point_$type, x: NaN, y: NaN }], 'IsDefaultCrosshairDisabled:pn:qe', [0, true], 'UseIndex:ps:qf', [0, false], 'UseLegend:pt:qg', [0, false]]);
    return AnnotationLayer;
})();
/**
 * @hidden
 */
export let AnnotationLayerView = /*@__PURE__*/ (() => {
    class AnnotationLayerView extends SeriesView {
        constructor(a) {
            super(a);
            this.bx = null;
            this.by = false;
            this.bz = -1;
            this.bx = a;
        }
        b3() {
            if (this.by) {
                this.by = false;
                this.bz = -1;
                this.bx.qj = { $type: Point_$type, x: NaN, y: NaN };
                this.bx.l0(true);
            }
        }
        b0() {
            this.by = true;
            if (this.e.gw != null) {
                this.e.gw.setTimeout(runOn(this, this.b3), 300);
            }
            else {
                this.bz = window.setTimeout(runOn(this, this.b3), 300);
            }
        }
        b2() {
            if (this.by == true) {
                this.by = false;
                if (this.bz != -1) {
                    window.clearTimeout(this.bz);
                    this.bz = -1;
                }
            }
        }
        b1() {
            this.aq();
        }
    }
    AnnotationLayerView.$t = /*@__PURE__*/ markType(AnnotationLayerView, 'AnnotationLayerView', SeriesView.$);
    return AnnotationLayerView;
})();
//# sourceMappingURL=AnnotationLayer_combined.js.map
