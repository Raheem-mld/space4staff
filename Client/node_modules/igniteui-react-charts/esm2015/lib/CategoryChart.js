/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChart } from "./XYChart";
import { typeCast, runOn, delegateCombine, enumGetBox, markType, TypeRegistrar, getInstanceType } from "igniteui-react-core";
import { CategoryChartType_$type } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance_$type } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode_$type } from "./CategoryTransitionInMode";
import { TransitionInSpeedType_$type } from "./TransitionInSpeedType";
import { CategoryXAxis } from "./CategoryXAxis";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleCategorySeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { Series } from "./Series";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { ArrayExtension } from "igniteui-react-core";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { CategoryChartMockDataGenerator } from "./CategoryChartMockDataGenerator";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let CategoryChart = /*@__PURE__*/ (() => {
    class CategoryChart extends XYChart {
        constructor() {
            super();
            this.ug = 1000;
            this.tf = null;
            this.sz = 9;
            this.s1 = 1;
            this.tj = false;
            this.s3 = 0;
            this.td = 0;
            this.tt = 0;
            this.tu = 0;
            this.ts = 0;
            this.tv = 0;
            this.tw = NaN;
            this.tl = false;
            this.uh = 10;
            this.ty = NaN;
            this.tx = NaN;
            this.tz = 0;
            this.sv = null;
            this.sw = null;
            this.tk = true;
            this.th = false;
            this.ti = false;
            this.tr = null;
            this.i4();
        }
        jl() {
            super.jl();
            if (this.dataChart == null) {
                return;
            }
            let a = this.dataChart.cf.j.e();
            this.sx = a.d;
            this.sy = a.e;
            if (this.r7 == null) {
                this.r7 = a.k;
            }
            if (this.se == null) {
                this.se = a.k;
            }
            this.n6 = 0;
            this.sf = AxisDefaults.h;
            this.si = null;
            this.sb = AxisDefaults.g;
            this.r8 = null;
            this.np = AxisDefaults.f;
            this.sc = AxisDefaults.j;
            this.nq = AxisDefaults.e;
            this.ce = true;
            this.cf = false;
            this.aa = 0;
            this.ea = Defaults.j;
            this.lg = Defaults.ae;
            this.lb = Defaults.af;
            this.lc = Defaults.ag;
        }
        jn(a, b) {
            super.jn(a, b);
            a.hb = this.ui;
            a.cd = this.tg;
        }
        j7(a, b, c) {
            super.j7(a, b, c);
            switch (a) {
                case "TransitionInDuration":
                    this.ja((d) => d.hb = this.ui);
                    break;
                case "TransitionInEasingFunction":
                    this.ja((d) => d.cd = this.tg);
                    break;
            }
        }
        get ui() {
            return this.ug;
        }
        set ui(a) {
            let b = this.ui;
            if (a != b) {
                this.ug = a;
                this.j6("TransitionInDuration", b, this.ui);
            }
        }
        get tg() {
            return this.tf;
        }
        set tg(a) {
            let b = this.tg;
            if (a != b) {
                this.tf = a;
                this.j6("TransitionInEasingFunction", b, this.tg);
            }
        }
        ul() {
            let cvd_ = this.fe();
            cvd_.scaleByViewport();
            return (cvd_.serialize());
        }
        jg(a) {
            super.jg(a);
            a.da = this.ca;
        }
        jm(a, b) {
            super.jm(a, b);
            let c = typeCast(HorizontalAnchoredCategorySeries.$, a);
            if (c == null) {
                return;
            }
            c.sx = this.s2;
            c.ru = this.to;
            c.re = this.s4;
            c.b7 = this.te;
            c.trendLineBrush = ArrayExtension.getModulus$1(Brush.$, this.t, b);
            c.trendLineType = this.bm;
            c.trendLineThickness = this.ev;
            c.pr = this.a3(a, b);
            if (a.dx) {
                a.l5(ArrayExtension.getModulus$1(Brush.$, this.sx, b), ArrayExtension.getModulus$1(Brush.$, this.sy, b));
            }
        }
        s5() {
            return new CategoryXAxis();
        }
        s9() {
            return new NumericYAxis();
        }
        i1() {
            this.xAxis = this.s5();
            this.xAxis.name = "xAxis";
            let a = this.xAxis;
            a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.u9));
            this.yAxis = this.s9();
            this.yAxis.name = "yAxis";
            let b = this.yAxis;
            b.propertyChanged = delegateCombine(b.propertyChanged, runOn(this, this.va));
            if (this.xAxis.ay == null) {
                this.xAxis.ay = new AxisLabelSettings();
            }
            if (this.yAxis.ay == null) {
                this.yAxis.ay = new AxisLabelSettings();
            }
        }
        q7(a) {
            super.q7(a);
            a.kf = this.tp;
        }
        get_ai() {
            return 0;
        }
        get ai() {
            return this.get_ai();
        }
        get s0() {
            return this.sz;
        }
        set s0(a) {
            if (a != this.sz) {
                let b = this.s0;
                this.sz = a;
                this.j6("ChartType", enumGetBox(CategoryChartType_$type, b), enumGetBox(CategoryChartType_$type, this.s0));
            }
        }
        get s2() {
            return this.s1;
        }
        set s2(a) {
            let b = this.s2;
            if (a != b) {
                this.s1 = a;
                this.j6("MarkerCollisionAvoidance", enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, b), enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, this.s2));
            }
        }
        get to() {
            return this.tj;
        }
        set to(a) {
            let b = this.to;
            if (a != b) {
                this.tj = a;
                this.j6("IsTransitionInEnabled", b, this.to);
            }
        }
        get s4() {
            return this.s3;
        }
        set s4(a) {
            let b = this.s4;
            if (a != b) {
                this.s3 = a;
                this.j6("TransitionInMode", enumGetBox(CategoryTransitionInMode_$type, b), enumGetBox(CategoryTransitionInMode_$type, this.s4));
            }
        }
        get te() {
            return this.td;
        }
        set te(a) {
            let b = this.te;
            if (a != b) {
                this.td = a;
                this.j6("TransitionInSpeedType", enumGetBox(TransitionInSpeedType_$type, b), enumGetBox(TransitionInSpeedType_$type, this.te));
            }
        }
        get t7() {
            return this.tt;
        }
        set t7(a) {
            let b = this.t7;
            if (a != b) {
                this.tt = a;
                this.j6("XAxisInterval", b, this.t7);
            }
        }
        get t8() {
            return this.tu;
        }
        set t8(a) {
            let b = this.t8;
            if (a != b) {
                this.tu = a;
                this.j6("XAxisMinorInterval", b, this.t8);
            }
        }
        get t6() {
            return this.ts;
        }
        set t6(a) {
            let b = this.t6;
            if (a != b) {
                this.ts = a;
                this.j6("XAxisGap", b, this.t6);
            }
        }
        get t9() {
            return this.tv;
        }
        set t9(a) {
            let b = this.t9;
            if (a != b) {
                this.tv = a;
                this.j6("XAxisOverlap", b, this.t9);
            }
        }
        get uc() {
            return this.tw;
        }
        set uc(a) {
            let b = this.uc;
            if (a != b) {
                this.tw = a;
                this.j6("YAxisInterval", b, this.uc);
            }
        }
        get tq() {
            return this.tl;
        }
        set tq(a) {
            let b = this.tq;
            if (a != b) {
                this.tl = a;
                this.j6("YAxisIsLogarithmic", b, this.tq);
            }
        }
        get uj() {
            return this.uh;
        }
        set uj(a) {
            let b = this.uj;
            if (a != b) {
                this.uh = a;
                this.j6("YAxisLogarithmBase", b, this.uj);
            }
        }
        get ue() {
            return this.ty;
        }
        set ue(a) {
            let b = this.ue;
            if (a != b) {
                this.ty = a;
                this.j6("YAxisMinimumValue", b, this.ue);
            }
        }
        get ud() {
            return this.tx;
        }
        set ud(a) {
            let b = this.ud;
            if (a != b) {
                this.tx = a;
                this.j6("YAxisMaximumValue", b, this.ud);
            }
        }
        get uf() {
            return this.tz;
        }
        set uf(a) {
            let b = this.uf;
            if (a != b) {
                this.tz = a;
                this.j6("YAxisMinorInterval", b, this.uf);
            }
        }
        get t5() {
            return this.xAxis.l3;
        }
        get t4() {
            return this.xAxis.l2;
        }
        t1() {
            return this.t5;
        }
        t3() {
            return this.ub;
        }
        t0() {
            return this.t4;
        }
        t2() {
            return this.ua;
        }
        get ub() {
            return this.yAxis.kv;
        }
        get ua() {
            return this.yAxis.ku;
        }
        get sx() {
            return this.sv;
        }
        set sx(a) {
            let b = this.sx;
            if (a != b) {
                this.sv = a;
                this.j6("NegativeBrushes", b, this.sx);
            }
        }
        get sy() {
            return this.sw;
        }
        set sy(a) {
            let b = this.sy;
            if (a != b) {
                this.sw = a;
                this.j6("NegativeOutlines", b, this.sy);
            }
        }
        get tp() {
            return this.tk;
        }
        set tp(a) {
            let b = this.tp;
            if (a != b) {
                this.tk = a;
                this.j6("YAxisAbbreviateLargeNumbers", b, this.tp);
            }
        }
        get tm() {
            return this.th;
        }
        set tm(a) {
            let b = this.tm;
            if (a != b) {
                this.th = a;
                this.j6("IsCategoryHighlightingEnabled", b, this.tm);
            }
        }
        get tn() {
            return this.ti;
        }
        set tn(a) {
            let b = this.tn;
            if (a != b) {
                this.ti = a;
                this.j6("IsItemHighlightingEnabled", b, this.tn);
            }
        }
        get_c5() {
            let a = new List$1(DataSeriesType_$type, 0);
            if (TypeRegistrar.isRegistered("AreaSeries")) {
                a.add(2);
            }
            if (TypeRegistrar.isRegistered("ColumnSeries")) {
                a.add(1);
            }
            if (TypeRegistrar.isRegistered("LineSeries")) {
                a.add(0);
            }
            if (TypeRegistrar.isRegistered("PointSeries")) {
                a.add(10);
            }
            if (TypeRegistrar.isRegistered("SplineSeries")) {
                a.add(6);
            }
            if (TypeRegistrar.isRegistered("SplineAreaSeries")) {
                a.add(7);
            }
            if (TypeRegistrar.isRegistered("StepAreaSeries")) {
                a.add(5);
            }
            if (TypeRegistrar.isRegistered("StepLineSeries")) {
                a.add(4);
            }
            if (TypeRegistrar.isRegistered("WaterfallSeries")) {
                a.add(8);
            }
            return a;
        }
        get c5() {
            return this.get_c5();
        }
        de() {
            if (this.tr == null) {
                this.tr = CategoryChartMockDataGenerator.a();
            }
            return this.tr;
        }
        u9(a, b) {
            switch (b.propertyName) {
                case "ActualMinimum":
                    this.kd("XAxisActualMinimum");
                    break;
                case "ActualMaximum":
                    this.kd("XAxisActualMaximum");
                    break;
            }
        }
        va(a, b) {
            switch (b.propertyName) {
                case "ActualMinimumValue":
                    this.kd("YAxisActualMinimum");
                    break;
                case "ActualMaximumValue":
                    this.kd("YAxisActualMaximum");
                    break;
            }
        }
        kp() {
            super.kp();
            this.xAxis.fj = this.og == null ? XYChart.os(this.xAxis, this.ac.dataSeries) : this.og;
            this.xAxis.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
        }
        get xAxis() {
            return this._xAxis;
        }
        set xAxis(a) {
            this._xAxis = a;
        }
        get yAxis() {
            return this._yAxis;
        }
        set yAxis(a) {
            this._yAxis = a;
        }
        s8(a, b) {
            switch (a) {
                case 2: return this.bc(1);
                case 3: return this.bc(10);
                case 0: return this.bc(0);
                case 1: return this.bc(2);
                case 6: return this.bc(6);
                case 7: return this.bc(7);
                case 4: return this.bc(4);
                case 5: return this.bc(5);
                case 8: return this.bc(8);
                case 9: return this.s7(b);
                default: return this.bc(1);
            }
        }
        s7(a) {
            return this.bc(a);
        }
        ab(a) {
            switch (this.s0) {
                case 1: return 2;
                case 0: return 0;
                case 3: return 10;
                case 6: return 6;
                case 7: return 7;
                case 5: return 5;
                case 4: return 4;
                case 8: return 8;
                case 9: return a.suggestedSeries;
                default:
                case 2: return 1;
            }
        }
        bb(a, b) {
            let c = this.s8(this.s0, a.suggestedSeries);
            c.tb = a.findMatchingHint(0).path;
            c.xAxis = this.xAxis;
            c.yAxis = this.yAxis;
            return c;
        }
        kn(a) {
            if (a.suggestedSecondaryAxis == 2) {
                this.yAxis.kk = true;
                this.yAxis.k7 = 10;
            }
        }
        kq() {
            this.yAxis.kk = this.tq;
            this.yAxis.k7 = this.uj;
        }
        get_c4() {
            return ((() => {
                let $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
                $ret.add(new SimpleCategorySeriesRule());
                $ret.add(new SubCollectionsRule());
                return $ret;
            })());
        }
        get c4() {
            return this.get_c4();
        }
        iz(a, b) {
            let c = typeCast(HorizontalAnchoredCategorySeries.$, a);
            if (c != null) {
                c.sx = this.s2;
                c.pr = this.a3(a, b);
            }
        }
        u7(a) {
            this.u8((b, c) => a(b));
        }
        u8(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = typeCast(HorizontalAnchoredCategorySeries.$, this.dataChart.series._inner[b]);
                if (c == null) {
                    continue;
                }
                a(c, b);
            }
        }
        ly() {
            return this.xAxis;
        }
        lz() {
            return this.yAxis;
        }
        tb() {
            return this.bc(30);
        }
        tc() {
            return this.bc(31);
        }
        c1(a, b) {
            let c = super.c1(a, b);
            if (c != null) {
                let d = new List$1(Series.$, 0);
                if (this.th) {
                    d.add(this.tb());
                }
                if (this.ti) {
                    d.add(this.tc());
                }
                for (let e = 0; e < d.count; e++) {
                    let f = d._inner[e];
                    f.name = a + getInstanceType(f).typeName;
                    c.add(f);
                }
            }
            return c;
        }
        ku(a, b, c) {
            super.ku(a, b, c);
            if (this.ac.dataSeries.count > 0) {
                if (stringIsNullOrEmpty(this.gb)) {
                    this.ak.setXMemberPath(a, c.getMemberPathFor(16));
                }
                if (stringIsNullOrEmpty(this.gd)) {
                    this.ak.setYMemberPath(a, c.getMemberPathFor(0));
                }
                if (stringIsNullOrEmpty(this.f7)) {
                    this.ak.setLabelMemberPath(a, c.getMemberPathFor(0));
                }
                if (stringIsNullOrEmpty(this.f4)) {
                    this.ak.setContentMemberPath(a, c.getMemberPathFor(0));
                }
            }
        }
        cl() {
            if (this.aa == 4 || this.aa == 3) {
                return true;
            }
            else if (this.aa == 0) {
                if (this.s0 == 2 || this.s0 == 8) {
                    return false;
                }
                else if (this.s0 == 9 && this.ac != null && this.ac.dataSeries != null && this.ac.dataSeries.count > 0) {
                    let a = this.ac.dataSeries._inner[0].suggestedSeries;
                    if (a == 1 || a == 8) {
                        return false;
                    }
                }
                return true;
            }
            return false;
        }
        j6(a, b, c) {
            super.j6(a, b, c);
            switch (a) {
                case "ChartType":
                    this.kp();
                    break;
                case "MarkerCollisionAvoidance":
                    this.u7((d) => d.sx = this.s2);
                    break;
                case "IsTransitionInEnabled":
                    this.u7((d) => d.ru = this.to);
                    break;
                case "TransitionInMode":
                    this.u7((d) => d.re = this.s4);
                    break;
                case "TransitionInSpeedType":
                    this.u7((d) => d.b7 = this.te);
                    break;
                case "XAxisInterval":
                    this.xAxis.ly = this.t7;
                    break;
                case "XAxisMinorInterval":
                    this.xAxis.lz = this.t8;
                    break;
                case "XAxisGap":
                    this.xAxis.kf = this.t6;
                    break;
                case "XAxisOverlap":
                    this.xAxis.km = this.t9;
                    break;
                case "YAxisInterval":
                    this.yAxis.kz = this.uc;
                    break;
                case "YAxisIsLogarithmic":
                    this.yAxis.kk = this.tq;
                    break;
                case "YAxisLogarithmBase":
                    this.yAxis.k7 = this.uj;
                    break;
                case "YAxisMinimumValue":
                    this.yAxis.k3 = this.ue;
                    break;
                case "YAxisMaximumValue":
                    this.yAxis.k2 = this.ud;
                    break;
                case "YAxisMinorInterval":
                    this.yAxis.k4 = this.uf;
                    break;
                case "NegativeBrushes":
                case "NegativeOutlines":
                    this.u8((d, e) => {
                        if (d.dx) {
                            d.l5(ArrayExtension.getModulus$1(Brush.$, this.sx, e), ArrayExtension.getModulus$1(Brush.$, this.sy, e));
                        }
                    });
                    break;
                case "YAxisAbbreviateLargeNumbers":
                    this.re((d) => d.kf = this.tp);
                    break;
                case "IsCategoryHighlightingEnabled":
                case "IsItemHighlightingEnabled":
                    this.kp();
                    break;
            }
        }
    }
    CategoryChart.$t = /*@__PURE__*/ markType(CategoryChart, 'CategoryChart', XYChart.$);
    return CategoryChart;
})();
//# sourceMappingURL=CategoryChart.js.map
