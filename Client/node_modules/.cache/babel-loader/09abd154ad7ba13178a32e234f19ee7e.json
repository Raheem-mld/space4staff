{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport * as React from 'react';\nimport { HorizontalAlignment_$type } from \"igniteui-react-core\";\nimport { UnknownValuePlotting_$type } from \"igniteui-react-core\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { IgrChartSeriesEventArgs } from './igr-chart-series-event-args';\nimport { brushToString, stringToBrush, toBrushCollection, fromBrushCollection, fromRect, toRect, ensureBool, ensureEnum, isValidProp, getModifiedProps, toSpinal, initializePropertiesFromCss, NamePatcher } from \"igniteui-react-core\";\nimport { MarkerType_$type } from \"./MarkerType\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { IgrDomainChartSeriesPointerEventArgs } from './igr-domain-chart-series-pointer-event-args';\nimport { MarkerTypeCollection as MarkerTypeCollection_internal } from './MarkerTypeCollection';\nimport { IgrMarkerTypeCollection } from './igr-marker-type-collection';\nimport { SyncableObservableCollection$1 } from \"igniteui-react-core\";\nimport { ToolTipType_$type } from \"./ToolTipType\";\nimport { CrosshairsDisplayMode_$type } from \"./CrosshairsDisplayMode\";\nimport { IgrCalloutStyleUpdatingEventArgs } from \"./igr-callout-style-updating-event-args\";\nimport { ComputedPlotAreaMarginMode_$type } from './ComputedPlotAreaMarginMode';\nimport { SeriesHighlightingMode_$type } from './SeriesHighlightingMode';\nimport { SeriesHighlightingBehavior_$type } from './SeriesHighlightingBehavior';\nimport { LegendHighlightingMode_$type } from './LegendHighlightingMode';\nimport { SeriesOutlineMode_$type } from './SeriesOutlineMode';\nimport { MarkerOutlineMode_$type } from './MarkerOutlineMode';\nimport { MarkerFillMode_$type } from './MarkerFillMode';\nimport { MarkerAutomaticBehavior_$type } from './MarkerAutomaticBehavior';\nimport { LegendItemBadgeMode_$type } from './LegendItemBadgeMode';\nimport { LegendItemBadgeShape_$type } from './LegendItemBadgeShape';\n\nvar IgrDomainChart =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrDomainChart, _super);\n\n  function IgrDomainChart(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._calloutsDataSource = null;\n    _this._markerTypes = null;\n    _this.__p = null;\n    _this._hasUserValues = new Set();\n    _this._stylingContainer = null;\n    _this._stylingParent = null;\n    _this._inStyling = false;\n    _this._seriesAdded = null;\n    _this._seriesAdded_wrapped = null;\n    _this._seriesRemoved = null;\n    _this._seriesRemoved_wrapped = null;\n    _this._seriesPointerEnter = null;\n    _this._seriesPointerEnter_wrapped = null;\n    _this._seriesPointerLeave = null;\n    _this._seriesPointerLeave_wrapped = null;\n    _this._seriesPointerMove = null;\n    _this._seriesPointerMove_wrapped = null;\n    _this._seriesPointerDown = null;\n    _this._seriesPointerDown_wrapped = null;\n    _this._seriesPointerUp = null;\n    _this._seriesPointerUp_wrapped = null;\n    _this._calloutStyleUpdating = null;\n    _this._calloutStyleUpdating_wrapped = null;\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._implementation = _this.createImplementation();\n    _this._implementation.externalObject = _this;\n\n    _this.onImplementationCreated();\n\n    return _this;\n  }\n\n  IgrDomainChart.prototype.createImplementation = function () {\n    return null;\n  };\n\n  Object.defineProperty(IgrDomainChart.prototype, \"i\", {\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrDomainChart.prototype.onImplementationCreated = function () {};\n\n  IgrDomainChart.prototype.componentDidMount = function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = this.props[p];\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  IgrDomainChart.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var e_2, _a;\n\n    var mod = getModifiedProps(this.props, nextProps);\n\n    try {\n      for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = mod[p];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return true;\n  };\n\n  IgrDomainChart.prototype.render = function () {\n    return null;\n  };\n\n  Object.defineProperty(IgrDomainChart.prototype, \"tooltipTemplate\", {\n    /**\n    * Sets or gets the template reference to use for tooltips for all the series.\n    *\n    *\n    */\n    get: function () {\n      return this.i.tooltipTemplate;\n    },\n    set: function (v) {\n      this.i.tooltipTemplate = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"tooltipTemplates\", {\n    /**\n    * Sets or gets the template references to use for tooltips for all the series, in order.\n    *\n    *\n    */\n    get: function () {\n      var ret = [];\n\n      if (this.i.tooltipTemplates) {\n        for (var ii = 0; ii < this.i.tooltipTemplates.count; ii++) {\n          ret.push(this.i.tooltipTemplates.item(ii));\n        }\n      }\n\n      return ret;\n    },\n    set: function (v) {\n      this.i.tooltipTemplates.clear();\n\n      if (v) {\n        for (var ii = 0; ii < v.length; ii++) {\n          this.i.tooltipTemplates.add(v[ii]);\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"legend\", {\n    get: function () {\n      if (this.i.legend != null) return this.i.legend.externalObject;\n    },\n    set: function (v) {\n      if (v != undefined && v != null) this.i.legend = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"calloutsDataSource\", {\n    get: function () {\n      return this._calloutsDataSource;\n    },\n    set: function (value) {\n      this._calloutsDataSource = value;\n      this.bindCalloutsData();\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrDomainChart.prototype.bindCalloutsData = function () {\n    if (this.i != null && this.i !== undefined) {\n      this.i.calloutsItemsSource = this._calloutsDataSource;\n    }\n  };\n\n  Object.defineProperty(IgrDomainChart.prototype, \"pixelScalingRatio\", {\n    /**\n    * Gets or sets the scaling value used to affect the pixel density of the control.\n    * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n    * to appear blurry.\n    */\n    get: function () {\n      return this.i.ee;\n    },\n    set: function (v) {\n      this.i.ee = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"titleLeftMargin\", {\n    /**\n     * Gets or sets the left margin of chart title\n    *\n    *  Use `titleLeftMargin` property for the left margin of chart title.\n    *\n    * ```ts\n    * this.chart.titleLeftMargin = 10;\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart dataSource={this.state.data}\n    *                    titleLeftMargin={20}>\n    *  </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.er;\n    },\n    set: function (v) {\n      this.i.er = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"titleRightMargin\", {\n    /**\n     * Gets or sets the right margin of chart title\n    *\n    *  Use `titleLeftMargin` property for the right margin of chart title.\n    *\n    * ```ts\n    * this.chart.titleRightMargin = 10;\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t\t\t\tdataSource={this.state.data}\n    *                 titleRightMargin = 10>\n    *  </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.es;\n    },\n    set: function (v) {\n      this.i.es = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"titleTopMargin\", {\n    /**\n     * Gets or sets the top margin of chart title\n    *\n    *  Use `titleTopMargin` property for the top margin of chart title.\n    *\n    * ```ts\n    * this.chart.titleTopMargin = 10;\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart dataSource={this.state.data}\n    *                titleTopMargin={10} />\n    * ```\n    */\n    get: function () {\n      return this.i.et;\n    },\n    set: function (v) {\n      this.i.et = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"titleBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin of chart title\n    *\n    *  Use `titleBottomMargin` property for the bottom margin of chart title.\n    *\n    * ```ts\n    *  this.chart.titleBottomMargin = 5;\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tdataSource={this.categoryData}\n    * \tsubtitle= \"CategoryChart Subtitle\"\n    * \tsubtitleAlignment=\"Right\"\n    * \ttitleBottomMargin={5}/>\n    * ```\n    */\n    get: function () {\n      return this.i.eq;\n    },\n    set: function (v) {\n      this.i.eq = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"subtitleLeftMargin\", {\n    /**\n     * Gets or sets the left margin of chart subtitle\n    *\n    * Use `subtitleLeftMargin` property for the left margin of chart subtitle.\n    *\n    * ```ts\n    * this.chart.subtitleLeftMargin = 20 ;\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tdataSource={this.categoryData}\n    * \tsubtitle= \"CategoryChart Subtitle\"\n    * \tsubtitleLeftMargin= {20}/>\n    * ```\n    */\n    get: function () {\n      return this.i.em;\n    },\n    set: function (v) {\n      this.i.em = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"subtitleTopMargin\", {\n    /**\n     * Gets or sets the top margin of chart subtitle\n    *\n    * Use `subtitleTopMargin` property for the top margin of chart subtitle.\n    *\n    * ```ts\n    * this.chart.subtitleTopMargin = 10;\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tdataSource={this.categoryData}\n    * \tsubtitle= \"CategoryChart Subtitle\"\n    * \tsubtitleTopMargin= {10}/>\n    * ```\n    */\n    get: function () {\n      return this.i.eo;\n    },\n    set: function (v) {\n      this.i.eo = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"subtitleRightMargin\", {\n    /**\n     * Gets or sets the right margin of chart subtitle\n    *\n    * Use `subtitleRightMargin` property for the right margin of chart subtitle.\n    *\n    * ```ts\n    *  this.chart.subtitleRightMargin = 20 ;\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tdataSource={this.categoryData}\n    * \tsubtitle= \"CategoryChart Subtitle\"\n    * \tsubtitleAlignment=\"Right\"\n    * \tsubtitleRightMargin ={20}/>\n    * ```\n    */\n    get: function () {\n      return this.i.en;\n    },\n    set: function (v) {\n      this.i.en = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"subtitleBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin of chart subtitle\n    *\n    * Use `subtitleBottomMargin` property for the bottom margin of chart subtitle.\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tdataSource={this.categoryData}\n    * \tsubtitle= \"CategoryChart Subtitle\"\n    * \tsubtitleBottomMargin= {10}/>\n    * ```\n    *\n    * ```ts\n    * this.chart.subtitleBottomMargin = 10 ;\n    * ```\n    */\n    get: function () {\n      return this.i.el;\n    },\n    set: function (v) {\n      this.i.el = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"subtitleTextColor\", {\n    /**\n     * Gets or sets color of chart subtitle\n    *\n    * Use `subtitleTextColor` property to color the subtitle.\n    *\n    * ```ts\n    * this.chart.subtitleTextColor = \"#ff0000\" ;\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tdataSource={this.categoryData}\n    * \tsubtitle= \"CategoryChart Subtitle\"\n    * \tsubtitleTextColor=\"#ff0000\"/>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.lo);\n    },\n    set: function (v) {\n      this.i.lo = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"titleTextColor\", {\n    /**\n     * Gets or sets color of chart title\n    *\n    *  Use `titleTextColor` property to color the chart title\n    *\n    * ```ts\n    *  this.chart.titleTextColor=\"red\" ;\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t\tdataSource={this.state.data}\n    * \t\twidth=\"700px\"\n    * \t\theight=\"500px\"\n    * \t\txAxisTitle=\"Countries\"\n    * \t\ttitleTextColor=\"Red\" />\n    *\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.lp);\n    },\n    set: function (v) {\n      this.i.lp = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"leftMargin\", {\n    /**\n     * Gets or sets the left margin of the chart content.\n    *\n    * Use the 'leftMargin' property for the left margin of the chart content.\n    *\n    * ```ts\n    *  this.chart.leftMargin = 20;\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart dataSource={this.state.data}\n    *                    leftMargin= {20}/>\n    * ```\n    */\n    get: function () {\n      return this.i.eb;\n    },\n    set: function (v) {\n      this.i.eb = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"topMargin\", {\n    /**\n     * Gets or sets the top margin of the chart content.\n    *\n    * Use `topMargin` property for the margin of the chart content.\n    *\n    * ```ts\n    * this.chart.topMargin=20;\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart dataSource={this.state.data}\n    *                topMargin={10} />\n    * ```\n    */\n    get: function () {\n      return this.i.eu;\n    },\n    set: function (v) {\n      this.i.eu = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"rightMargin\", {\n    /**\n     * Gets or sets the right margin of the chart content.\n    *\n    * Use `rightMargin` property for the right margin of the chart content.\n    *\n    * ```ts\n    *   this.chart.rightMargin = 20 ;\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tmarkerTypes={this.state.markersTypes}\n    * \tdataSource={this.categoryData}\n    * \trightMargin= {4}/>\n    * ```\n    */\n    get: function () {\n      return this.i.ek;\n    },\n    set: function (v) {\n      this.i.ek = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"bottomMargin\", {\n    /**\n     * Gets or sets the bottom margin around the chart content.\n    *\n    * Use the `bottomMargin` property for the bottom margin around the chart content.\n    *\n    * ```ts\n    * this.chart.bottomMargin=20;\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart dataSource={this.state.data}\n    *                    bottomMargin= 20 />\n    * ```\n    */\n    get: function () {\n      return this.i.d9;\n    },\n    set: function (v) {\n      this.i.d9 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"transitionDuration\", {\n    /**\n     * Gets or sets the duration used for animating series plots when the data is changing\n    *\n    * Use the `transitionDuration` property to animating between data values.\n    *\n    * ```ts\n    * this.chart.transitionDuratio= 500;\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart dataSource={this.state.data}\n    *                transitionDuratio={500} />\n    * ```\n    */\n    get: function () {\n      return this.i.e9;\n    },\n    set: function (v) {\n      this.i.e9 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"transitionEasingFunction\", {\n    /**\n     * Gets or sets the easing function used for animating series plots when the data is changing.\n     * This can be set to one of the known values \"linear\" or \"cubic,\" or it can be set to an easing function which takes a single numeric parameter and returns a number.\n    *\n    * The 'transitionInEasingFunction' property used for easing function for animating series plots when the chart is loading into view.\n    *\n    * ```ts\n    * this.chart.transitionInEasingFunction=  this.cubicFunc;\n    *\n    * cubicFunc(time: number) : number\n    *   {\n    *     return time;\n    *   }\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart dataSource={this.state.data}\n    *                transitionInEasingFunction=\"cubic\" />\n    * ```\n    */\n    get: function () {\n      return this.i.bs;\n    },\n    set: function (v) {\n      this.i.bs = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"subtitleTextStyle\", {\n    /**\n     * Gets or sets CSS font property for the chart subtitle\n    *\n    * Use `subtitleTextStyle` property for the CSS font of the chart subtitle.\n    *\n    * ```ts\n    * this.chart.subtitleTextStyle= \"16pt Verdona\";\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tdataSource={this.categoryData}\n    * \tsubtitleTextStyle=\"16pt Verdona\"/>\n    * ```\n    */\n    get: function () {\n      return this.i.h5;\n    },\n    set: function (v) {\n      this.i.h5 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"titleTextStyle\", {\n    /**\n     * Gets or sets CSS font property for the chart title\n    *\n    * Use `titleTextStyle` property for the CSS font property of the chart title\n    *\n    * ```ts\n    * this.chart.xAxisTitleTextStyle = \"24pt Verdona\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart dataSource={this.state.data}\n    *                 width=\"700px\"\n    *                 height=\"500px\"\n    *                 xAxisTitle=\"Countries\"\n    *                 xAxisTitleTextColor=\"gray\"\n    *                 xAxisTitleTextStyle=\"12pt Verdana\"\n    *                 xAxisTitleAngle={0}\n    *                 yAxisTitle=\"Trillions of Watt-hours (TWh)\"\n    *                 yAxisTitleTextStyle=\"12pt Verdana\"\n    *                 yAxisTitleTextColor=\"gray\"\n    *                 yAxisTitleAngle={90}\n    *                 yAxisTitleLeftMargin={5}>\n    *  </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ih;\n    },\n    set: function (v) {\n      this.i.ih = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"domainType\", {\n    /**\n     * Gets the domain type of this chart\n    */\n    get: function () {\n      return this.i.ai;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"includedProperties\", {\n    /**\n     * Gets or sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.\n    *\n    * The `includedProperties` property used to include the properties for the consideration of the category chart.\n    *\n    * ```ts\n    * this.chart.includedProperties = [\"ProductName\", \"Cost\"];\n    * ```\n    *\n    * ```ts\n    * \t<IgrCategoryChart\n    * \t\tchartType=\"Line\"\n    * \t\tmarkerTypes={this.state.markersTypes}\n    * \t\tdataSource={this.categoryData}\n    * \t\texcludedProperties=\"value\" />\n    * ```\n    */\n    get: function () {\n      return this.i.d;\n    },\n    set: function (v) {\n      if (v && !Array.isArray(v) && typeof v == \"string\") {\n        var re = /\\s*(?:,|\\s|$)\\s*/gm;\n        v = v.split(re);\n      }\n\n      this.i.d = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"excludedProperties\", {\n    /**\n     * Gets or sets a set of property paths that should be excluded from consideration by the category chart.\n    *\n    * The `excludedProperties` property used for the property paths that should be excluded from consideration by the category chart.\n    *\n    * ```ts\n    * this.chart.excludedProperties = [\"ID\", \"Discount\"];\n    * ```\n    *\n    * ```ts\n    * \t<IgrCategoryChart\n    * \tchartType=\"Line\"\n    * \tmarkerTypes={this.state.markersTypes}\n    * \tdataSource={this.categoryData}\n    * \texcludedProperties=\"value\" />\n    * ```\n    */\n    get: function () {\n      return this.i.c;\n    },\n    set: function (v) {\n      if (v && !Array.isArray(v) && typeof v == \"string\") {\n        var re = /\\s*(?:,|\\s|$)\\s*/gm;\n        v = v.split(re);\n      }\n\n      this.i.c = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"brushes\", {\n    /**\n     * Gets or sets the palette of brushes to use for coloring the chart series.\n     * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection\n    *\n    * Use the `brushes` property to  set the brushes.\n    *\n    * ```ts\n    * this.chart.brushes = [\"#ff0000\",\"#00ff00\"];\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.n);\n    },\n    set: function (v) {\n      this.i.n = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"outlines\", {\n    /**\n     * Gets or sets the palette of brushes to use for outlines on the chart series.\n     * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection\n    *\n    *  Use the `outlines` property to sets the palette of brushes to use for outlines on the chart series\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tchartType=\"Line\"\n    * \toutlines= \"#ff0000\"\n    * \tdataSource={this.categoryData}/>\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.r);\n    },\n    set: function (v) {\n      this.i.r = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"actualBrushes\", {\n    /**\n     * Gets the actual palette of brushes to use for coloring the chart series.\n    */\n    get: function () {\n      return fromBrushCollection(this.i.l);\n    },\n    set: function (v) {\n      this.i.l = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"actualOutlines\", {\n    /**\n     * Gets the actual palette of brushes to use for outlines on the chart series.\n    */\n    get: function () {\n      return fromBrushCollection(this.i.m);\n    },\n    set: function (v) {\n      this.i.m = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"isHorizontalZoomEnabled\", {\n    /**\n     * Gets or sets whether the chart can be horizontally zoomed through user interactions.\n    *\n    * Use the `isHorizontalZoomEnabled` property to allow chart horizontally zoomed .\n    *\n    * ```ts\n    *  <IgrCategoryChart dataSource={this.state.data}\n    *                    width=\"700px\"\n    *                    height=\"500px\"\n    *                    xAxisLabelTextStyle=\"10pt Verdana\"\n    *                    xAxisLabelTopMargin={5}\n    *                    xAxisLabelTextColor=\"gray\"\n    *                    yAxisLabelTextStyle=\"10pt Verdana\"\n    *                    yAxisLabelRightMargin={5}\n    *                    yAxisLabelTextColor=\"gray\"\n    * \t\t\t\t   isHorizontalZoomEnabled= true/>\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart dataSource={this.state.data}\n    *                    IsHorizontalZoomEnabled= true />\n    * ```\n    *\n    * ```ts\n    * this.chart.isHorizontalZoomEnabled = true;\n    * ```\n    */\n    get: function () {\n      return this.i.cn;\n    },\n    set: function (v) {\n      this.i.cn = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"isVerticalZoomEnabled\", {\n    /**\n     * Gets or sets whether the chart can be vertically zoomed through user interactions.\n    *\n    * Use the `isVerticalZoomEnabled` property to allow chart zoom vertically.\n    *\n    * ```ts\n    *  this.chart.isVerticalZoomEnabled = true;\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart dataSource={this.state.data}\n    *                   isVerticalZoomEnabled= \"true\"/>\n    * ```\n    */\n    get: function () {\n      return this.i.ct;\n    },\n    set: function (v) {\n      this.i.ct = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"shouldDisplayMockData\", {\n    /**\n     * Gets or sets whether the chart should display mock data when the data source has not been provided, if supported for this type of chart.\n    */\n    get: function () {\n      return this.i.cw;\n    },\n    set: function (v) {\n      this.i.cw = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"shouldUseSkeletonStyleForMockData\", {\n    /**\n     * Gets or sets whether the chart should use a faded skeleton style for mock data.\n    */\n    get: function () {\n      return this.i.cx;\n    },\n    set: function (v) {\n      this.i.cx = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"isSeriesHighlightingEnabled\", {\n    /**\n     * Gets or sets whether the chart can highlight series through user interactions.\n     * This property applies to Category Chart and Financial Chart controls.\n    */\n    get: function () {\n      return this.i.cp;\n    },\n    set: function (v) {\n      this.i.cp = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"windowRect\", {\n    /**\n     * Gets or sets the rectangle representing the current scroll and zoom state of the chart.\n     * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.\n    *\n    * Use `windowRect` property representing the current scroll and zoom state of the chart.\n    *\n    * ```ts\n    * this.chart.windowRect =[0,0,1,1];\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart dataSource={this.state.data}\n    *                WindowRect={1,0,1,1} />\n    * ```\n    */\n    get: function () {\n      return fromRect(this.i.lt);\n    },\n    set: function (v) {\n      this.i.lt = toRect(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"viewport\", {\n    /**\n     * Gets a rectangle representing the bounds of the plot area.\n    *\n    * `viewport` property representing the bounds of the plot area.\n    *\n    * ```ts\n    * let viewport:Rect =  this.chart.viewport;\n    * ```\n    */\n    get: function () {\n      return fromRect(this.i.ls);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"chartTitle\", {\n    /**\n     * Gets or sets text to display above the plot area.\n    *\n    * Use the `chartTitle` property to display the text above the plot area.\n    *\n    * ```ts\n    *  this.chart.title= \"This is a Title\";\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tdataSource={this.categoryData}\n    * \ttitle= \"CategoryChart Subtitle\"\t/>\n    * ```\n    */\n    get: function () {\n      return this.i.h9;\n    },\n    set: function (v) {\n      this.i.h9 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"subtitle\", {\n    /**\n     * Gets or sets text to display below the Title, above the plot area.\n    *\n    * Use the `subtitle` property to display the text below  and above the plot area.\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tdataSource={this.categoryData}\n    * \tsubtitle= \"CategoryChart Subtitle\"/>\n    * ```\n    *\n    * ```ts\n    *  this.chart.subtitle =\"CategoryChart Subtitle\" ;\n    * ```\n    */\n    get: function () {\n      return this.i.hy;\n    },\n    set: function (v) {\n      this.i.hy = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"titleAlignment\", {\n    /**\n     * Gets or sets horizontal alignment which determines the title position, relative to the left and right edges of the control.\n    *\n    * Use the `titleAlignment` property for the horizontal alignment of the title.\n    *\n    * ```ts\n    * this.chart.titleAlignment = HorizontalAlignment.Center;\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tdataSource={this.categoryData}\n    * \ttitleAlignment= \"Center\"/>\n    * ```\n    */\n    get: function () {\n      return this.i.k0;\n    },\n    set: function (v) {\n      this.i.k0 = ensureEnum(HorizontalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"subtitleAlignment\", {\n    /**\n     * Gets or sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.\n    *\n    * Use the `subtitleAlignment` property to Gets or sets horizontal alignment.\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tdataSource={this.categoryData}\n    * \tsubtitle= \"CategoryChart Subtitle\"\n    * \tsubtitleAlignment=\"Right\"/>\n    * ```\n    *\n    * ```ts\n    * this.chart.subtitleAlignment = HorizontalAlignment.Right;\n    * ```\n    */\n    get: function () {\n      return this.i.kz;\n    },\n    set: function (v) {\n      this.i.kz = ensureEnum(HorizontalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"unknownValuePlotting\", {\n    /**\n     * Gets or sets the behavior that determines how unknown values will be plotted on the chart.\n     * Null and Double.NaN are two examples of unknown values.\n    *\n    * Use the `unknownValuePlotting` property to determines the behavior that how unknown values will be plotted on the chart.\n    *\n    * ```ts\n    * this.chart.unknownValuePlotting =UnknownValuePlotting.DontPlot;\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart dataSource={this.state.data}\n    *                unknownValuePlotting= \"dontPlot\" />\n    * ```\n    */\n    get: function () {\n      return this.i.bo;\n    },\n    set: function (v) {\n      this.i.bo = ensureEnum(UnknownValuePlotting_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"resolution\", {\n    /**\n     * Gets or sets the rendering resolution for all series in this chart.\n     * Where n = Resolution, for every n horizontal pixels, combine all items into a single data point.  When Resolution = 0, all data points will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.\n    *\n    * Use the `resolution` property if the callouts should be display.\n    *\n    * ```ts\n    *   this.chart.resolution = 2 ;\n    * ```\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tmarkerTypes={this.state.markersTypes}\n    * \tdataSource={this.categoryData}\n    * \tcalloutsVisible=\"true\"\n    * \tresolution= {2}/>\n    * ```\n    */\n    get: function () {\n      return this.i.ej;\n    },\n    set: function (v) {\n      this.i.ej = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"thickness\", {\n    /**\n     * Gets or sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.\n    *\n    * Use the `thickness` property for the thickness of all the series in this chart.\n    */\n    get: function () {\n      return this.i.ep;\n    },\n    set: function (v) {\n      this.i.ep = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"outlineMode\", {\n    /**\n     * Gets or sets the OutlineMode for all series in this chart.\n    */\n    get: function () {\n      return this.i.bi;\n    },\n    set: function (v) {\n      this.i.bi = ensureEnum(SeriesOutlineMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"markerOutlineMode\", {\n    /**\n     * Gets or sets the MarkerOutlineMode for all series that support markers in this chart.\n    */\n    get: function () {\n      return this.i.a0;\n    },\n    set: function (v) {\n      this.i.a0 = ensureEnum(MarkerOutlineMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"markerFillMode\", {\n    /**\n     * Gets or sets the MarkerFillMode for all series that support markers in this chart.\n    */\n    get: function () {\n      return this.i.ay;\n    },\n    set: function (v) {\n      this.i.ay = ensureEnum(MarkerFillMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"markerFillOpacity\", {\n    /**\n     * Gets or sets the Marker Fill Opacity for all series that support markers in this chart.\n    */\n    get: function () {\n      return this.i.ec;\n    },\n    set: function (v) {\n      this.i.ec = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"markerThickness\", {\n    /**\n     * Gets or sets the Marker Thickness for all series that support markers in this chart.\n    */\n    get: function () {\n      return this.i.ed;\n    },\n    set: function (v) {\n      this.i.ed = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"markerTypes\", {\n    /**\n     * Gets or sets the marker shapes used for indicating location of data points in this chart.\n     * This property applies only to these chart types: point, line, spline, bubble, and polygon\n    */\n    get: function () {\n      if (this._markerTypes === null) {\n        var coll = new IgrMarkerTypeCollection();\n        var innerColl = this.i.a5;\n\n        if (!innerColl) {\n          innerColl = new MarkerTypeCollection_internal();\n        }\n\n        this._markerTypes = coll._fromInner(innerColl);\n        this.i.a5 = innerColl;\n      }\n\n      return this._markerTypes;\n    },\n    set: function (v) {\n      if (this._markerTypes !== null) {\n        this._markerTypes._setSyncTarget(null);\n\n        this._markerTypes = null;\n      }\n\n      var coll = new IgrMarkerTypeCollection();\n      this._markerTypes = coll._fromOuter(v);\n      var syncColl = new SyncableObservableCollection$1(MarkerType_$type);\n      var innerColl = this.i.a5;\n\n      if (!innerColl) {\n        innerColl = new MarkerTypeCollection_internal();\n      }\n\n      syncColl._inner = innerColl;\n      syncColl.clear();\n\n      this._markerTypes._setSyncTarget(syncColl);\n\n      this.i.a5 = innerColl;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"markerAutomaticBehavior\", {\n    /**\n     * Gets or sets the default marker type for all series plotted in this chart.\n     * This property is ignored when the MarkerTypes property is set\n    */\n    get: function () {\n      return this.i.aw;\n    },\n    set: function (v) {\n      this.i.aw = ensureEnum(MarkerAutomaticBehavior_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"markerBrushes\", {\n    /**\n     * Gets or sets the palette of brushes used for rendering fill area of data point markers.\n     * This property applies only to these chart types: point, line, spline, bubble, and polygon\n    *\n    * `markerBrushes` property used for rendering fill area of data point markers.\n    *\n    * ```ts\n    *  this.chart.markerBrushes=[ \"#ff0000\", \"#ffff00\", \"#00ffff\" ];\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    *     chartType=\"Line\"\n    *     markerBrushes =\"#ffff00\"\n    *     dataSource={this.categoryData}/>\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.p);\n    },\n    set: function (v) {\n      this.i.p = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"markerOutlines\", {\n    /**\n     * Gets or sets the palette of brushes used for rendering outlines of data point markers.\n     * This property applies only to these chart types: point, line, spline, bubble, and polygon\n    *\n    * `markerOutlines` property used for rendering outlines of data point markers.\n    *\n    * ```ts\n    * this.chart.markerOutlines= [\"#ff0000\", \"#ffff00\", \"#00ffff\"] ;\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tchartType=\"Line\"\n    * \tmarkerOutlines= \"#ff0000\"\n    * \tdataSource={this.categoryData}/>\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.q);\n    },\n    set: function (v) {\n      this.i.q = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"markerMaxCount\", {\n    /**\n     * Gets or sets the maximum number of markers displayed in the plot area of the chart.\n    *\n    * `markerMaxCount` property used to display maximum number of markers in the plot area of the chart.\n    *\n    * ```ts\n    *  this.chart.markerMaxCount = 100 ;\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tchartType=\"Line\"\n    * \tmarkerMaxCount= {2}\n    * \tdataSource={this.categoryData}/>\n    * ```\n    */\n    get: function () {\n      return this.i.e8;\n    },\n    set: function (v) {\n      this.i.e8 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"areaFillOpacity\", {\n    /**\n     * Gets or sets the fill opacity for all series that have area visuals in this chart.\n     * For example, Area, SplineArea, Column chart types\n    */\n    get: function () {\n      return this.i.d6;\n    },\n    set: function (v) {\n      this.i.d6 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"animateSeriesWhenAxisRangeChanges\", {\n    /**\n     * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.\n    */\n    get: function () {\n      return this.i.ca;\n    },\n    set: function (v) {\n      this.i.ca = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"trendLineBrushes\", {\n    /**\n     * Gets or sets the palette of brushes to used for coloring trend lines in this chart.\n     * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection\n    *\n    * Use the `trendLineBrushes` property for coloring trend lines in the chart.\n    *\n    * ```ts\n    * this.chart.trendLineBrushes=[\"#ff0000\", \"#ffff00\", \"#00ffff\"]\t;\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart dataSource={this.state.data}\n    *                trendLineBrushes=\"#ffff00\" />\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.t);\n    },\n    set: function (v) {\n      this.i.t = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"trendLineType\", {\n    /**\n     * Gets or sets the formula used for calculating trend lines in this chart.\n     * This property applies only to these chart types: point, line, spline, and bubble\n    *\n    * Use the `trendLineType` property for calculating trend lines.\n    *\n    * ```ts\n    * this.chart.trendLineType = TrendLineType.CubicFit;\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart dataSource={this.state.data}\n    *                trendLineType=\"CubicFit\" />\n    * ```\n    */\n    get: function () {\n      return this.i.bm;\n    },\n    set: function (v) {\n      this.i.bm = ensureEnum(TrendLineType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"trendLineThickness\", {\n    /**\n     * Gets or sets the thickness of the trend lines in this chart.\n     * This property applies only to these chart types: point, line, spline, and bubble\n    *\n    * Use the `trendLineThickness` property for the thickness of the trend lines in the chart.\n    *\n    * ```ts\n    * this.chart.trendLineThickness=2;\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart dataSource={this.state.data}\n    *                trendLineThickness={2} />\n    * ```\n    */\n    get: function () {\n      return this.i.ev;\n    },\n    set: function (v) {\n      this.i.ev = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"alignsGridLinesToPixels\", {\n    /**\n     * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.\n    *\n    * Use `alignsGridLinesToPixels` propert to indicat whether grid and tick lines are aligned to device pixels.\n    *\n    * ```ts\n    *  this.chart.alignsGridLinesToPixels= true;\n    * ```\n    */\n    get: function () {\n      return this.i.b9;\n    },\n    set: function (v) {\n      this.i.b9 = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"plotAreaMarginLeft\", {\n    /**\n     * Margin applied to the Left of the plot area.\n    */\n    get: function () {\n      return this.i.eg;\n    },\n    set: function (v) {\n      this.i.eg = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"plotAreaMarginTop\", {\n    /**\n     * Margin applied to the Top of the plot area.\n    */\n    get: function () {\n      return this.i.ei;\n    },\n    set: function (v) {\n      this.i.ei = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"plotAreaMarginRight\", {\n    /**\n     * Margin applied to the right of the plot area.\n    */\n    get: function () {\n      return this.i.eh;\n    },\n    set: function (v) {\n      this.i.eh = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"plotAreaMarginBottom\", {\n    /**\n     * Margin applied below the plot area.\n    */\n    get: function () {\n      return this.i.ef;\n    },\n    set: function (v) {\n      this.i.ef = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"computedPlotAreaMarginMode\", {\n    /**\n     * Gets or sets the highlighting mode to use for the series in the component, when supported. This takes precedence over the series level IsHightlightingEnabled.\n    */\n    get: function () {\n      return this.i.y;\n    },\n    set: function (v) {\n      this.i.y = ensureEnum(ComputedPlotAreaMarginMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"highlightingMode\", {\n    /**\n     * Gets or sets the highlighting mode to use for the series in the component, when supported. This takes precedence over the series level IsHightlightingEnabled.\n    */\n    get: function () {\n      return this.i.bg;\n    },\n    set: function (v) {\n      this.i.bg = ensureEnum(SeriesHighlightingMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"highlightingBehavior\", {\n    /**\n     * Gets or sets the highlighting Behavior to use for the series in the component, when supported. This takes precedence over the series level IsHightlightingEnabled.\n    */\n    get: function () {\n      return this.i.be;\n    },\n    set: function (v) {\n      this.i.be = ensureEnum(SeriesHighlightingBehavior_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"legendHighlightingMode\", {\n    /**\n     * Gets or sets the highlighting mode to use for the legend linked to the component, when supported.\n    */\n    get: function () {\n      return this.i.aq;\n    },\n    set: function (v) {\n      this.i.aq = ensureEnum(LegendHighlightingMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"legendItemBadgeShape\", {\n    /**\n     * Gets or sets the type of legend badges representing all series displayed in a legend linked to this component\n     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series\n    */\n    get: function () {\n      return this.i.au;\n    },\n    set: function (v) {\n      this.i.au = ensureEnum(LegendItemBadgeShape_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"legendItemBadgeMode\", {\n    /**\n     * Gets or sets the mode of legend badges representing all series displayed in a legend linked to this component.\n     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series\n    */\n    get: function () {\n      return this.i.as;\n    },\n    set: function (v) {\n      this.i.as = ensureEnum(LegendItemBadgeMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"shouldAutoExpandMarginForInitialLabels\", {\n    /**\n     * Gets or sets a whether the series viewer should auto expand margins to accommodate the initial horizontal axis labels.\n    */\n    get: function () {\n      return this.i.cv;\n    },\n    set: function (v) {\n      this.i.cv = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"autoExpandMarginExtraPadding\", {\n    /**\n     * Gets or sets the extra amount the series viewer should auto expand margins to accommodate the initial horizontal axis labels.\n    */\n    get: function () {\n      return this.i.d7;\n    },\n    set: function (v) {\n      this.i.d7 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"autoExpandMarginMaximumValue\", {\n    /**\n     * Gets or sets the maximum amount the series viewer should auto expand margins to accommodate the initial horizontal axis labels.\n    */\n    get: function () {\n      return this.i.d8;\n    },\n    set: function (v) {\n      this.i.d8 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"trendLinePeriod\", {\n    get: function () {\n      return this.i.fa;\n    },\n    set: function (v) {\n      this.i.fa = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"toolTipType\", {\n    /**\n     * Gets or sets the style of tooltip to be displayed.\n    */\n    get: function () {\n      return this.i.bk;\n    },\n    set: function (v) {\n      this.i.bk = ensureEnum(ToolTipType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"crosshairsDisplayMode\", {\n    /**\n     * Gets or sets the crosshairs to be displayed.\n    */\n    get: function () {\n      return this.i.aa;\n    },\n    set: function (v) {\n      this.i.aa = ensureEnum(CrosshairsDisplayMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"crosshairsSnapToData\", {\n    /**\n     * Gets or sets whether crosshairs will snap to the nearest data point.\n    */\n    get: function () {\n      return this.i.cf;\n    },\n    set: function (v) {\n      this.i.cf = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"crosshairsLineVerticalStroke\", {\n    /**\n     * Gets or sets the color to apply to vertical crosshairs line.\n    */\n    get: function () {\n      return brushToString(this.i.lg);\n    },\n    set: function (v) {\n      this.i.lg = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"crosshairsLineThickness\", {\n    /**\n     * Gets or sets thickness of crosshairs lines.\n    */\n    get: function () {\n      return this.i.ea;\n    },\n    set: function (v) {\n      this.i.ea = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"crosshairsLineHorizontalStroke\", {\n    /**\n     * Gets or sets the color to apply to horizontal crosshairs line.\n    */\n    get: function () {\n      return brushToString(this.i.lf);\n    },\n    set: function (v) {\n      this.i.lf = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"crosshairsAnnotationEnabled\", {\n    /**\n     * Gets or sets whether annotations are shown along the axis for crosshair values\n    */\n    get: function () {\n      return this.i.ce;\n    },\n    set: function (v) {\n      this.i.ce = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"crosshairsAnnotationXAxisBackground\", {\n    /**\n     * Gets or sets the background of crosshair annotation on x-axis.\n    */\n    get: function () {\n      return brushToString(this.i.lb);\n    },\n    set: function (v) {\n      this.i.lb = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"crosshairsAnnotationYAxisBackground\", {\n    /**\n     * Gets or sets the background of crosshair annotation on y-axis.\n    */\n    get: function () {\n      return brushToString(this.i.ld);\n    },\n    set: function (v) {\n      this.i.ld = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"crosshairsAnnotationXAxisTextColor\", {\n    /**\n     * Gets or sets the text color of crosshair annotation on x-axis.\n    */\n    get: function () {\n      return brushToString(this.i.lc);\n    },\n    set: function (v) {\n      this.i.lc = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"crosshairsAnnotationYAxisTextColor\", {\n    /**\n     * Gets or sets the text color of crosshair annotation on y-axis.\n    */\n    get: function () {\n      return brushToString(this.i.le);\n    },\n    set: function (v) {\n      this.i.le = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"crosshairsAnnotationXAxisPrecision\", {\n    /**\n     * Gets or sets precision on interpolated values of crosshairs on x-axis.\n    */\n    get: function () {\n      return this.i.e5;\n    },\n    set: function (v) {\n      this.i.e5 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"crosshairsAnnotationYAxisPrecision\", {\n    /**\n     * Gets or sets precision on interpolated values of crosshairs on y-axis.\n    */\n    get: function () {\n      return this.i.e6;\n    },\n    set: function (v) {\n      this.i.e6 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"finalValueAnnotationsVisible\", {\n    /**\n     * Gets or sets whether annotations for the final value of each series is displayed on the axis.\n    */\n    get: function () {\n      return this.i.cg;\n    },\n    set: function (v) {\n      this.i.cg = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"finalValueAnnotationsBackground\", {\n    /**\n     * Gets or sets the background of final value annotation.\n    */\n    get: function () {\n      return brushToString(this.i.lh);\n    },\n    set: function (v) {\n      this.i.lh = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"finalValueAnnotationsTextColor\", {\n    /**\n     * Gets or sets the text color of final value annotation.\n    */\n    get: function () {\n      return brushToString(this.i.li);\n    },\n    set: function (v) {\n      this.i.li = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"finalValueAnnotationsPrecision\", {\n    /**\n     * Gets or sets precision on final value annotation.\n    */\n    get: function () {\n      return this.i.e7;\n    },\n    set: function (v) {\n      this.i.e7 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"calloutsVisible\", {\n    /**\n     * Gets or sets if callouts should be displayed.\n    */\n    get: function () {\n      return this.i.cd;\n    },\n    set: function (v) {\n      this.i.cd = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"calloutStyleUpdatingEventEnabled\", {\n    /**\n     * Gets or sets if event annotations should be displayed.\n    */\n    get: function () {\n      return this.i.cc;\n    },\n    set: function (v) {\n      this.i.cc = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"calloutsXMemberPath\", {\n    /**\n     * Gets or sets the member path of the X data for the callouts.\n    */\n    get: function () {\n      return this.i.gb;\n    },\n    set: function (v) {\n      this.i.gb = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"calloutsYMemberPath\", {\n    /**\n     * Gets or sets the member path of the Y data for the callouts.\n    */\n    get: function () {\n      return this.i.gd;\n    },\n    set: function (v) {\n      this.i.gd = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"calloutsLabelMemberPath\", {\n    /**\n     * Gets or sets the member path of the label data for the callouts.\n    */\n    get: function () {\n      return this.i.f7;\n    },\n    set: function (v) {\n      this.i.f7 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"calloutsContentMemberPath\", {\n    /**\n     * Gets or sets the member path of the content data for the callouts.\n    */\n    get: function () {\n      return this.i.f4;\n    },\n    set: function (v) {\n      this.i.f4 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrDomainChart.prototype.findByName = function (name) {\n    if (this.legend && this.legend.name && this.legend.name == name) {\n      return this.legend;\n    }\n\n    if (this.markerTypes != null && this.markerTypes.findByName && this.markerTypes.findByName(name)) {\n      return this.markerTypes.findByName(name);\n    }\n\n    return null;\n  };\n\n  Object.defineProperty(IgrDomainChart.prototype, \"hasUserValues\", {\n    get: function () {\n      return this._hasUserValues;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrDomainChart.prototype.__m = function (propertyName) {\n    if (!this._inStyling) {\n      this._hasUserValues.add(propertyName);\n    }\n  };\n\n  IgrDomainChart.prototype._styling = function (container, component, parent) {\n    if (this._inStyling) {\n      return;\n    }\n\n    this._inStyling = true;\n    this._stylingContainer = container;\n    this._stylingParent = component;\n    var genericPrefix = \"\";\n    var typeName = this.i.$type.name;\n\n    if (typeName.indexOf(\"Xam\") === 0) {\n      typeName = typeName.substring(3);\n    }\n\n    genericPrefix = toSpinal(\"DomainChart\");\n    var additionalPrefixes = [];\n    var prefix = toSpinal(typeName);\n    additionalPrefixes.push(prefix + \"-\");\n    var b = this.i.$type.baseType;\n\n    while (b && b.name != \"Object\" && b.name != \"Base\" && b.name != \"Control\" && b.Name != \"DependencyObject\" && b.Name != \"FrameworkElement\") {\n      typeName = b.name;\n\n      if (typeName.indexOf(\"Xam\") === 0) {\n        typeName = typeName.substring(3);\n      }\n\n      var basePrefix = toSpinal(typeName);\n      additionalPrefixes.push(basePrefix + \"-\");\n      b = b.baseType;\n    }\n\n    if (parent) {\n      var parentTypeName = parent.i.$type.name;\n\n      if (parentTypeName.indexOf(\"Xam\") === 0) {\n        parentTypeName = parentTypeName.substring(3);\n      }\n\n      var parentPrefix = toSpinal(parentTypeName);\n      additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n      additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n    }\n\n    initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n\n    if (this._otherStyling) {\n      this._otherStyling(container, component, parent);\n    }\n\n    this._inStyling = false;\n  };\n  /**\n  * Provides a container for this control\n  *\n  * `provideContainer` method provide container for the control.\n  *\n  * ```ts\n  *     this.chart.provideContainer(\"Container\");\n  * ```\n  */\n\n\n  IgrDomainChart.prototype.provideContainer = function (container) {\n    this.i.provideContainer(container);\n  };\n  /**\n   * Destroy this control\n  \r\n  *\n  * Use the `destroy` property to destroy the chart.\n  *\n  * ```ts\n  * this.chart.destroy();\n  * ```\n  */\n\n\n  IgrDomainChart.prototype.destroy = function () {\n    this.i.destroy();\n  };\n  /**\n   * Called when the control has been resized.\n  \r\n  *\n  * `notifyResized` method Called when the control has been resized.\n  *\n  * ```ts\n  * this.chart.notifyResized();\n  * ```\n  */\n\n\n  IgrDomainChart.prototype.notifyResized = function () {\n    this.i.notifyResized();\n  };\n\n  IgrDomainChart.prototype.notifyVisualPropertiesChanged = function () {\n    this.i.jx();\n  };\n  /**\n   * Forces any pending refresh to the chart to be finished.\n  \r\n  *\n  * Method `flush` used to Forces any pending deferred work to render on the chart before continuing.\n  *\n  * ```ts\n  * this.chart.flush();\n  * ```\n  */\n\n\n  IgrDomainChart.prototype.flush = function () {\n    this.i.i5();\n  };\n  /**\n   * Hides the active main tooltip, if displayed.\n  \r\n  *\n  * Use the `hideToolTip` method to hide the active tooltip.\n  *\n  * ```ts\n  * this.chart.hideToolTip();\n  * ```\n  */\n\n\n  IgrDomainChart.prototype.hideToolTip = function () {\n    this.i.jc();\n  };\n  /**\n   * Replays transition-in animation on all series in the chart.\n  \r\n  */\n\n\n  IgrDomainChart.prototype.replayTransitionIn = function () {\n    this.i.km();\n  };\n\n  IgrDomainChart.prototype.notifySetItem = function (source_, index, oldItem, newItem) {\n    this.i.jw(source_, index, oldItem, newItem);\n  };\n  /**\n   * Used to manually notify the chart that the data source has reset or cleared its items.\n  \r\n  *\n  * Use `notifyClearItems` method to notifies the chart that the items have been cleared from an associated data source.\n  *\n  * ```ts\n  * this.chart.notifyClearItems(this.data);\n  * ```\n  */\n\n\n  IgrDomainChart.prototype.notifyClearItems = function (source_) {\n    this.i.js(source_);\n  };\n\n  IgrDomainChart.prototype.notifyInsertItem = function (source_, index, newItem) {\n    this.i.jt(source_, index, newItem);\n  };\n\n  IgrDomainChart.prototype.notifyRemoveItem = function (source_, index, oldItem) {\n    this.i.ju(source_, index, oldItem);\n  };\n\n  Object.defineProperty(IgrDomainChart.prototype, \"seriesAdded\", {\n    /**\n     * Event raised when a series is initialized and added to this chart.\n    *\n    * `SeriesAdded` event raised when a series is initialized and added to this chart.\n    *\n    * ````ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tmarkerTypes={this.state.markersTypes}\n    * \tdataSource={this.categoryData}\n    * \tseriesAdded={this.CategoryChart_SeriesAdded}/>\n    * ``\n    *\n    * ```ts\n    * CategoryChart_SeriesAdded(sender:any ,aregs:ChartSeriesEventArgs)\n    * {\n    * }\n    * ````\n    */\n    get: function () {\n      return this._seriesAdded;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._seriesAdded_wrapped !== null) {\n        this.i.seriesAdded = delegateRemove(this.i.seriesAdded, this._seriesAdded_wrapped);\n        this._seriesAdded_wrapped = null;\n        this._seriesAdded = null;\n      }\n\n      this._seriesAdded = ev;\n\n      this._seriesAdded_wrapped = function (o, e) {\n        var outerArgs = new IgrChartSeriesEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSeriesAdded) {\n          _this.beforeSeriesAdded(_this, outerArgs);\n        }\n\n        if (_this._seriesAdded) {\n          _this._seriesAdded(_this, outerArgs);\n        }\n      };\n\n      this.i.seriesAdded = delegateCombine(this.i.seriesAdded, this._seriesAdded_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"seriesRemoved\", {\n    /**\n     * Event raised when a series is removed from this chart.\n    *\n    * `SeriesRemoved` event raised when a series is removed from this chart.\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tmarkerTypes={this.state.markersTypes}\n    * \tdataSource={this.categoryData}\n    * \tseriesRemoved={this.CategoryChart_seriesRemoved}/>\n    * ```\n    *\n    * ```ts\n    *  CategoryChart_seriesRemoved(sender: any , aregs: ChartSeriesEventArgs)\n    *   {\n    *\n    *   }\n    * ```\n    */\n    get: function () {\n      return this._seriesRemoved;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._seriesRemoved_wrapped !== null) {\n        this.i.seriesRemoved = delegateRemove(this.i.seriesRemoved, this._seriesRemoved_wrapped);\n        this._seriesRemoved_wrapped = null;\n        this._seriesRemoved = null;\n      }\n\n      this._seriesRemoved = ev;\n\n      this._seriesRemoved_wrapped = function (o, e) {\n        var outerArgs = new IgrChartSeriesEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSeriesRemoved) {\n          _this.beforeSeriesRemoved(_this, outerArgs);\n        }\n\n        if (_this._seriesRemoved) {\n          _this._seriesRemoved(_this, outerArgs);\n        }\n      };\n\n      this.i.seriesRemoved = delegateCombine(this.i.seriesRemoved, this._seriesRemoved_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"seriesPointerEnter\", {\n    /**\n     * Occurs when the pointer enters a Series.\n    *\n    * `SeriesPointerEnter` event raised when the pointer enters a Series.\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tmarkerTypes={this.state.markersTypes}\n    * \tdataSource={this.categoryData}\n    * \tseriesPointerEnter={this.CategoryChart_seriesPointerDown}/>\n    * ```\n    *\n    * ```ts\n    * CategoryChart_seriesPointerEnter(sender: any , aregs: ChartSeriesEventArgs)\n    *   {\n    *\n    *   }\n    * ```\n    */\n    get: function () {\n      return this._seriesPointerEnter;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._seriesPointerEnter_wrapped !== null) {\n        this.i.seriesPointerEnter = delegateRemove(this.i.seriesPointerEnter, this._seriesPointerEnter_wrapped);\n        this._seriesPointerEnter_wrapped = null;\n        this._seriesPointerEnter = null;\n      }\n\n      this._seriesPointerEnter = ev;\n\n      this._seriesPointerEnter_wrapped = function (o, e) {\n        var outerArgs = new IgrDomainChartSeriesPointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSeriesPointerEnter) {\n          _this.beforeSeriesPointerEnter(_this, outerArgs);\n        }\n\n        if (_this._seriesPointerEnter) {\n          _this._seriesPointerEnter(_this, outerArgs);\n        }\n      };\n\n      this.i.seriesPointerEnter = delegateCombine(this.i.seriesPointerEnter, this._seriesPointerEnter_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"seriesPointerLeave\", {\n    /**\n     * Occurs when the pointer leaves a Series.\n    *\n    * `SeriesPointerLeave` event raised when the pointer leaves a Series.\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tmarkerTypes={this.state.markersTypes}\n    * \tdataSource={this.categoryData}\n    * \tseriesPointerLeave={this.CategoryChart_seriesPointerLeave}/>\n    * ```\n    *\n    * ```ts\n    * CategoryChart_seriesPointerLeave(sender: any , aregs: ChartSeriesEventArgs)\n    *   {\n    *\n    *   }\n    * ```\n    */\n    get: function () {\n      return this._seriesPointerLeave;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._seriesPointerLeave_wrapped !== null) {\n        this.i.seriesPointerLeave = delegateRemove(this.i.seriesPointerLeave, this._seriesPointerLeave_wrapped);\n        this._seriesPointerLeave_wrapped = null;\n        this._seriesPointerLeave = null;\n      }\n\n      this._seriesPointerLeave = ev;\n\n      this._seriesPointerLeave_wrapped = function (o, e) {\n        var outerArgs = new IgrDomainChartSeriesPointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSeriesPointerLeave) {\n          _this.beforeSeriesPointerLeave(_this, outerArgs);\n        }\n\n        if (_this._seriesPointerLeave) {\n          _this._seriesPointerLeave(_this, outerArgs);\n        }\n      };\n\n      this.i.seriesPointerLeave = delegateCombine(this.i.seriesPointerLeave, this._seriesPointerLeave_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"seriesPointerMove\", {\n    /**\n     * Occurs when the pointer moves over a Series.\n    *\n    * `SeriesPointerMove` event raised when the pointer moves over a Series.\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tmarkerTypes={this.state.markersTypes}\n    * \tdataSource={this.categoryData}\n    * \tseriesPointerMove={this.CategoryChart_seriesPointerMove}/>\n    * ```\n    *\n    * ```ts\n    *  CategoryChart_seriesPointerMove(sender: any , aregs: ChartSeriesEventArgs)\n    *   {\n    *\n    *   }\n    * ```\n    */\n    get: function () {\n      return this._seriesPointerMove;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._seriesPointerMove_wrapped !== null) {\n        this.i.seriesPointerMove = delegateRemove(this.i.seriesPointerMove, this._seriesPointerMove_wrapped);\n        this._seriesPointerMove_wrapped = null;\n        this._seriesPointerMove = null;\n      }\n\n      this._seriesPointerMove = ev;\n\n      this._seriesPointerMove_wrapped = function (o, e) {\n        var outerArgs = new IgrDomainChartSeriesPointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSeriesPointerMove) {\n          _this.beforeSeriesPointerMove(_this, outerArgs);\n        }\n\n        if (_this._seriesPointerMove) {\n          _this._seriesPointerMove(_this, outerArgs);\n        }\n      };\n\n      this.i.seriesPointerMove = delegateCombine(this.i.seriesPointerMove, this._seriesPointerMove_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"seriesPointerDown\", {\n    /**\n     * Occurs when the pointer is pressed down over a Series.\n    *\n    * `SeriesPointerDown` event raised when the pointer is pressed down over a Series\n    *\n    * ````ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tmarkerTypes={this.state.markersTypes}\n    * \tdataSource={this.categoryData}\n    * \tseriesPointerDown={this.CategoryChart_seriesPointerDown}/>\n    * ``\n    *\n    * ```ts\n    * CategoryChart_seriesPointerDown(sender: any , aregs: ChartSeriesEventArgs)\n    *   {\n    *\n    *   }\n    * ````\n    */\n    get: function () {\n      return this._seriesPointerDown;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._seriesPointerDown_wrapped !== null) {\n        this.i.seriesPointerDown = delegateRemove(this.i.seriesPointerDown, this._seriesPointerDown_wrapped);\n        this._seriesPointerDown_wrapped = null;\n        this._seriesPointerDown = null;\n      }\n\n      this._seriesPointerDown = ev;\n\n      this._seriesPointerDown_wrapped = function (o, e) {\n        var outerArgs = new IgrDomainChartSeriesPointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSeriesPointerDown) {\n          _this.beforeSeriesPointerDown(_this, outerArgs);\n        }\n\n        if (_this._seriesPointerDown) {\n          _this._seriesPointerDown(_this, outerArgs);\n        }\n      };\n\n      this.i.seriesPointerDown = delegateCombine(this.i.seriesPointerDown, this._seriesPointerDown_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"seriesPointerUp\", {\n    /**\n     * Occurs when the pointer is released over a Series.\n    *\n    * `SeriesPointerUp` event raised when the pointer is released over a Series.\n    *\n    * ```ts\n    *  <IgrCategoryChart\n    * \twidth=\"100%\"\n    * \theight=\"100%\"\n    * \tchartType=\"Line\"\n    * \tmarkerTypes={this.state.markersTypes}\n    * \tdataSource={this.categoryData}\n    * \tseriesPointerUp={this.CategoryChart_seriesPointerUp}/>\n    * ```\n    *\n    * ```ts\n    *  CategoryChart_seriesPointerUp(sender: any , aregs: ChartSeriesEventArgs)\n    *   {\n    *\n    *   }\n    * ```\n    */\n    get: function () {\n      return this._seriesPointerUp;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._seriesPointerUp_wrapped !== null) {\n        this.i.seriesPointerUp = delegateRemove(this.i.seriesPointerUp, this._seriesPointerUp_wrapped);\n        this._seriesPointerUp_wrapped = null;\n        this._seriesPointerUp = null;\n      }\n\n      this._seriesPointerUp = ev;\n\n      this._seriesPointerUp_wrapped = function (o, e) {\n        var outerArgs = new IgrDomainChartSeriesPointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSeriesPointerUp) {\n          _this.beforeSeriesPointerUp(_this, outerArgs);\n        }\n\n        if (_this._seriesPointerUp) {\n          _this._seriesPointerUp(_this, outerArgs);\n        }\n      };\n\n      this.i.seriesPointerUp = delegateCombine(this.i.seriesPointerUp, this._seriesPointerUp_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDomainChart.prototype, \"calloutStyleUpdating\", {\n    /**\n     * Occurs when the style of a callout is updated.\n    */\n    get: function () {\n      return this._calloutStyleUpdating;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._calloutStyleUpdating_wrapped !== null) {\n        this.i.calloutStyleUpdating = delegateRemove(this.i.calloutStyleUpdating, this._calloutStyleUpdating_wrapped);\n        this._calloutStyleUpdating_wrapped = null;\n        this._calloutStyleUpdating = null;\n      }\n\n      this._calloutStyleUpdating = ev;\n\n      this._calloutStyleUpdating_wrapped = function (o, e) {\n        var outerArgs = new IgrCalloutStyleUpdatingEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeCalloutStyleUpdating) {\n          _this.beforeCalloutStyleUpdating(_this, outerArgs);\n        }\n\n        if (_this._calloutStyleUpdating) {\n          _this._calloutStyleUpdating(_this, outerArgs);\n        }\n      };\n\n      this.i.calloutStyleUpdating = delegateCombine(this.i.calloutStyleUpdating, this._calloutStyleUpdating_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return IgrDomainChart;\n}(React.Component);\n\nexport { IgrDomainChart };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-domain-chart.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends, __values } from \"tslib\";\nimport * as React from 'react';\nimport { HorizontalAlignment_$type } from \"igniteui-react-core\";\nimport { UnknownValuePlotting_$type } from \"igniteui-react-core\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { IgrChartSeriesEventArgs } from './igr-chart-series-event-args';\nimport { brushToString, stringToBrush, toBrushCollection, fromBrushCollection, fromRect, toRect, ensureBool, ensureEnum, isValidProp, getModifiedProps, toSpinal, initializePropertiesFromCss, NamePatcher } from \"igniteui-react-core\";\nimport { MarkerType_$type } from \"./MarkerType\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { IgrDomainChartSeriesPointerEventArgs } from './igr-domain-chart-series-pointer-event-args';\nimport { MarkerTypeCollection as MarkerTypeCollection_internal } from './MarkerTypeCollection';\nimport { IgrMarkerTypeCollection } from './igr-marker-type-collection';\nimport { SyncableObservableCollection$1 } from \"igniteui-react-core\";\nimport { ToolTipType_$type } from \"./ToolTipType\";\nimport { CrosshairsDisplayMode_$type } from \"./CrosshairsDisplayMode\";\nimport { IgrCalloutStyleUpdatingEventArgs } from \"./igr-callout-style-updating-event-args\";\nimport { ComputedPlotAreaMarginMode_$type } from './ComputedPlotAreaMarginMode';\nimport { SeriesHighlightingMode_$type } from './SeriesHighlightingMode';\nimport { SeriesHighlightingBehavior_$type } from './SeriesHighlightingBehavior';\nimport { LegendHighlightingMode_$type } from './LegendHighlightingMode';\nimport { SeriesOutlineMode_$type } from './SeriesOutlineMode';\nimport { MarkerOutlineMode_$type } from './MarkerOutlineMode';\nimport { MarkerFillMode_$type } from './MarkerFillMode';\nimport { MarkerAutomaticBehavior_$type } from './MarkerAutomaticBehavior';\nimport { LegendItemBadgeMode_$type } from './LegendItemBadgeMode';\nimport { LegendItemBadgeShape_$type } from './LegendItemBadgeShape';\nvar IgrDomainChart = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrDomainChart, _super);\n    function IgrDomainChart(props) {\n        var _this = _super.call(this, props) || this;\n        _this._calloutsDataSource = null;\n        _this._markerTypes = null;\n        _this.__p = null;\n        _this._hasUserValues = new Set();\n        _this._stylingContainer = null;\n        _this._stylingParent = null;\n        _this._inStyling = false;\n        _this._seriesAdded = null;\n        _this._seriesAdded_wrapped = null;\n        _this._seriesRemoved = null;\n        _this._seriesRemoved_wrapped = null;\n        _this._seriesPointerEnter = null;\n        _this._seriesPointerEnter_wrapped = null;\n        _this._seriesPointerLeave = null;\n        _this._seriesPointerLeave_wrapped = null;\n        _this._seriesPointerMove = null;\n        _this._seriesPointerMove_wrapped = null;\n        _this._seriesPointerDown = null;\n        _this._seriesPointerDown_wrapped = null;\n        _this._seriesPointerUp = null;\n        _this._seriesPointerUp_wrapped = null;\n        _this._calloutStyleUpdating = null;\n        _this._calloutStyleUpdating_wrapped = null;\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._implementation = _this.createImplementation();\n        _this._implementation.externalObject = _this;\n        _this.onImplementationCreated();\n        return _this;\n    }\n    IgrDomainChart.prototype.createImplementation = function () {\n        return null;\n    };\n    Object.defineProperty(IgrDomainChart.prototype, \"i\", {\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrDomainChart.prototype.onImplementationCreated = function () {\n    };\n    IgrDomainChart.prototype.componentDidMount = function () {\n        var e_1, _a;\n        try {\n            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = this.props[p];\n                }\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n    };\n    IgrDomainChart.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var e_2, _a;\n        var mod = getModifiedProps(this.props, nextProps);\n        try {\n            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = mod[p];\n                }\n            }\n        }\n        catch (e_2_1) {\n            e_2 = { error: e_2_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_2)\n                    throw e_2.error;\n            }\n        }\n        return true;\n    };\n    IgrDomainChart.prototype.render = function () {\n        return null;\n    };\n    Object.defineProperty(IgrDomainChart.prototype, \"tooltipTemplate\", {\n        /**\n        * Sets or gets the template reference to use for tooltips for all the series.\n        *\n        *\n        */\n        get: function () {\n            return this.i.tooltipTemplate;\n        },\n        set: function (v) {\n            this.i.tooltipTemplate = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"tooltipTemplates\", {\n        /**\n        * Sets or gets the template references to use for tooltips for all the series, in order.\n        *\n        *\n        */\n        get: function () {\n            var ret = [];\n            if (this.i.tooltipTemplates) {\n                for (var ii = 0; ii < this.i.tooltipTemplates.count; ii++) {\n                    ret.push(this.i.tooltipTemplates.item(ii));\n                }\n            }\n            return ret;\n        },\n        set: function (v) {\n            this.i.tooltipTemplates.clear();\n            if (v) {\n                for (var ii = 0; ii < v.length; ii++) {\n                    this.i.tooltipTemplates.add(v[ii]);\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"legend\", {\n        get: function () {\n            if (this.i.legend != null)\n                return this.i.legend.externalObject;\n        },\n        set: function (v) {\n            if (v != undefined && v != null)\n                this.i.legend = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"calloutsDataSource\", {\n        get: function () {\n            return this._calloutsDataSource;\n        },\n        set: function (value) {\n            this._calloutsDataSource = value;\n            this.bindCalloutsData();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrDomainChart.prototype.bindCalloutsData = function () {\n        if (this.i != null && this.i !== undefined) {\n            this.i.calloutsItemsSource = this._calloutsDataSource;\n        }\n    };\n    Object.defineProperty(IgrDomainChart.prototype, \"pixelScalingRatio\", {\n        /**\n     * Gets or sets the scaling value used to affect the pixel density of the control.\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n     * to appear blurry.\n    */\n        get: function () {\n            return this.i.ee;\n        },\n        set: function (v) {\n            this.i.ee = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"titleLeftMargin\", {\n        /**\n         * Gets or sets the left margin of chart title\n        *\n        *  Use `titleLeftMargin` property for the left margin of chart title.\n        *\n        * ```ts\n        * this.chart.titleLeftMargin = 10;\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart dataSource={this.state.data}\n        *                    titleLeftMargin={20}>\n        *  </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.er;\n        },\n        set: function (v) {\n            this.i.er = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"titleRightMargin\", {\n        /**\n         * Gets or sets the right margin of chart title\n        *\n        *  Use `titleLeftMargin` property for the right margin of chart title.\n        *\n        * ```ts\n        * this.chart.titleRightMargin = 10;\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t\t\t\tdataSource={this.state.data}\n        *                 titleRightMargin = 10>\n        *  </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.es;\n        },\n        set: function (v) {\n            this.i.es = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"titleTopMargin\", {\n        /**\n         * Gets or sets the top margin of chart title\n        *\n        *  Use `titleTopMargin` property for the top margin of chart title.\n        *\n        * ```ts\n        * this.chart.titleTopMargin = 10;\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart dataSource={this.state.data}\n        *                titleTopMargin={10} />\n        * ```\n        */\n        get: function () {\n            return this.i.et;\n        },\n        set: function (v) {\n            this.i.et = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"titleBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin of chart title\n        *\n        *  Use `titleBottomMargin` property for the bottom margin of chart title.\n        *\n        * ```ts\n        *  this.chart.titleBottomMargin = 5;\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tdataSource={this.categoryData}\n        * \tsubtitle= \"CategoryChart Subtitle\"\n        * \tsubtitleAlignment=\"Right\"\n        * \ttitleBottomMargin={5}/>\n        * ```\n        */\n        get: function () {\n            return this.i.eq;\n        },\n        set: function (v) {\n            this.i.eq = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"subtitleLeftMargin\", {\n        /**\n         * Gets or sets the left margin of chart subtitle\n        *\n        * Use `subtitleLeftMargin` property for the left margin of chart subtitle.\n        *\n        * ```ts\n        * this.chart.subtitleLeftMargin = 20 ;\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tdataSource={this.categoryData}\n        * \tsubtitle= \"CategoryChart Subtitle\"\n        * \tsubtitleLeftMargin= {20}/>\n        * ```\n        */\n        get: function () {\n            return this.i.em;\n        },\n        set: function (v) {\n            this.i.em = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"subtitleTopMargin\", {\n        /**\n         * Gets or sets the top margin of chart subtitle\n        *\n        * Use `subtitleTopMargin` property for the top margin of chart subtitle.\n        *\n        * ```ts\n        * this.chart.subtitleTopMargin = 10;\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tdataSource={this.categoryData}\n        * \tsubtitle= \"CategoryChart Subtitle\"\n        * \tsubtitleTopMargin= {10}/>\n        * ```\n        */\n        get: function () {\n            return this.i.eo;\n        },\n        set: function (v) {\n            this.i.eo = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"subtitleRightMargin\", {\n        /**\n         * Gets or sets the right margin of chart subtitle\n        *\n        * Use `subtitleRightMargin` property for the right margin of chart subtitle.\n        *\n        * ```ts\n        *  this.chart.subtitleRightMargin = 20 ;\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tdataSource={this.categoryData}\n        * \tsubtitle= \"CategoryChart Subtitle\"\n        * \tsubtitleAlignment=\"Right\"\n        * \tsubtitleRightMargin ={20}/>\n        * ```\n        */\n        get: function () {\n            return this.i.en;\n        },\n        set: function (v) {\n            this.i.en = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"subtitleBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin of chart subtitle\n        *\n        * Use `subtitleBottomMargin` property for the bottom margin of chart subtitle.\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tdataSource={this.categoryData}\n        * \tsubtitle= \"CategoryChart Subtitle\"\n        * \tsubtitleBottomMargin= {10}/>\n        * ```\n        *\n        * ```ts\n        * this.chart.subtitleBottomMargin = 10 ;\n        * ```\n        */\n        get: function () {\n            return this.i.el;\n        },\n        set: function (v) {\n            this.i.el = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"subtitleTextColor\", {\n        /**\n         * Gets or sets color of chart subtitle\n        *\n        * Use `subtitleTextColor` property to color the subtitle.\n        *\n        * ```ts\n        * this.chart.subtitleTextColor = \"#ff0000\" ;\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tdataSource={this.categoryData}\n        * \tsubtitle= \"CategoryChart Subtitle\"\n        * \tsubtitleTextColor=\"#ff0000\"/>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.lo);\n        },\n        set: function (v) {\n            this.i.lo = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"titleTextColor\", {\n        /**\n         * Gets or sets color of chart title\n        *\n        *  Use `titleTextColor` property to color the chart title\n        *\n        * ```ts\n        *  this.chart.titleTextColor=\"red\" ;\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t\tdataSource={this.state.data}\n        * \t\twidth=\"700px\"\n        * \t\theight=\"500px\"\n        * \t\txAxisTitle=\"Countries\"\n        * \t\ttitleTextColor=\"Red\" />\n        *\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.lp);\n        },\n        set: function (v) {\n            this.i.lp = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"leftMargin\", {\n        /**\n         * Gets or sets the left margin of the chart content.\n        *\n        * Use the 'leftMargin' property for the left margin of the chart content.\n        *\n        * ```ts\n        *  this.chart.leftMargin = 20;\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart dataSource={this.state.data}\n        *                    leftMargin= {20}/>\n        * ```\n        */\n        get: function () {\n            return this.i.eb;\n        },\n        set: function (v) {\n            this.i.eb = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"topMargin\", {\n        /**\n         * Gets or sets the top margin of the chart content.\n        *\n        * Use `topMargin` property for the margin of the chart content.\n        *\n        * ```ts\n        * this.chart.topMargin=20;\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart dataSource={this.state.data}\n        *                topMargin={10} />\n        * ```\n        */\n        get: function () {\n            return this.i.eu;\n        },\n        set: function (v) {\n            this.i.eu = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"rightMargin\", {\n        /**\n         * Gets or sets the right margin of the chart content.\n        *\n        * Use `rightMargin` property for the right margin of the chart content.\n        *\n        * ```ts\n        *   this.chart.rightMargin = 20 ;\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tmarkerTypes={this.state.markersTypes}\n        * \tdataSource={this.categoryData}\n        * \trightMargin= {4}/>\n        * ```\n        */\n        get: function () {\n            return this.i.ek;\n        },\n        set: function (v) {\n            this.i.ek = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"bottomMargin\", {\n        /**\n         * Gets or sets the bottom margin around the chart content.\n        *\n        * Use the `bottomMargin` property for the bottom margin around the chart content.\n        *\n        * ```ts\n        * this.chart.bottomMargin=20;\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart dataSource={this.state.data}\n        *                    bottomMargin= 20 />\n        * ```\n        */\n        get: function () {\n            return this.i.d9;\n        },\n        set: function (v) {\n            this.i.d9 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"transitionDuration\", {\n        /**\n         * Gets or sets the duration used for animating series plots when the data is changing\n        *\n        * Use the `transitionDuration` property to animating between data values.\n        *\n        * ```ts\n        * this.chart.transitionDuratio= 500;\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart dataSource={this.state.data}\n        *                transitionDuratio={500} />\n        * ```\n        */\n        get: function () {\n            return this.i.e9;\n        },\n        set: function (v) {\n            this.i.e9 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"transitionEasingFunction\", {\n        /**\n         * Gets or sets the easing function used for animating series plots when the data is changing.\n         * This can be set to one of the known values \"linear\" or \"cubic,\" or it can be set to an easing function which takes a single numeric parameter and returns a number.\n        *\n        * The 'transitionInEasingFunction' property used for easing function for animating series plots when the chart is loading into view.\n        *\n        * ```ts\n        * this.chart.transitionInEasingFunction=  this.cubicFunc;\n        *\n        * cubicFunc(time: number) : number\n        *   {\n        *     return time;\n        *   }\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart dataSource={this.state.data}\n        *                transitionInEasingFunction=\"cubic\" />\n        * ```\n        */\n        get: function () {\n            return this.i.bs;\n        },\n        set: function (v) {\n            this.i.bs = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"subtitleTextStyle\", {\n        /**\n         * Gets or sets CSS font property for the chart subtitle\n        *\n        * Use `subtitleTextStyle` property for the CSS font of the chart subtitle.\n        *\n        * ```ts\n        * this.chart.subtitleTextStyle= \"16pt Verdona\";\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tdataSource={this.categoryData}\n        * \tsubtitleTextStyle=\"16pt Verdona\"/>\n        * ```\n        */\n        get: function () {\n            return this.i.h5;\n        },\n        set: function (v) {\n            this.i.h5 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"titleTextStyle\", {\n        /**\n         * Gets or sets CSS font property for the chart title\n        *\n        * Use `titleTextStyle` property for the CSS font property of the chart title\n        *\n        * ```ts\n        * this.chart.xAxisTitleTextStyle = \"24pt Verdona\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart dataSource={this.state.data}\n        *                 width=\"700px\"\n        *                 height=\"500px\"\n        *                 xAxisTitle=\"Countries\"\n        *                 xAxisTitleTextColor=\"gray\"\n        *                 xAxisTitleTextStyle=\"12pt Verdana\"\n        *                 xAxisTitleAngle={0}\n        *                 yAxisTitle=\"Trillions of Watt-hours (TWh)\"\n        *                 yAxisTitleTextStyle=\"12pt Verdana\"\n        *                 yAxisTitleTextColor=\"gray\"\n        *                 yAxisTitleAngle={90}\n        *                 yAxisTitleLeftMargin={5}>\n        *  </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ih;\n        },\n        set: function (v) {\n            this.i.ih = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"domainType\", {\n        /**\n         * Gets the domain type of this chart\n        */\n        get: function () {\n            return this.i.ai;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"includedProperties\", {\n        /**\n         * Gets or sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.\n        *\n        * The `includedProperties` property used to include the properties for the consideration of the category chart.\n        *\n        * ```ts\n        * this.chart.includedProperties = [\"ProductName\", \"Cost\"];\n        * ```\n        *\n        * ```ts\n        * \t<IgrCategoryChart\n        * \t\tchartType=\"Line\"\n        * \t\tmarkerTypes={this.state.markersTypes}\n        * \t\tdataSource={this.categoryData}\n        * \t\texcludedProperties=\"value\" />\n        * ```\n        */\n        get: function () {\n            return this.i.d;\n        },\n        set: function (v) {\n            if (v && !Array.isArray(v) && typeof (v) == \"string\") {\n                var re = /\\s*(?:,|\\s|$)\\s*/gm;\n                v = v.split(re);\n            }\n            this.i.d = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"excludedProperties\", {\n        /**\n         * Gets or sets a set of property paths that should be excluded from consideration by the category chart.\n        *\n        * The `excludedProperties` property used for the property paths that should be excluded from consideration by the category chart.\n        *\n        * ```ts\n        * this.chart.excludedProperties = [\"ID\", \"Discount\"];\n        * ```\n        *\n        * ```ts\n        * \t<IgrCategoryChart\n        * \tchartType=\"Line\"\n        * \tmarkerTypes={this.state.markersTypes}\n        * \tdataSource={this.categoryData}\n        * \texcludedProperties=\"value\" />\n        * ```\n        */\n        get: function () {\n            return this.i.c;\n        },\n        set: function (v) {\n            if (v && !Array.isArray(v) && typeof (v) == \"string\") {\n                var re = /\\s*(?:,|\\s|$)\\s*/gm;\n                v = v.split(re);\n            }\n            this.i.c = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"brushes\", {\n        /**\n         * Gets or sets the palette of brushes to use for coloring the chart series.\n         * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection\n        *\n        * Use the `brushes` property to  set the brushes.\n        *\n        * ```ts\n        * this.chart.brushes = [\"#ff0000\",\"#00ff00\"];\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.n);\n        },\n        set: function (v) {\n            this.i.n = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"outlines\", {\n        /**\n         * Gets or sets the palette of brushes to use for outlines on the chart series.\n         * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection\n        *\n        *  Use the `outlines` property to sets the palette of brushes to use for outlines on the chart series\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tchartType=\"Line\"\n        * \toutlines= \"#ff0000\"\n        * \tdataSource={this.categoryData}/>\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.r);\n        },\n        set: function (v) {\n            this.i.r = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"actualBrushes\", {\n        /**\n         * Gets the actual palette of brushes to use for coloring the chart series.\n        */\n        get: function () {\n            return fromBrushCollection(this.i.l);\n        },\n        set: function (v) {\n            this.i.l = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"actualOutlines\", {\n        /**\n         * Gets the actual palette of brushes to use for outlines on the chart series.\n        */\n        get: function () {\n            return fromBrushCollection(this.i.m);\n        },\n        set: function (v) {\n            this.i.m = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"isHorizontalZoomEnabled\", {\n        /**\n         * Gets or sets whether the chart can be horizontally zoomed through user interactions.\n        *\n        * Use the `isHorizontalZoomEnabled` property to allow chart horizontally zoomed .\n        *\n        * ```ts\n        *  <IgrCategoryChart dataSource={this.state.data}\n        *                    width=\"700px\"\n        *                    height=\"500px\"\n        *                    xAxisLabelTextStyle=\"10pt Verdana\"\n        *                    xAxisLabelTopMargin={5}\n        *                    xAxisLabelTextColor=\"gray\"\n        *                    yAxisLabelTextStyle=\"10pt Verdana\"\n        *                    yAxisLabelRightMargin={5}\n        *                    yAxisLabelTextColor=\"gray\"\n        * \t\t\t\t   isHorizontalZoomEnabled= true/>\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart dataSource={this.state.data}\n        *                    IsHorizontalZoomEnabled= true />\n        * ```\n        *\n        * ```ts\n        * this.chart.isHorizontalZoomEnabled = true;\n        * ```\n        */\n        get: function () {\n            return this.i.cn;\n        },\n        set: function (v) {\n            this.i.cn = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"isVerticalZoomEnabled\", {\n        /**\n         * Gets or sets whether the chart can be vertically zoomed through user interactions.\n        *\n        * Use the `isVerticalZoomEnabled` property to allow chart zoom vertically.\n        *\n        * ```ts\n        *  this.chart.isVerticalZoomEnabled = true;\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart dataSource={this.state.data}\n        *                   isVerticalZoomEnabled= \"true\"/>\n        * ```\n        */\n        get: function () {\n            return this.i.ct;\n        },\n        set: function (v) {\n            this.i.ct = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"shouldDisplayMockData\", {\n        /**\n         * Gets or sets whether the chart should display mock data when the data source has not been provided, if supported for this type of chart.\n        */\n        get: function () {\n            return this.i.cw;\n        },\n        set: function (v) {\n            this.i.cw = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"shouldUseSkeletonStyleForMockData\", {\n        /**\n         * Gets or sets whether the chart should use a faded skeleton style for mock data.\n        */\n        get: function () {\n            return this.i.cx;\n        },\n        set: function (v) {\n            this.i.cx = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"isSeriesHighlightingEnabled\", {\n        /**\n         * Gets or sets whether the chart can highlight series through user interactions.\n         * This property applies to Category Chart and Financial Chart controls.\n        */\n        get: function () {\n            return this.i.cp;\n        },\n        set: function (v) {\n            this.i.cp = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"windowRect\", {\n        /**\n         * Gets or sets the rectangle representing the current scroll and zoom state of the chart.\n         * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.\n        *\n        * Use `windowRect` property representing the current scroll and zoom state of the chart.\n        *\n        * ```ts\n        * this.chart.windowRect =[0,0,1,1];\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart dataSource={this.state.data}\n        *                WindowRect={1,0,1,1} />\n        * ```\n        */\n        get: function () {\n            return fromRect(this.i.lt);\n        },\n        set: function (v) {\n            this.i.lt = toRect(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"viewport\", {\n        /**\n         * Gets a rectangle representing the bounds of the plot area.\n        *\n        * `viewport` property representing the bounds of the plot area.\n        *\n        * ```ts\n        * let viewport:Rect =  this.chart.viewport;\n        * ```\n        */\n        get: function () {\n            return fromRect(this.i.ls);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"chartTitle\", {\n        /**\n         * Gets or sets text to display above the plot area.\n        *\n        * Use the `chartTitle` property to display the text above the plot area.\n        *\n        * ```ts\n        *  this.chart.title= \"This is a Title\";\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tdataSource={this.categoryData}\n        * \ttitle= \"CategoryChart Subtitle\"\t/>\n        * ```\n        */\n        get: function () {\n            return this.i.h9;\n        },\n        set: function (v) {\n            this.i.h9 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"subtitle\", {\n        /**\n         * Gets or sets text to display below the Title, above the plot area.\n        *\n        * Use the `subtitle` property to display the text below  and above the plot area.\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tdataSource={this.categoryData}\n        * \tsubtitle= \"CategoryChart Subtitle\"/>\n        * ```\n        *\n        * ```ts\n        *  this.chart.subtitle =\"CategoryChart Subtitle\" ;\n        * ```\n        */\n        get: function () {\n            return this.i.hy;\n        },\n        set: function (v) {\n            this.i.hy = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"titleAlignment\", {\n        /**\n         * Gets or sets horizontal alignment which determines the title position, relative to the left and right edges of the control.\n        *\n        * Use the `titleAlignment` property for the horizontal alignment of the title.\n        *\n        * ```ts\n        * this.chart.titleAlignment = HorizontalAlignment.Center;\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tdataSource={this.categoryData}\n        * \ttitleAlignment= \"Center\"/>\n        * ```\n        */\n        get: function () {\n            return this.i.k0;\n        },\n        set: function (v) {\n            this.i.k0 = ensureEnum(HorizontalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"subtitleAlignment\", {\n        /**\n         * Gets or sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.\n        *\n        * Use the `subtitleAlignment` property to Gets or sets horizontal alignment.\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tdataSource={this.categoryData}\n        * \tsubtitle= \"CategoryChart Subtitle\"\n        * \tsubtitleAlignment=\"Right\"/>\n        * ```\n        *\n        * ```ts\n        * this.chart.subtitleAlignment = HorizontalAlignment.Right;\n        * ```\n        */\n        get: function () {\n            return this.i.kz;\n        },\n        set: function (v) {\n            this.i.kz = ensureEnum(HorizontalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"unknownValuePlotting\", {\n        /**\n         * Gets or sets the behavior that determines how unknown values will be plotted on the chart.\n         * Null and Double.NaN are two examples of unknown values.\n        *\n        * Use the `unknownValuePlotting` property to determines the behavior that how unknown values will be plotted on the chart.\n        *\n        * ```ts\n        * this.chart.unknownValuePlotting =UnknownValuePlotting.DontPlot;\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart dataSource={this.state.data}\n        *                unknownValuePlotting= \"dontPlot\" />\n        * ```\n        */\n        get: function () {\n            return this.i.bo;\n        },\n        set: function (v) {\n            this.i.bo = ensureEnum(UnknownValuePlotting_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"resolution\", {\n        /**\n         * Gets or sets the rendering resolution for all series in this chart.\n         * Where n = Resolution, for every n horizontal pixels, combine all items into a single data point.  When Resolution = 0, all data points will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.\n        *\n        * Use the `resolution` property if the callouts should be display.\n        *\n        * ```ts\n        *   this.chart.resolution = 2 ;\n        * ```\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tmarkerTypes={this.state.markersTypes}\n        * \tdataSource={this.categoryData}\n        * \tcalloutsVisible=\"true\"\n        * \tresolution= {2}/>\n        * ```\n        */\n        get: function () {\n            return this.i.ej;\n        },\n        set: function (v) {\n            this.i.ej = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"thickness\", {\n        /**\n         * Gets or sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.\n        *\n        * Use the `thickness` property for the thickness of all the series in this chart.\n        */\n        get: function () {\n            return this.i.ep;\n        },\n        set: function (v) {\n            this.i.ep = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"outlineMode\", {\n        /**\n         * Gets or sets the OutlineMode for all series in this chart.\n        */\n        get: function () {\n            return this.i.bi;\n        },\n        set: function (v) {\n            this.i.bi = ensureEnum(SeriesOutlineMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"markerOutlineMode\", {\n        /**\n         * Gets or sets the MarkerOutlineMode for all series that support markers in this chart.\n        */\n        get: function () {\n            return this.i.a0;\n        },\n        set: function (v) {\n            this.i.a0 = ensureEnum(MarkerOutlineMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"markerFillMode\", {\n        /**\n         * Gets or sets the MarkerFillMode for all series that support markers in this chart.\n        */\n        get: function () {\n            return this.i.ay;\n        },\n        set: function (v) {\n            this.i.ay = ensureEnum(MarkerFillMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"markerFillOpacity\", {\n        /**\n         * Gets or sets the Marker Fill Opacity for all series that support markers in this chart.\n        */\n        get: function () {\n            return this.i.ec;\n        },\n        set: function (v) {\n            this.i.ec = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"markerThickness\", {\n        /**\n         * Gets or sets the Marker Thickness for all series that support markers in this chart.\n        */\n        get: function () {\n            return this.i.ed;\n        },\n        set: function (v) {\n            this.i.ed = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"markerTypes\", {\n        /**\n         * Gets or sets the marker shapes used for indicating location of data points in this chart.\n         * This property applies only to these chart types: point, line, spline, bubble, and polygon\n        */\n        get: function () {\n            if (this._markerTypes === null) {\n                var coll = new IgrMarkerTypeCollection();\n                var innerColl = this.i.a5;\n                if (!innerColl) {\n                    innerColl = new MarkerTypeCollection_internal();\n                }\n                this._markerTypes = coll._fromInner(innerColl);\n                this.i.a5 = innerColl;\n            }\n            return this._markerTypes;\n        },\n        set: function (v) {\n            if (this._markerTypes !== null) {\n                this._markerTypes._setSyncTarget(null);\n                this._markerTypes = null;\n            }\n            var coll = new IgrMarkerTypeCollection();\n            this._markerTypes = coll._fromOuter(v);\n            var syncColl = new SyncableObservableCollection$1(MarkerType_$type);\n            var innerColl = this.i.a5;\n            if (!innerColl) {\n                innerColl = new MarkerTypeCollection_internal();\n            }\n            syncColl._inner = innerColl;\n            syncColl.clear();\n            this._markerTypes._setSyncTarget(syncColl);\n            this.i.a5 = innerColl;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"markerAutomaticBehavior\", {\n        /**\n         * Gets or sets the default marker type for all series plotted in this chart.\n         * This property is ignored when the MarkerTypes property is set\n        */\n        get: function () {\n            return this.i.aw;\n        },\n        set: function (v) {\n            this.i.aw = ensureEnum(MarkerAutomaticBehavior_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"markerBrushes\", {\n        /**\n         * Gets or sets the palette of brushes used for rendering fill area of data point markers.\n         * This property applies only to these chart types: point, line, spline, bubble, and polygon\n        *\n        * `markerBrushes` property used for rendering fill area of data point markers.\n        *\n        * ```ts\n        *  this.chart.markerBrushes=[ \"#ff0000\", \"#ffff00\", \"#00ffff\" ];\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        *     chartType=\"Line\"\n        *     markerBrushes =\"#ffff00\"\n        *     dataSource={this.categoryData}/>\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.p);\n        },\n        set: function (v) {\n            this.i.p = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"markerOutlines\", {\n        /**\n         * Gets or sets the palette of brushes used for rendering outlines of data point markers.\n         * This property applies only to these chart types: point, line, spline, bubble, and polygon\n        *\n        * `markerOutlines` property used for rendering outlines of data point markers.\n        *\n        * ```ts\n        * this.chart.markerOutlines= [\"#ff0000\", \"#ffff00\", \"#00ffff\"] ;\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tchartType=\"Line\"\n        * \tmarkerOutlines= \"#ff0000\"\n        * \tdataSource={this.categoryData}/>\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.q);\n        },\n        set: function (v) {\n            this.i.q = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"markerMaxCount\", {\n        /**\n         * Gets or sets the maximum number of markers displayed in the plot area of the chart.\n        *\n        * `markerMaxCount` property used to display maximum number of markers in the plot area of the chart.\n        *\n        * ```ts\n        *  this.chart.markerMaxCount = 100 ;\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tchartType=\"Line\"\n        * \tmarkerMaxCount= {2}\n        * \tdataSource={this.categoryData}/>\n        * ```\n        */\n        get: function () {\n            return this.i.e8;\n        },\n        set: function (v) {\n            this.i.e8 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"areaFillOpacity\", {\n        /**\n         * Gets or sets the fill opacity for all series that have area visuals in this chart.\n         * For example, Area, SplineArea, Column chart types\n        */\n        get: function () {\n            return this.i.d6;\n        },\n        set: function (v) {\n            this.i.d6 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"animateSeriesWhenAxisRangeChanges\", {\n        /**\n         * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.\n        */\n        get: function () {\n            return this.i.ca;\n        },\n        set: function (v) {\n            this.i.ca = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"trendLineBrushes\", {\n        /**\n         * Gets or sets the palette of brushes to used for coloring trend lines in this chart.\n         * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection\n        *\n        * Use the `trendLineBrushes` property for coloring trend lines in the chart.\n        *\n        * ```ts\n        * this.chart.trendLineBrushes=[\"#ff0000\", \"#ffff00\", \"#00ffff\"]\t;\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart dataSource={this.state.data}\n        *                trendLineBrushes=\"#ffff00\" />\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.t);\n        },\n        set: function (v) {\n            this.i.t = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"trendLineType\", {\n        /**\n         * Gets or sets the formula used for calculating trend lines in this chart.\n         * This property applies only to these chart types: point, line, spline, and bubble\n        *\n        * Use the `trendLineType` property for calculating trend lines.\n        *\n        * ```ts\n        * this.chart.trendLineType = TrendLineType.CubicFit;\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart dataSource={this.state.data}\n        *                trendLineType=\"CubicFit\" />\n        * ```\n        */\n        get: function () {\n            return this.i.bm;\n        },\n        set: function (v) {\n            this.i.bm = ensureEnum(TrendLineType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"trendLineThickness\", {\n        /**\n         * Gets or sets the thickness of the trend lines in this chart.\n         * This property applies only to these chart types: point, line, spline, and bubble\n        *\n        * Use the `trendLineThickness` property for the thickness of the trend lines in the chart.\n        *\n        * ```ts\n        * this.chart.trendLineThickness=2;\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart dataSource={this.state.data}\n        *                trendLineThickness={2} />\n        * ```\n        */\n        get: function () {\n            return this.i.ev;\n        },\n        set: function (v) {\n            this.i.ev = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"alignsGridLinesToPixels\", {\n        /**\n         * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.\n        *\n        * Use `alignsGridLinesToPixels` propert to indicat whether grid and tick lines are aligned to device pixels.\n        *\n        * ```ts\n        *  this.chart.alignsGridLinesToPixels= true;\n        * ```\n        */\n        get: function () {\n            return this.i.b9;\n        },\n        set: function (v) {\n            this.i.b9 = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"plotAreaMarginLeft\", {\n        /**\n         * Margin applied to the Left of the plot area.\n        */\n        get: function () {\n            return this.i.eg;\n        },\n        set: function (v) {\n            this.i.eg = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"plotAreaMarginTop\", {\n        /**\n         * Margin applied to the Top of the plot area.\n        */\n        get: function () {\n            return this.i.ei;\n        },\n        set: function (v) {\n            this.i.ei = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"plotAreaMarginRight\", {\n        /**\n         * Margin applied to the right of the plot area.\n        */\n        get: function () {\n            return this.i.eh;\n        },\n        set: function (v) {\n            this.i.eh = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"plotAreaMarginBottom\", {\n        /**\n         * Margin applied below the plot area.\n        */\n        get: function () {\n            return this.i.ef;\n        },\n        set: function (v) {\n            this.i.ef = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"computedPlotAreaMarginMode\", {\n        /**\n         * Gets or sets the highlighting mode to use for the series in the component, when supported. This takes precedence over the series level IsHightlightingEnabled.\n        */\n        get: function () {\n            return this.i.y;\n        },\n        set: function (v) {\n            this.i.y = ensureEnum(ComputedPlotAreaMarginMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"highlightingMode\", {\n        /**\n         * Gets or sets the highlighting mode to use for the series in the component, when supported. This takes precedence over the series level IsHightlightingEnabled.\n        */\n        get: function () {\n            return this.i.bg;\n        },\n        set: function (v) {\n            this.i.bg = ensureEnum(SeriesHighlightingMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"highlightingBehavior\", {\n        /**\n         * Gets or sets the highlighting Behavior to use for the series in the component, when supported. This takes precedence over the series level IsHightlightingEnabled.\n        */\n        get: function () {\n            return this.i.be;\n        },\n        set: function (v) {\n            this.i.be = ensureEnum(SeriesHighlightingBehavior_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"legendHighlightingMode\", {\n        /**\n         * Gets or sets the highlighting mode to use for the legend linked to the component, when supported.\n        */\n        get: function () {\n            return this.i.aq;\n        },\n        set: function (v) {\n            this.i.aq = ensureEnum(LegendHighlightingMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"legendItemBadgeShape\", {\n        /**\n         * Gets or sets the type of legend badges representing all series displayed in a legend linked to this component\n         * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series\n        */\n        get: function () {\n            return this.i.au;\n        },\n        set: function (v) {\n            this.i.au = ensureEnum(LegendItemBadgeShape_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"legendItemBadgeMode\", {\n        /**\n         * Gets or sets the mode of legend badges representing all series displayed in a legend linked to this component.\n         * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series\n        */\n        get: function () {\n            return this.i.as;\n        },\n        set: function (v) {\n            this.i.as = ensureEnum(LegendItemBadgeMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"shouldAutoExpandMarginForInitialLabels\", {\n        /**\n         * Gets or sets a whether the series viewer should auto expand margins to accommodate the initial horizontal axis labels.\n        */\n        get: function () {\n            return this.i.cv;\n        },\n        set: function (v) {\n            this.i.cv = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"autoExpandMarginExtraPadding\", {\n        /**\n         * Gets or sets the extra amount the series viewer should auto expand margins to accommodate the initial horizontal axis labels.\n        */\n        get: function () {\n            return this.i.d7;\n        },\n        set: function (v) {\n            this.i.d7 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"autoExpandMarginMaximumValue\", {\n        /**\n         * Gets or sets the maximum amount the series viewer should auto expand margins to accommodate the initial horizontal axis labels.\n        */\n        get: function () {\n            return this.i.d8;\n        },\n        set: function (v) {\n            this.i.d8 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"trendLinePeriod\", {\n        get: function () {\n            return this.i.fa;\n        },\n        set: function (v) {\n            this.i.fa = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"toolTipType\", {\n        /**\n         * Gets or sets the style of tooltip to be displayed.\n        */\n        get: function () {\n            return this.i.bk;\n        },\n        set: function (v) {\n            this.i.bk = ensureEnum(ToolTipType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"crosshairsDisplayMode\", {\n        /**\n         * Gets or sets the crosshairs to be displayed.\n        */\n        get: function () {\n            return this.i.aa;\n        },\n        set: function (v) {\n            this.i.aa = ensureEnum(CrosshairsDisplayMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"crosshairsSnapToData\", {\n        /**\n         * Gets or sets whether crosshairs will snap to the nearest data point.\n        */\n        get: function () {\n            return this.i.cf;\n        },\n        set: function (v) {\n            this.i.cf = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"crosshairsLineVerticalStroke\", {\n        /**\n         * Gets or sets the color to apply to vertical crosshairs line.\n        */\n        get: function () {\n            return brushToString(this.i.lg);\n        },\n        set: function (v) {\n            this.i.lg = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"crosshairsLineThickness\", {\n        /**\n         * Gets or sets thickness of crosshairs lines.\n        */\n        get: function () {\n            return this.i.ea;\n        },\n        set: function (v) {\n            this.i.ea = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"crosshairsLineHorizontalStroke\", {\n        /**\n         * Gets or sets the color to apply to horizontal crosshairs line.\n        */\n        get: function () {\n            return brushToString(this.i.lf);\n        },\n        set: function (v) {\n            this.i.lf = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"crosshairsAnnotationEnabled\", {\n        /**\n         * Gets or sets whether annotations are shown along the axis for crosshair values\n        */\n        get: function () {\n            return this.i.ce;\n        },\n        set: function (v) {\n            this.i.ce = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"crosshairsAnnotationXAxisBackground\", {\n        /**\n         * Gets or sets the background of crosshair annotation on x-axis.\n        */\n        get: function () {\n            return brushToString(this.i.lb);\n        },\n        set: function (v) {\n            this.i.lb = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"crosshairsAnnotationYAxisBackground\", {\n        /**\n         * Gets or sets the background of crosshair annotation on y-axis.\n        */\n        get: function () {\n            return brushToString(this.i.ld);\n        },\n        set: function (v) {\n            this.i.ld = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"crosshairsAnnotationXAxisTextColor\", {\n        /**\n         * Gets or sets the text color of crosshair annotation on x-axis.\n        */\n        get: function () {\n            return brushToString(this.i.lc);\n        },\n        set: function (v) {\n            this.i.lc = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"crosshairsAnnotationYAxisTextColor\", {\n        /**\n         * Gets or sets the text color of crosshair annotation on y-axis.\n        */\n        get: function () {\n            return brushToString(this.i.le);\n        },\n        set: function (v) {\n            this.i.le = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"crosshairsAnnotationXAxisPrecision\", {\n        /**\n         * Gets or sets precision on interpolated values of crosshairs on x-axis.\n        */\n        get: function () {\n            return this.i.e5;\n        },\n        set: function (v) {\n            this.i.e5 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"crosshairsAnnotationYAxisPrecision\", {\n        /**\n         * Gets or sets precision on interpolated values of crosshairs on y-axis.\n        */\n        get: function () {\n            return this.i.e6;\n        },\n        set: function (v) {\n            this.i.e6 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"finalValueAnnotationsVisible\", {\n        /**\n         * Gets or sets whether annotations for the final value of each series is displayed on the axis.\n        */\n        get: function () {\n            return this.i.cg;\n        },\n        set: function (v) {\n            this.i.cg = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"finalValueAnnotationsBackground\", {\n        /**\n         * Gets or sets the background of final value annotation.\n        */\n        get: function () {\n            return brushToString(this.i.lh);\n        },\n        set: function (v) {\n            this.i.lh = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"finalValueAnnotationsTextColor\", {\n        /**\n         * Gets or sets the text color of final value annotation.\n        */\n        get: function () {\n            return brushToString(this.i.li);\n        },\n        set: function (v) {\n            this.i.li = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"finalValueAnnotationsPrecision\", {\n        /**\n         * Gets or sets precision on final value annotation.\n        */\n        get: function () {\n            return this.i.e7;\n        },\n        set: function (v) {\n            this.i.e7 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"calloutsVisible\", {\n        /**\n         * Gets or sets if callouts should be displayed.\n        */\n        get: function () {\n            return this.i.cd;\n        },\n        set: function (v) {\n            this.i.cd = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"calloutStyleUpdatingEventEnabled\", {\n        /**\n         * Gets or sets if event annotations should be displayed.\n        */\n        get: function () {\n            return this.i.cc;\n        },\n        set: function (v) {\n            this.i.cc = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"calloutsXMemberPath\", {\n        /**\n         * Gets or sets the member path of the X data for the callouts.\n        */\n        get: function () {\n            return this.i.gb;\n        },\n        set: function (v) {\n            this.i.gb = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"calloutsYMemberPath\", {\n        /**\n         * Gets or sets the member path of the Y data for the callouts.\n        */\n        get: function () {\n            return this.i.gd;\n        },\n        set: function (v) {\n            this.i.gd = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"calloutsLabelMemberPath\", {\n        /**\n         * Gets or sets the member path of the label data for the callouts.\n        */\n        get: function () {\n            return this.i.f7;\n        },\n        set: function (v) {\n            this.i.f7 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"calloutsContentMemberPath\", {\n        /**\n         * Gets or sets the member path of the content data for the callouts.\n        */\n        get: function () {\n            return this.i.f4;\n        },\n        set: function (v) {\n            this.i.f4 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrDomainChart.prototype.findByName = function (name) {\n        if (this.legend && this.legend.name && this.legend.name == name) {\n            return this.legend;\n        }\n        if (this.markerTypes != null && this.markerTypes.findByName && this.markerTypes.findByName(name)) {\n            return this.markerTypes.findByName(name);\n        }\n        return null;\n    };\n    Object.defineProperty(IgrDomainChart.prototype, \"hasUserValues\", {\n        get: function () {\n            return this._hasUserValues;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrDomainChart.prototype.__m = function (propertyName) {\n        if (!this._inStyling) {\n            this._hasUserValues.add(propertyName);\n        }\n    };\n    IgrDomainChart.prototype._styling = function (container, component, parent) {\n        if (this._inStyling) {\n            return;\n        }\n        this._inStyling = true;\n        this._stylingContainer = container;\n        this._stylingParent = component;\n        var genericPrefix = \"\";\n        var typeName = this.i.$type.name;\n        if (typeName.indexOf(\"Xam\") === 0) {\n            typeName = typeName.substring(3);\n        }\n        genericPrefix = toSpinal(\"DomainChart\");\n        var additionalPrefixes = [];\n        var prefix = toSpinal(typeName);\n        additionalPrefixes.push(prefix + \"-\");\n        var b = this.i.$type.baseType;\n        while (b && b.name != \"Object\" &&\n            b.name != \"Base\" &&\n            b.name != \"Control\" &&\n            b.Name != \"DependencyObject\" &&\n            b.Name != \"FrameworkElement\") {\n            typeName = b.name;\n            if (typeName.indexOf(\"Xam\") === 0) {\n                typeName = typeName.substring(3);\n            }\n            var basePrefix = toSpinal(typeName);\n            additionalPrefixes.push(basePrefix + \"-\");\n            b = b.baseType;\n        }\n        if (parent) {\n            var parentTypeName = parent.i.$type.name;\n            if (parentTypeName.indexOf(\"Xam\") === 0) {\n                parentTypeName = parentTypeName.substring(3);\n            }\n            var parentPrefix = toSpinal(parentTypeName);\n            additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n            additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n        }\n        initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n        if (this._otherStyling) {\n            this._otherStyling(container, component, parent);\n        }\n        this._inStyling = false;\n    };\n    /**\n * Provides a container for this control\n\r\n*\n* `provideContainer` method provide container for the control.\n*\n* ```ts\n*     this.chart.provideContainer(\"Container\");\n* ```\n*/\n    IgrDomainChart.prototype.provideContainer = function (container) {\n        this.i.provideContainer(container);\n    };\n    /**\n     * Destroy this control\n    \r\n    *\n    * Use the `destroy` property to destroy the chart.\n    *\n    * ```ts\n    * this.chart.destroy();\n    * ```\n    */\n    IgrDomainChart.prototype.destroy = function () {\n        this.i.destroy();\n    };\n    /**\n     * Called when the control has been resized.\n    \r\n    *\n    * `notifyResized` method Called when the control has been resized.\n    *\n    * ```ts\n    * this.chart.notifyResized();\n    * ```\n    */\n    IgrDomainChart.prototype.notifyResized = function () {\n        this.i.notifyResized();\n    };\n    IgrDomainChart.prototype.notifyVisualPropertiesChanged = function () {\n        this.i.jx();\n    };\n    /**\n     * Forces any pending refresh to the chart to be finished.\n    \r\n    *\n    * Method `flush` used to Forces any pending deferred work to render on the chart before continuing.\n    *\n    * ```ts\n    * this.chart.flush();\n    * ```\n    */\n    IgrDomainChart.prototype.flush = function () {\n        this.i.i5();\n    };\n    /**\n     * Hides the active main tooltip, if displayed.\n    \r\n    *\n    * Use the `hideToolTip` method to hide the active tooltip.\n    *\n    * ```ts\n    * this.chart.hideToolTip();\n    * ```\n    */\n    IgrDomainChart.prototype.hideToolTip = function () {\n        this.i.jc();\n    };\n    /**\n     * Replays transition-in animation on all series in the chart.\n    \r\n    */\n    IgrDomainChart.prototype.replayTransitionIn = function () {\n        this.i.km();\n    };\n    IgrDomainChart.prototype.notifySetItem = function (source_, index, oldItem, newItem) {\n        this.i.jw(source_, index, oldItem, newItem);\n    };\n    /**\n     * Used to manually notify the chart that the data source has reset or cleared its items.\n    \r\n    *\n    * Use `notifyClearItems` method to notifies the chart that the items have been cleared from an associated data source.\n    *\n    * ```ts\n    * this.chart.notifyClearItems(this.data);\n    * ```\n    */\n    IgrDomainChart.prototype.notifyClearItems = function (source_) {\n        this.i.js(source_);\n    };\n    IgrDomainChart.prototype.notifyInsertItem = function (source_, index, newItem) {\n        this.i.jt(source_, index, newItem);\n    };\n    IgrDomainChart.prototype.notifyRemoveItem = function (source_, index, oldItem) {\n        this.i.ju(source_, index, oldItem);\n    };\n    Object.defineProperty(IgrDomainChart.prototype, \"seriesAdded\", {\n        /**\n         * Event raised when a series is initialized and added to this chart.\n        *\n        * `SeriesAdded` event raised when a series is initialized and added to this chart.\n        *\n        * ````ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tmarkerTypes={this.state.markersTypes}\n        * \tdataSource={this.categoryData}\n        * \tseriesAdded={this.CategoryChart_SeriesAdded}/>\n        * ``\n        *\n        * ```ts\n        * CategoryChart_SeriesAdded(sender:any ,aregs:ChartSeriesEventArgs)\n        * {\n        * }\n        * ````\n        */\n        get: function () {\n            return this._seriesAdded;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._seriesAdded_wrapped !== null) {\n                this.i.seriesAdded = delegateRemove(this.i.seriesAdded, this._seriesAdded_wrapped);\n                this._seriesAdded_wrapped = null;\n                this._seriesAdded = null;\n            }\n            this._seriesAdded = ev;\n            this._seriesAdded_wrapped = function (o, e) {\n                var outerArgs = new IgrChartSeriesEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSeriesAdded) {\n                    _this.beforeSeriesAdded(_this, outerArgs);\n                }\n                if (_this._seriesAdded) {\n                    _this._seriesAdded(_this, outerArgs);\n                }\n            };\n            this.i.seriesAdded = delegateCombine(this.i.seriesAdded, this._seriesAdded_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"seriesRemoved\", {\n        /**\n         * Event raised when a series is removed from this chart.\n        *\n        * `SeriesRemoved` event raised when a series is removed from this chart.\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tmarkerTypes={this.state.markersTypes}\n        * \tdataSource={this.categoryData}\n        * \tseriesRemoved={this.CategoryChart_seriesRemoved}/>\n        * ```\n        *\n        * ```ts\n        *  CategoryChart_seriesRemoved(sender: any , aregs: ChartSeriesEventArgs)\n        *   {\n        *\n        *   }\n        * ```\n        */\n        get: function () {\n            return this._seriesRemoved;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._seriesRemoved_wrapped !== null) {\n                this.i.seriesRemoved = delegateRemove(this.i.seriesRemoved, this._seriesRemoved_wrapped);\n                this._seriesRemoved_wrapped = null;\n                this._seriesRemoved = null;\n            }\n            this._seriesRemoved = ev;\n            this._seriesRemoved_wrapped = function (o, e) {\n                var outerArgs = new IgrChartSeriesEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSeriesRemoved) {\n                    _this.beforeSeriesRemoved(_this, outerArgs);\n                }\n                if (_this._seriesRemoved) {\n                    _this._seriesRemoved(_this, outerArgs);\n                }\n            };\n            this.i.seriesRemoved = delegateCombine(this.i.seriesRemoved, this._seriesRemoved_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"seriesPointerEnter\", {\n        /**\n         * Occurs when the pointer enters a Series.\n        *\n        * `SeriesPointerEnter` event raised when the pointer enters a Series.\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tmarkerTypes={this.state.markersTypes}\n        * \tdataSource={this.categoryData}\n        * \tseriesPointerEnter={this.CategoryChart_seriesPointerDown}/>\n        * ```\n        *\n        * ```ts\n        * CategoryChart_seriesPointerEnter(sender: any , aregs: ChartSeriesEventArgs)\n        *   {\n        *\n        *   }\n        * ```\n        */\n        get: function () {\n            return this._seriesPointerEnter;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._seriesPointerEnter_wrapped !== null) {\n                this.i.seriesPointerEnter = delegateRemove(this.i.seriesPointerEnter, this._seriesPointerEnter_wrapped);\n                this._seriesPointerEnter_wrapped = null;\n                this._seriesPointerEnter = null;\n            }\n            this._seriesPointerEnter = ev;\n            this._seriesPointerEnter_wrapped = function (o, e) {\n                var outerArgs = new IgrDomainChartSeriesPointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSeriesPointerEnter) {\n                    _this.beforeSeriesPointerEnter(_this, outerArgs);\n                }\n                if (_this._seriesPointerEnter) {\n                    _this._seriesPointerEnter(_this, outerArgs);\n                }\n            };\n            this.i.seriesPointerEnter = delegateCombine(this.i.seriesPointerEnter, this._seriesPointerEnter_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"seriesPointerLeave\", {\n        /**\n         * Occurs when the pointer leaves a Series.\n        *\n        * `SeriesPointerLeave` event raised when the pointer leaves a Series.\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tmarkerTypes={this.state.markersTypes}\n        * \tdataSource={this.categoryData}\n        * \tseriesPointerLeave={this.CategoryChart_seriesPointerLeave}/>\n        * ```\n        *\n        * ```ts\n        * CategoryChart_seriesPointerLeave(sender: any , aregs: ChartSeriesEventArgs)\n        *   {\n        *\n        *   }\n        * ```\n        */\n        get: function () {\n            return this._seriesPointerLeave;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._seriesPointerLeave_wrapped !== null) {\n                this.i.seriesPointerLeave = delegateRemove(this.i.seriesPointerLeave, this._seriesPointerLeave_wrapped);\n                this._seriesPointerLeave_wrapped = null;\n                this._seriesPointerLeave = null;\n            }\n            this._seriesPointerLeave = ev;\n            this._seriesPointerLeave_wrapped = function (o, e) {\n                var outerArgs = new IgrDomainChartSeriesPointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSeriesPointerLeave) {\n                    _this.beforeSeriesPointerLeave(_this, outerArgs);\n                }\n                if (_this._seriesPointerLeave) {\n                    _this._seriesPointerLeave(_this, outerArgs);\n                }\n            };\n            this.i.seriesPointerLeave = delegateCombine(this.i.seriesPointerLeave, this._seriesPointerLeave_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"seriesPointerMove\", {\n        /**\n         * Occurs when the pointer moves over a Series.\n        *\n        * `SeriesPointerMove` event raised when the pointer moves over a Series.\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tmarkerTypes={this.state.markersTypes}\n        * \tdataSource={this.categoryData}\n        * \tseriesPointerMove={this.CategoryChart_seriesPointerMove}/>\n        * ```\n        *\n        * ```ts\n        *  CategoryChart_seriesPointerMove(sender: any , aregs: ChartSeriesEventArgs)\n        *   {\n        *\n        *   }\n        * ```\n        */\n        get: function () {\n            return this._seriesPointerMove;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._seriesPointerMove_wrapped !== null) {\n                this.i.seriesPointerMove = delegateRemove(this.i.seriesPointerMove, this._seriesPointerMove_wrapped);\n                this._seriesPointerMove_wrapped = null;\n                this._seriesPointerMove = null;\n            }\n            this._seriesPointerMove = ev;\n            this._seriesPointerMove_wrapped = function (o, e) {\n                var outerArgs = new IgrDomainChartSeriesPointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSeriesPointerMove) {\n                    _this.beforeSeriesPointerMove(_this, outerArgs);\n                }\n                if (_this._seriesPointerMove) {\n                    _this._seriesPointerMove(_this, outerArgs);\n                }\n            };\n            this.i.seriesPointerMove = delegateCombine(this.i.seriesPointerMove, this._seriesPointerMove_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"seriesPointerDown\", {\n        /**\n         * Occurs when the pointer is pressed down over a Series.\n        *\n        * `SeriesPointerDown` event raised when the pointer is pressed down over a Series\n        *\n        * ````ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tmarkerTypes={this.state.markersTypes}\n        * \tdataSource={this.categoryData}\n        * \tseriesPointerDown={this.CategoryChart_seriesPointerDown}/>\n        * ``\n        *\n        * ```ts\n        * CategoryChart_seriesPointerDown(sender: any , aregs: ChartSeriesEventArgs)\n        *   {\n        *\n        *   }\n        * ````\n        */\n        get: function () {\n            return this._seriesPointerDown;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._seriesPointerDown_wrapped !== null) {\n                this.i.seriesPointerDown = delegateRemove(this.i.seriesPointerDown, this._seriesPointerDown_wrapped);\n                this._seriesPointerDown_wrapped = null;\n                this._seriesPointerDown = null;\n            }\n            this._seriesPointerDown = ev;\n            this._seriesPointerDown_wrapped = function (o, e) {\n                var outerArgs = new IgrDomainChartSeriesPointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSeriesPointerDown) {\n                    _this.beforeSeriesPointerDown(_this, outerArgs);\n                }\n                if (_this._seriesPointerDown) {\n                    _this._seriesPointerDown(_this, outerArgs);\n                }\n            };\n            this.i.seriesPointerDown = delegateCombine(this.i.seriesPointerDown, this._seriesPointerDown_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"seriesPointerUp\", {\n        /**\n         * Occurs when the pointer is released over a Series.\n        *\n        * `SeriesPointerUp` event raised when the pointer is released over a Series.\n        *\n        * ```ts\n        *  <IgrCategoryChart\n        * \twidth=\"100%\"\n        * \theight=\"100%\"\n        * \tchartType=\"Line\"\n        * \tmarkerTypes={this.state.markersTypes}\n        * \tdataSource={this.categoryData}\n        * \tseriesPointerUp={this.CategoryChart_seriesPointerUp}/>\n        * ```\n        *\n        * ```ts\n        *  CategoryChart_seriesPointerUp(sender: any , aregs: ChartSeriesEventArgs)\n        *   {\n        *\n        *   }\n        * ```\n        */\n        get: function () {\n            return this._seriesPointerUp;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._seriesPointerUp_wrapped !== null) {\n                this.i.seriesPointerUp = delegateRemove(this.i.seriesPointerUp, this._seriesPointerUp_wrapped);\n                this._seriesPointerUp_wrapped = null;\n                this._seriesPointerUp = null;\n            }\n            this._seriesPointerUp = ev;\n            this._seriesPointerUp_wrapped = function (o, e) {\n                var outerArgs = new IgrDomainChartSeriesPointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSeriesPointerUp) {\n                    _this.beforeSeriesPointerUp(_this, outerArgs);\n                }\n                if (_this._seriesPointerUp) {\n                    _this._seriesPointerUp(_this, outerArgs);\n                }\n            };\n            this.i.seriesPointerUp = delegateCombine(this.i.seriesPointerUp, this._seriesPointerUp_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDomainChart.prototype, \"calloutStyleUpdating\", {\n        /**\n         * Occurs when the style of a callout is updated.\n        */\n        get: function () {\n            return this._calloutStyleUpdating;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._calloutStyleUpdating_wrapped !== null) {\n                this.i.calloutStyleUpdating = delegateRemove(this.i.calloutStyleUpdating, this._calloutStyleUpdating_wrapped);\n                this._calloutStyleUpdating_wrapped = null;\n                this._calloutStyleUpdating = null;\n            }\n            this._calloutStyleUpdating = ev;\n            this._calloutStyleUpdating_wrapped = function (o, e) {\n                var outerArgs = new IgrCalloutStyleUpdatingEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeCalloutStyleUpdating) {\n                    _this.beforeCalloutStyleUpdating(_this, outerArgs);\n                }\n                if (_this._calloutStyleUpdating) {\n                    _this._calloutStyleUpdating(_this, outerArgs);\n                }\n            };\n            this.i.calloutStyleUpdating = delegateCombine(this.i.calloutStyleUpdating, this._calloutStyleUpdating_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IgrDomainChart;\n}(React.Component));\nexport { IgrDomainChart };\n//# sourceMappingURL=igr-domain-chart.js.map\n"]},"metadata":{},"sourceType":"module"}