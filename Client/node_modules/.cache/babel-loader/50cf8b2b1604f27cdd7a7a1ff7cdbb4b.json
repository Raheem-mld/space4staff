{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrHorizontalStackedSeriesBase } from \"./igr-horizontal-stacked-series-base\";\nimport { StackedColumnSeries } from \"./StackedColumnSeries\";\n/**\n * Represents a IgxDataChartComponent stacked column series.\n*/\n\nvar IgrStackedColumnSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrStackedColumnSeries, _super);\n\n  function IgrStackedColumnSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrStackedColumnSeries.prototype.createImplementation = function () {\n    return new StackedColumnSeries();\n  };\n\n  Object.defineProperty(IgrStackedColumnSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedColumnSeries.prototype, \"isColumn\", {\n    /**\n     * Gets whether the current series shows a column shape.\n    */\n    get: function () {\n      return this.i.db;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedColumnSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n    /**\n     * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n    */\n    get: function () {\n      return this.i.dw;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedColumnSeries.prototype, \"radiusX\", {\n    /**\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n    */\n    get: function () {\n      return this.i.t1;\n    },\n    set: function (v) {\n      this.i.t1 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedColumnSeries.prototype, \"radiusY\", {\n    /**\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n    */\n    get: function () {\n      return this.i.t2;\n    },\n    set: function (v) {\n      this.i.t2 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  */\n\n  IgrStackedColumnSeries.prototype.getItemSpan = function () {\n    var iv = this.i.f1();\n    return iv;\n  };\n\n  return IgrStackedColumnSeries;\n}(IgrHorizontalStackedSeriesBase);\n\nexport { IgrStackedColumnSeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-stacked-column-series.ts"],"names":[],"mappings":";AAKA,SAAS,8BAAT,QAAqF,sCAArF;AAKA,SAAS,mBAAT,QAAoC,uBAApC;AAGA;;AAEE;;AACF,IAAA,sBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmH,EAAA,SAAA,CAAA,sBAAA,EAAA,MAAA,CAAA;;AAalH,WAAA,sBAAA,CAAY,KAAZ,EAAoB;WACgB,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AAG/C;;AAdQ,EAAA,sBAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,mBAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,sBAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;AAE+B;SACH,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;qBAAA;;AAAA,GAAZ;AAW5B,EAAA,MAAA,CAAA,cAAA,CAAI,sBAAA,CAAA,SAAJ,EAAI,UAAJ,EAAY;AAHZ;;AAEE;SACF,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFW;qBAAA;;AAAA,GAAZ;AAMA,EAAA,MAAA,CAAA,cAAA,CAAI,sBAAA,CAAA,SAAJ,EAAI,8BAAJ,EAAgC;AAHhC;;AAEE;SACF,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAF+B;qBAAA;;AAAA,GAAhC;AAMA,EAAA,MAAA,CAAA,cAAA,CAAI,sBAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;AAEE;SACF,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;SAGX,UAAY,CAAZ,EAAqB;AACpB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALU;qBAAA;;AAAA,GAAX;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,sBAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;AAEE;SACF,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;SAGX,UAAY,CAAZ,EAAqB;AACpB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALU;qBAAA;;AAAA,GAAX;AAMA;;;AAGE;;AACK,EAAA,sBAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACC,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,EAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIR,SAAA,sBAAA;AAAC,CAxDD,CAAmH,8BAAnH,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrHorizontalStackedSeriesBase } from \"./igr-horizontal-stacked-series-base\";\nimport { StackedColumnSeries } from \"./StackedColumnSeries\";\n/**\n * Represents a IgxDataChartComponent stacked column series.\n*/\nvar IgrStackedColumnSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrStackedColumnSeries, _super);\n    function IgrStackedColumnSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrStackedColumnSeries.prototype.createImplementation = function () {\n        return new StackedColumnSeries();\n    };\n    Object.defineProperty(IgrStackedColumnSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedColumnSeries.prototype, \"isColumn\", {\n        /**\n         * Gets whether the current series shows a column shape.\n        */\n        get: function () {\n            return this.i.db;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedColumnSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n        /**\n         * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n        */\n        get: function () {\n            return this.i.dw;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedColumnSeries.prototype, \"radiusX\", {\n        /**\n         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n        */\n        get: function () {\n            return this.i.t1;\n        },\n        set: function (v) {\n            this.i.t1 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedColumnSeries.prototype, \"radiusY\", {\n        /**\n         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n        */\n        get: function () {\n            return this.i.t2;\n        },\n        set: function (v) {\n            this.i.t2 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    */\n    IgrStackedColumnSeries.prototype.getItemSpan = function () {\n        var iv = this.i.f1();\n        return (iv);\n    };\n    return IgrStackedColumnSeries;\n}(IgrHorizontalStackedSeriesBase));\nexport { IgrStackedColumnSeries };\n//# sourceMappingURL=igr-stacked-column-series.js.map\n"]},"metadata":{},"sourceType":"module"}