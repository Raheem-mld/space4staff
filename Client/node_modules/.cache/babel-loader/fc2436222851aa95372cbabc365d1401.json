{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { OperatorSelectorValueChangedEventArgsDescriptionMetadata } from \"./OperatorSelectorValueChangedEventArgsDescriptionMetadata\";\nimport { OperatorSelectorOpeningEventArgsDescriptionMetadata } from \"./OperatorSelectorOpeningEventArgsDescriptionMetadata\";\nimport { OperatorSelectorClosingEventArgsDescriptionMetadata } from \"./OperatorSelectorClosingEventArgsDescriptionMetadata\";\nimport { DataGridComparisonOperatorSelectorDescription } from \"./DataGridComparisonOperatorSelectorDescription\";\n/**\n * @hidden\n */\n\nvar DataGridComparisonOperatorSelectorDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(DataGridComparisonOperatorSelectorDescriptionMetadata, _super);\n\n  function DataGridComparisonOperatorSelectorDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DataGridComparisonOperatorSelectorDescriptionMetadata.b = function (a) {\n    if (DataGridComparisonOperatorSelectorDescriptionMetadata.a == null) {\n      DataGridComparisonOperatorSelectorDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      DataGridComparisonOperatorSelectorDescriptionMetadata.c(DataGridComparisonOperatorSelectorDescriptionMetadata.a);\n    }\n\n    if (a.g(DataGridComparisonOperatorSelectorDescriptionMetadata.a)) {\n      return;\n    }\n\n    a.s(DataGridComparisonOperatorSelectorDescriptionMetadata.a);\n    OperatorSelectorValueChangedEventArgsDescriptionMetadata.d(a);\n    OperatorSelectorOpeningEventArgsDescriptionMetadata.d(a);\n    OperatorSelectorClosingEventArgsDescriptionMetadata.d(a);\n  };\n\n  DataGridComparisonOperatorSelectorDescriptionMetadata.c = function (a) {\n    a.item(\"Value\", \"ExportedType:string:ColumnComparisonConditionOperatorType\");\n    a.item(\"Value@names\", \"Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom\");\n    a.item(\"CustomFilterID\", \"Number:int\");\n    a.item(\"DataType\", \"ExportedType:string:DataSourceSchemaPropertyType\");\n    a.item(\"DataType@names\", \"StringValue;IntValue;BooleanValue;LongValue;ShortValue;DoubleValue;DecimalValue;SingleValue;DateTimeValue;DateTimeOffsetValue;ByteValue;ObjectValue\");\n    a.item(\"MaxHeight\", \"Number:int\");\n    a.item(\"ValueChangedRef\", \"EventRef::valueChanged\");\n    a.item(\"OpeningRef\", \"EventRef::opening\");\n    a.item(\"ClosingRef\", \"EventRef::closing\");\n  };\n\n  DataGridComparisonOperatorSelectorDescriptionMetadata.d = function (a) {\n    DataGridComparisonOperatorSelectorDescriptionMetadata.b(a);\n    a.u(\"DataGridComparisonOperatorSelector\", function () {\n      return new DataGridComparisonOperatorSelectorDescription();\n    });\n    a.t(\"DataGridComparisonOperatorSelector\", DataGridComparisonOperatorSelectorDescriptionMetadata.a);\n  };\n\n  DataGridComparisonOperatorSelectorDescriptionMetadata.$t = markType(DataGridComparisonOperatorSelectorDescriptionMetadata, 'DataGridComparisonOperatorSelectorDescriptionMetadata');\n  DataGridComparisonOperatorSelectorDescriptionMetadata.a = null;\n  return DataGridComparisonOperatorSelectorDescriptionMetadata;\n}(Base);\n\nexport { DataGridComparisonOperatorSelectorDescriptionMetadata };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/DataGridComparisonOperatorSelectorDescriptionMetadata.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,IAAT,EAAe,YAAf,EAAmC,QAAnC,QAAmD,QAAnD;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,wDAAT,QAAyE,4DAAzE;AACA,SAAS,mDAAT,QAAoE,uDAApE;AACA,SAAS,mDAAT,QAAoE,uDAApE;AACA,SAAS,6CAAT,QAA8D,iDAA9D;AAEA;;AAEG;;AACH,IAAA,qDAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2E,EAAA,SAAA,CAAA,qDAAA,EAAA,MAAA,CAAA;;AAA3E,WAAA,qDAAA,GAAA;;AAgCC;;AA7Be,EAAA,qDAAA,CAAA,CAAA,GAAf,UAAiB,CAAjB,EAA0C;AACzC,QAAI,qDAAqD,CAAC,CAAtD,IAA2D,IAA/D,EAAqE;AACpE,MAAA,qDAAqD,CAAC,CAAtD,GAA0D,IAAI,YAAJ,CAAiC,YAAjC,EAA+C,YAA/C,EAA6D,CAA7D,CAA1D;AACA,MAAA,qDAAqD,CAAC,CAAtD,CAAwD,qDAAqD,CAAC,CAA9G;AACA;;AACD,QAAI,CAAC,CAAC,CAAF,CAAI,qDAAqD,CAAC,CAA1D,CAAJ,EAAkE;AACjE;AACA;;AACD,IAAA,CAAC,CAAC,CAAF,CAAI,qDAAqD,CAAC,CAA1D;AACA,IAAA,wDAAwD,CAAC,CAAzD,CAA2D,CAA3D;AACA,IAAA,mDAAmD,CAAC,CAApD,CAAsD,CAAtD;AACA,IAAA,mDAAmD,CAAC,CAApD,CAAsD,CAAtD;AACA,GAZc;;AAaR,EAAA,qDAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAwC;AACvC,IAAA,CAAC,CAAC,IAAF,CAAO,OAAP,EAAgB,2DAAhB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,aAAP,EAAsB,yaAAtB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,YAAzB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,UAAP,EAAmB,kDAAnB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,qJAAzB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB,YAApB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,iBAAP,EAA0B,wBAA1B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,YAAP,EAAqB,mBAArB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,YAAP,EAAqB,mBAArB;AACA,GAVM;;AAWA,EAAA,qDAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAkC;AACjC,IAAA,qDAAqD,CAAC,CAAtD,CAAwD,CAAxD;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,oCAAJ,EAA0C,YAAA;AAAM,aAAA,IAAA,6CAAA,EAAA;AAAmD,KAAnG;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,oCAAJ,EAA0C,qDAAqD,CAAC,CAAhG;AACA,GAJM;;AA1BA,EAAA,qDAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,qDAAD,EAAwD,uDAAxD,CAAnB;AACQ,EAAA,qDAAA,CAAA,CAAA,GAAkC,IAAlC;AA8BhB,SAAA,qDAAA;AAAC,CAhCD,CAA2E,IAA3E,CAAA;;SAAa,qD","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { OperatorSelectorValueChangedEventArgsDescriptionMetadata } from \"./OperatorSelectorValueChangedEventArgsDescriptionMetadata\";\nimport { OperatorSelectorOpeningEventArgsDescriptionMetadata } from \"./OperatorSelectorOpeningEventArgsDescriptionMetadata\";\nimport { OperatorSelectorClosingEventArgsDescriptionMetadata } from \"./OperatorSelectorClosingEventArgsDescriptionMetadata\";\nimport { DataGridComparisonOperatorSelectorDescription } from \"./DataGridComparisonOperatorSelectorDescription\";\n/**\n * @hidden\n */\nvar DataGridComparisonOperatorSelectorDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(DataGridComparisonOperatorSelectorDescriptionMetadata, _super);\n    function DataGridComparisonOperatorSelectorDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DataGridComparisonOperatorSelectorDescriptionMetadata.b = function (a) {\n        if (DataGridComparisonOperatorSelectorDescriptionMetadata.a == null) {\n            DataGridComparisonOperatorSelectorDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            DataGridComparisonOperatorSelectorDescriptionMetadata.c(DataGridComparisonOperatorSelectorDescriptionMetadata.a);\n        }\n        if (a.g(DataGridComparisonOperatorSelectorDescriptionMetadata.a)) {\n            return;\n        }\n        a.s(DataGridComparisonOperatorSelectorDescriptionMetadata.a);\n        OperatorSelectorValueChangedEventArgsDescriptionMetadata.d(a);\n        OperatorSelectorOpeningEventArgsDescriptionMetadata.d(a);\n        OperatorSelectorClosingEventArgsDescriptionMetadata.d(a);\n    };\n    DataGridComparisonOperatorSelectorDescriptionMetadata.c = function (a) {\n        a.item(\"Value\", \"ExportedType:string:ColumnComparisonConditionOperatorType\");\n        a.item(\"Value@names\", \"Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom\");\n        a.item(\"CustomFilterID\", \"Number:int\");\n        a.item(\"DataType\", \"ExportedType:string:DataSourceSchemaPropertyType\");\n        a.item(\"DataType@names\", \"StringValue;IntValue;BooleanValue;LongValue;ShortValue;DoubleValue;DecimalValue;SingleValue;DateTimeValue;DateTimeOffsetValue;ByteValue;ObjectValue\");\n        a.item(\"MaxHeight\", \"Number:int\");\n        a.item(\"ValueChangedRef\", \"EventRef::valueChanged\");\n        a.item(\"OpeningRef\", \"EventRef::opening\");\n        a.item(\"ClosingRef\", \"EventRef::closing\");\n    };\n    DataGridComparisonOperatorSelectorDescriptionMetadata.d = function (a) {\n        DataGridComparisonOperatorSelectorDescriptionMetadata.b(a);\n        a.u(\"DataGridComparisonOperatorSelector\", function () { return new DataGridComparisonOperatorSelectorDescription(); });\n        a.t(\"DataGridComparisonOperatorSelector\", DataGridComparisonOperatorSelectorDescriptionMetadata.a);\n    };\n    DataGridComparisonOperatorSelectorDescriptionMetadata.$t = markType(DataGridComparisonOperatorSelectorDescriptionMetadata, 'DataGridComparisonOperatorSelectorDescriptionMetadata');\n    DataGridComparisonOperatorSelectorDescriptionMetadata.a = null;\n    return DataGridComparisonOperatorSelectorDescriptionMetadata;\n}(Base));\nexport { DataGridComparisonOperatorSelectorDescriptionMetadata };\n//# sourceMappingURL=DataGridComparisonOperatorSelectorDescriptionMetadata.js.map\n"]},"metadata":{},"sourceType":"module"}