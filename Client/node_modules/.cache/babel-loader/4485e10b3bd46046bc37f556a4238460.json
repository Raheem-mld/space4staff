{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IndicatorDisplayType_$type } from \"./IndicatorDisplayType\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { IgrFinancialSeries } from \"./igr-financial-series\";\nimport { ensureEnum, brushToString, stringToBrush, toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents the base functionality for a IgxDataChartComponent financial indicator series.\n*\n* The `IgrFinancialIndicator` class represents the base functionality for a IgxDataChartComponent financial indicator series.\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*\n*     <IgrOrdinalTimeXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*    <IgrMassIndexIndicator\n*     name=\"series3\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     displayType=\"Line\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*/\n\nvar IgrFinancialIndicator =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrFinancialIndicator, _super);\n\n  function IgrFinancialIndicator(props) {\n    return _super.call(this, props) || this;\n  }\n\n  Object.defineProperty(IgrFinancialIndicator.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialIndicator.prototype, \"isFinancialIndicator\", {\n    /**\n     * Gets whether the series is financial indicator\n    */\n    get: function () {\n      return this.i.dj;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialIndicator.prototype, \"displayType\", {\n    /**\n     * Gets or sets the display for the current FinancialIndicator object.\n    *\n    * The `displayType` property is used to display the current FinancialIndicator object.\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrOrdinalTimeXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *    <IgrMassIndexIndicator\n    *     name=\"series3\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Line\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \tdisplayType=\"Column\"  />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.displayType= IndicatorDisplayType.Column;\n    * ```\n    */\n    get: function () {\n      return this.i.s3;\n    },\n    set: function (v) {\n      this.i.s3 = ensureEnum(IndicatorDisplayType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialIndicator.prototype, \"defaultDisplayType\", {\n    /**\n     * Gets default display type for the current Financial Indicator\n    */\n    get: function () {\n      return this.i.s2;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialIndicator.prototype, \"ignoreFirst\", {\n    /**\n     * Gets or sets the number of values to hide at the beginning of the indicator.\n    *\n    * Use the `ignoreFirst` propert to hide the number of values at the beginning of the indicator.\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrOrdinalTimeXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *    <IgrMassIndexIndicator\n    *     name=\"series3\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Line\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \tignoreFirst=\"2\"/>\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.ignoreFirst  = 2;\n    * ```\n    */\n    get: function () {\n      return this.i.s9;\n    },\n    set: function (v) {\n      this.i.s9 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialIndicator.prototype, \"trendLineType\", {\n    /**\n     * Gets or sets the trend type for the current indicator series.\n    *\n    * Use `trendLineType` property to get the trend type for the current indicator series.\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrOrdinalTimeXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *    <IgrMassIndexIndicator\n    *     name=\"series3\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Line\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \ttrendLineType=\"CubicFit\"/>\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.trendLineType= TrendLineType.CubicFit;\n    * ```\n    */\n    get: function () {\n      return this.i.trendLineType;\n    },\n    set: function (v) {\n      this.i.trendLineType = ensureEnum(TrendLineType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialIndicator.prototype, \"trendLineBrush\", {\n    /**\n     * Gets or sets the brush to use to draw the trend line.\n    *\n    * Use the `trendLineBrush` propert to draw the trend line.\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrOrdinalTimeXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *    <IgrMassIndexIndicator\n    *     name=\"series3\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Line\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \ttrendLineBrush=\"Red\"/>\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.trendLineBrush);\n    },\n    set: function (v) {\n      this.i.trendLineBrush = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialIndicator.prototype, \"actualTrendLineBrush\", {\n    /**\n     * Gets the effective TrendLineBrush for this indicator.\n    *\n    * Use the `actualTrendLineBrush` property to Gets the effective TrendLineBrush for the FinancialIndicator.\n    */\n    get: function () {\n      return brushToString(this.i.tr);\n    },\n    set: function (v) {\n      this.i.tr = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialIndicator.prototype, \"trendLineThickness\", {\n    /**\n     * Gets or sets the thickness of the current indicator object's trend line.\n    *\n    * Use `trendLineThickness` property for the thickness of the current indicator object's trend line.\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrOrdinalTimeXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *    <IgrMassIndexIndicator\n    *     name=\"series3\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Line\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \ttrendLineThickness=\"2\"/>\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    *  series.trendLineThickness=2 ;\n    * ```\n    */\n    get: function () {\n      return this.i.trendLineThickness;\n    },\n    set: function (v) {\n      this.i.trendLineThickness = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialIndicator.prototype, \"trendLinePeriod\", {\n    /**\n     * Gets or sets the trend line period for the current series.\n     * The typical, and initial, value for trend line period is 7.\n    *\n    * Use `trendLinePeriod` property for the trend line period of the current series.\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrOrdinalTimeXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *    <IgrMassIndexIndicator\n    *     name=\"series3\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Line\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \ttrendLinePeriod=\"30\"/>\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.trendLinePeriod  =30;\n    * ```\n    */\n    get: function () {\n      return this.i.trendLinePeriod;\n    },\n    set: function (v) {\n      this.i.trendLinePeriod = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinate for which to get a value bounding box for\n  *\n  * The `getSeriesValueBoundingBox` method returns the best available value bounding box within the series that has the best value match for the world position provided.\n  */\n\n  IgrFinancialIndicator.prototype.getSeriesValueBoundingBox = function (world) {\n    var iv = this.i.pb(toPoint(world));\n    return fromRect(iv);\n  };\n\n  IgrFinancialIndicator.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.f8(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrFinancialIndicator.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.g6(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  IgrFinancialIndicator.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.g4(toPoint(world), skipUnknowns);\n    return iv;\n  };\n  /**\n   * Scrolls the series to display the item for the specified data item.\n   * The series is scrolled by the minimum amount required to place the specified data item within\n   * the central 80% of the visible axis.\n  \r\n  * @param item  * The data item (item) to scroll to.\n  *\n  * The `scrollIntoView` method scrolls the series to display the item for the specified data item.\n  */\n\n\n  IgrFinancialIndicator.prototype.scrollIntoView = function (item) {\n    var iv = this.i.eh(item);\n    return iv;\n  };\n\n  return IgrFinancialIndicator;\n}(IgrFinancialSeries);\n\nexport { IgrFinancialIndicator };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-financial-indicator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { IndicatorDisplayType_$type } from \"./IndicatorDisplayType\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { IgrFinancialSeries } from \"./igr-financial-series\";\nimport { ensureEnum, brushToString, stringToBrush, toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents the base functionality for a IgxDataChartComponent financial indicator series.\n*\n* The `IgrFinancialIndicator` class represents the base functionality for a IgxDataChartComponent financial indicator series.\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*\n*     <IgrOrdinalTimeXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*    <IgrMassIndexIndicator\n*     name=\"series3\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     displayType=\"Line\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*/\nvar IgrFinancialIndicator = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrFinancialIndicator, _super);\n    function IgrFinancialIndicator(props) {\n        return _super.call(this, props) || this;\n    }\n    Object.defineProperty(IgrFinancialIndicator.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialIndicator.prototype, \"isFinancialIndicator\", {\n        /**\n         * Gets whether the series is financial indicator\n        */\n        get: function () {\n            return this.i.dj;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialIndicator.prototype, \"displayType\", {\n        /**\n         * Gets or sets the display for the current FinancialIndicator object.\n        *\n        * The `displayType` property is used to display the current FinancialIndicator object.\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrOrdinalTimeXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *    <IgrMassIndexIndicator\n        *     name=\"series3\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Line\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \tdisplayType=\"Column\"  />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.displayType= IndicatorDisplayType.Column;\n        * ```\n        */\n        get: function () {\n            return this.i.s3;\n        },\n        set: function (v) {\n            this.i.s3 = ensureEnum(IndicatorDisplayType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialIndicator.prototype, \"defaultDisplayType\", {\n        /**\n         * Gets default display type for the current Financial Indicator\n        */\n        get: function () {\n            return this.i.s2;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialIndicator.prototype, \"ignoreFirst\", {\n        /**\n         * Gets or sets the number of values to hide at the beginning of the indicator.\n        *\n        * Use the `ignoreFirst` propert to hide the number of values at the beginning of the indicator.\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrOrdinalTimeXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *    <IgrMassIndexIndicator\n        *     name=\"series3\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Line\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \tignoreFirst=\"2\"/>\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.ignoreFirst  = 2;\n        * ```\n        */\n        get: function () {\n            return this.i.s9;\n        },\n        set: function (v) {\n            this.i.s9 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialIndicator.prototype, \"trendLineType\", {\n        /**\n         * Gets or sets the trend type for the current indicator series.\n        *\n        * Use `trendLineType` property to get the trend type for the current indicator series.\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrOrdinalTimeXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *    <IgrMassIndexIndicator\n        *     name=\"series3\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Line\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \ttrendLineType=\"CubicFit\"/>\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.trendLineType= TrendLineType.CubicFit;\n        * ```\n        */\n        get: function () {\n            return this.i.trendLineType;\n        },\n        set: function (v) {\n            this.i.trendLineType = ensureEnum(TrendLineType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialIndicator.prototype, \"trendLineBrush\", {\n        /**\n         * Gets or sets the brush to use to draw the trend line.\n        *\n        * Use the `trendLineBrush` propert to draw the trend line.\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrOrdinalTimeXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *    <IgrMassIndexIndicator\n        *     name=\"series3\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Line\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \ttrendLineBrush=\"Red\"/>\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.trendLineBrush);\n        },\n        set: function (v) {\n            this.i.trendLineBrush = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialIndicator.prototype, \"actualTrendLineBrush\", {\n        /**\n         * Gets the effective TrendLineBrush for this indicator.\n        *\n        * Use the `actualTrendLineBrush` property to Gets the effective TrendLineBrush for the FinancialIndicator.\n        */\n        get: function () {\n            return brushToString(this.i.tr);\n        },\n        set: function (v) {\n            this.i.tr = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialIndicator.prototype, \"trendLineThickness\", {\n        /**\n         * Gets or sets the thickness of the current indicator object's trend line.\n        *\n        * Use `trendLineThickness` property for the thickness of the current indicator object's trend line.\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrOrdinalTimeXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *    <IgrMassIndexIndicator\n        *     name=\"series3\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Line\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \ttrendLineThickness=\"2\"/>\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        *  series.trendLineThickness=2 ;\n        * ```\n        */\n        get: function () {\n            return this.i.trendLineThickness;\n        },\n        set: function (v) {\n            this.i.trendLineThickness = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialIndicator.prototype, \"trendLinePeriod\", {\n        /**\n         * Gets or sets the trend line period for the current series.\n         * The typical, and initial, value for trend line period is 7.\n        *\n        * Use `trendLinePeriod` property for the trend line period of the current series.\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrOrdinalTimeXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *    <IgrMassIndexIndicator\n        *     name=\"series3\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Line\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \ttrendLinePeriod=\"30\"/>\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.trendLinePeriod  =30;\n        * ```\n        */\n        get: function () {\n            return this.i.trendLinePeriod;\n        },\n        set: function (v) {\n            this.i.trendLinePeriod = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinate for which to get a value bounding box for\n    *\n    * The `getSeriesValueBoundingBox` method returns the best available value bounding box within the series that has the best value match for the world position provided.\n    */\n    IgrFinancialIndicator.prototype.getSeriesValueBoundingBox = function (world) {\n        var iv = this.i.pb(toPoint(world));\n        return fromRect(iv);\n    };\n    IgrFinancialIndicator.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.f8(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrFinancialIndicator.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.g6(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    IgrFinancialIndicator.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.g4(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    /**\n     * Scrolls the series to display the item for the specified data item.\n     * The series is scrolled by the minimum amount required to place the specified data item within\n     * the central 80% of the visible axis.\n    \r\n    * @param item  * The data item (item) to scroll to.\n    *\n    * The `scrollIntoView` method scrolls the series to display the item for the specified data item.\n    */\n    IgrFinancialIndicator.prototype.scrollIntoView = function (item) {\n        var iv = this.i.eh(item);\n        return (iv);\n    };\n    return IgrFinancialIndicator;\n}(IgrFinancialSeries));\nexport { IgrFinancialIndicator };\n//# sourceMappingURL=igr-financial-indicator.js.map\n"]},"metadata":{},"sourceType":"module"}