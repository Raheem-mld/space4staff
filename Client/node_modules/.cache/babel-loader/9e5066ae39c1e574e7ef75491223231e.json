{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { ColumnWidthDescription } from \"./ColumnWidthDescription\";\n/**\n * @hidden\n */\n\nvar ColumnWidthDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(ColumnWidthDescriptionMetadata, _super);\n\n  function ColumnWidthDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ColumnWidthDescriptionMetadata.b = function (a) {\n    if (ColumnWidthDescriptionMetadata.a == null) {\n      ColumnWidthDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      ColumnWidthDescriptionMetadata.c(ColumnWidthDescriptionMetadata.a);\n    }\n\n    if (a.g(ColumnWidthDescriptionMetadata.a)) {\n      return;\n    }\n\n    a.s(ColumnWidthDescriptionMetadata.a);\n  };\n\n  ColumnWidthDescriptionMetadata.c = function (a) {\n    a.item(\"IsStarSized\", \"Boolean\");\n    a.item(\"Value\", \"Number:double\");\n    a.item(\"MinimumWidth\", \"Number:double\");\n  };\n\n  ColumnWidthDescriptionMetadata.d = function (a) {\n    ColumnWidthDescriptionMetadata.b(a);\n    a.u(\"ColumnWidth\", function () {\n      return new ColumnWidthDescription();\n    });\n    a.t(\"ColumnWidth\", ColumnWidthDescriptionMetadata.a);\n  };\n\n  ColumnWidthDescriptionMetadata.$t = markType(ColumnWidthDescriptionMetadata, 'ColumnWidthDescriptionMetadata');\n  ColumnWidthDescriptionMetadata.a = null;\n  return ColumnWidthDescriptionMetadata;\n}(Base);\n\nexport { ColumnWidthDescriptionMetadata };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/ColumnWidthDescriptionMetadata.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,IAAT,EAAe,YAAf,EAAmC,QAAnC,QAAmD,QAAnD;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,sBAAT,QAAuC,0BAAvC;AAEA;;AAEG;;AACH,IAAA,8BAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoD,EAAA,SAAA,CAAA,8BAAA,EAAA,MAAA,CAAA;;AAApD,WAAA,8BAAA,GAAA;;AAuBC;;AApBe,EAAA,8BAAA,CAAA,CAAA,GAAf,UAAiB,CAAjB,EAA0C;AACzC,QAAI,8BAA8B,CAAC,CAA/B,IAAoC,IAAxC,EAA8C;AAC7C,MAAA,8BAA8B,CAAC,CAA/B,GAAmC,IAAI,YAAJ,CAAiC,YAAjC,EAA+C,YAA/C,EAA6D,CAA7D,CAAnC;AACA,MAAA,8BAA8B,CAAC,CAA/B,CAAiC,8BAA8B,CAAC,CAAhE;AACA;;AACD,QAAI,CAAC,CAAC,CAAF,CAAI,8BAA8B,CAAC,CAAnC,CAAJ,EAA2C;AAC1C;AACA;;AACD,IAAA,CAAC,CAAC,CAAF,CAAI,8BAA8B,CAAC,CAAnC;AACA,GATc;;AAUR,EAAA,8BAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAwC;AACvC,IAAA,CAAC,CAAC,IAAF,CAAO,aAAP,EAAsB,SAAtB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,OAAP,EAAgB,eAAhB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,cAAP,EAAuB,eAAvB;AACA,GAJM;;AAKA,EAAA,8BAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAkC;AACjC,IAAA,8BAA8B,CAAC,CAA/B,CAAiC,CAAjC;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,aAAJ,EAAmB,YAAA;AAAM,aAAA,IAAA,sBAAA,EAAA;AAA4B,KAArD;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,aAAJ,EAAmB,8BAA8B,CAAC,CAAlD;AACA,GAJM;;AAjBA,EAAA,8BAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,8BAAD,EAAiC,gCAAjC,CAAnB;AACQ,EAAA,8BAAA,CAAA,CAAA,GAAkC,IAAlC;AAqBhB,SAAA,8BAAA;AAAC,CAvBD,CAAoD,IAApD,CAAA;;SAAa,8B","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { ColumnWidthDescription } from \"./ColumnWidthDescription\";\n/**\n * @hidden\n */\nvar ColumnWidthDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(ColumnWidthDescriptionMetadata, _super);\n    function ColumnWidthDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ColumnWidthDescriptionMetadata.b = function (a) {\n        if (ColumnWidthDescriptionMetadata.a == null) {\n            ColumnWidthDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            ColumnWidthDescriptionMetadata.c(ColumnWidthDescriptionMetadata.a);\n        }\n        if (a.g(ColumnWidthDescriptionMetadata.a)) {\n            return;\n        }\n        a.s(ColumnWidthDescriptionMetadata.a);\n    };\n    ColumnWidthDescriptionMetadata.c = function (a) {\n        a.item(\"IsStarSized\", \"Boolean\");\n        a.item(\"Value\", \"Number:double\");\n        a.item(\"MinimumWidth\", \"Number:double\");\n    };\n    ColumnWidthDescriptionMetadata.d = function (a) {\n        ColumnWidthDescriptionMetadata.b(a);\n        a.u(\"ColumnWidth\", function () { return new ColumnWidthDescription(); });\n        a.t(\"ColumnWidth\", ColumnWidthDescriptionMetadata.a);\n    };\n    ColumnWidthDescriptionMetadata.$t = markType(ColumnWidthDescriptionMetadata, 'ColumnWidthDescriptionMetadata');\n    ColumnWidthDescriptionMetadata.a = null;\n    return ColumnWidthDescriptionMetadata;\n}(Base));\nexport { ColumnWidthDescriptionMetadata };\n//# sourceMappingURL=ColumnWidthDescriptionMetadata.js.map\n"]},"metadata":{},"sourceType":"module"}