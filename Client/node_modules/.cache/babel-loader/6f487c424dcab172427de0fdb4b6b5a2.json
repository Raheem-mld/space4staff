{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { RippleDescription } from \"./RippleDescription\";\n/**\n * @hidden\n */\n\nvar RippleDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(RippleDescriptionMetadata, _super);\n\n  function RippleDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  RippleDescriptionMetadata.b = function (a) {\n    if (RippleDescriptionMetadata.a == null) {\n      RippleDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      RippleDescriptionMetadata.c(RippleDescriptionMetadata.a);\n    }\n\n    if (a.g(RippleDescriptionMetadata.a)) {\n      return;\n    }\n\n    a.s(RippleDescriptionMetadata.a);\n  };\n\n  RippleDescriptionMetadata.c = function (a) {\n    a.item(\"__qualifiedNameTS\", \"String:XRipple\");\n    a.item(\"EventSourceRef\", \"(w:EventSource,wf:EventSource)DataRef\");\n    a.item(\"RippleColor\", \"Brush\");\n    a.item(\"HoverColor\", \"Brush\");\n    a.item(\"ActualHoverColor\", \"Brush\");\n    a.item(\"ActualRippleColor\", \"Brush\");\n    a.item(\"RippleDuration\", \"Number:double\");\n    a.item(\"IsDisabled\", \"Boolean\");\n    a.item(\"IsCentered\", \"Boolean\");\n    a.item(\"IsHoverEnabled\", \"Boolean\");\n  };\n\n  RippleDescriptionMetadata.d = function (a) {\n    RippleDescriptionMetadata.b(a);\n    a.u(\"Ripple\", function () {\n      return new RippleDescription();\n    });\n    a.t(\"Ripple\", RippleDescriptionMetadata.a);\n  };\n\n  RippleDescriptionMetadata.$t = markType(RippleDescriptionMetadata, 'RippleDescriptionMetadata');\n  RippleDescriptionMetadata.a = null;\n  return RippleDescriptionMetadata;\n}(Base);\n\nexport { RippleDescriptionMetadata };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/RippleDescriptionMetadata.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,IAAT,EAAe,YAAf,EAAmC,QAAnC,QAAmD,QAAnD;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,iBAAT,QAAkC,qBAAlC;AAEA;;AAEG;;AACH,IAAA,yBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+C,EAAA,SAAA,CAAA,yBAAA,EAAA,MAAA,CAAA;;AAA/C,WAAA,yBAAA,GAAA;;AA8BC;;AA3Be,EAAA,yBAAA,CAAA,CAAA,GAAf,UAAiB,CAAjB,EAA0C;AACzC,QAAI,yBAAyB,CAAC,CAA1B,IAA+B,IAAnC,EAAyC;AACxC,MAAA,yBAAyB,CAAC,CAA1B,GAA8B,IAAI,YAAJ,CAAiC,YAAjC,EAA+C,YAA/C,EAA6D,CAA7D,CAA9B;AACA,MAAA,yBAAyB,CAAC,CAA1B,CAA4B,yBAAyB,CAAC,CAAtD;AACA;;AACD,QAAI,CAAC,CAAC,CAAF,CAAI,yBAAyB,CAAC,CAA9B,CAAJ,EAAsC;AACrC;AACA;;AACD,IAAA,CAAC,CAAC,CAAF,CAAI,yBAAyB,CAAC,CAA9B;AACA,GATc;;AAUR,EAAA,yBAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAwC;AACvC,IAAA,CAAC,CAAC,IAAF,CAAO,mBAAP,EAA4B,gBAA5B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,uCAAzB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,aAAP,EAAsB,OAAtB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,YAAP,EAAqB,OAArB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,kBAAP,EAA2B,OAA3B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,mBAAP,EAA4B,OAA5B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,eAAzB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,YAAP,EAAqB,SAArB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,YAAP,EAAqB,SAArB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,SAAzB;AACA,GAXM;;AAYA,EAAA,yBAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAkC;AACjC,IAAA,yBAAyB,CAAC,CAA1B,CAA4B,CAA5B;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,QAAJ,EAAc,YAAA;AAAM,aAAA,IAAA,iBAAA,EAAA;AAAuB,KAA3C;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,QAAJ,EAAc,yBAAyB,CAAC,CAAxC;AACA,GAJM;;AAxBA,EAAA,yBAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,yBAAD,EAA4B,2BAA5B,CAAnB;AACQ,EAAA,yBAAA,CAAA,CAAA,GAAkC,IAAlC;AA4BhB,SAAA,yBAAA;AAAC,CA9BD,CAA+C,IAA/C,CAAA;;SAAa,yB","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { RippleDescription } from \"./RippleDescription\";\n/**\n * @hidden\n */\nvar RippleDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(RippleDescriptionMetadata, _super);\n    function RippleDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    RippleDescriptionMetadata.b = function (a) {\n        if (RippleDescriptionMetadata.a == null) {\n            RippleDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            RippleDescriptionMetadata.c(RippleDescriptionMetadata.a);\n        }\n        if (a.g(RippleDescriptionMetadata.a)) {\n            return;\n        }\n        a.s(RippleDescriptionMetadata.a);\n    };\n    RippleDescriptionMetadata.c = function (a) {\n        a.item(\"__qualifiedNameTS\", \"String:XRipple\");\n        a.item(\"EventSourceRef\", \"(w:EventSource,wf:EventSource)DataRef\");\n        a.item(\"RippleColor\", \"Brush\");\n        a.item(\"HoverColor\", \"Brush\");\n        a.item(\"ActualHoverColor\", \"Brush\");\n        a.item(\"ActualRippleColor\", \"Brush\");\n        a.item(\"RippleDuration\", \"Number:double\");\n        a.item(\"IsDisabled\", \"Boolean\");\n        a.item(\"IsCentered\", \"Boolean\");\n        a.item(\"IsHoverEnabled\", \"Boolean\");\n    };\n    RippleDescriptionMetadata.d = function (a) {\n        RippleDescriptionMetadata.b(a);\n        a.u(\"Ripple\", function () { return new RippleDescription(); });\n        a.t(\"Ripple\", RippleDescriptionMetadata.a);\n    };\n    RippleDescriptionMetadata.$t = markType(RippleDescriptionMetadata, 'RippleDescriptionMetadata');\n    RippleDescriptionMetadata.a = null;\n    return RippleDescriptionMetadata;\n}(Base));\nexport { RippleDescriptionMetadata };\n//# sourceMappingURL=RippleDescriptionMetadata.js.map\n"]},"metadata":{},"sourceType":"module"}