{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport * as React from 'react';\nimport { ReactRenderer } from \"igniteui-react-core\";\nimport { TypeRegistrar, delegateRemove, delegateCombine } from \"igniteui-react-core\";\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { XamFunnelChart } from './XamFunnelChart';\nimport { isValidProp, toSpinal, getModifiedProps, initializePropertiesFromCss, NamePatcher, fromBrushCollection, toBrushCollection, ensureBool, stringToBrush, brushToString, ensureEnum } from \"igniteui-react-core\";\nimport { Visibility_$type } from \"igniteui-react-core\";\nimport { OuterLabelAlignment_$type } from './OuterLabelAlignment';\nimport { FunnelSliceDisplay_$type } from './FunnelSliceDisplay';\nimport { IgrFunnelSliceClickedEventArgs } from './igr-funnel-slice-clicked-event-args';\nimport { IgrFunnelSliceEventArgs } from './igr-funnel-slice-event-args';\nimport { Style } from \"igniteui-react-core\";\n\nvar IgrFunnelChart =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrFunnelChart, _super);\n\n  function IgrFunnelChart(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._dataSource = null;\n    _this.__p = null;\n    _this._hasUserValues = new Set();\n    _this._stylingContainer = null;\n    _this._stylingParent = null;\n    _this._inStyling = false;\n    _this._sliceClicked = null;\n    _this._sliceClicked_wrapped = null;\n    _this._sliceEnter = null;\n    _this._sliceEnter_wrapped = null;\n    _this._sliceLeave = null;\n    _this._sliceLeave_wrapped = null;\n    _this._sliceHover = null;\n    _this._sliceHover_wrapped = null;\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._getMainRef = _this._getMainRef.bind(_this);\n    var container;\n\n    if (document) {\n      container = document.createElement(\"div\");\n      container.style.display = \"block\";\n      container.style.width = \"100%\";\n      container.style.height = \"100%\";\n    }\n\n    _this._implementation = _this.createImplementation();\n    var root;\n    root = container;\n    var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n    _this.container = ren.getWrapper(container);\n    _this._wrapper = ren;\n    var chart = _this.i;\n    _this._chart = chart;\n    chart.provideContainer(ren);\n\n    _this.bindData();\n\n    if (props) {\n      _this.initializeProperties();\n    }\n\n    chart.notifyResized();\n    ren.addSizeWatcher(function () {\n      _this._chart.notifyResized();\n    });\n    return _this;\n  }\n\n  Object.defineProperty(IgrFunnelChart.prototype, \"height\", {\n    get: function () {\n      return this._height;\n    },\n    set: function (value) {\n      this._height = value;\n\n      if (this._elRef) {\n        this._elRef.style.height = value;\n\n        this._chart.notifyResized();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"width\", {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n\n      if (this._elRef) {\n        this._elRef.style.width = value;\n\n        this._chart.notifyResized();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrFunnelChart.prototype._getMainRef = function (ref) {\n    this._elRef = ref;\n  };\n\n  IgrFunnelChart.prototype.render = function () {\n    var div = React.createElement(\"div\", {\n      className: \"ig-funnel-chart igr-funnel-chart\",\n      ref: this._getMainRef\n    });\n    return div;\n  };\n\n  IgrFunnelChart.prototype.destroy = function () {\n    this._chart.destroy();\n\n    this._wrapper.destroy();\n  };\n\n  IgrFunnelChart.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var e_1, _a;\n\n    var mod = getModifiedProps(this.props, nextProps);\n\n    try {\n      for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = mod[p];\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return true;\n  };\n\n  IgrFunnelChart.prototype.initializeProperties = function () {\n    var e_2, _a;\n\n    try {\n      for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = this.props[p];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n\n  IgrFunnelChart.prototype.componentDidMount = function () {\n    this._elRef.style.width = this._width ? this._width : \"\";\n    this._elRef.style.height = this._height ? this._height : \"\";\n\n    this._elRef.appendChild(this.container.getNativeElement());\n\n    this._styling(this._elRef, this);\n\n    this._chart.notifyResized();\n  };\n\n  IgrFunnelChart.prototype.componentWillUnmount = function () {\n    this.destroy();\n  };\n\n  IgrFunnelChart.prototype.createImplementation = function () {\n    return new XamFunnelChart();\n  };\n\n  IgrFunnelChart.prototype.createSeriesComponent = function (type) {\n    if (TypeRegistrar.isRegistered(type)) {\n      var s = TypeRegistrar.create(type);\n      s.owner = this;\n\n      s._provideRenderer(this._wrapper);\n\n      return s;\n    } else {\n      //we shouldn't get here, hopefully.\n      throw Error(\"series type not loaded: \" + type);\n    }\n  };\n\n  Object.defineProperty(IgrFunnelChart.prototype, \"dataSource\", {\n    get: function () {\n      return this._dataSource;\n    },\n    set: function (value) {\n      this._dataSource = value;\n      this.bindData();\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrFunnelChart.prototype.bindData = function () {\n    if (this._chart != null && this._chart !== undefined) {\n      this._chart.itemsSource = this._dataSource;\n    }\n  };\n\n  Object.defineProperty(IgrFunnelChart.prototype, \"legend\", {\n    /**\n     * Gets or sets the legend used for the current chart.\n    */\n    get: function () {\n      if (this.i.legend != null) return this.i.legend.externalObject;\n    },\n    set: function (v) {\n      if (v != undefined && v != null) this.i.legend = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"i\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this._implementation;\n    }\n    /**\n                               * @hidden\n                               */\n    ,\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrFunnelChart._createFromInternal = function (internal) {\n    if (!internal) {\n      return null;\n    }\n\n    if (!internal.$type) {\n      return null;\n    }\n\n    var name = internal.$type.name;\n    var externalName = \"Igr\" + name;\n\n    if (!TypeRegistrar.isRegistered(externalName)) {\n      return null;\n    }\n\n    return TypeRegistrar.create(externalName);\n  };\n\n  Object.defineProperty(IgrFunnelChart.prototype, \"valueMemberPath\", {\n    /**\n    * Gets or sets the value member path for the funnel chart.\n    */\n    get: function () {\n      return this.i.c9;\n    },\n    set: function (v) {\n      this.i.c9 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"brushes\", {\n    /**\n     * Gets or sets the palette of brushes to use for coloring the slices.\n    */\n    get: function () {\n      return fromBrushCollection(this.i.ah);\n    },\n    set: function (v) {\n      this.i.ah = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"outlines\", {\n    /**\n     * Gets or sets the palette of brushes to use for outlines on the slices.\n    */\n    get: function () {\n      return fromBrushCollection(this.i.ai);\n    },\n    set: function (v) {\n      this.i.ai = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"bottomEdgeWidth\", {\n    /**\n     * Gets or sets the percentage (from near 0 to 1) of space the bottom edge of the funnel should take.\n    */\n    get: function () {\n      return this.i.bo;\n    },\n    set: function (v) {\n      this.i.bo = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"innerLabelMemberPath\", {\n    /**\n     * Gets or sets the InnerLabel mapping property for the current series object.\n    */\n    get: function () {\n      return this.i.cd;\n    },\n    set: function (v) {\n      this.i.cd = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"outerLabelMemberPath\", {\n    /**\n     * Gets or sets the OuterLabel mapping property for the current series object.\n    */\n    get: function () {\n      return this.i.co;\n    },\n    set: function (v) {\n      this.i.co = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"innerLabelVisibility\", {\n    /**\n     * Gets or sets whether the inner labels are visible.\n    */\n    get: function () {\n      return this.i.ey;\n    },\n    set: function (v) {\n      this.i.ey = ensureEnum(Visibility_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"outerLabelVisibility\", {\n    /**\n     * Gets or sets whether the outer labels are visible.\n    */\n    get: function () {\n      return this.i.ez;\n    },\n    set: function (v) {\n      this.i.ez = ensureEnum(Visibility_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"outerLabelAlignment\", {\n    /**\n     * Gets or sets which side of the chart the outer labels should appear.\n    */\n    get: function () {\n      return this.i.au;\n    },\n    set: function (v) {\n      this.i.au = ensureEnum(OuterLabelAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"funnelSliceDisplay\", {\n    /**\n     * Gets or sets how the heights of the funnel slices should be configured.\n    */\n    get: function () {\n      return this.i.ak;\n    },\n    set: function (v) {\n      this.i.ak = ensureEnum(FunnelSliceDisplay_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"formatInnerLabel\", {\n    /**\n     * Gets or sets the formatter function for inner labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.\n    */\n    get: function () {\n      return this.i.bw;\n    },\n    set: function (v) {\n      this.i.bw = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"formatOuterLabel\", {\n    /**\n     * Gets or sets the formatter function for outer labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.\n    */\n    get: function () {\n      return this.i.bx;\n    },\n    set: function (v) {\n      this.i.bx = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"transitionDuration\", {\n    /**\n     * Gets or sets how long the animations should take to run.\n    */\n    get: function () {\n      return this.i.by;\n    },\n    set: function (v) {\n      this.i.by = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"isInverted\", {\n    /**\n     * Gets or sets if the funnel should be rendered inverted.\n    */\n    get: function () {\n      return this.i.bd;\n    },\n    set: function (v) {\n      this.i.bd = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"useBezierCurve\", {\n    /**\n     * Gets or sets whether to use a Bezier curve to define the funnel.\n    */\n    get: function () {\n      return this.i.be;\n    },\n    set: function (v) {\n      this.i.be = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"allowSliceSelection\", {\n    /**\n     * Gets or sets whether to allow slices to be selected.\n    */\n    get: function () {\n      return this.i.a8;\n    },\n    set: function (v) {\n      this.i.a8 = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"useUnselectedStyle\", {\n    /**\n     * Gets or sets whether to use the unselected style on unselected slices.\n    */\n    get: function () {\n      return this.i.bg;\n    },\n    set: function (v) {\n      this.i.bg = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"selectedSliceFill\", {\n    /**\n     * Gets or sets the fill brush.\n    */\n    get: function () {\n      return this.i.ew ? this.i.ew.fill : null;\n    },\n    set: function (v) {\n      this.ensureSelectedSliceStyle();\n      this.i.ew.fill = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"selectedSliceStroke\", {\n    /**\n     * Gets or sets the stroke brush.\n    */\n    get: function () {\n      return this.i.ew ? this.i.ew.stroke : null;\n    },\n    set: function (v) {\n      this.ensureSelectedSliceStyle();\n      this.i.ew.stroke = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"selectedSliceStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness.\n    */\n    get: function () {\n      return this.i.ew ? this.i.ew.strokeThickness : NaN;\n    },\n    set: function (v) {\n      this.ensureSelectedSliceStyle();\n      this.i.ew.strokeThickness = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"selectedSliceOpacity\", {\n    /**\n     * Gets or sets the opacity.\n    */\n    get: function () {\n      return this.i.ew ? this.i.ew.opacity : NaN;\n    },\n    set: function (v) {\n      this.ensureSelectedSliceStyle();\n      this.i.ew.opacity = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrFunnelChart.prototype.ensureSelectedSliceStyle = function () {\n    if (this.i.ew) {\n      return;\n    }\n\n    this.i.ew = new Style();\n  };\n\n  Object.defineProperty(IgrFunnelChart.prototype, \"unselectedSliceFill\", {\n    /**\n     * Gets or sets the fill brush.\n    */\n    get: function () {\n      return this.i.ex ? this.i.ex.fill : null;\n    },\n    set: function (v) {\n      this.ensureUnselectedSliceStyle();\n      this.i.ex.fill = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"unselectedSliceStroke\", {\n    /**\n     * Gets or sets the stroke brush.\n    */\n    get: function () {\n      return this.i.ex ? this.i.ex.stroke : null;\n    },\n    set: function (v) {\n      this.ensureUnselectedSliceStyle();\n      this.i.ex.stroke = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"unselectedSliceStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness.\n    */\n    get: function () {\n      return this.i.ex ? this.i.ex.strokeThickness : NaN;\n    },\n    set: function (v) {\n      this.ensureUnselectedSliceStyle();\n      this.i.ex.strokeThickness = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"unselectedSliceOpacity\", {\n    /**\n     * Gets or sets the opacity.\n    */\n    get: function () {\n      return this.i.ex ? this.i.ex.opacity : NaN;\n    },\n    set: function (v) {\n      this.ensureUnselectedSliceStyle();\n      this.i.ex.opacity = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrFunnelChart.prototype.ensureUnselectedSliceStyle = function () {\n    if (this.i.ex) {\n      return;\n    }\n\n    this.i.ex = new Style();\n  };\n\n  Object.defineProperty(IgrFunnelChart.prototype, \"legendItemBadgeTemplate\", {\n    /**\n     * Gets or sets the LegendItemBadgeTemplate to use for the legend items.\n    */\n    get: function () {\n      return this.i.legendItemBadgeTemplate;\n    },\n    set: function (v) {\n      this.i.legendItemBadgeTemplate = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"useOuterLabelsForLegend\", {\n    /**\n     * Gets or sets whether to use the outer labels to identify the legend items.\n    */\n    get: function () {\n      return this.i.bf;\n    },\n    set: function (v) {\n      this.i.bf = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"textStyle\", {\n    /**\n     * Gets or sets the text style for inner labels\n    */\n    get: function () {\n      return this.i.cz;\n    },\n    set: function (v) {\n      this.i.cz = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"outerLabelTextStyle\", {\n    /**\n     * Gets or sets the text style for outer labels\n    */\n    get: function () {\n      return this.i.cr;\n    },\n    set: function (v) {\n      this.i.cr = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"outlineThickness\", {\n    /**\n     * Gets or sets the thickness of outline around slices.\n    */\n    get: function () {\n      return this.i.bq;\n    },\n    set: function (v) {\n      this.i.bq = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"pixelScalingRatio\", {\n    /**\n     * Gets or sets the scaling value used to affect the pixel density of the control.\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n     * to appear blurry.\n    */\n    get: function () {\n      return this.i.bs;\n    },\n    set: function (v) {\n      this.i.bs = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"outerLabelTextColor\", {\n    /**\n     * Gets or sets the brush used for the outer labels.\n    */\n    get: function () {\n      return brushToString(this.i.es);\n    },\n    set: function (v) {\n      this.i.es = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"textColor\", {\n    /**\n     * Gets or sets the brush used for the inner labels.\n    */\n    get: function () {\n      return brushToString(this.i.et);\n    },\n    set: function (v) {\n      this.i.et = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrFunnelChart.prototype.findByName = function (name) {\n    return null;\n  };\n\n  Object.defineProperty(IgrFunnelChart.prototype, \"hasUserValues\", {\n    get: function () {\n      return this._hasUserValues;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrFunnelChart.prototype.__m = function (propertyName) {\n    if (!this._inStyling) {\n      this._hasUserValues.add(propertyName);\n    }\n  };\n\n  IgrFunnelChart.prototype._styling = function (container, component, parent) {\n    if (this._inStyling) {\n      return;\n    }\n\n    this._inStyling = true;\n    this._stylingContainer = container;\n    this._stylingParent = component;\n    var genericPrefix = \"\";\n    var typeName = this.i.$type.name;\n\n    if (typeName.indexOf(\"Xam\") === 0) {\n      typeName = typeName.substring(3);\n    }\n\n    genericPrefix = toSpinal(\"FunnelChart\");\n    var additionalPrefixes = [];\n    var prefix = toSpinal(typeName);\n    additionalPrefixes.push(prefix + \"-\");\n    var b = this.i.$type.baseType;\n\n    while (b && b.name != \"Object\" && b.name != \"Base\" && b.name != \"Control\" && b.Name != \"DependencyObject\" && b.Name != \"FrameworkElement\") {\n      typeName = b.name;\n\n      if (typeName.indexOf(\"Xam\") === 0) {\n        typeName = typeName.substring(3);\n      }\n\n      var basePrefix = toSpinal(typeName);\n      additionalPrefixes.push(basePrefix + \"-\");\n      b = b.baseType;\n    }\n\n    if (parent) {\n      var parentTypeName = parent.i.$type.name;\n\n      if (parentTypeName.indexOf(\"Xam\") === 0) {\n        parentTypeName = parentTypeName.substring(3);\n      }\n\n      var parentPrefix = toSpinal(parentTypeName);\n      additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n      additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n    }\n\n    initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n\n    if (this._otherStyling) {\n      this._otherStyling(container, component, parent);\n    }\n\n    this._inStyling = false;\n  };\n  /**\n  * Provides container for funnel chart\n  */\n\n\n  IgrFunnelChart.prototype.provideContainer = function (container) {\n    this.i.provideContainer(container);\n  };\n  /**\n   * Notifies the controller and view about a size change.\n  \r\n  */\n\n\n  IgrFunnelChart.prototype.notifyResized = function () {\n    this.i.notifyResized();\n  };\n\n  IgrFunnelChart.prototype.notifySetItem = function (source_, index, oldItem, newItem) {\n    this.i.dl(source_, index, oldItem, newItem);\n  };\n  /**\n   * Manually notifies the chart's data source that the data it has bound to has been cleared and needs to be re-examined.\n   * This should not be called if the data that the chart is bound to is already observable.\n  \r\n  */\n\n\n  IgrFunnelChart.prototype.notifyClearItems = function (source_) {\n    this.i.dg(source_);\n  };\n\n  IgrFunnelChart.prototype.notifyInsertItem = function (source_, index, newItem) {\n    this.i.di(source_, index, newItem);\n  };\n\n  IgrFunnelChart.prototype.notifyRemoveItem = function (source_, index, oldItem) {\n    this.i.dj(source_, index, oldItem);\n  };\n  /**\n   * Toggle selection of item at index.\n  \r\n  */\n\n\n  IgrFunnelChart.prototype.toggleSelection = function (index) {\n    this.i.dy(index);\n  };\n  /**\n   * Exports and serializes the chart visuals.\n  \r\n  */\n\n\n  IgrFunnelChart.prototype.exportSerializedVisualData = function () {\n    var iv = this.i.b7();\n    return iv;\n  };\n\n  Object.defineProperty(IgrFunnelChart.prototype, \"sliceClicked\", {\n    /**\n     * Event which is raised when a slice is clicked.\n     * Function takes first argument null and second argument ui.\n     * Use ui.owner to obtain reference to igFunnelChart.\n     * Use ui.index to obtain index of clicked slice.\n     * Use ui.item to obtain reference to clicked slice item.\n     * Use ui.selected to check if slice became selected.\n    */\n    get: function () {\n      return this._sliceClicked;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._sliceClicked_wrapped !== null) {\n        this.i.sliceClicked = delegateRemove(this.i.sliceClicked, this._sliceClicked_wrapped);\n        this._sliceClicked_wrapped = null;\n        this._sliceClicked = null;\n      }\n\n      this._sliceClicked = ev;\n\n      this._sliceClicked_wrapped = function (o, e) {\n        var outerArgs = new IgrFunnelSliceClickedEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSliceClicked) {\n          _this.beforeSliceClicked(_this, outerArgs);\n        }\n\n        if (_this._sliceClicked) {\n          _this._sliceClicked(_this, outerArgs);\n        }\n      };\n\n      this.i.sliceClicked = delegateCombine(this.i.sliceClicked, this._sliceClicked_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"sliceEnter\", {\n    /**\n     * Raised when a funnel slice is entered.\n    */\n    get: function () {\n      return this._sliceEnter;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._sliceEnter_wrapped !== null) {\n        this.i.sliceEnter = delegateRemove(this.i.sliceEnter, this._sliceEnter_wrapped);\n        this._sliceEnter_wrapped = null;\n        this._sliceEnter = null;\n      }\n\n      this._sliceEnter = ev;\n\n      this._sliceEnter_wrapped = function (o, e) {\n        var outerArgs = new IgrFunnelSliceEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSliceEnter) {\n          _this.beforeSliceEnter(_this, outerArgs);\n        }\n\n        if (_this._sliceEnter) {\n          _this._sliceEnter(_this, outerArgs);\n        }\n      };\n\n      this.i.sliceEnter = delegateCombine(this.i.sliceEnter, this._sliceEnter_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"sliceLeave\", {\n    /**\n     * Raised when a funnel slice is left.\n    */\n    get: function () {\n      return this._sliceLeave;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._sliceLeave_wrapped !== null) {\n        this.i.sliceLeave = delegateRemove(this.i.sliceLeave, this._sliceLeave_wrapped);\n        this._sliceLeave_wrapped = null;\n        this._sliceLeave = null;\n      }\n\n      this._sliceLeave = ev;\n\n      this._sliceLeave_wrapped = function (o, e) {\n        var outerArgs = new IgrFunnelSliceEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSliceLeave) {\n          _this.beforeSliceLeave(_this, outerArgs);\n        }\n\n        if (_this._sliceLeave) {\n          _this._sliceLeave(_this, outerArgs);\n        }\n      };\n\n      this.i.sliceLeave = delegateCombine(this.i.sliceLeave, this._sliceLeave_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFunnelChart.prototype, \"sliceHover\", {\n    /**\n     * Raised when a funnel slice is hovered.\n    */\n    get: function () {\n      return this._sliceHover;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._sliceHover_wrapped !== null) {\n        this.i.sliceHover = delegateRemove(this.i.sliceHover, this._sliceHover_wrapped);\n        this._sliceHover_wrapped = null;\n        this._sliceHover = null;\n      }\n\n      this._sliceHover = ev;\n\n      this._sliceHover_wrapped = function (o, e) {\n        var outerArgs = new IgrFunnelSliceEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSliceHover) {\n          _this.beforeSliceHover(_this, outerArgs);\n        }\n\n        if (_this._sliceHover) {\n          _this._sliceHover(_this, outerArgs);\n        }\n      };\n\n      this.i.sliceHover = delegateCombine(this.i.sliceHover, this._sliceHover_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return IgrFunnelChart;\n}(React.Component);\n\nexport { IgrFunnelChart };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-funnel-chart.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends, __values } from \"tslib\";\nimport * as React from 'react';\nimport { ReactRenderer } from \"igniteui-react-core\";\nimport { TypeRegistrar, delegateRemove, delegateCombine } from \"igniteui-react-core\";\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { XamFunnelChart } from './XamFunnelChart';\nimport { isValidProp, toSpinal, getModifiedProps, initializePropertiesFromCss, NamePatcher, fromBrushCollection, toBrushCollection, ensureBool, stringToBrush, brushToString, ensureEnum } from \"igniteui-react-core\";\nimport { Visibility_$type } from \"igniteui-react-core\";\nimport { OuterLabelAlignment_$type } from './OuterLabelAlignment';\nimport { FunnelSliceDisplay_$type } from './FunnelSliceDisplay';\nimport { IgrFunnelSliceClickedEventArgs } from './igr-funnel-slice-clicked-event-args';\nimport { IgrFunnelSliceEventArgs } from './igr-funnel-slice-event-args';\nimport { Style } from \"igniteui-react-core\";\nvar IgrFunnelChart = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrFunnelChart, _super);\n    function IgrFunnelChart(props) {\n        var _this = _super.call(this, props) || this;\n        _this._dataSource = null;\n        _this.__p = null;\n        _this._hasUserValues = new Set();\n        _this._stylingContainer = null;\n        _this._stylingParent = null;\n        _this._inStyling = false;\n        _this._sliceClicked = null;\n        _this._sliceClicked_wrapped = null;\n        _this._sliceEnter = null;\n        _this._sliceEnter_wrapped = null;\n        _this._sliceLeave = null;\n        _this._sliceLeave_wrapped = null;\n        _this._sliceHover = null;\n        _this._sliceHover_wrapped = null;\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._getMainRef = _this._getMainRef.bind(_this);\n        var container;\n        if (document) {\n            container = document.createElement(\"div\");\n            container.style.display = \"block\";\n            container.style.width = \"100%\";\n            container.style.height = \"100%\";\n        }\n        _this._implementation = _this.createImplementation();\n        var root;\n        root = container;\n        var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n        _this.container = ren.getWrapper(container);\n        _this._wrapper = ren;\n        var chart = _this.i;\n        _this._chart = chart;\n        chart.provideContainer(ren);\n        _this.bindData();\n        if (props) {\n            _this.initializeProperties();\n        }\n        chart.notifyResized();\n        ren.addSizeWatcher(function () {\n            _this._chart.notifyResized();\n        });\n        return _this;\n    }\n    Object.defineProperty(IgrFunnelChart.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            this._height = value;\n            if (this._elRef) {\n                this._elRef.style.height = value;\n                this._chart.notifyResized();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            this._width = value;\n            if (this._elRef) {\n                this._elRef.style.width = value;\n                this._chart.notifyResized();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrFunnelChart.prototype._getMainRef = function (ref) {\n        this._elRef = ref;\n    };\n    IgrFunnelChart.prototype.render = function () {\n        var div = React.createElement(\"div\", {\n            className: \"ig-funnel-chart igr-funnel-chart\",\n            ref: this._getMainRef\n        });\n        return div;\n    };\n    IgrFunnelChart.prototype.destroy = function () {\n        this._chart.destroy();\n        this._wrapper.destroy();\n    };\n    IgrFunnelChart.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var e_1, _a;\n        var mod = getModifiedProps(this.props, nextProps);\n        try {\n            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = mod[p];\n                }\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n        return true;\n    };\n    IgrFunnelChart.prototype.initializeProperties = function () {\n        var e_2, _a;\n        try {\n            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = this.props[p];\n                }\n            }\n        }\n        catch (e_2_1) {\n            e_2 = { error: e_2_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_2)\n                    throw e_2.error;\n            }\n        }\n    };\n    IgrFunnelChart.prototype.componentDidMount = function () {\n        this._elRef.style.width = this._width ? this._width : \"\";\n        this._elRef.style.height = this._height ? this._height : \"\";\n        this._elRef.appendChild(this.container.getNativeElement());\n        this._styling(this._elRef, this);\n        this._chart.notifyResized();\n    };\n    IgrFunnelChart.prototype.componentWillUnmount = function () {\n        this.destroy();\n    };\n    IgrFunnelChart.prototype.createImplementation = function () {\n        return new XamFunnelChart();\n    };\n    IgrFunnelChart.prototype.createSeriesComponent = function (type) {\n        if (TypeRegistrar.isRegistered(type)) {\n            var s = TypeRegistrar.create(type);\n            s.owner = this;\n            s._provideRenderer(this._wrapper);\n            return s;\n        }\n        else {\n            //we shouldn't get here, hopefully.\n            throw Error(\"series type not loaded: \" + type);\n        }\n    };\n    Object.defineProperty(IgrFunnelChart.prototype, \"dataSource\", {\n        get: function () {\n            return this._dataSource;\n        },\n        set: function (value) {\n            this._dataSource = value;\n            this.bindData();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrFunnelChart.prototype.bindData = function () {\n        if (this._chart != null && this._chart !== undefined) {\n            this._chart.itemsSource = this._dataSource;\n        }\n    };\n    Object.defineProperty(IgrFunnelChart.prototype, \"legend\", {\n        /**\n         * Gets or sets the legend used for the current chart.\n        */\n        get: function () {\n            if (this.i.legend != null)\n                return this.i.legend.externalObject;\n        },\n        set: function (v) {\n            if (v != undefined && v != null)\n                this.i.legend = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"i\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._implementation;\n        } /**\n                                     * @hidden\n                                     */,\n        enumerable: false,\n        configurable: true\n    });\n    IgrFunnelChart._createFromInternal = function (internal) {\n        if (!internal) {\n            return null;\n        }\n        if (!internal.$type) {\n            return null;\n        }\n        var name = internal.$type.name;\n        var externalName = \"Igr\" + name;\n        if (!TypeRegistrar.isRegistered(externalName)) {\n            return null;\n        }\n        return TypeRegistrar.create(externalName);\n    };\n    Object.defineProperty(IgrFunnelChart.prototype, \"valueMemberPath\", {\n        /**\n     * Gets or sets the value member path for the funnel chart.\n    */\n        get: function () {\n            return this.i.c9;\n        },\n        set: function (v) {\n            this.i.c9 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"brushes\", {\n        /**\n         * Gets or sets the palette of brushes to use for coloring the slices.\n        */\n        get: function () {\n            return fromBrushCollection(this.i.ah);\n        },\n        set: function (v) {\n            this.i.ah = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"outlines\", {\n        /**\n         * Gets or sets the palette of brushes to use for outlines on the slices.\n        */\n        get: function () {\n            return fromBrushCollection(this.i.ai);\n        },\n        set: function (v) {\n            this.i.ai = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"bottomEdgeWidth\", {\n        /**\n         * Gets or sets the percentage (from near 0 to 1) of space the bottom edge of the funnel should take.\n        */\n        get: function () {\n            return this.i.bo;\n        },\n        set: function (v) {\n            this.i.bo = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"innerLabelMemberPath\", {\n        /**\n         * Gets or sets the InnerLabel mapping property for the current series object.\n        */\n        get: function () {\n            return this.i.cd;\n        },\n        set: function (v) {\n            this.i.cd = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"outerLabelMemberPath\", {\n        /**\n         * Gets or sets the OuterLabel mapping property for the current series object.\n        */\n        get: function () {\n            return this.i.co;\n        },\n        set: function (v) {\n            this.i.co = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"innerLabelVisibility\", {\n        /**\n         * Gets or sets whether the inner labels are visible.\n        */\n        get: function () {\n            return this.i.ey;\n        },\n        set: function (v) {\n            this.i.ey = ensureEnum(Visibility_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"outerLabelVisibility\", {\n        /**\n         * Gets or sets whether the outer labels are visible.\n        */\n        get: function () {\n            return this.i.ez;\n        },\n        set: function (v) {\n            this.i.ez = ensureEnum(Visibility_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"outerLabelAlignment\", {\n        /**\n         * Gets or sets which side of the chart the outer labels should appear.\n        */\n        get: function () {\n            return this.i.au;\n        },\n        set: function (v) {\n            this.i.au = ensureEnum(OuterLabelAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"funnelSliceDisplay\", {\n        /**\n         * Gets or sets how the heights of the funnel slices should be configured.\n        */\n        get: function () {\n            return this.i.ak;\n        },\n        set: function (v) {\n            this.i.ak = ensureEnum(FunnelSliceDisplay_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"formatInnerLabel\", {\n        /**\n         * Gets or sets the formatter function for inner labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.\n        */\n        get: function () {\n            return this.i.bw;\n        },\n        set: function (v) {\n            this.i.bw = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"formatOuterLabel\", {\n        /**\n         * Gets or sets the formatter function for outer labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.\n        */\n        get: function () {\n            return this.i.bx;\n        },\n        set: function (v) {\n            this.i.bx = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"transitionDuration\", {\n        /**\n         * Gets or sets how long the animations should take to run.\n        */\n        get: function () {\n            return this.i.by;\n        },\n        set: function (v) {\n            this.i.by = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"isInverted\", {\n        /**\n         * Gets or sets if the funnel should be rendered inverted.\n        */\n        get: function () {\n            return this.i.bd;\n        },\n        set: function (v) {\n            this.i.bd = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"useBezierCurve\", {\n        /**\n         * Gets or sets whether to use a Bezier curve to define the funnel.\n        */\n        get: function () {\n            return this.i.be;\n        },\n        set: function (v) {\n            this.i.be = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"allowSliceSelection\", {\n        /**\n         * Gets or sets whether to allow slices to be selected.\n        */\n        get: function () {\n            return this.i.a8;\n        },\n        set: function (v) {\n            this.i.a8 = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"useUnselectedStyle\", {\n        /**\n         * Gets or sets whether to use the unselected style on unselected slices.\n        */\n        get: function () {\n            return this.i.bg;\n        },\n        set: function (v) {\n            this.i.bg = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"selectedSliceFill\", {\n        /**\n         * Gets or sets the fill brush.\n        */\n        get: function () {\n            return this.i.ew ? this.i.ew.fill : null;\n        },\n        set: function (v) {\n            this.ensureSelectedSliceStyle();\n            this.i.ew.fill = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"selectedSliceStroke\", {\n        /**\n         * Gets or sets the stroke brush.\n        */\n        get: function () {\n            return this.i.ew ? this.i.ew.stroke : null;\n        },\n        set: function (v) {\n            this.ensureSelectedSliceStyle();\n            this.i.ew.stroke = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"selectedSliceStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness.\n        */\n        get: function () {\n            return this.i.ew ? this.i.ew.strokeThickness : NaN;\n        },\n        set: function (v) {\n            this.ensureSelectedSliceStyle();\n            this.i.ew.strokeThickness = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"selectedSliceOpacity\", {\n        /**\n         * Gets or sets the opacity.\n        */\n        get: function () {\n            return this.i.ew ? this.i.ew.opacity : NaN;\n        },\n        set: function (v) {\n            this.ensureSelectedSliceStyle();\n            this.i.ew.opacity = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrFunnelChart.prototype.ensureSelectedSliceStyle = function () {\n        if (this.i.ew) {\n            return;\n        }\n        this.i.ew = new Style();\n    };\n    Object.defineProperty(IgrFunnelChart.prototype, \"unselectedSliceFill\", {\n        /**\n         * Gets or sets the fill brush.\n        */\n        get: function () {\n            return this.i.ex ? this.i.ex.fill : null;\n        },\n        set: function (v) {\n            this.ensureUnselectedSliceStyle();\n            this.i.ex.fill = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"unselectedSliceStroke\", {\n        /**\n         * Gets or sets the stroke brush.\n        */\n        get: function () {\n            return this.i.ex ? this.i.ex.stroke : null;\n        },\n        set: function (v) {\n            this.ensureUnselectedSliceStyle();\n            this.i.ex.stroke = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"unselectedSliceStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness.\n        */\n        get: function () {\n            return this.i.ex ? this.i.ex.strokeThickness : NaN;\n        },\n        set: function (v) {\n            this.ensureUnselectedSliceStyle();\n            this.i.ex.strokeThickness = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"unselectedSliceOpacity\", {\n        /**\n         * Gets or sets the opacity.\n        */\n        get: function () {\n            return this.i.ex ? this.i.ex.opacity : NaN;\n        },\n        set: function (v) {\n            this.ensureUnselectedSliceStyle();\n            this.i.ex.opacity = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrFunnelChart.prototype.ensureUnselectedSliceStyle = function () {\n        if (this.i.ex) {\n            return;\n        }\n        this.i.ex = new Style();\n    };\n    Object.defineProperty(IgrFunnelChart.prototype, \"legendItemBadgeTemplate\", {\n        /**\n         * Gets or sets the LegendItemBadgeTemplate to use for the legend items.\n        */\n        get: function () {\n            return this.i.legendItemBadgeTemplate;\n        },\n        set: function (v) {\n            this.i.legendItemBadgeTemplate = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"useOuterLabelsForLegend\", {\n        /**\n         * Gets or sets whether to use the outer labels to identify the legend items.\n        */\n        get: function () {\n            return this.i.bf;\n        },\n        set: function (v) {\n            this.i.bf = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"textStyle\", {\n        /**\n         * Gets or sets the text style for inner labels\n        */\n        get: function () {\n            return this.i.cz;\n        },\n        set: function (v) {\n            this.i.cz = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"outerLabelTextStyle\", {\n        /**\n         * Gets or sets the text style for outer labels\n        */\n        get: function () {\n            return this.i.cr;\n        },\n        set: function (v) {\n            this.i.cr = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"outlineThickness\", {\n        /**\n         * Gets or sets the thickness of outline around slices.\n        */\n        get: function () {\n            return this.i.bq;\n        },\n        set: function (v) {\n            this.i.bq = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"pixelScalingRatio\", {\n        /**\n         * Gets or sets the scaling value used to affect the pixel density of the control.\n         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n         * to appear blurry.\n        */\n        get: function () {\n            return this.i.bs;\n        },\n        set: function (v) {\n            this.i.bs = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"outerLabelTextColor\", {\n        /**\n         * Gets or sets the brush used for the outer labels.\n        */\n        get: function () {\n            return brushToString(this.i.es);\n        },\n        set: function (v) {\n            this.i.es = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"textColor\", {\n        /**\n         * Gets or sets the brush used for the inner labels.\n        */\n        get: function () {\n            return brushToString(this.i.et);\n        },\n        set: function (v) {\n            this.i.et = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrFunnelChart.prototype.findByName = function (name) {\n        return null;\n    };\n    Object.defineProperty(IgrFunnelChart.prototype, \"hasUserValues\", {\n        get: function () {\n            return this._hasUserValues;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrFunnelChart.prototype.__m = function (propertyName) {\n        if (!this._inStyling) {\n            this._hasUserValues.add(propertyName);\n        }\n    };\n    IgrFunnelChart.prototype._styling = function (container, component, parent) {\n        if (this._inStyling) {\n            return;\n        }\n        this._inStyling = true;\n        this._stylingContainer = container;\n        this._stylingParent = component;\n        var genericPrefix = \"\";\n        var typeName = this.i.$type.name;\n        if (typeName.indexOf(\"Xam\") === 0) {\n            typeName = typeName.substring(3);\n        }\n        genericPrefix = toSpinal(\"FunnelChart\");\n        var additionalPrefixes = [];\n        var prefix = toSpinal(typeName);\n        additionalPrefixes.push(prefix + \"-\");\n        var b = this.i.$type.baseType;\n        while (b && b.name != \"Object\" &&\n            b.name != \"Base\" &&\n            b.name != \"Control\" &&\n            b.Name != \"DependencyObject\" &&\n            b.Name != \"FrameworkElement\") {\n            typeName = b.name;\n            if (typeName.indexOf(\"Xam\") === 0) {\n                typeName = typeName.substring(3);\n            }\n            var basePrefix = toSpinal(typeName);\n            additionalPrefixes.push(basePrefix + \"-\");\n            b = b.baseType;\n        }\n        if (parent) {\n            var parentTypeName = parent.i.$type.name;\n            if (parentTypeName.indexOf(\"Xam\") === 0) {\n                parentTypeName = parentTypeName.substring(3);\n            }\n            var parentPrefix = toSpinal(parentTypeName);\n            additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n            additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n        }\n        initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n        if (this._otherStyling) {\n            this._otherStyling(container, component, parent);\n        }\n        this._inStyling = false;\n    };\n    /**\n * Provides container for funnel chart\n\r\n*/\n    IgrFunnelChart.prototype.provideContainer = function (container) {\n        this.i.provideContainer(container);\n    };\n    /**\n     * Notifies the controller and view about a size change.\n    \r\n    */\n    IgrFunnelChart.prototype.notifyResized = function () {\n        this.i.notifyResized();\n    };\n    IgrFunnelChart.prototype.notifySetItem = function (source_, index, oldItem, newItem) {\n        this.i.dl(source_, index, oldItem, newItem);\n    };\n    /**\n     * Manually notifies the chart's data source that the data it has bound to has been cleared and needs to be re-examined.\n     * This should not be called if the data that the chart is bound to is already observable.\n    \r\n    */\n    IgrFunnelChart.prototype.notifyClearItems = function (source_) {\n        this.i.dg(source_);\n    };\n    IgrFunnelChart.prototype.notifyInsertItem = function (source_, index, newItem) {\n        this.i.di(source_, index, newItem);\n    };\n    IgrFunnelChart.prototype.notifyRemoveItem = function (source_, index, oldItem) {\n        this.i.dj(source_, index, oldItem);\n    };\n    /**\n     * Toggle selection of item at index.\n    \r\n    */\n    IgrFunnelChart.prototype.toggleSelection = function (index) {\n        this.i.dy(index);\n    };\n    /**\n     * Exports and serializes the chart visuals.\n    \r\n    */\n    IgrFunnelChart.prototype.exportSerializedVisualData = function () {\n        var iv = this.i.b7();\n        return (iv);\n    };\n    Object.defineProperty(IgrFunnelChart.prototype, \"sliceClicked\", {\n        /**\n         * Event which is raised when a slice is clicked.\n         * Function takes first argument null and second argument ui.\n         * Use ui.owner to obtain reference to igFunnelChart.\n         * Use ui.index to obtain index of clicked slice.\n         * Use ui.item to obtain reference to clicked slice item.\n         * Use ui.selected to check if slice became selected.\n        */\n        get: function () {\n            return this._sliceClicked;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._sliceClicked_wrapped !== null) {\n                this.i.sliceClicked = delegateRemove(this.i.sliceClicked, this._sliceClicked_wrapped);\n                this._sliceClicked_wrapped = null;\n                this._sliceClicked = null;\n            }\n            this._sliceClicked = ev;\n            this._sliceClicked_wrapped = function (o, e) {\n                var outerArgs = new IgrFunnelSliceClickedEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSliceClicked) {\n                    _this.beforeSliceClicked(_this, outerArgs);\n                }\n                if (_this._sliceClicked) {\n                    _this._sliceClicked(_this, outerArgs);\n                }\n            };\n            this.i.sliceClicked = delegateCombine(this.i.sliceClicked, this._sliceClicked_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"sliceEnter\", {\n        /**\n         * Raised when a funnel slice is entered.\n        */\n        get: function () {\n            return this._sliceEnter;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._sliceEnter_wrapped !== null) {\n                this.i.sliceEnter = delegateRemove(this.i.sliceEnter, this._sliceEnter_wrapped);\n                this._sliceEnter_wrapped = null;\n                this._sliceEnter = null;\n            }\n            this._sliceEnter = ev;\n            this._sliceEnter_wrapped = function (o, e) {\n                var outerArgs = new IgrFunnelSliceEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSliceEnter) {\n                    _this.beforeSliceEnter(_this, outerArgs);\n                }\n                if (_this._sliceEnter) {\n                    _this._sliceEnter(_this, outerArgs);\n                }\n            };\n            this.i.sliceEnter = delegateCombine(this.i.sliceEnter, this._sliceEnter_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"sliceLeave\", {\n        /**\n         * Raised when a funnel slice is left.\n        */\n        get: function () {\n            return this._sliceLeave;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._sliceLeave_wrapped !== null) {\n                this.i.sliceLeave = delegateRemove(this.i.sliceLeave, this._sliceLeave_wrapped);\n                this._sliceLeave_wrapped = null;\n                this._sliceLeave = null;\n            }\n            this._sliceLeave = ev;\n            this._sliceLeave_wrapped = function (o, e) {\n                var outerArgs = new IgrFunnelSliceEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSliceLeave) {\n                    _this.beforeSliceLeave(_this, outerArgs);\n                }\n                if (_this._sliceLeave) {\n                    _this._sliceLeave(_this, outerArgs);\n                }\n            };\n            this.i.sliceLeave = delegateCombine(this.i.sliceLeave, this._sliceLeave_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFunnelChart.prototype, \"sliceHover\", {\n        /**\n         * Raised when a funnel slice is hovered.\n        */\n        get: function () {\n            return this._sliceHover;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._sliceHover_wrapped !== null) {\n                this.i.sliceHover = delegateRemove(this.i.sliceHover, this._sliceHover_wrapped);\n                this._sliceHover_wrapped = null;\n                this._sliceHover = null;\n            }\n            this._sliceHover = ev;\n            this._sliceHover_wrapped = function (o, e) {\n                var outerArgs = new IgrFunnelSliceEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSliceHover) {\n                    _this.beforeSliceHover(_this, outerArgs);\n                }\n                if (_this._sliceHover) {\n                    _this._sliceHover(_this, outerArgs);\n                }\n            };\n            this.i.sliceHover = delegateCombine(this.i.sliceHover, this._sliceHover_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IgrFunnelChart;\n}(React.Component));\nexport { IgrFunnelChart };\n//# sourceMappingURL=igr-funnel-chart.js.map\n"]},"metadata":{},"sourceType":"module"}