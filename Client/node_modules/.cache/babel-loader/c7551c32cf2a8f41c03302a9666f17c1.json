{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport * as React from 'react';\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { Visibility_$type } from \"igniteui-react-core\";\nimport { MarkerType_$type } from \"./MarkerType\";\nimport { IgrPropertyUpdatedEventArgs } from \"igniteui-react-core\";\nimport { StackedFragmentSeries } from \"./StackedFragmentSeries\";\nimport { getModifiedProps, isValidProp, brushToString, stringToBrush, ensureBool, colorToString, stringToColor, ensureEnum, toSpinal, initializePropertiesFromCss, NamePatcher, fromPoint, toPoint, fromRect } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { SeriesOutlineMode_$type } from './SeriesOutlineMode';\nimport { LegendItemBadgeMode_$type } from './LegendItemBadgeMode';\nimport { LegendItemBadgeShape_$type } from './LegendItemBadgeShape';\n/**\n * Represents a non-visual child of StackedSeriesBase.\n*/\n\nvar IgrStackedFragmentSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrStackedFragmentSeries, _super);\n\n  function IgrStackedFragmentSeries(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.__p = null;\n    _this._hasUserValues = new Set();\n    _this._stylingContainer = null;\n    _this._stylingParent = null;\n    _this._inStyling = false;\n    _this._propertyUpdated = null;\n    _this._propertyUpdated_wrapped = null;\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._implementation = _this.createImplementation();\n    _this._implementation.externalObject = _this;\n\n    _this.onImplementationCreated();\n\n    return _this;\n  }\n\n  IgrStackedFragmentSeries.prototype.createImplementation = function () {\n    return new StackedFragmentSeries();\n  };\n\n  IgrStackedFragmentSeries.prototype.onImplementationCreated = function () {};\n\n  IgrStackedFragmentSeries.prototype.componentDidMount = function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = this.props[p];\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  IgrStackedFragmentSeries.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var e_2, _a;\n\n    var mod = getModifiedProps(this.props, nextProps);\n\n    try {\n      for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = mod[p];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return true;\n  };\n\n  IgrStackedFragmentSeries.prototype.render = function () {\n    return null;\n  };\n\n  IgrStackedFragmentSeries.prototype.provideRenderer = function (renderer) {\n    this._renderer = renderer;\n    this.i.visualSeriesLink.provideRenderer(renderer);\n  };\n\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"i\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this._implementation;\n    }\n    /**\n                               * @hidden\n                               */\n    ,\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrStackedFragmentSeries._createFromInternal = function (internal) {\n    if (!internal) {\n      return null;\n    }\n\n    if (!internal.$type) {\n      return null;\n    }\n\n    var name = internal.$type.name;\n    var externalName = \"Igr\" + name;\n\n    if (!TypeRegistrar.isRegistered(externalName)) {\n      return null;\n    }\n\n    return TypeRegistrar.create(externalName);\n  };\n\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"dataSource\", {\n    /**\n    * Gets or sets the ItemsSource property for the current series object. Normally you will want to provide data to the parent series instead.\n    * But if you have data as individual columns, it can be assigned here. The data must be aligned and have the same number of items for each fragment.\n    */\n    get: function () {\n      return this.i.itemsSource;\n    },\n    set: function (v) {\n      this.i.itemsSource = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"brush\", {\n    /**\n     * Gets or sets the brush of the stacked fragment.\n    */\n    get: function () {\n      return brushToString(this.i.hx);\n    },\n    set: function (v) {\n      this.i.hx = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualBrush\", {\n    /**\n     * Gets the actual brush used by the series.\n    */\n    get: function () {\n      return brushToString(this.i.hs);\n    },\n    set: function (v) {\n      this.i.hs = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"isDropShadowEnabled\", {\n    /**\n     * Gets or sets whether drop shadow should be enabled for this series.\n    */\n    get: function () {\n      return this.i.ag;\n    },\n    set: function (v) {\n      this.i.ag = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualIsDropShadowEnabled\", {\n    /**\n     * Gets whether drop shadow is actually enabled for this series.\n    */\n    get: function () {\n      return this.i.aa;\n    },\n    set: function (v) {\n      this.i.aa = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"shadowBlur\", {\n    /**\n     * Gets or sets the shadow blur.\n     * This property is ignored when StackedFragmentSeries.UseSingleShadow is set to true.\n    */\n    get: function () {\n      return this.i.bi;\n    },\n    set: function (v) {\n      this.i.bi = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualShadowBlur\", {\n    /**\n     * Gets the actual shadow blur used by the series.\n    */\n    get: function () {\n      return this.i.az;\n    },\n    set: function (v) {\n      this.i.az = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"shadowColor\", {\n    /**\n     * Gets or sets the drop shadow color.\n    */\n    get: function () {\n      return colorToString(this.i.h4);\n    },\n    set: function (v) {\n      this.i.h4 = stringToColor(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualShadowColor\", {\n    /**\n     * Gets actual the drop shadow color used by the series.\n    */\n    get: function () {\n      return colorToString(this.i.h3);\n    },\n    set: function (v) {\n      this.i.h3 = stringToColor(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"useSingleShadow\", {\n    /**\n     * Gets or sets whether drop shadow is applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.\n     * When this property is set to true, no StackedFragmentSeries.ShadowBlur is applied.\n    */\n    get: function () {\n      return this.i.an;\n    },\n    set: function (v) {\n      this.i.an = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualUseSingleShadow\", {\n    /**\n     * Gets whether drop shadow is actually applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.\n    */\n    get: function () {\n      return this.i.ae;\n    },\n    set: function (v) {\n      this.i.ae = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"shadowOffsetX\", {\n    /**\n     * Gets or sets the drop shadow x-offset.\n    */\n    get: function () {\n      return this.i.bj;\n    },\n    set: function (v) {\n      this.i.bj = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualShadowOffsetX\", {\n    /**\n     * Gets the actual drop shadow x-offset applied to the series.\n    */\n    get: function () {\n      return this.i.a0;\n    },\n    set: function (v) {\n      this.i.a0 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"shadowOffsetY\", {\n    /**\n     * Gets or sets the drop shadow y-offset.\n    */\n    get: function () {\n      return this.i.bk;\n    },\n    set: function (v) {\n      this.i.bk = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualShadowOffsetY\", {\n    /**\n     * Gets the actual drop shadow y-offset applied to the series.\n    */\n    get: function () {\n      return this.i.a1;\n    },\n    set: function (v) {\n      this.i.a1 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"legendItemBadgeTemplate\", {\n    /**\n     * Gets or sets the LegendItemBadgeTemplate property.\n     * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by\n     * the series object itself.\n    */\n    get: function () {\n      return this.i.fi;\n    },\n    set: function (v) {\n      this.i.fi = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualLegendItemBadgeTemplate\", {\n    /**\n     * Gets the actual legend item badge template used by the series.\n    */\n    get: function () {\n      return this.i.ff;\n    },\n    set: function (v) {\n      this.i.ff = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"legendItemTemplate\", {\n    /**\n     * Gets or sets the LegendItemTemplate property.\n     * The legend item control content is created according to the LegendItemTemplate on-demand by\n     * the series object itself.\n    */\n    get: function () {\n      return this.i.fj;\n    },\n    set: function (v) {\n      this.i.fj = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualLegendItemTemplate\", {\n    /**\n     * Gets the actual legend item template used by the series.\n    */\n    get: function () {\n      return this.i.fg;\n    },\n    set: function (v) {\n      this.i.fg = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"legendItemVisibility\", {\n    /**\n     * Gets or sets the legend item visibility for the current series object.\n    */\n    get: function () {\n      return this.i.iw;\n    },\n    set: function (v) {\n      this.i.iw = ensureEnum(Visibility_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualLegendItemVisibility\", {\n    /**\n     * Gets the actual visibility of the legend items in the series.\n    */\n    get: function () {\n      return this.i.iu;\n    },\n    set: function (v) {\n      this.i.iu = ensureEnum(Visibility_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"legendItemBadgeShape\", {\n    /**\n     * Gets or sets the type of legend badge representing the current series in a legend.\n     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on the series\n    */\n    get: function () {\n      return this.i.p;\n    },\n    set: function (v) {\n      this.i.p = ensureEnum(LegendItemBadgeShape_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"legendItemBadgeMode\", {\n    /**\n     * Gets or sets the mode of legend badge representing the current series in a legend.\n     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on the series\n    */\n    get: function () {\n      return this.i.n;\n    },\n    set: function (v) {\n      this.i.n = ensureEnum(LegendItemBadgeMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualLegendItemBadgeShape\", {\n    /**\n     * Gets the actual LegendItemBadgeShape of the series.\n    */\n    get: function () {\n      return this.i.o;\n    },\n    set: function (v) {\n      this.i.o = ensureEnum(LegendItemBadgeShape_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualLegendItemBadgeMode\", {\n    /**\n     * Gets the actual LegendItemBadgeMode of the series.\n    */\n    get: function () {\n      return this.i.m;\n    },\n    set: function (v) {\n      this.i.m = ensureEnum(LegendItemBadgeMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"markerBrush\", {\n    /**\n     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.\n    */\n    get: function () {\n      return brushToString(this.i.hy);\n    },\n    set: function (v) {\n      this.i.hy = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualMarkerBrush\", {\n    /**\n     * Gets the actual marker brush of the series.\n    */\n    get: function () {\n      return brushToString(this.i.ht);\n    },\n    set: function (v) {\n      this.i.ht = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"markerOutline\", {\n    /**\n     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.\n    */\n    get: function () {\n      return brushToString(this.i.hz);\n    },\n    set: function (v) {\n      this.i.hz = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualMarkerOutline\", {\n    /**\n     * Gets the actual marker outline of the series.\n    */\n    get: function () {\n      return brushToString(this.i.hu);\n    },\n    set: function (v) {\n      this.i.hu = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"markerTemplate\", {\n    /**\n     * Gets or sets the MarkerTemplate for the current series object.\n    */\n    get: function () {\n      return this.i.fk;\n    },\n    set: function (v) {\n      this.i.fk = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualMarkerTemplate\", {\n    /**\n     * Gets the actual marker template used by the series.\n    */\n    get: function () {\n      return this.i.fh;\n    },\n    set: function (v) {\n      this.i.fh = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"markerType\", {\n    /**\n     * Gets or sets the marker type for the current series object.\n     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.\n    */\n    get: function () {\n      return this.i.r;\n    },\n    set: function (v) {\n      this.i.r = ensureEnum(MarkerType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualMarkerType\", {\n    /**\n     * Gets the actual marker type set used in the series.\n    */\n    get: function () {\n      return this.i.q;\n    },\n    set: function (v) {\n      this.i.q = ensureEnum(MarkerType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"name\", {\n    /**\n     * Gets or sets the Name of the stacked fragment.\n    */\n    get: function () {\n      return this.i.dk;\n    },\n    set: function (v) {\n      this.i.dk = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"opacity\", {\n    /**\n     * Gets or sets the Opacity of the stacked fragment.\n    */\n    get: function () {\n      return this.i.bf;\n    },\n    set: function (v) {\n      this.i.bf = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualOpacity\", {\n    /**\n     * Gets the series opacity.\n    */\n    get: function () {\n      return this.i.aw;\n    },\n    set: function (v) {\n      this.i.aw = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"outline\", {\n    /**\n     * Gets or sets the brush to use for the outline of the series.\n     * Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.\n    */\n    get: function () {\n      return brushToString(this.i.h1);\n    },\n    set: function (v) {\n      this.i.h1 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualOutline\", {\n    /**\n     * Gets the series outline.\n    */\n    get: function () {\n      return brushToString(this.i.hw);\n    },\n    set: function (v) {\n      this.i.hw = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"areaFillOpacity\", {\n    /**\n     * Gets or sets the AreaFillOpacity of the stacked fragment. This property only applies for area-like series.\n    */\n    get: function () {\n      return this.i.a3;\n    },\n    set: function (v) {\n      this.i.a3 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualAreaFillOpacity\", {\n    /**\n     * Gets the series ActualAreaFillOpacity.  This property only applies for area-like series.\n    */\n    get: function () {\n      return this.i.as;\n    },\n    set: function (v) {\n      this.i.as = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"markerFillOpacity\", {\n    /**\n     * Gets or sets the opacity to use for the marker fills.\n    */\n    get: function () {\n      return this.i.bd;\n    },\n    set: function (v) {\n      this.i.bd = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualMarkerFillOpacity\", {\n    /**\n     * Gets the actual opacity to use for hte marker fills.\n    */\n    get: function () {\n      return this.i.au;\n    },\n    set: function (v) {\n      this.i.au = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"outlineMode\", {\n    /**\n     * Gets or sets the outline mode to use for the fragment.\n    */\n    get: function () {\n      return this.i.u;\n    },\n    set: function (v) {\n      this.i.u = ensureEnum(SeriesOutlineMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualOutlineMode\", {\n    /**\n     * Gets the actual outline mode to use for the fragment.\n    */\n    get: function () {\n      return this.i.t;\n    },\n    set: function (v) {\n      this.i.t = ensureEnum(SeriesOutlineMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"highlightingFadeOpacity\", {\n    /**\n     * Gets or sets the target opacity to fade to for fade style highlighting.\n    */\n    get: function () {\n      return this.i.bc;\n    },\n    set: function (v) {\n      this.i.bc = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualHighlightingFadeOpacity\", {\n    /**\n     * Gets the actual target opacity to fade to for fade style highlighting.\n    */\n    get: function () {\n      return this.i.at;\n    },\n    set: function (v) {\n      this.i.at = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"radiusX\", {\n    /**\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.\n    */\n    get: function () {\n      return this.i.bg;\n    },\n    set: function (v) {\n      this.i.bg = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualRadiusX\", {\n    /**\n     * Gets the actual corner radius of the series\n    */\n    get: function () {\n      return this.i.ax;\n    },\n    set: function (v) {\n      this.i.ax = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualIsSplineShapePartOfRange\", {\n    /**\n     * Gets whether the spline part is considered to be part of the range\n    */\n    get: function () {\n      return this.i.ac;\n    },\n    set: function (v) {\n      this.i.ac = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"isSplineShapePartOfRange\", {\n    /**\n     * Gets or sets whether to include the spline shape in the axis range requested of the axis.\n    */\n    get: function () {\n      return this.i.ai;\n    },\n    set: function (v) {\n      this.i.ai = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"radiusY\", {\n    /**\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.\n    */\n    get: function () {\n      return this.i.bh;\n    },\n    set: function (v) {\n      this.i.bh = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualRadiusY\", {\n    /**\n     * Gets the actual corner radius of the series\n    */\n    get: function () {\n      return this.i.ay;\n    },\n    set: function (v) {\n      this.i.ay = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"thickness\", {\n    /**\n     * Gets or sets the width of the current series object's line thickness.\n    */\n    get: function () {\n      return this.i.bl;\n    },\n    set: function (v) {\n      this.i.bl = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualThickness\", {\n    /**\n     * Gets or sets the thickness of this stacked fragment.\n    */\n    get: function () {\n      return this.i.a2;\n    },\n    set: function (v) {\n      this.i.a2 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"markerThickness\", {\n    /**\n     * Gets or sets the width of the current series object's marker thickness.\n    */\n    get: function () {\n      return this.i.be;\n    },\n    set: function (v) {\n      this.i.be = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualMarkerThickness\", {\n    /**\n     * Gets actual marker thickness of this stacked fragment.\n    */\n    get: function () {\n      return this.i.av;\n    },\n    set: function (v) {\n      this.i.av = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"title\", {\n    /**\n     * Gets or sets the Title property.\n     * The legend item control is created according to the Title on-demand by\n     * the series object itself.\n    */\n    get: function () {\n      return this.i.bv;\n    },\n    set: function (v) {\n      this.i.bv = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"valueMemberPath\", {\n    /**\n     * Gets or sets the value mapping property for the current series object.\n    */\n    get: function () {\n      return this.i.d4;\n    },\n    set: function (v) {\n      this.i.d4 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"visibility\", {\n    /**\n     * Gets or sets the Visibility of the stacked fragment.\n    */\n    get: function () {\n      return this.i.ix;\n    },\n    set: function (v) {\n      this.i.ix = ensureEnum(Visibility_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualVisibility\", {\n    /**\n     * Gets the actual visibility of the stacked fragment.\n    */\n    get: function () {\n      return this.i.iv;\n    },\n    set: function (v) {\n      this.i.iv = ensureEnum(Visibility_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"parentOrLocalBrush\", {\n    /**\n     * Gets the resolved brush used between the local series and the parent series.\n    */\n    get: function () {\n      return brushToString(this.i.h2);\n    },\n    set: function (v) {\n      this.i.h2 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrStackedFragmentSeries.prototype.findByName = function (name) {\n    return null;\n  };\n\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"hasUserValues\", {\n    get: function () {\n      return this._hasUserValues;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrStackedFragmentSeries.prototype.__m = function (propertyName) {\n    if (!this._inStyling) {\n      this._hasUserValues.add(propertyName);\n    }\n  };\n\n  IgrStackedFragmentSeries.prototype._styling = function (container, component, parent) {\n    if (this._inStyling) {\n      return;\n    }\n\n    this._inStyling = true;\n    this._stylingContainer = container;\n    this._stylingParent = component;\n    var genericPrefix = \"\";\n    var typeName = this.i.$type.name;\n\n    if (typeName.indexOf(\"Xam\") === 0) {\n      typeName = typeName.substring(3);\n    }\n\n    genericPrefix = toSpinal(\"StackedFragmentSeries\");\n    var additionalPrefixes = [];\n    var prefix = toSpinal(typeName);\n    additionalPrefixes.push(prefix + \"-\");\n    var b = this.i.$type.baseType;\n\n    while (b && b.name != \"Object\" && b.name != \"Base\" && b.name != \"Control\" && b.Name != \"DependencyObject\" && b.Name != \"FrameworkElement\") {\n      typeName = b.name;\n\n      if (typeName.indexOf(\"Xam\") === 0) {\n        typeName = typeName.substring(3);\n      }\n\n      var basePrefix = toSpinal(typeName);\n      additionalPrefixes.push(basePrefix + \"-\");\n      b = b.baseType;\n    }\n\n    if (parent) {\n      var parentTypeName = parent.i.$type.name;\n\n      if (parentTypeName.indexOf(\"Xam\") === 0) {\n        parentTypeName = parentTypeName.substring(3);\n      }\n\n      var parentPrefix = toSpinal(parentTypeName);\n      additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n      additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n    }\n\n    initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n\n    if (this._otherStyling) {\n      this._otherStyling(container, component, parent);\n    }\n\n    this._inStyling = false;\n  };\n  /**\n  * Gets the item item index associated with the specified world position\n  */\n\n\n  IgrStackedFragmentSeries.prototype.getItemIndex = function (world) {\n    var iv = this.i.bn(toPoint(world));\n    return iv;\n  };\n  /**\n   * Gets the item that is the best match for the specified world coordinates.\n  \r\n  * @param world  * The world coordinates to use.\n  */\n\n\n  IgrStackedFragmentSeries.prototype.getItem = function (world) {\n    var iv = this.i.bt(toPoint(world));\n    return iv;\n  };\n\n  IgrStackedFragmentSeries.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.bq(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  IgrStackedFragmentSeries.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.bp(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  IgrStackedFragmentSeries.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.ba(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrStackedFragmentSeries.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.ij(toPoint(world), useInterpolation, skipUnknowns);\n    return fromPoint(iv);\n  };\n  /**\n   * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinate for which to get a value bounding box for\n  */\n\n\n  IgrStackedFragmentSeries.prototype.getSeriesValueBoundingBox = function (world) {\n    var iv = this.i.io(toPoint(world));\n    return fromRect(iv);\n  };\n  /**\n   * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinates for which to get a value marker bounding box for\n  */\n\n\n  IgrStackedFragmentSeries.prototype.getSeriesValueMarkerBoundingBox = function (world) {\n    var iv = this.i.iq(toPoint(world));\n    return fromRect(iv);\n  };\n\n  IgrStackedFragmentSeries.prototype.getSeriesHighValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.a6(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrStackedFragmentSeries.prototype.getSeriesHighValuePosition = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.ie(toPoint(world), useInterpolation, skipUnknowns);\n    return fromPoint(iv);\n  };\n\n  IgrStackedFragmentSeries.prototype.getSeriesLowValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.a8(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrStackedFragmentSeries.prototype.getSeriesLowValuePosition = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.ih(toPoint(world), useInterpolation, skipUnknowns);\n    return fromPoint(iv);\n  };\n\n  IgrStackedFragmentSeries.prototype.getSeriesValuePositionFromSeriesPixel = function (mouse, useInterpolation, skipUnknowns) {\n    var iv = this.i.ik(toPoint(mouse), useInterpolation, skipUnknowns);\n    return fromPoint(iv);\n  };\n\n  IgrStackedFragmentSeries.prototype.getSeriesValueFromSeriesPixel = function (mouse, useInterpolation, skipUnknowns) {\n    var iv = this.i.bb(toPoint(mouse), useInterpolation, skipUnknowns);\n    return iv;\n  };\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  */\n\n\n  IgrStackedFragmentSeries.prototype.getItemSpan = function () {\n    var iv = this.i.a5();\n    return iv;\n  };\n  /**\n   * Converts a point from coordinates within the series plot area to a world position within axis space.\n  \r\n  * @param seriesPoint  * The pixel location within the plot area of the series.\n  */\n\n\n  IgrStackedFragmentSeries.prototype.toWorldPosition = function (seriesPoint) {\n    var iv = this.i.il(toPoint(seriesPoint));\n    return fromPoint(iv);\n  };\n  /**\n   * Converts a point from world coordinates to coordinates within the viewport of the series.\n  \r\n  * @param world  * The world position from which to convert.\n  */\n\n\n  IgrStackedFragmentSeries.prototype.fromWorldPosition = function (world) {\n    var iv = this.i.id(toPoint(world));\n    return fromPoint(iv);\n  };\n  /**\n   * Requests that the provided item should be brought into view if possible.\n  \r\n  * @param item  * The item to attempt to bring into view.\n  */\n\n\n  IgrStackedFragmentSeries.prototype.scrollIntoView = function (item) {\n    var iv = this.i.ak(item);\n    return iv;\n  };\n  /**\n   * Gets the effective viewport, adjusted to account for margins and other factors.\n  \r\n  */\n\n\n  IgrStackedFragmentSeries.prototype.getEffectiveViewport = function () {\n    var iv = this.i.im();\n    return fromRect(iv);\n  };\n  /**\n   * Notifies the series that a visual property has changed, requiring a visual update.\n  \r\n  */\n\n\n  IgrStackedFragmentSeries.prototype.notifyVisualPropertiesChanged = function () {\n    this.i.d8();\n  };\n  /**\n   * Simulates a pointer hover over the series surface.\n  \r\n  * @param point  * The pointer position relative to the series viewport over which to hover.\n  */\n\n\n  IgrStackedFragmentSeries.prototype.simulateHover = function (point) {\n    this.i.ec(toPoint(point));\n  };\n  /**\n   * Moves the cursor point to the provided world position. Some series may react to the current cursor position.\n  \r\n  * @param point  * The cursor point, in world coordinates.\n  */\n\n\n  IgrStackedFragmentSeries.prototype.moveCursorPoint = function (point) {\n    this.i.d7(toPoint(point));\n  };\n\n  Object.defineProperty(IgrStackedFragmentSeries.prototype, \"propertyUpdated\", {\n    /**\n     * Event raised when a property (including \"effective\" and non-dependency property) value changes.\n    */\n    get: function () {\n      return this._propertyUpdated;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._propertyUpdated_wrapped !== null) {\n        this.i.propertyUpdated = delegateRemove(this.i.propertyUpdated, this._propertyUpdated_wrapped);\n        this._propertyUpdated_wrapped = null;\n        this._propertyUpdated = null;\n      }\n\n      this._propertyUpdated = ev;\n\n      this._propertyUpdated_wrapped = function (o, e) {\n        var outerArgs = new IgrPropertyUpdatedEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforePropertyUpdated) {\n          _this.beforePropertyUpdated(_this, outerArgs);\n        }\n\n        if (_this._propertyUpdated) {\n          _this._propertyUpdated(_this, outerArgs);\n        }\n      };\n\n      this.i.propertyUpdated = delegateCombine(this.i.propertyUpdated, this._propertyUpdated_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return IgrStackedFragmentSeries;\n}(React.Component);\n\nexport { IgrStackedFragmentSeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-stacked-fragment-series.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends, __values } from \"tslib\";\nimport * as React from 'react';\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { Visibility_$type } from \"igniteui-react-core\";\nimport { MarkerType_$type } from \"./MarkerType\";\nimport { IgrPropertyUpdatedEventArgs } from \"igniteui-react-core\";\nimport { StackedFragmentSeries } from \"./StackedFragmentSeries\";\nimport { getModifiedProps, isValidProp, brushToString, stringToBrush, ensureBool, colorToString, stringToColor, ensureEnum, toSpinal, initializePropertiesFromCss, NamePatcher, fromPoint, toPoint, fromRect } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { SeriesOutlineMode_$type } from './SeriesOutlineMode';\nimport { LegendItemBadgeMode_$type } from './LegendItemBadgeMode';\nimport { LegendItemBadgeShape_$type } from './LegendItemBadgeShape';\n/**\n * Represents a non-visual child of StackedSeriesBase.\n*/\nvar IgrStackedFragmentSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrStackedFragmentSeries, _super);\n    function IgrStackedFragmentSeries(props) {\n        var _this = _super.call(this, props) || this;\n        _this.__p = null;\n        _this._hasUserValues = new Set();\n        _this._stylingContainer = null;\n        _this._stylingParent = null;\n        _this._inStyling = false;\n        _this._propertyUpdated = null;\n        _this._propertyUpdated_wrapped = null;\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._implementation = _this.createImplementation();\n        _this._implementation.externalObject = _this;\n        _this.onImplementationCreated();\n        return _this;\n    }\n    IgrStackedFragmentSeries.prototype.createImplementation = function () {\n        return new StackedFragmentSeries();\n    };\n    IgrStackedFragmentSeries.prototype.onImplementationCreated = function () {\n    };\n    IgrStackedFragmentSeries.prototype.componentDidMount = function () {\n        var e_1, _a;\n        try {\n            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = this.props[p];\n                }\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n    };\n    IgrStackedFragmentSeries.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var e_2, _a;\n        var mod = getModifiedProps(this.props, nextProps);\n        try {\n            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = mod[p];\n                }\n            }\n        }\n        catch (e_2_1) {\n            e_2 = { error: e_2_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_2)\n                    throw e_2.error;\n            }\n        }\n        return true;\n    };\n    IgrStackedFragmentSeries.prototype.render = function () {\n        return null;\n    };\n    IgrStackedFragmentSeries.prototype.provideRenderer = function (renderer) {\n        this._renderer = renderer;\n        this.i.visualSeriesLink.provideRenderer(renderer);\n    };\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"i\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._implementation;\n        } /**\n                                     * @hidden\n                                     */,\n        enumerable: false,\n        configurable: true\n    });\n    IgrStackedFragmentSeries._createFromInternal = function (internal) {\n        if (!internal) {\n            return null;\n        }\n        if (!internal.$type) {\n            return null;\n        }\n        var name = internal.$type.name;\n        var externalName = \"Igr\" + name;\n        if (!TypeRegistrar.isRegistered(externalName)) {\n            return null;\n        }\n        return TypeRegistrar.create(externalName);\n    };\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"dataSource\", {\n        /**\n     * Gets or sets the ItemsSource property for the current series object. Normally you will want to provide data to the parent series instead.\n     * But if you have data as individual columns, it can be assigned here. The data must be aligned and have the same number of items for each fragment.\n    */\n        get: function () {\n            return this.i.itemsSource;\n        },\n        set: function (v) {\n            this.i.itemsSource = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"brush\", {\n        /**\n         * Gets or sets the brush of the stacked fragment.\n        */\n        get: function () {\n            return brushToString(this.i.hx);\n        },\n        set: function (v) {\n            this.i.hx = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualBrush\", {\n        /**\n         * Gets the actual brush used by the series.\n        */\n        get: function () {\n            return brushToString(this.i.hs);\n        },\n        set: function (v) {\n            this.i.hs = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"isDropShadowEnabled\", {\n        /**\n         * Gets or sets whether drop shadow should be enabled for this series.\n        */\n        get: function () {\n            return this.i.ag;\n        },\n        set: function (v) {\n            this.i.ag = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualIsDropShadowEnabled\", {\n        /**\n         * Gets whether drop shadow is actually enabled for this series.\n        */\n        get: function () {\n            return this.i.aa;\n        },\n        set: function (v) {\n            this.i.aa = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"shadowBlur\", {\n        /**\n         * Gets or sets the shadow blur.\n         * This property is ignored when StackedFragmentSeries.UseSingleShadow is set to true.\n        */\n        get: function () {\n            return this.i.bi;\n        },\n        set: function (v) {\n            this.i.bi = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualShadowBlur\", {\n        /**\n         * Gets the actual shadow blur used by the series.\n        */\n        get: function () {\n            return this.i.az;\n        },\n        set: function (v) {\n            this.i.az = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"shadowColor\", {\n        /**\n         * Gets or sets the drop shadow color.\n        */\n        get: function () {\n            return colorToString(this.i.h4);\n        },\n        set: function (v) {\n            this.i.h4 = stringToColor(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualShadowColor\", {\n        /**\n         * Gets actual the drop shadow color used by the series.\n        */\n        get: function () {\n            return colorToString(this.i.h3);\n        },\n        set: function (v) {\n            this.i.h3 = stringToColor(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"useSingleShadow\", {\n        /**\n         * Gets or sets whether drop shadow is applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.\n         * When this property is set to true, no StackedFragmentSeries.ShadowBlur is applied.\n        */\n        get: function () {\n            return this.i.an;\n        },\n        set: function (v) {\n            this.i.an = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualUseSingleShadow\", {\n        /**\n         * Gets whether drop shadow is actually applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.\n        */\n        get: function () {\n            return this.i.ae;\n        },\n        set: function (v) {\n            this.i.ae = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"shadowOffsetX\", {\n        /**\n         * Gets or sets the drop shadow x-offset.\n        */\n        get: function () {\n            return this.i.bj;\n        },\n        set: function (v) {\n            this.i.bj = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualShadowOffsetX\", {\n        /**\n         * Gets the actual drop shadow x-offset applied to the series.\n        */\n        get: function () {\n            return this.i.a0;\n        },\n        set: function (v) {\n            this.i.a0 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"shadowOffsetY\", {\n        /**\n         * Gets or sets the drop shadow y-offset.\n        */\n        get: function () {\n            return this.i.bk;\n        },\n        set: function (v) {\n            this.i.bk = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualShadowOffsetY\", {\n        /**\n         * Gets the actual drop shadow y-offset applied to the series.\n        */\n        get: function () {\n            return this.i.a1;\n        },\n        set: function (v) {\n            this.i.a1 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"legendItemBadgeTemplate\", {\n        /**\n         * Gets or sets the LegendItemBadgeTemplate property.\n         * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by\n         * the series object itself.\n        */\n        get: function () {\n            return this.i.fi;\n        },\n        set: function (v) {\n            this.i.fi = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualLegendItemBadgeTemplate\", {\n        /**\n         * Gets the actual legend item badge template used by the series.\n        */\n        get: function () {\n            return this.i.ff;\n        },\n        set: function (v) {\n            this.i.ff = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"legendItemTemplate\", {\n        /**\n         * Gets or sets the LegendItemTemplate property.\n         * The legend item control content is created according to the LegendItemTemplate on-demand by\n         * the series object itself.\n        */\n        get: function () {\n            return this.i.fj;\n        },\n        set: function (v) {\n            this.i.fj = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualLegendItemTemplate\", {\n        /**\n         * Gets the actual legend item template used by the series.\n        */\n        get: function () {\n            return this.i.fg;\n        },\n        set: function (v) {\n            this.i.fg = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"legendItemVisibility\", {\n        /**\n         * Gets or sets the legend item visibility for the current series object.\n        */\n        get: function () {\n            return this.i.iw;\n        },\n        set: function (v) {\n            this.i.iw = ensureEnum(Visibility_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualLegendItemVisibility\", {\n        /**\n         * Gets the actual visibility of the legend items in the series.\n        */\n        get: function () {\n            return this.i.iu;\n        },\n        set: function (v) {\n            this.i.iu = ensureEnum(Visibility_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"legendItemBadgeShape\", {\n        /**\n         * Gets or sets the type of legend badge representing the current series in a legend.\n         * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on the series\n        */\n        get: function () {\n            return this.i.p;\n        },\n        set: function (v) {\n            this.i.p = ensureEnum(LegendItemBadgeShape_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"legendItemBadgeMode\", {\n        /**\n         * Gets or sets the mode of legend badge representing the current series in a legend.\n         * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on the series\n        */\n        get: function () {\n            return this.i.n;\n        },\n        set: function (v) {\n            this.i.n = ensureEnum(LegendItemBadgeMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualLegendItemBadgeShape\", {\n        /**\n         * Gets the actual LegendItemBadgeShape of the series.\n        */\n        get: function () {\n            return this.i.o;\n        },\n        set: function (v) {\n            this.i.o = ensureEnum(LegendItemBadgeShape_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualLegendItemBadgeMode\", {\n        /**\n         * Gets the actual LegendItemBadgeMode of the series.\n        */\n        get: function () {\n            return this.i.m;\n        },\n        set: function (v) {\n            this.i.m = ensureEnum(LegendItemBadgeMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"markerBrush\", {\n        /**\n         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.\n        */\n        get: function () {\n            return brushToString(this.i.hy);\n        },\n        set: function (v) {\n            this.i.hy = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualMarkerBrush\", {\n        /**\n         * Gets the actual marker brush of the series.\n        */\n        get: function () {\n            return brushToString(this.i.ht);\n        },\n        set: function (v) {\n            this.i.ht = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"markerOutline\", {\n        /**\n         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.\n        */\n        get: function () {\n            return brushToString(this.i.hz);\n        },\n        set: function (v) {\n            this.i.hz = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualMarkerOutline\", {\n        /**\n         * Gets the actual marker outline of the series.\n        */\n        get: function () {\n            return brushToString(this.i.hu);\n        },\n        set: function (v) {\n            this.i.hu = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"markerTemplate\", {\n        /**\n         * Gets or sets the MarkerTemplate for the current series object.\n        */\n        get: function () {\n            return this.i.fk;\n        },\n        set: function (v) {\n            this.i.fk = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualMarkerTemplate\", {\n        /**\n         * Gets the actual marker template used by the series.\n        */\n        get: function () {\n            return this.i.fh;\n        },\n        set: function (v) {\n            this.i.fh = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"markerType\", {\n        /**\n         * Gets or sets the marker type for the current series object.\n         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.\n        */\n        get: function () {\n            return this.i.r;\n        },\n        set: function (v) {\n            this.i.r = ensureEnum(MarkerType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualMarkerType\", {\n        /**\n         * Gets the actual marker type set used in the series.\n        */\n        get: function () {\n            return this.i.q;\n        },\n        set: function (v) {\n            this.i.q = ensureEnum(MarkerType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"name\", {\n        /**\n         * Gets or sets the Name of the stacked fragment.\n        */\n        get: function () {\n            return this.i.dk;\n        },\n        set: function (v) {\n            this.i.dk = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"opacity\", {\n        /**\n         * Gets or sets the Opacity of the stacked fragment.\n        */\n        get: function () {\n            return this.i.bf;\n        },\n        set: function (v) {\n            this.i.bf = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualOpacity\", {\n        /**\n         * Gets the series opacity.\n        */\n        get: function () {\n            return this.i.aw;\n        },\n        set: function (v) {\n            this.i.aw = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"outline\", {\n        /**\n         * Gets or sets the brush to use for the outline of the series.\n         * Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.\n        */\n        get: function () {\n            return brushToString(this.i.h1);\n        },\n        set: function (v) {\n            this.i.h1 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualOutline\", {\n        /**\n         * Gets the series outline.\n        */\n        get: function () {\n            return brushToString(this.i.hw);\n        },\n        set: function (v) {\n            this.i.hw = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"areaFillOpacity\", {\n        /**\n         * Gets or sets the AreaFillOpacity of the stacked fragment. This property only applies for area-like series.\n        */\n        get: function () {\n            return this.i.a3;\n        },\n        set: function (v) {\n            this.i.a3 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualAreaFillOpacity\", {\n        /**\n         * Gets the series ActualAreaFillOpacity.  This property only applies for area-like series.\n        */\n        get: function () {\n            return this.i.as;\n        },\n        set: function (v) {\n            this.i.as = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"markerFillOpacity\", {\n        /**\n         * Gets or sets the opacity to use for the marker fills.\n        */\n        get: function () {\n            return this.i.bd;\n        },\n        set: function (v) {\n            this.i.bd = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualMarkerFillOpacity\", {\n        /**\n         * Gets the actual opacity to use for hte marker fills.\n        */\n        get: function () {\n            return this.i.au;\n        },\n        set: function (v) {\n            this.i.au = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"outlineMode\", {\n        /**\n         * Gets or sets the outline mode to use for the fragment.\n        */\n        get: function () {\n            return this.i.u;\n        },\n        set: function (v) {\n            this.i.u = ensureEnum(SeriesOutlineMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualOutlineMode\", {\n        /**\n         * Gets the actual outline mode to use for the fragment.\n        */\n        get: function () {\n            return this.i.t;\n        },\n        set: function (v) {\n            this.i.t = ensureEnum(SeriesOutlineMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"highlightingFadeOpacity\", {\n        /**\n         * Gets or sets the target opacity to fade to for fade style highlighting.\n        */\n        get: function () {\n            return this.i.bc;\n        },\n        set: function (v) {\n            this.i.bc = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualHighlightingFadeOpacity\", {\n        /**\n         * Gets the actual target opacity to fade to for fade style highlighting.\n        */\n        get: function () {\n            return this.i.at;\n        },\n        set: function (v) {\n            this.i.at = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"radiusX\", {\n        /**\n         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.\n        */\n        get: function () {\n            return this.i.bg;\n        },\n        set: function (v) {\n            this.i.bg = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualRadiusX\", {\n        /**\n         * Gets the actual corner radius of the series\n        */\n        get: function () {\n            return this.i.ax;\n        },\n        set: function (v) {\n            this.i.ax = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualIsSplineShapePartOfRange\", {\n        /**\n         * Gets whether the spline part is considered to be part of the range\n        */\n        get: function () {\n            return this.i.ac;\n        },\n        set: function (v) {\n            this.i.ac = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"isSplineShapePartOfRange\", {\n        /**\n         * Gets or sets whether to include the spline shape in the axis range requested of the axis.\n        */\n        get: function () {\n            return this.i.ai;\n        },\n        set: function (v) {\n            this.i.ai = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"radiusY\", {\n        /**\n         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.\n        */\n        get: function () {\n            return this.i.bh;\n        },\n        set: function (v) {\n            this.i.bh = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualRadiusY\", {\n        /**\n         * Gets the actual corner radius of the series\n        */\n        get: function () {\n            return this.i.ay;\n        },\n        set: function (v) {\n            this.i.ay = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"thickness\", {\n        /**\n         * Gets or sets the width of the current series object's line thickness.\n        */\n        get: function () {\n            return this.i.bl;\n        },\n        set: function (v) {\n            this.i.bl = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualThickness\", {\n        /**\n         * Gets or sets the thickness of this stacked fragment.\n        */\n        get: function () {\n            return this.i.a2;\n        },\n        set: function (v) {\n            this.i.a2 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"markerThickness\", {\n        /**\n         * Gets or sets the width of the current series object's marker thickness.\n        */\n        get: function () {\n            return this.i.be;\n        },\n        set: function (v) {\n            this.i.be = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualMarkerThickness\", {\n        /**\n         * Gets actual marker thickness of this stacked fragment.\n        */\n        get: function () {\n            return this.i.av;\n        },\n        set: function (v) {\n            this.i.av = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"title\", {\n        /**\n         * Gets or sets the Title property.\n         * The legend item control is created according to the Title on-demand by\n         * the series object itself.\n        */\n        get: function () {\n            return this.i.bv;\n        },\n        set: function (v) {\n            this.i.bv = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"valueMemberPath\", {\n        /**\n         * Gets or sets the value mapping property for the current series object.\n        */\n        get: function () {\n            return this.i.d4;\n        },\n        set: function (v) {\n            this.i.d4 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"visibility\", {\n        /**\n         * Gets or sets the Visibility of the stacked fragment.\n        */\n        get: function () {\n            return this.i.ix;\n        },\n        set: function (v) {\n            this.i.ix = ensureEnum(Visibility_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"actualVisibility\", {\n        /**\n         * Gets the actual visibility of the stacked fragment.\n        */\n        get: function () {\n            return this.i.iv;\n        },\n        set: function (v) {\n            this.i.iv = ensureEnum(Visibility_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"parentOrLocalBrush\", {\n        /**\n         * Gets the resolved brush used between the local series and the parent series.\n        */\n        get: function () {\n            return brushToString(this.i.h2);\n        },\n        set: function (v) {\n            this.i.h2 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrStackedFragmentSeries.prototype.findByName = function (name) {\n        return null;\n    };\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"hasUserValues\", {\n        get: function () {\n            return this._hasUserValues;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrStackedFragmentSeries.prototype.__m = function (propertyName) {\n        if (!this._inStyling) {\n            this._hasUserValues.add(propertyName);\n        }\n    };\n    IgrStackedFragmentSeries.prototype._styling = function (container, component, parent) {\n        if (this._inStyling) {\n            return;\n        }\n        this._inStyling = true;\n        this._stylingContainer = container;\n        this._stylingParent = component;\n        var genericPrefix = \"\";\n        var typeName = this.i.$type.name;\n        if (typeName.indexOf(\"Xam\") === 0) {\n            typeName = typeName.substring(3);\n        }\n        genericPrefix = toSpinal(\"StackedFragmentSeries\");\n        var additionalPrefixes = [];\n        var prefix = toSpinal(typeName);\n        additionalPrefixes.push(prefix + \"-\");\n        var b = this.i.$type.baseType;\n        while (b && b.name != \"Object\" &&\n            b.name != \"Base\" &&\n            b.name != \"Control\" &&\n            b.Name != \"DependencyObject\" &&\n            b.Name != \"FrameworkElement\") {\n            typeName = b.name;\n            if (typeName.indexOf(\"Xam\") === 0) {\n                typeName = typeName.substring(3);\n            }\n            var basePrefix = toSpinal(typeName);\n            additionalPrefixes.push(basePrefix + \"-\");\n            b = b.baseType;\n        }\n        if (parent) {\n            var parentTypeName = parent.i.$type.name;\n            if (parentTypeName.indexOf(\"Xam\") === 0) {\n                parentTypeName = parentTypeName.substring(3);\n            }\n            var parentPrefix = toSpinal(parentTypeName);\n            additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n            additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n        }\n        initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n        if (this._otherStyling) {\n            this._otherStyling(container, component, parent);\n        }\n        this._inStyling = false;\n    };\n    /**\n * Gets the item item index associated with the specified world position\n\r\n*/\n    IgrStackedFragmentSeries.prototype.getItemIndex = function (world) {\n        var iv = this.i.bn(toPoint(world));\n        return (iv);\n    };\n    /**\n     * Gets the item that is the best match for the specified world coordinates.\n    \r\n    * @param world  * The world coordinates to use.\n    */\n    IgrStackedFragmentSeries.prototype.getItem = function (world) {\n        var iv = this.i.bt(toPoint(world));\n        return (iv);\n    };\n    IgrStackedFragmentSeries.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.bq(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    IgrStackedFragmentSeries.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.bp(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    IgrStackedFragmentSeries.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.ba(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrStackedFragmentSeries.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.ij(toPoint(world), useInterpolation, skipUnknowns);\n        return fromPoint(iv);\n    };\n    /**\n     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinate for which to get a value bounding box for\n    */\n    IgrStackedFragmentSeries.prototype.getSeriesValueBoundingBox = function (world) {\n        var iv = this.i.io(toPoint(world));\n        return fromRect(iv);\n    };\n    /**\n     * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinates for which to get a value marker bounding box for\n    */\n    IgrStackedFragmentSeries.prototype.getSeriesValueMarkerBoundingBox = function (world) {\n        var iv = this.i.iq(toPoint(world));\n        return fromRect(iv);\n    };\n    IgrStackedFragmentSeries.prototype.getSeriesHighValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.a6(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrStackedFragmentSeries.prototype.getSeriesHighValuePosition = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.ie(toPoint(world), useInterpolation, skipUnknowns);\n        return fromPoint(iv);\n    };\n    IgrStackedFragmentSeries.prototype.getSeriesLowValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.a8(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrStackedFragmentSeries.prototype.getSeriesLowValuePosition = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.ih(toPoint(world), useInterpolation, skipUnknowns);\n        return fromPoint(iv);\n    };\n    IgrStackedFragmentSeries.prototype.getSeriesValuePositionFromSeriesPixel = function (mouse, useInterpolation, skipUnknowns) {\n        var iv = this.i.ik(toPoint(mouse), useInterpolation, skipUnknowns);\n        return fromPoint(iv);\n    };\n    IgrStackedFragmentSeries.prototype.getSeriesValueFromSeriesPixel = function (mouse, useInterpolation, skipUnknowns) {\n        var iv = this.i.bb(toPoint(mouse), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    */\n    IgrStackedFragmentSeries.prototype.getItemSpan = function () {\n        var iv = this.i.a5();\n        return (iv);\n    };\n    /**\n     * Converts a point from coordinates within the series plot area to a world position within axis space.\n    \r\n    * @param seriesPoint  * The pixel location within the plot area of the series.\n    */\n    IgrStackedFragmentSeries.prototype.toWorldPosition = function (seriesPoint) {\n        var iv = this.i.il(toPoint(seriesPoint));\n        return fromPoint(iv);\n    };\n    /**\n     * Converts a point from world coordinates to coordinates within the viewport of the series.\n    \r\n    * @param world  * The world position from which to convert.\n    */\n    IgrStackedFragmentSeries.prototype.fromWorldPosition = function (world) {\n        var iv = this.i.id(toPoint(world));\n        return fromPoint(iv);\n    };\n    /**\n     * Requests that the provided item should be brought into view if possible.\n    \r\n    * @param item  * The item to attempt to bring into view.\n    */\n    IgrStackedFragmentSeries.prototype.scrollIntoView = function (item) {\n        var iv = this.i.ak(item);\n        return (iv);\n    };\n    /**\n     * Gets the effective viewport, adjusted to account for margins and other factors.\n    \r\n    */\n    IgrStackedFragmentSeries.prototype.getEffectiveViewport = function () {\n        var iv = this.i.im();\n        return fromRect(iv);\n    };\n    /**\n     * Notifies the series that a visual property has changed, requiring a visual update.\n    \r\n    */\n    IgrStackedFragmentSeries.prototype.notifyVisualPropertiesChanged = function () {\n        this.i.d8();\n    };\n    /**\n     * Simulates a pointer hover over the series surface.\n    \r\n    * @param point  * The pointer position relative to the series viewport over which to hover.\n    */\n    IgrStackedFragmentSeries.prototype.simulateHover = function (point) {\n        this.i.ec(toPoint(point));\n    };\n    /**\n     * Moves the cursor point to the provided world position. Some series may react to the current cursor position.\n    \r\n    * @param point  * The cursor point, in world coordinates.\n    */\n    IgrStackedFragmentSeries.prototype.moveCursorPoint = function (point) {\n        this.i.d7(toPoint(point));\n    };\n    Object.defineProperty(IgrStackedFragmentSeries.prototype, \"propertyUpdated\", {\n        /**\n         * Event raised when a property (including \"effective\" and non-dependency property) value changes.\n        */\n        get: function () {\n            return this._propertyUpdated;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._propertyUpdated_wrapped !== null) {\n                this.i.propertyUpdated = delegateRemove(this.i.propertyUpdated, this._propertyUpdated_wrapped);\n                this._propertyUpdated_wrapped = null;\n                this._propertyUpdated = null;\n            }\n            this._propertyUpdated = ev;\n            this._propertyUpdated_wrapped = function (o, e) {\n                var outerArgs = new IgrPropertyUpdatedEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforePropertyUpdated) {\n                    _this.beforePropertyUpdated(_this, outerArgs);\n                }\n                if (_this._propertyUpdated) {\n                    _this._propertyUpdated(_this, outerArgs);\n                }\n            };\n            this.i.propertyUpdated = delegateCombine(this.i.propertyUpdated, this._propertyUpdated_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IgrStackedFragmentSeries;\n}(React.Component));\nexport { IgrStackedFragmentSeries };\n//# sourceMappingURL=igr-stacked-fragment-series.js.map\n"]},"metadata":{},"sourceType":"module"}