{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"chart\", \"style\", \"className\", \"chartRef\", \"onReady\"],\n      _excluded2 = [\"data\"],\n      _excluded3 = [\"data\"];\nimport React, { forwardRef, useRef, useEffect, useImperativeHandle } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport cloneDeep from 'lodash/cloneDeep';\n\nconst syncRef = (source, target) => {\n  /* istanbul ignore else */\n  if (typeof target === 'function') {\n    target(source.current);\n  } else if (target) {\n    target.current = source.current;\n  }\n};\n\nconst BaseChart = (props, ref) => {\n  const {\n    chart: Chart,\n    style,\n    className,\n    chartRef: chart,\n    onReady\n  } = props,\n        restProps = _objectWithoutProperties(props, _excluded);\n\n  const chartRef = useRef(null);\n  const configRef = useRef();\n  const containerRef = useRef(null);\n  const isFirstRenderRef = useRef(true);\n  const dataRef = useRef([]);\n  useImperativeHandle(ref, () => containerRef.current);\n  useEffect(() => {\n    const {\n      current: container\n    } = containerRef;\n    /* istanbul ignore else */\n\n    if (container) {\n      const _ref = restProps,\n            {\n        data\n      } = _ref,\n            config = _objectWithoutProperties(_ref, _excluded2);\n\n      configRef.current = cloneDeep(config);\n      const normalizedData = data || [];\n      dataRef.current = normalizedData;\n\n      const mergedConfig = _objectSpread(_objectSpread({}, config), {}, {\n        data: normalizedData\n      });\n\n      chartRef.current = new Chart(container, mergedConfig);\n      chartRef.current.render();\n    }\n\n    syncRef(chartRef, chart);\n\n    if (chartRef.current) {\n      onReady === null || onReady === void 0 ? void 0 : onReady(chartRef.current);\n    }\n\n    return () => {\n      /* istanbul ignore else */\n      if (chartRef.current) {\n        chartRef.current.destroy();\n        chartRef.current = null;\n        syncRef(chartRef, chart);\n      }\n    }; // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    const {\n      current: chart\n    } = chartRef;\n    /* istanbul ignore else */\n\n    if (chart) {\n      // avoid update in first time\n      if (!isFirstRenderRef.current) {\n        const _ref2 = restProps,\n              {\n          data\n        } = _ref2,\n              config = _objectWithoutProperties(_ref2, _excluded3);\n\n        const normalizedData = data || [];\n\n        if (!isEqual(config, configRef.current) || isEmpty(dataRef.current)) {\n          configRef.current = cloneDeep(config);\n\n          const mergedConfig = _objectSpread(_objectSpread({}, config), {}, {\n            data: normalizedData\n          });\n\n          chart.update(mergedConfig);\n          chart.render();\n        } else {\n          chart.changeData(normalizedData);\n        }\n\n        dataRef.current = normalizedData;\n      } else {\n        isFirstRenderRef.current = false;\n      }\n    }\n  }, [restProps]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: style,\n    className: className,\n    ref: containerRef\n  });\n};\n\nexport default /*#__PURE__*/forwardRef(BaseChart);","map":{"version":3,"sources":["C:/Users/Othman/Documents/space4staff/Client/node_modules/@opd/g2plot-react/es/components/base/index.js"],"names":["_objectSpread","_objectWithoutProperties","_excluded","_excluded2","_excluded3","React","forwardRef","useRef","useEffect","useImperativeHandle","isEqual","isEmpty","cloneDeep","syncRef","source","target","current","BaseChart","props","ref","chart","Chart","style","className","chartRef","onReady","restProps","configRef","containerRef","isFirstRenderRef","dataRef","container","_ref","data","config","normalizedData","mergedConfig","render","destroy","_ref2","update","changeData","createElement"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"chart\", \"style\", \"className\", \"chartRef\", \"onReady\"],\n      _excluded2 = [\"data\"],\n      _excluded3 = [\"data\"];\nimport React, { forwardRef, useRef, useEffect, useImperativeHandle } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport cloneDeep from 'lodash/cloneDeep';\n\nconst syncRef = (source, target) => {\n  /* istanbul ignore else */\n  if (typeof target === 'function') {\n    target(source.current);\n  } else if (target) {\n    target.current = source.current;\n  }\n};\n\nconst BaseChart = (props, ref) => {\n  const {\n    chart: Chart,\n    style,\n    className,\n    chartRef: chart,\n    onReady\n  } = props,\n        restProps = _objectWithoutProperties(props, _excluded);\n\n  const chartRef = useRef(null);\n  const configRef = useRef();\n  const containerRef = useRef(null);\n  const isFirstRenderRef = useRef(true);\n  const dataRef = useRef([]);\n  useImperativeHandle(ref, () => containerRef.current);\n  useEffect(() => {\n    const {\n      current: container\n    } = containerRef;\n    /* istanbul ignore else */\n\n    if (container) {\n      const _ref = restProps,\n            {\n        data\n      } = _ref,\n            config = _objectWithoutProperties(_ref, _excluded2);\n\n      configRef.current = cloneDeep(config);\n      const normalizedData = data || [];\n      dataRef.current = normalizedData;\n\n      const mergedConfig = _objectSpread(_objectSpread({}, config), {}, {\n        data: normalizedData\n      });\n\n      chartRef.current = new Chart(container, mergedConfig);\n      chartRef.current.render();\n    }\n\n    syncRef(chartRef, chart);\n\n    if (chartRef.current) {\n      onReady === null || onReady === void 0 ? void 0 : onReady(chartRef.current);\n    }\n\n    return () => {\n      /* istanbul ignore else */\n      if (chartRef.current) {\n        chartRef.current.destroy();\n        chartRef.current = null;\n        syncRef(chartRef, chart);\n      }\n    }; // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    const {\n      current: chart\n    } = chartRef;\n    /* istanbul ignore else */\n\n    if (chart) {\n      // avoid update in first time\n      if (!isFirstRenderRef.current) {\n        const _ref2 = restProps,\n              {\n          data\n        } = _ref2,\n              config = _objectWithoutProperties(_ref2, _excluded3);\n\n        const normalizedData = data || [];\n\n        if (!isEqual(config, configRef.current) || isEmpty(dataRef.current)) {\n          configRef.current = cloneDeep(config);\n\n          const mergedConfig = _objectSpread(_objectSpread({}, config), {}, {\n            data: normalizedData\n          });\n\n          chart.update(mergedConfig);\n          chart.render();\n        } else {\n          chart.changeData(normalizedData);\n        }\n\n        dataRef.current = normalizedData;\n      } else {\n        isFirstRenderRef.current = false;\n      }\n    }\n  }, [restProps]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: style,\n    className: className,\n    ref: containerRef\n  });\n};\n\nexport default /*#__PURE__*/forwardRef(BaseChart);"]},"metadata":{},"sourceType":"module"}