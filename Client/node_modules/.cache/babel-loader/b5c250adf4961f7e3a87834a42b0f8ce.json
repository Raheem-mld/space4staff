{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { WilliamsPercentRIndicator } from \"./WilliamsPercentRIndicator\";\n/**\n * Represents a IgxDataChartComponent Williams %R indicator series.\n * Default required members: High, Low, Close\n*\n* The `IgrWilliamsPercentRIndicator` scale ranges from 0 to -100. It is useful for identifying overbought and oversold securities.\n* The `IgrWilliamsPercentRIndicator` is calculated by dividing the difference between the highest high for the period and the current close by the highest high minus the lowest low for the period.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*     <IgrWilliamsPercentRIndicator\n*         name=\"series1\"\n*         xAxisName=\"xAxis\"\n*         yAxisName=\"yAxis\"\n* \t\topenMemberPath=\"Open\"\n* \t\tcloseMemberPath=\"close\"\n*         highMemberPath=\"High\"\n*         lowMemberPath=\"Low\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrWilliamsPercentRIndicator({name: \"series\"});\n* series.xAxis = this.xAxis;\n* series.yAxis = this.yAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* this.chart.series.add(series);\n* ```\n*/\n\nvar IgrWilliamsPercentRIndicator =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrWilliamsPercentRIndicator, _super);\n\n  function IgrWilliamsPercentRIndicator(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrWilliamsPercentRIndicator.prototype.createImplementation = function () {\n    return new WilliamsPercentRIndicator();\n  };\n\n  Object.defineProperty(IgrWilliamsPercentRIndicator.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrWilliamsPercentRIndicator.prototype, \"period\", {\n    /**\n     * Gets or sets the moving average period for the current StandardDeviationIndicator object.\n     * The typical, and initial, value for Williams %R periods is 14.\n    *\n    * Gets or sets the `period` for the moving average period.\n    *\n    * The typical, and initial, value for Williams %R periods is 14.\n    *\n    * ```ts\n    * this.series.period = 30;\n    * ```\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *     <IgrWilliamsPercentRIndicator\n    *         name=\"series1\"\n    *         xAxisName=\"xAxis\"\n    *         yAxisName=\"yAxis\"\n    * \t\topenMemberPath=\"Open\"\n    * \t\tcloseMemberPath=\"close\"\n    *         highMemberPath=\"High\"\n    *         lowMemberPath=\"Low\"\n    * \t\tperiod={30} />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ug;\n    },\n    set: function (v) {\n      this.i.ug = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return IgrWilliamsPercentRIndicator;\n}(IgrStrategyBasedIndicator);\n\nexport { IgrWilliamsPercentRIndicator };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-williams-percent-r-indicator.ts"],"names":[],"mappings":";AAKA,SAAS,yBAAT,QAA2E,gCAA3E;AAIA,SAAS,yBAAT,QAA0C,6BAA1C;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCE;;AACF,IAAA,4BAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkD,EAAA,SAAA,CAAA,4BAAA,EAAA,MAAA,CAAA;;AAajD,WAAA,4BAAA,CAAY,KAAZ,EAAqD;WACpD,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,4BAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,yBAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,4BAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;AAE+B;SACH,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;qBAAA;;AAAA,GAAZ;AAuC5B,EAAA,MAAA,CAAA,cAAA,CAAI,4BAAA,CAAA,SAAJ,EAAI,QAAJ,EAAU;AAjCV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCE;SACF,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFS;SAGV,UAAW,CAAX,EAAoB;AACnB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALS;qBAAA;;AAAA,GAAV;AAMD,SAAA,4BAAA;AAAC,CAvDD,CAAkD,yBAAlD,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { WilliamsPercentRIndicator } from \"./WilliamsPercentRIndicator\";\n/**\n * Represents a IgxDataChartComponent Williams %R indicator series.\n * Default required members: High, Low, Close\n*\n* The `IgrWilliamsPercentRIndicator` scale ranges from 0 to -100. It is useful for identifying overbought and oversold securities.\n* The `IgrWilliamsPercentRIndicator` is calculated by dividing the difference between the highest high for the period and the current close by the highest high minus the lowest low for the period.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*     <IgrWilliamsPercentRIndicator\n*         name=\"series1\"\n*         xAxisName=\"xAxis\"\n*         yAxisName=\"yAxis\"\n* \t\topenMemberPath=\"Open\"\n* \t\tcloseMemberPath=\"close\"\n*         highMemberPath=\"High\"\n*         lowMemberPath=\"Low\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrWilliamsPercentRIndicator({name: \"series\"});\n* series.xAxis = this.xAxis;\n* series.yAxis = this.yAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* this.chart.series.add(series);\n* ```\n*/\nvar IgrWilliamsPercentRIndicator = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrWilliamsPercentRIndicator, _super);\n    function IgrWilliamsPercentRIndicator(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrWilliamsPercentRIndicator.prototype.createImplementation = function () {\n        return new WilliamsPercentRIndicator();\n    };\n    Object.defineProperty(IgrWilliamsPercentRIndicator.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrWilliamsPercentRIndicator.prototype, \"period\", {\n        /**\n         * Gets or sets the moving average period for the current StandardDeviationIndicator object.\n         * The typical, and initial, value for Williams %R periods is 14.\n        *\n        * Gets or sets the `period` for the moving average period.\n        *\n        * The typical, and initial, value for Williams %R periods is 14.\n        *\n        * ```ts\n        * this.series.period = 30;\n        * ```\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *     <IgrWilliamsPercentRIndicator\n        *         name=\"series1\"\n        *         xAxisName=\"xAxis\"\n        *         yAxisName=\"yAxis\"\n        * \t\topenMemberPath=\"Open\"\n        * \t\tcloseMemberPath=\"close\"\n        *         highMemberPath=\"High\"\n        *         lowMemberPath=\"Low\"\n        * \t\tperiod={30} />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ug;\n        },\n        set: function (v) {\n            this.i.ug = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IgrWilliamsPercentRIndicator;\n}(IgrStrategyBasedIndicator));\nexport { IgrWilliamsPercentRIndicator };\n//# sourceMappingURL=igr-williams-percent-r-indicator.js.map\n"]},"metadata":{},"sourceType":"module"}