{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { AxisDescriptionMetadata } from \"./AxisDescriptionMetadata\";\n/**\n * @hidden\n */\n\nvar NumericAxisBaseDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(NumericAxisBaseDescriptionMetadata, _super);\n\n  function NumericAxisBaseDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NumericAxisBaseDescriptionMetadata.b = function (a) {\n    if (NumericAxisBaseDescriptionMetadata.a == null) {\n      NumericAxisBaseDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      NumericAxisBaseDescriptionMetadata.c(NumericAxisBaseDescriptionMetadata.a);\n    }\n\n    if (a.g(NumericAxisBaseDescriptionMetadata.a)) {\n      return;\n    }\n\n    a.s(NumericAxisBaseDescriptionMetadata.a);\n  };\n\n  NumericAxisBaseDescriptionMetadata.c = function (a) {\n    AxisDescriptionMetadata.c(a);\n    a.item(\"MinimumValue\", \"Number:double\");\n    a.item(\"ActualMinimumValue\", \"Number:double\");\n    a.item(\"ActualVisibleMinimumValue\", \"Number:double\");\n    a.item(\"MaximumValue\", \"Number:double\");\n    a.item(\"ActualMaximumValue\", \"Number:double\");\n    a.item(\"ActualVisibleMaximumValue\", \"Number:double\");\n    a.item(\"Interval\", \"Number:double\");\n    a.item(\"ActualInterval\", \"Number:double\");\n    a.item(\"MinorInterval\", \"Number:double\");\n    a.item(\"ActualMinorInterval\", \"Number:double\");\n    a.item(\"ReferenceValue\", \"Number:double\");\n    a.item(\"IsLogarithmic\", \"Boolean\");\n    a.item(\"ActualIsLogarithmic\", \"Boolean\");\n    a.item(\"LogarithmBase\", \"Number:int\");\n    a.item(\"AbbreviateLargeNumbers\", \"Boolean\");\n    a.item(\"ActualMinimumValueChangeRef\", \"EventRef::actualMinimumValueChange\");\n    a.item(\"ActualMaximumValueChangeRef\", \"EventRef::actualMaximumValueChange\");\n    a.item(\"ActualIntervalChangeRef\", \"EventRef::actualIntervalChange\");\n    a.item(\"ActualMinorIntervalChangeRef\", \"EventRef::actualMinorIntervalChange\");\n  };\n\n  NumericAxisBaseDescriptionMetadata.d = function (a) {\n    NumericAxisBaseDescriptionMetadata.b(a);\n    a.t(\"NumericAxisBase\", NumericAxisBaseDescriptionMetadata.a);\n  };\n\n  NumericAxisBaseDescriptionMetadata.$t = markType(NumericAxisBaseDescriptionMetadata, 'NumericAxisBaseDescriptionMetadata');\n  NumericAxisBaseDescriptionMetadata.a = null;\n  return NumericAxisBaseDescriptionMetadata;\n}(Base);\n\nexport { NumericAxisBaseDescriptionMetadata };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/NumericAxisBaseDescriptionMetadata.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,IAAT,EAAe,YAAf,EAAmC,QAAnC,QAAmD,QAAnD;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,uBAAT,QAAwC,2BAAxC;AAEA;;AAEG;;AACH,IAAA,kCAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwD,EAAA,SAAA,CAAA,kCAAA,EAAA,MAAA,CAAA;;AAAxD,WAAA,kCAAA,GAAA;;AAuCC;;AApCe,EAAA,kCAAA,CAAA,CAAA,GAAf,UAAiB,CAAjB,EAA0C;AACzC,QAAI,kCAAkC,CAAC,CAAnC,IAAwC,IAA5C,EAAkD;AACjD,MAAA,kCAAkC,CAAC,CAAnC,GAAuC,IAAI,YAAJ,CAAiC,YAAjC,EAA+C,YAA/C,EAA6D,CAA7D,CAAvC;AACA,MAAA,kCAAkC,CAAC,CAAnC,CAAqC,kCAAkC,CAAC,CAAxE;AACA;;AACD,QAAI,CAAC,CAAC,CAAF,CAAI,kCAAkC,CAAC,CAAvC,CAAJ,EAA+C;AAC9C;AACA;;AACD,IAAA,CAAC,CAAC,CAAF,CAAI,kCAAkC,CAAC,CAAvC;AACA,GATc;;AAUR,EAAA,kCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAwC;AACvC,IAAA,uBAAuB,CAAC,CAAxB,CAA0B,CAA1B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,cAAP,EAAuB,eAAvB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,oBAAP,EAA6B,eAA7B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,2BAAP,EAAoC,eAApC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,cAAP,EAAuB,eAAvB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,oBAAP,EAA6B,eAA7B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,2BAAP,EAAoC,eAApC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,UAAP,EAAmB,eAAnB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,eAAzB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,eAAP,EAAwB,eAAxB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,qBAAP,EAA8B,eAA9B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,eAAzB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,eAAP,EAAwB,SAAxB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,qBAAP,EAA8B,SAA9B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,eAAP,EAAwB,YAAxB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,wBAAP,EAAiC,SAAjC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,6BAAP,EAAsC,oCAAtC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,6BAAP,EAAsC,oCAAtC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,yBAAP,EAAkC,gCAAlC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,8BAAP,EAAuC,qCAAvC;AACA,GArBM;;AAsBA,EAAA,kCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAkC;AACjC,IAAA,kCAAkC,CAAC,CAAnC,CAAqC,CAArC;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,iBAAJ,EAAuB,kCAAkC,CAAC,CAA1D;AACA,GAHM;;AAlCA,EAAA,kCAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,kCAAD,EAAqC,oCAArC,CAAnB;AACQ,EAAA,kCAAA,CAAA,CAAA,GAAkC,IAAlC;AAqChB,SAAA,kCAAA;AAAC,CAvCD,CAAwD,IAAxD,CAAA;;SAAa,kC","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { AxisDescriptionMetadata } from \"./AxisDescriptionMetadata\";\n/**\n * @hidden\n */\nvar NumericAxisBaseDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NumericAxisBaseDescriptionMetadata, _super);\n    function NumericAxisBaseDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NumericAxisBaseDescriptionMetadata.b = function (a) {\n        if (NumericAxisBaseDescriptionMetadata.a == null) {\n            NumericAxisBaseDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            NumericAxisBaseDescriptionMetadata.c(NumericAxisBaseDescriptionMetadata.a);\n        }\n        if (a.g(NumericAxisBaseDescriptionMetadata.a)) {\n            return;\n        }\n        a.s(NumericAxisBaseDescriptionMetadata.a);\n    };\n    NumericAxisBaseDescriptionMetadata.c = function (a) {\n        AxisDescriptionMetadata.c(a);\n        a.item(\"MinimumValue\", \"Number:double\");\n        a.item(\"ActualMinimumValue\", \"Number:double\");\n        a.item(\"ActualVisibleMinimumValue\", \"Number:double\");\n        a.item(\"MaximumValue\", \"Number:double\");\n        a.item(\"ActualMaximumValue\", \"Number:double\");\n        a.item(\"ActualVisibleMaximumValue\", \"Number:double\");\n        a.item(\"Interval\", \"Number:double\");\n        a.item(\"ActualInterval\", \"Number:double\");\n        a.item(\"MinorInterval\", \"Number:double\");\n        a.item(\"ActualMinorInterval\", \"Number:double\");\n        a.item(\"ReferenceValue\", \"Number:double\");\n        a.item(\"IsLogarithmic\", \"Boolean\");\n        a.item(\"ActualIsLogarithmic\", \"Boolean\");\n        a.item(\"LogarithmBase\", \"Number:int\");\n        a.item(\"AbbreviateLargeNumbers\", \"Boolean\");\n        a.item(\"ActualMinimumValueChangeRef\", \"EventRef::actualMinimumValueChange\");\n        a.item(\"ActualMaximumValueChangeRef\", \"EventRef::actualMaximumValueChange\");\n        a.item(\"ActualIntervalChangeRef\", \"EventRef::actualIntervalChange\");\n        a.item(\"ActualMinorIntervalChangeRef\", \"EventRef::actualMinorIntervalChange\");\n    };\n    NumericAxisBaseDescriptionMetadata.d = function (a) {\n        NumericAxisBaseDescriptionMetadata.b(a);\n        a.t(\"NumericAxisBase\", NumericAxisBaseDescriptionMetadata.a);\n    };\n    NumericAxisBaseDescriptionMetadata.$t = markType(NumericAxisBaseDescriptionMetadata, 'NumericAxisBaseDescriptionMetadata');\n    NumericAxisBaseDescriptionMetadata.a = null;\n    return NumericAxisBaseDescriptionMetadata;\n}(Base));\nexport { NumericAxisBaseDescriptionMetadata };\n//# sourceMappingURL=NumericAxisBaseDescriptionMetadata.js.map\n"]},"metadata":{},"sourceType":"module"}