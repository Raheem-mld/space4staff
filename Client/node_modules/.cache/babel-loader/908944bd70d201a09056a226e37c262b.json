{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrNumericAxisBase } from \"./igr-numeric-axis-base\";\nimport { NumericRadiusAxis } from \"./NumericRadiusAxis\";\n/**\n * Represents a IgxDataChartComponent radius axis for polar and radial series.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}   >\n*\n*     <IgrCategoryAngleAxis name=\"angleAxis\" label=\"Department\" />\n*     <IgrNumericRadiusAxis name=\"radiusAxis\" />\n*\n* </IgrDataChart>\n* ```\n*\n* ```ts\n* this.series1.angleAxisName = \"AngleAxis\";\n* this.series1.valueAxisName = \"numericYAxis\";\n* ```\n*/\n\nvar IgrNumericRadiusAxis =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrNumericRadiusAxis, _super);\n\n  function IgrNumericRadiusAxis(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrNumericRadiusAxis.prototype.createImplementation = function () {\n    return new NumericRadiusAxis();\n  };\n\n  Object.defineProperty(IgrNumericRadiusAxis.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrNumericRadiusAxis.prototype, \"isRadial\", {\n    /**\n     * Checks if the axis is of radial axis type\n    *\n    * ```ts\n    * let isRadial: boolean = this.series.isRadial;\n    * ```\n    */\n    get: function () {\n      return this.i.cg;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrNumericRadiusAxis.prototype, \"radiusExtentScale\", {\n    /**\n     * Defines the percentage of the maximum radius extent to use as the maximum radius. Should be\n     * a value between 0.0 and 1.0.\n    */\n    get: function () {\n      return this.i.mk;\n    },\n    set: function (v) {\n      this.i.mk = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrNumericRadiusAxis.prototype, \"innerRadiusExtentScale\", {\n    /**\n     * Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be\n     * a value between 0.0 and 1.0.\n    */\n    get: function () {\n      return this.i.mj;\n    },\n    set: function (v) {\n      this.i.mj = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Returns a world coordinates radius length (0 - 0.5) from a raw axis value.\n  \r\n  * @param unscaledValue  * The raw axis value.\n  */\n\n  IgrNumericRadiusAxis.prototype.getScaledValue = function (unscaledValue) {\n    var iv = this.i.mg(unscaledValue);\n    return iv;\n  };\n  /**\n   * Returns a raw axis value from the world coordinates radius length provided.\n  \r\n  * @param scaledValue  * The scaled world coordinates radius length.\n  *\n  * Class containing several properties which are used as parameters passed to scaling operations in a `IgrSeriesViewer`.\n  */\n\n\n  IgrNumericRadiusAxis.prototype.getUnscaledValue = function (scaledValue) {\n    var iv = this.i.mi(scaledValue);\n    return iv;\n  };\n\n  return IgrNumericRadiusAxis;\n}(IgrNumericAxisBase);\n\nexport { IgrNumericRadiusAxis };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-numeric-radius-axis.ts"],"names":[],"mappings":";AAKA,SAAS,kBAAT,QAA6D,yBAA7D;AAEA,SAAS,iBAAT,QAAkC,qBAAlC;AAGA;;;;;;;;;;;;;;;;;AAiBE;;AACF,IAAA,oBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,SAAA,CAAA,oBAAA,EAAA,MAAA,CAAA;;AAazC,WAAA,oBAAA,CAAY,KAAZ,EAA6C;WAC5C,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,oBAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,iBAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;AAE+B;SACH,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;qBAAA;;AAAA,GAAZ;AAa5B,EAAA,MAAA,CAAA,cAAA,CAAI,oBAAA,CAAA,SAAJ,EAAI,UAAJ,EAAY;AAPZ;;;;;;AAME;SACF,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFW;qBAAA;;AAAA,GAAZ;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,oBAAA,CAAA,SAAJ,EAAI,mBAAJ,EAAqB;AAJrB;;;AAGE;SACF,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFoB;SAGrB,UAAsB,CAAtB,EAA+B;AAC9B,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALoB;qBAAA;;AAAA,GAArB;AAUA,EAAA,MAAA,CAAA,cAAA,CAAI,oBAAA,CAAA,SAAJ,EAAI,wBAAJ,EAA0B;AAJ1B;;;AAGE;SACF,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFyB;SAG1B,UAA2B,CAA3B,EAAoC;AACnC,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALyB;qBAAA;;AAAA,GAA1B;AAMA;;;;AAIE;;AACK,EAAA,oBAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,aAAtB,EAA2C;AAC1C,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,aAAV,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;AAIP;;;;;;AAME;;;AACK,EAAA,oBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,WAAxB,EAA2C;AAC1C,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,WAAV,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIR,SAAA,oBAAA;AAAC,CAlED,CAA0C,kBAA1C,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrNumericAxisBase } from \"./igr-numeric-axis-base\";\nimport { NumericRadiusAxis } from \"./NumericRadiusAxis\";\n/**\n * Represents a IgxDataChartComponent radius axis for polar and radial series.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}   >\n*\n*     <IgrCategoryAngleAxis name=\"angleAxis\" label=\"Department\" />\n*     <IgrNumericRadiusAxis name=\"radiusAxis\" />\n*\n* </IgrDataChart>\n* ```\n*\n* ```ts\n* this.series1.angleAxisName = \"AngleAxis\";\n* this.series1.valueAxisName = \"numericYAxis\";\n* ```\n*/\nvar IgrNumericRadiusAxis = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrNumericRadiusAxis, _super);\n    function IgrNumericRadiusAxis(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrNumericRadiusAxis.prototype.createImplementation = function () {\n        return new NumericRadiusAxis();\n    };\n    Object.defineProperty(IgrNumericRadiusAxis.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrNumericRadiusAxis.prototype, \"isRadial\", {\n        /**\n         * Checks if the axis is of radial axis type\n        *\n        * ```ts\n        * let isRadial: boolean = this.series.isRadial;\n        * ```\n        */\n        get: function () {\n            return this.i.cg;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrNumericRadiusAxis.prototype, \"radiusExtentScale\", {\n        /**\n         * Defines the percentage of the maximum radius extent to use as the maximum radius. Should be\n         * a value between 0.0 and 1.0.\n        */\n        get: function () {\n            return this.i.mk;\n        },\n        set: function (v) {\n            this.i.mk = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrNumericRadiusAxis.prototype, \"innerRadiusExtentScale\", {\n        /**\n         * Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be\n         * a value between 0.0 and 1.0.\n        */\n        get: function () {\n            return this.i.mj;\n        },\n        set: function (v) {\n            this.i.mj = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns a world coordinates radius length (0 - 0.5) from a raw axis value.\n    \r\n    * @param unscaledValue  * The raw axis value.\n    */\n    IgrNumericRadiusAxis.prototype.getScaledValue = function (unscaledValue) {\n        var iv = this.i.mg(unscaledValue);\n        return (iv);\n    };\n    /**\n     * Returns a raw axis value from the world coordinates radius length provided.\n    \r\n    * @param scaledValue  * The scaled world coordinates radius length.\n    *\n    * Class containing several properties which are used as parameters passed to scaling operations in a `IgrSeriesViewer`.\n    */\n    IgrNumericRadiusAxis.prototype.getUnscaledValue = function (scaledValue) {\n        var iv = this.i.mi(scaledValue);\n        return (iv);\n    };\n    return IgrNumericRadiusAxis;\n}(IgrNumericAxisBase));\nexport { IgrNumericRadiusAxis };\n//# sourceMappingURL=igr-numeric-radius-axis.js.map\n"]},"metadata":{},"sourceType":"module"}