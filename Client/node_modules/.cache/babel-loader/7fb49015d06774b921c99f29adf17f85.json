{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends, __values } from \"tslib\";\nimport * as React from 'react';\nimport { Visibility_$type } from \"igniteui-react-core\";\nimport { HorizontalAlignment_$type } from \"igniteui-react-core\";\nimport { VerticalAlignment_$type } from \"igniteui-react-core\";\nimport { AxisLabelsLocation_$type } from './AxisLabelsLocation';\nimport { AxisLabelSettings } from './AxisLabelSettings';\nimport { TitleSettings } from './TitleSettings';\nimport { AxisTitlePosition_$type } from './AxisTitlePosition';\nimport { ensureEnum, arrayFindByName, brushToString, stringToBrush, ensureBool, isValidProp, getModifiedProps, toSpinal, initializePropertiesFromCss, NamePatcher } from \"igniteui-react-core\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { IgrRenderRequestedEventArgs } from './igr-render-requested-event-args';\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { IgrAxisRangeChangedEventArgs } from './igr-axis-range-changed-event-args';\nimport { IgrAxisAnnotationCollection } from './igr-axis-annotation-collection';\nimport { AxisAnnotationCollection as AxisAnnotationCollection_internal } from './AxisAnnotationCollection';\nimport { SyncableObservableCollection$1 } from \"igniteui-react-core\";\nimport { IAxisAnnotation_$type } from './IAxisAnnotation';\n/**\n * Represents the base class from which all axis types are derived.\n*\n* The `IgrAxis` is an array of axis objects.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*  </IgrDataChart>\n* ```\n*/\n\nvar IgrAxis =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrAxis, _super);\n\n  function IgrAxis(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._renderer = null;\n    _this._crossingAxisName = null;\n    _this._annotations = null;\n    _this.__p = null;\n    _this._hasUserValues = new Set();\n    _this._stylingContainer = null;\n    _this._stylingParent = null;\n    _this._inStyling = false;\n    _this._rangeChanged = null;\n    _this._rangeChanged_wrapped = null;\n    _this._renderRequested = null;\n    _this._renderRequested_wrapped = null;\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._implementation = _this.createImplementation();\n    _this._implementation.externalObject = _this;\n\n    _this.onImplementationCreated();\n\n    return _this;\n  }\n\n  Object.defineProperty(IgrAxis.prototype, \"i\", {\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrAxis.prototype.onImplementationCreated = function () {};\n\n  IgrAxis.prototype.componentDidMount = function () {\n    var e_1, _a;\n\n    {\n      try {\n        for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var p = _c.value;\n          {\n            if (isValidProp(this, p)) {\n              {\n                this[p] = this.props[p];\n              }\n            }\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(IgrAxis.prototype, \"axisInternal\", {\n    //private _crossingAxisName: string;\n    //public set crossingAxisName(value: string) {\n    //    this._crossingAxisName = value;\n    //}\n    //public get crossingAxisName(): string {\n    //    return this._crossingAxisName;\n    //}\n    get: function () {\n      return this.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrAxis.prototype.createImplementation = function () {\n    return null;\n  };\n\n  IgrAxis.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var e_2, _a;\n\n    var mod = getModifiedProps(this.props, nextProps);\n\n    try {\n      for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = mod[p];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return true;\n  };\n\n  IgrAxis.prototype.render = function () {\n    return null;\n  };\n\n  Object.defineProperty(IgrAxis.prototype, \"name\", {\n    get: function () {\n      return this.i.name;\n    },\n    set: function (value) {\n      this.i.name = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrAxis.prototype.provideData = function (data) {};\n\n  IgrAxis.prototype._provideRenderer = function (renderer) {\n    this._renderer = renderer;\n  };\n\n  IgrAxis._createFromInternal = function (internal) {\n    if (!internal) {\n      return null;\n    }\n\n    if (!internal.$type) {\n      return null;\n    }\n\n    var name = internal.$type.name;\n    var externalName = \"Igr\" + name;\n\n    if (!TypeRegistrar.isRegistered(externalName)) {\n      return null;\n    }\n\n    return TypeRegistrar.create(externalName);\n  };\n\n  Object.defineProperty(IgrAxis.prototype, \"isCategory\", {\n    /**\n    * Gets or sets if the current axis is of category axis type\n    */\n    get: function () {\n      return this.i.b6;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"isNumeric\", {\n    /**\n     * Gets or sets if the current axis is of numeric axis type\n    *\n    *     Gets or sets if the current axis is of numeric axis type\n    */\n    get: function () {\n      return this.i.ce;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"isAngular\", {\n    /**\n     * Gets if the current axis is of angular axis type\n    */\n    get: function () {\n      return this.i.b4;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"isRadial\", {\n    /**\n     * Gets or sets if the current axis is of radial axis type\n    */\n    get: function () {\n      return this.i.cg;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"isVertical\", {\n    /**\n     * Gets if the current axis is a vertical axis.\n    */\n    get: function () {\n      return this.i.cj;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"isSorting\", {\n    /**\n     * Gets or sets if the current axis is sorting data items\n    */\n    get: function () {\n      return this.i.ch;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"isDateTime\", {\n    /**\n     * Gets or sets if the current axis is of date time axis type\n    */\n    get: function () {\n      return this.i.b9;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"isPiecewise\", {\n    /**\n     * Gets or sets if the axis is a piecewise scaling function.\n    */\n    get: function () {\n      return this.i.cf;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"isCategoryDateTime\", {\n    /**\n     * Gets if the current axis is of category date time axis type\n    */\n    get: function () {\n      return this.i.b7;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"isContinuous\", {\n    /**\n     * Gets if the current axis is a continuous rather than a discrete scale\n    */\n    get: function () {\n      return this.i.b8;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"formatLabel\", {\n    /**\n     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.\n    *\n    * The `formatLabel` function takes an object that produces a formatted label for displaying in the chart.\n    *\n    * ```ts\n    * <IgrDataChart dataSource={this.data}   >\n    *     <IgrCategoryXAxis\n    * \t\tname=\"xAxis\"\n    * \t\tFormatLabel=\"xAxis_FormatLabel\" />\n    * </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.at;\n    },\n    set: function (v) {\n      this.i.at = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"title\", {\n    /**\n     * Gets or sets the Title property.\n    *\n    * Use `title` property to display the title of the component.\n    *\n    * ```ts\n    * <IgrCategoryXAxis name=\"xAxis\"\n    *     title=\"Country\"\n    *     titleTextColor=\"gray\"\n    *     titleTextStyle=\"12pt Verdana\"\n    *     titleAngle={90} />\n    * ```\n    */\n    get: function () {\n      return this.i.gp;\n    },\n    set: function (v) {\n      this.i.gp = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"stroke\", {\n    /**\n     * Gets or sets the Stroke property.\n     * Null is treated as auto. The axis stroke will be displayed or not based on the axis type and series used with it.\n    *\n    * Use `stroke` property to set the stroke of the chart.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    *         ref={this.onChartRef}\n    *         width=\"100%\"\n    *         height=\"100%\"\n    *         dataSource={this.data}\n    *         titleTopMargin={5}\n    *         xAxisStroke=\"gray\"/>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.je);\n    },\n    set: function (v) {\n      this.i.je = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"actualStroke\", {\n    /**\n     * Gets or sets the effective stroke used for the axis.\n    */\n    get: function () {\n      return brushToString(this.i.ja);\n    },\n    set: function (v) {\n      this.i.ja = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"strokeThickness\", {\n    /**\n     * Gets or sets the StrokeThickness property.\n    *\n    * Use `strokeThickness` property for the thickness of the stroke.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    *         ref={this.onChartRef}\n    *         width=\"100%\"\n    *         height=\"100%\"\n    *         dataSource={this.data}\n    *         titleTopMargin={5}\n    *         xAxisStrokeThickness={2}>\n    * ```\n    */\n    get: function () {\n      return this.i.ez;\n    },\n    set: function (v) {\n      this.i.ez = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"strip\", {\n    /**\n     * Gets or sets the Strip property.\n    *\n    * Use `strip` property to set the strip of the chart.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    *         ref={this.onChartRef}\n    *         width=\"100%\"\n    *         height=\"100%\"\n    *         dataSource={this.data}\n    *         titleTopMargin={5}\n    *         xAxisStrip=\"gray\"/>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.jd);\n    },\n    set: function (v) {\n      this.i.jd = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"majorStroke\", {\n    /**\n     * Gets or sets the MajorStroke property.\n     * Null is treated as auto. Major lines will be displayed or not based on the axis type and series used with it.\n    *\n    * Gets or sets the `majorStroke` using this property.\n    *\n    * ```ts\n    * <IgrNumericYAxis name=\"yAxis\"\n    *     interval={100}\n    *     majorStroke=\"black\"\n    *     majorStrokeThickness={1}\n    *     minorInterval={25}\n    *     minorStroke=\"gray\"\n    *     minorStrokeThickness={0.5} />\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.jb);\n    },\n    set: function (v) {\n      this.i.jb = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"actualMajorStroke\", {\n    /**\n     * Gets or sets the ActualMajorStroke property.\n    *\n    * The `actualMajorStroke` property is used for ActualMajorStroke of the axis.\n    */\n    get: function () {\n      return brushToString(this.i.i8);\n    },\n    set: function (v) {\n      this.i.i8 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"majorStrokeThickness\", {\n    /**\n     * Gets or sets the MajorStrokeThickness property.\n    *\n    * Gets or sets the `majorStrokeThickness` using this property.\n    *\n    * ```ts\n    * <IgrNumericYAxis name=\"yAxis\"\n    *     interval={100}\n    *     majorStroke=\"black\"\n    *     majorStrokeThickness={1}\n    *     minorInterval={25}\n    *     minorStroke=\"gray\"\n    *     minorStrokeThickness={0.5} />\n    * ```\n    */\n    get: function () {\n      return this.i.ef;\n    },\n    set: function (v) {\n      this.i.ef = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"minorStroke\", {\n    /**\n     * Gets or sets the MinorStroke property.\n    *\n    * Gets or sets the minorStroke thickness using `minorStrokeThickness` property.\n    *\n    * ```ts\n    * <IgrNumericYAxis name=\"yAxis\"\n    *     interval={100}\n    *     majorStroke=\"black\"\n    *     majorStrokeThickness={1}\n    *     minorInterval={25}\n    *     minorStroke=\"gray\"\n    *     minorStrokeThickness={0.5} />\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.jc);\n    },\n    set: function (v) {\n      this.i.jc = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"actualMinorStroke\", {\n    /**\n     * Gets or sets the ActualMinorStroke property.\n    *\n    * The `actualMinorStroke` property is used for ActualMinorStroke of the axis.\n    */\n    get: function () {\n      return brushToString(this.i.i9);\n    },\n    set: function (v) {\n      this.i.i9 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"minorStrokeThickness\", {\n    /**\n     * Gets or sets the MinorStrokeThickness property.\n    */\n    get: function () {\n      return this.i.ei;\n    },\n    set: function (v) {\n      this.i.ei = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"tickStroke\", {\n    /**\n     * Gets or sets the TickStroke property.\n    *\n    * Use `tickStroke` property for the color of the tickmarks.\n    *\n    * ```ts\n    * <IgrCategoryXAxis name=\"xAxis\"\n    *     tickLength={10}\n    *     tickStrokeThickness={0.5}\n    *     tickStroke=\"black\" />\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.jf);\n    },\n    set: function (v) {\n      this.i.jf = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"tickStrokeThickness\", {\n    /**\n     * Gets or sets the TickStrokeThickness property.\n    *\n    * Use `tickStrokeThickness` property for thickness of the stroke tickmarks.\n    *\n    * ```ts\n    * <IgrCategoryXAxis name=\"xAxis\"\n    *     tickLength={10}\n    *     tickStrokeThickness={0.5}\n    *     tickStroke=\"black\" />\n    * ```\n    */\n    get: function () {\n      return this.i.e1;\n    },\n    set: function (v) {\n      this.i.e1 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"tickLength\", {\n    /**\n     * Gets or sets the TickLength property.\n    *\n    * Use `tickLength` property for The length of the tickmarks to display for this axis.\n    *\n    * ```ts\n    * <IgrCategoryXAxis name=\"xAxis\"\n    *     tickLength={10}\n    *     tickStrokeThickness={0.5}\n    *     tickStroke=\"black\" />\n    * ```\n    */\n    get: function () {\n      return this.i.e0;\n    },\n    set: function (v) {\n      this.i.e0 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"isDisabled\", {\n    /**\n     * Gets or sets the IsDisabled property. If true, the axis will not be rendered.\n    *\n    * The `isDisabled` property is used to decide if the axis will not be rendered.\n    */\n    get: function () {\n      return this.i.ca;\n    },\n    set: function (v) {\n      this.i.ca = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"isInverted\", {\n    /**\n     * Gets or sets the IsInverted property.\n    *\n    * Gets or sets the `isInverted` property.\n    */\n    get: function () {\n      return this.i.cc;\n    },\n    set: function (v) {\n      this.i.cc = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"shouldAvoidAnnotationCollisions\", {\n    /**\n     * Gets or sets whether annotations should be shifted to avoid collision, even if this would result in them appearing where they shouldn't be along the scale.\n    */\n    get: function () {\n      return this.i.co;\n    },\n    set: function (v) {\n      this.i.co = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"shouldKeepAnnotationsInView\", {\n    /**\n     * ets or sets whether annotations should be kept in view, even if they aren't positioned where they should appear on the scale.\n    */\n    get: function () {\n      return this.i.cq;\n    },\n    set: function (v) {\n      this.i.cq = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"useEnhancedIntervalManagement\", {\n    /**\n     * Gets or sets whether to use more advanced heuristics when determining the initial number of labels to render, before resolving collisions, etc.\n    *\n    * Use `useEnhancedIntervalManagement` property to gets/sets whether to use more advanced heuristics when determining the initial number of labels to render,\n    * before resolving collisions, etc.\n    */\n    get: function () {\n      return this.i.cy;\n    },\n    set: function (v) {\n      this.i.cy = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"enhancedIntervalMinimumCharacters\", {\n    /**\n     * Gets or sets the minimum desired characters to be displayed for horizontal axes when using advanced label heuristics. -1 will attempt to adjust the interval to precisely fit the horizontal labels.\n    *\n    * The `enhancedIntervalMinimumCharacters` property is used to set the mininum desired characters to be displayed for horizontal axes when using advanced label heuristics.\n    */\n    get: function () {\n      return this.i.e9;\n    },\n    set: function (v) {\n      this.i.e9 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"enhancedIntervalPreferMoreCategoryLabels\", {\n    /**\n     * Gets or sets whether the enhanced interval management should prefer to show all the labels if possible without collisions for supported types of category axes. This is for use with EnhancedIntervalMinimumCharacters = -1 and axes that have an integral interval.\n    */\n    get: function () {\n      return this.i.by;\n    },\n    set: function (v) {\n      this.i.by = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelTextStyle\", {\n    /**\n     * Gets or sets the text style to use for axis labels.\n    *\n    * The `labelTextStyle` property Overrides the style of the text used for the axis labels.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\"\n    * \t\tlabel=\"Year\"\n    * \t\ttitleTextStyle=\"12pt Verdana\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryXAxis name=\"xAxis\"\n    *     title=\"Country\"\n    *     titleTextColor=\"gray\"\n    *     titleTextStyle=\"12pt Verdana\"\n    *     titleAngle={90} />\n    * ```\n    */\n    get: function () {\n      return this.i.ay ? this.i.ay.textStyle : null;\n    },\n    set: function (v) {\n      this.ensureLabelSettings();\n      this.i.ay.textStyle = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelTextColor\", {\n    /**\n     * The color of the {0}.\n    *\n    * The `labelTextColor` property Overrides the color of the text used for the axis labels.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\"\n    * \t\tlabel=\"Year\"\n    * \t\tlabelTextColor=\"gray\"  />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryXAxis name=\"xAxis\"\n    *     title=\"Country\"\n    *     titleTextColor=\"gray\"\n    *     titleTextStyle=\"12pt Verdana\"\n    *     titleAngle={90} />\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.ay ? this.i.ay.textColor : null);\n    },\n    set: function (v) {\n      this.ensureLabelSettings();\n      this.i.ay.textColor = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelLocation\", {\n    /**\n     * Gets or sets the location of the {0}.\n    *\n    * The `Location` property is used for the location.\n    */\n    get: function () {\n      return this.i.ay ? this.i.ay.location : 0;\n    },\n    set: function (v) {\n      this.ensureLabelSettings();\n      this.i.ay.location = ensureEnum(AxisLabelsLocation_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelVisibility\", {\n    /**\n     * Gets or sets the visibility of the {0}.\n    *\n    * The `Visibility` property is used for the visibility of the axis.\n    */\n    get: function () {\n      return this.i.ay ? this.i.ay.visibility : 0;\n    },\n    set: function (v) {\n      this.ensureLabelSettings();\n      this.i.ay.visibility = ensureEnum(Visibility_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelShowFirstLabel\", {\n    /**\n     * Gets or sets whether the first label is displayed when the zoom level is set to 1.\n    *\n    * The `ShowFirstLabel` is used to check whether the first label is displayed when the zoom level is set to 1.\n    */\n    get: function () {\n      return this.i.ay ? this.i.ay.showFirstLabel : false;\n    },\n    set: function (v) {\n      this.ensureLabelSettings();\n      this.i.ay.showFirstLabel = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelAngle\", {\n    /**\n     * Gets or sets the angle of the {0}.\n    *\n    * The `Angle` property is used to set the angle of the axis.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\"\n    * \t\tlabel=\"Year\"\n    * \t\ttitleAngle={90} />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryXAxis name=\"xAxis\"\n    *     title=\"Country\"\n    *     titleTextColor=\"gray\"\n    *     titleTextStyle=\"12pt Verdana\"\n    *     titleAngle={90} />\n    * ```\n    */\n    get: function () {\n      return this.i.ay ? this.i.ay.angle : NaN;\n    },\n    set: function (v) {\n      this.ensureLabelSettings();\n      this.i.ay.angle = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelExtent\", {\n    /**\n     * Distance between the axis and the edge of the control.\n    *\n    * The `Extent` property is used for the extent.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\"\n    * \t\tlabel=\"Year\"/>\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ay ? this.i.ay.extent : NaN;\n    },\n    set: function (v) {\n      this.ensureLabelSettings();\n      this.i.ay.extent = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelLeftMargin\", {\n    /**\n     * Margin applied to the left of the {0}.\n    *\n    * The `labelLeftMargin` property is used for the left margin of the labels.\n    */\n    get: function () {\n      return this.i.ay ? this.i.ay.leftMargin : NaN;\n    },\n    set: function (v) {\n      this.ensureLabelSettings();\n      this.i.ay.leftMargin = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelRightMargin\", {\n    /**\n     * Margin applied to the right of the {0}.\n    *\n    * The `labelRightMargin` property is used for the right margin of the labels.\n    */\n    get: function () {\n      return this.i.ay ? this.i.ay.rightMargin : NaN;\n    },\n    set: function (v) {\n      this.ensureLabelSettings();\n      this.i.ay.rightMargin = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelTopMargin\", {\n    /**\n     * Margin applied above the {0}.\n    *\n    * The `labelTopMargin` property is used for the top margin of the labels.\n    *\n    * ```ts\n    * <IgrCategoryXAxis name=\"xAxis\"\n    *     label=\"Country\"\n    *     labelTextStyle=\"9pt Verdana\"\n    *     labelTopMargin={5}\n    *     labelTextColor=\"gray\" />\n    * ```\n    */\n    get: function () {\n      return this.i.ay ? this.i.ay.topMargin : NaN;\n    },\n    set: function (v) {\n      this.ensureLabelSettings();\n      this.i.ay.topMargin = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelBottomMargin\", {\n    /**\n     * Margin applied below the {0}.\n    *\n    * The `labelBottomMargin` is used to set the bottom margin of the labels.\n    */\n    get: function () {\n      return this.i.ay ? this.i.ay.bottomMargin : NaN;\n    },\n    set: function (v) {\n      this.ensureLabelSettings();\n      this.i.ay.bottomMargin = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelHorizontalAlignment\", {\n    /**\n     * Gets or sets the horizontal alignment of the {0}.\n    *\n    * The `HorizontalAlignment` property is used for the horizontal alignment.\n    */\n    get: function () {\n      return this.i.ay ? this.i.ay.horizontalAlignment : 0;\n    },\n    set: function (v) {\n      this.ensureLabelSettings();\n      this.i.ay.horizontalAlignment = ensureEnum(HorizontalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelVerticalAlignment\", {\n    /**\n     * Gets or sets the vertical alignment of the {0}.\n    *\n    * The `VerticalAlignment` property is used for the vertical alignment of the axis.\n    */\n    get: function () {\n      return this.i.ay ? this.i.ay.verticalAlignment : 0;\n    },\n    set: function (v) {\n      this.ensureLabelSettings();\n      this.i.ay.verticalAlignment = ensureEnum(VerticalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrAxis.prototype.ensureLabelSettings = function () {\n    if (this.i.ay) {\n      return;\n    }\n\n    this.i.ay = new AxisLabelSettings();\n    this.i.ay.location = this.i.az();\n    this.i.ay.angle = this.i.dw();\n    this.i.ay.leftMargin = this.i.dy();\n    this.i.ay.rightMargin = this.i.dz();\n    this.i.ay.topMargin = this.i.d0();\n    this.i.ay.bottomMargin = this.i.dx();\n    this.i.ay.horizontalAlignment = this.i.i6();\n    this.i.ay.verticalAlignment = this.i.jz();\n  };\n\n  Object.defineProperty(IgrAxis.prototype, \"crossingAxis\", {\n    /**\n     * Gets or sets the CrossingAxis property.\n    *\n    * The `crossingAxis` property is used for CrossingAxis .\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrNumericXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\"\n    * \t\t crossingAxisName= \"xAxis\"\n    * \t\tcrossingValue= {700}/>\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      if (this.i.ai == null) {\n        return null;\n      }\n\n      if (!this.i.ai.externalObject) {\n        var e = IgrAxis._createFromInternal(this.i.ai);\n\n        if (e) {\n          e._implementation = this.i.ai;\n        }\n\n        this.i.ai.externalObject = e;\n      }\n\n      return this.i.ai.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.ai = null : this.i.ai = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"crossingAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve crossingAxis from markup.\n    */\n    get: function () {\n      return this._crossingAxisName;\n    },\n    set: function (v) {\n      this._crossingAxisName = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"crossingValue\", {\n    /**\n     * Gets or sets the CrossingValue property.\n    *\n    * The `crossingValue` property is used for CrossingValue of the axis.\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrNumericXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\"\n    * \t\t crossingAxis= \"xAxis\"\n    * \t\tcrossingValue= {700}/>\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.fe;\n    },\n    set: function (v) {\n      this.i.fe = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"titlePosition\", {\n    /**\n     * Gets or sets the title position relative to the axis labels.\n    */\n    get: function () {\n      return this.i.be ? this.i.be.position : 0;\n    },\n    set: function (v) {\n      this.ensureTitleSettings();\n      this.i.be.position = ensureEnum(AxisTitlePosition_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"titleTextStyle\", {\n    /**\n     * Gets or sets the text style to use for axis labels.\n    *\n    * The `labelTextStyle` property Overrides the style of the text used for the axis labels.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\"\n    * \t\tlabel=\"Year\"\n    * \t\ttitleTextStyle=\"12pt Verdana\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryXAxis name=\"xAxis\"\n    *     title=\"Country\"\n    *     titleTextColor=\"gray\"\n    *     titleTextStyle=\"12pt Verdana\"\n    *     titleAngle={90} />\n    * ```\n    */\n    get: function () {\n      return this.i.be ? this.i.be.textStyle : null;\n    },\n    set: function (v) {\n      this.ensureTitleSettings();\n      this.i.be.textStyle = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"titleTextColor\", {\n    /**\n     * The color of the {0}.\n    *\n    * The `labelTextColor` property Overrides the color of the text used for the axis labels.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\"\n    * \t\tlabel=\"Year\"\n    * \t\tlabelTextColor=\"gray\"  />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryXAxis name=\"xAxis\"\n    *     title=\"Country\"\n    *     titleTextColor=\"gray\"\n    *     titleTextStyle=\"12pt Verdana\"\n    *     titleAngle={90} />\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.be ? this.i.be.textColor : null);\n    },\n    set: function (v) {\n      this.ensureTitleSettings();\n      this.i.be.textColor = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"titleLocation\", {\n    /**\n     * Gets or sets the location of the {0}.\n    *\n    * The `Location` property is used for the location.\n    */\n    get: function () {\n      return this.i.be ? this.i.be.location : 0;\n    },\n    set: function (v) {\n      this.ensureTitleSettings();\n      this.i.be.location = ensureEnum(AxisLabelsLocation_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"titleVisibility\", {\n    /**\n     * Gets or sets the visibility of the {0}.\n    *\n    * The `Visibility` property is used for the visibility of the axis.\n    */\n    get: function () {\n      return this.i.be ? this.i.be.visibility : 0;\n    },\n    set: function (v) {\n      this.ensureTitleSettings();\n      this.i.be.visibility = ensureEnum(Visibility_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"titleShowFirstLabel\", {\n    /**\n     * Gets or sets whether the first label is displayed when the zoom level is set to 1.\n    *\n    * The `ShowFirstLabel` is used to check whether the first label is displayed when the zoom level is set to 1.\n    */\n    get: function () {\n      return this.i.be ? this.i.be.showFirstLabel : false;\n    },\n    set: function (v) {\n      this.ensureTitleSettings();\n      this.i.be.showFirstLabel = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"titleAngle\", {\n    /**\n     * Gets or sets the angle of the {0}.\n    *\n    * The `Angle` property is used to set the angle of the axis.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\"\n    * \t\tlabel=\"Year\"\n    * \t\ttitleAngle={90} />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryXAxis name=\"xAxis\"\n    *     title=\"Country\"\n    *     titleTextColor=\"gray\"\n    *     titleTextStyle=\"12pt Verdana\"\n    *     titleAngle={90} />\n    * ```\n    */\n    get: function () {\n      return this.i.be ? this.i.be.angle : NaN;\n    },\n    set: function (v) {\n      this.ensureTitleSettings();\n      this.i.be.angle = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"titleExtent\", {\n    /**\n     * Distance between the axis and the edge of the control.\n    *\n    * The `Extent` property is used for the extent.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\"\n    * \t\tlabel=\"Year\"/>\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.be ? this.i.be.extent : NaN;\n    },\n    set: function (v) {\n      this.ensureTitleSettings();\n      this.i.be.extent = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"titleLeftMargin\", {\n    /**\n     * Margin applied to the left of the {0}.\n    *\n    * The `labelLeftMargin` property is used for the left margin of the labels.\n    */\n    get: function () {\n      return this.i.be ? this.i.be.leftMargin : NaN;\n    },\n    set: function (v) {\n      this.ensureTitleSettings();\n      this.i.be.leftMargin = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"titleRightMargin\", {\n    /**\n     * Margin applied to the right of the {0}.\n    *\n    * The `labelRightMargin` property is used for the right margin of the labels.\n    */\n    get: function () {\n      return this.i.be ? this.i.be.rightMargin : NaN;\n    },\n    set: function (v) {\n      this.ensureTitleSettings();\n      this.i.be.rightMargin = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"titleTopMargin\", {\n    /**\n     * Margin applied above the {0}.\n    *\n    * The `labelTopMargin` property is used for the top margin of the labels.\n    *\n    * ```ts\n    * <IgrCategoryXAxis name=\"xAxis\"\n    *     label=\"Country\"\n    *     labelTextStyle=\"9pt Verdana\"\n    *     labelTopMargin={5}\n    *     labelTextColor=\"gray\" />\n    * ```\n    */\n    get: function () {\n      return this.i.be ? this.i.be.topMargin : NaN;\n    },\n    set: function (v) {\n      this.ensureTitleSettings();\n      this.i.be.topMargin = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"titleBottomMargin\", {\n    /**\n     * Margin applied below the {0}.\n    *\n    * The `labelBottomMargin` is used to set the bottom margin of the labels.\n    */\n    get: function () {\n      return this.i.be ? this.i.be.bottomMargin : NaN;\n    },\n    set: function (v) {\n      this.ensureTitleSettings();\n      this.i.be.bottomMargin = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"titleHorizontalAlignment\", {\n    /**\n     * Gets or sets the horizontal alignment of the {0}.\n    *\n    * The `HorizontalAlignment` property is used for the horizontal alignment.\n    */\n    get: function () {\n      return this.i.be ? this.i.be.horizontalAlignment : 0;\n    },\n    set: function (v) {\n      this.ensureTitleSettings();\n      this.i.be.horizontalAlignment = ensureEnum(HorizontalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"titleVerticalAlignment\", {\n    /**\n     * Gets or sets the vertical alignment of the {0}.\n    *\n    * The `VerticalAlignment` property is used for the vertical alignment of the axis.\n    */\n    get: function () {\n      return this.i.be ? this.i.be.verticalAlignment : 0;\n    },\n    set: function (v) {\n      this.ensureTitleSettings();\n      this.i.be.verticalAlignment = ensureEnum(VerticalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrAxis.prototype.ensureTitleSettings = function () {\n    if (this.i.be) {\n      return;\n    }\n\n    this.i.be = new TitleSettings();\n    this.i.be.location = this.i.a0();\n    this.i.be.angle = this.i.d1();\n    this.i.be.leftMargin = this.i.d3();\n    this.i.be.rightMargin = this.i.d4();\n    this.i.be.topMargin = this.i.d5();\n    this.i.be.bottomMargin = this.i.d2();\n    this.i.be.horizontalAlignment = this.i.i7();\n    this.i.be.verticalAlignment = this.i.j0();\n  };\n\n  Object.defineProperty(IgrAxis.prototype, \"annotations\", {\n    /**\n     * Gets the current annotations for the axis.\n    */\n    get: function () {\n      if (this._annotations === null) {\n        var coll = new IgrAxisAnnotationCollection();\n        var innerColl = this.i.am;\n\n        if (!innerColl) {\n          innerColl = new AxisAnnotationCollection_internal();\n        }\n\n        this._annotations = coll._fromInner(innerColl);\n      }\n\n      return this._annotations;\n    },\n    set: function (v) {\n      if (this._annotations !== null) {\n        this._annotations._setSyncTarget(null);\n\n        this._annotations = null;\n      }\n\n      var coll = new IgrAxisAnnotationCollection();\n      this._annotations = coll._fromOuter(v);\n      var syncColl = new SyncableObservableCollection$1(IAxisAnnotation_$type);\n      var innerColl = this.i.am;\n\n      if (!innerColl) {\n        innerColl = new AxisAnnotationCollection_internal();\n      }\n\n      syncColl._inner = innerColl;\n      syncColl.clear();\n\n      this._annotations._setSyncTarget(syncColl);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"coercionMethods\", {\n    /**\n     * Gets or sets the coercion methods to use when loading data from data sources.\n     * Should be specified before setting any member paths, if being used. Setting it later\n     * will not cause data to be re-imported into the chart.\n    *\n    * The\t`coercionMethods` methods is to use when loading data from data sources. Should be specified before setting any member paths, if being used.\n    * Setting it later will not cause data to be reimported into the chart.\n    */\n    get: function () {\n      return this.i.coercionMethods;\n    },\n    set: function (v) {\n      this.i.coercionMethods = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"expectFunctions\", {\n    /**\n     * Gets or sets whether the series should expect that properties in its items source may be functions that need to be\n     * evaluated to yield their value. This defaults to false, as there will be a subtle performance impact to using this feature.\n     * This value must be set before assigning an item's source to take effect.\n    */\n    get: function () {\n      return this.i.expectFunctions;\n    },\n    set: function (v) {\n      this.i.expectFunctions = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"label\", {\n    /**\n     * Gets or sets the axis label format string.\n    *\n    * The `label` property is used for label mapping of the axis labels.\n    *\n    * ```ts\n    * <IgrCategoryXAxis name=\"xAxis\"\n    *     label=\"Country\"\n    *     labelTextStyle=\"9pt Verdana\"\n    *     labelTopMargin={5}\n    *     labelTextColor=\"gray\" />\n    * ```\n    */\n    get: function () {\n      return this.i.fj;\n    },\n    set: function (v) {\n      this.i.fj = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelFormat\", {\n    /**\n     * Gets or sets the label format string to use for the label.\n    */\n    get: function () {\n      return this.i.fz;\n    },\n    set: function (v) {\n      this.i.fz = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"labelFormatSpecifiers\", {\n    /**\n     * Gets or sets the format specifiers to use with the LabelFormat string.\n    */\n    get: function () {\n      return this.i.ag;\n    },\n    set: function (v) {\n      if (v && !Array.isArray(v) && typeof v == \"string\") {\n        var re = /\\s*(?:,|\\s|$)\\s*/gm;\n        v = v.split(re);\n      }\n\n      this.i.ag = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrAxis.prototype.bindAxes = function (axes) {\n    for (var i = 0; i < axes.length; i++) {\n      if (this.crossingAxisName && this.crossingAxisName.length > 0 && axes[i].name == this.crossingAxisName) {\n        this.crossingAxis = axes[i];\n      }\n    }\n  };\n\n  IgrAxis.prototype.findByName = function (name) {\n    if (this.crossingAxis && this.crossingAxis.name && this.crossingAxis.name == name) {\n      return this.crossingAxis;\n    }\n\n    if (this.annotations != null && this.annotations.findByName && this.annotations.findByName(name)) {\n      return this.annotations.findByName(name);\n    }\n\n    if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {\n      return arrayFindByName(this.labelFormatSpecifiers, name);\n    }\n\n    return null;\n  };\n\n  Object.defineProperty(IgrAxis.prototype, \"hasUserValues\", {\n    get: function () {\n      return this._hasUserValues;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrAxis.prototype.__m = function (propertyName) {\n    if (!this._inStyling) {\n      this._hasUserValues.add(propertyName);\n    }\n  };\n\n  IgrAxis.prototype._styling = function (container, component, parent) {\n    if (this._inStyling) {\n      return;\n    }\n\n    this._inStyling = true;\n    this._stylingContainer = container;\n    this._stylingParent = component;\n    var genericPrefix = \"\";\n    var typeName = this.i.$type.name;\n\n    if (typeName.indexOf(\"Xam\") === 0) {\n      typeName = typeName.substring(3);\n    }\n\n    genericPrefix = toSpinal(\"Axis\");\n    var additionalPrefixes = [];\n    var prefix = toSpinal(typeName);\n    additionalPrefixes.push(prefix + \"-\");\n    var b = this.i.$type.baseType;\n\n    while (b && b.name != \"Object\" && b.name != \"Base\" && b.name != \"Control\" && b.Name != \"DependencyObject\" && b.Name != \"FrameworkElement\") {\n      typeName = b.name;\n\n      if (typeName.indexOf(\"Xam\") === 0) {\n        typeName = typeName.substring(3);\n      }\n\n      var basePrefix = toSpinal(typeName);\n      additionalPrefixes.push(basePrefix + \"-\");\n      b = b.baseType;\n    }\n\n    if (parent) {\n      var parentTypeName = parent.i.$type.name;\n\n      if (parentTypeName.indexOf(\"Xam\") === 0) {\n        parentTypeName = parentTypeName.substring(3);\n      }\n\n      var parentPrefix = toSpinal(parentTypeName);\n      additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n      additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n    }\n\n    initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n\n    if (this.crossingAxis && this.crossingAxis._styling) {\n      this.crossingAxis._styling(container, component, this);\n    }\n\n    if (this._otherStyling) {\n      this._otherStyling(container, component, parent);\n    }\n\n    this._inStyling = false;\n  };\n  /**\n  * Renders the axis with no animation.\n  */\n\n\n  IgrAxis.prototype.renderAxis = function () {\n    this.i.hp();\n  };\n  /**\n   * If using enhanced interval management and precise interval fitting, this will reset the cached maximum label width, and recalculate using the current labels.\n  \r\n  */\n\n\n  IgrAxis.prototype.resetCachedEnhancedInterval = function () {\n    this.i.hs();\n  };\n\n  IgrAxis.prototype.getItemValue = function (item, memberPathName) {\n    var iv = this.i.fg(item, memberPathName);\n    return iv;\n  };\n  /**\n   * Gets the label for a data item.\n  \r\n  * @param value  * The unscaled value to get a label for.\n  */\n\n\n  IgrAxis.prototype.getValueLabel = function (value) {\n    var iv = this.i.fw(value);\n    return iv;\n  };\n  /**\n   * Scales a value from axis space into screen space.\n  \r\n  * @param unscaledValue  * The unscaled axis value to scale.\n  */\n\n\n  IgrAxis.prototype.scaleValue = function (unscaledValue) {\n    var iv = this.i.en(unscaledValue);\n    return iv;\n  };\n\n  Object.defineProperty(IgrAxis.prototype, \"rangeChanged\", {\n    /**\n     * Occurs when the axis range changes.\n    */\n    get: function () {\n      return this._rangeChanged;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._rangeChanged_wrapped !== null) {\n        this.i.rangeChanged = delegateRemove(this.i.rangeChanged, this._rangeChanged_wrapped);\n        this._rangeChanged_wrapped = null;\n        this._rangeChanged = null;\n      }\n\n      this._rangeChanged = ev;\n\n      this._rangeChanged_wrapped = function (o, e) {\n        var outerArgs = new IgrAxisRangeChangedEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeRangeChanged) {\n          _this.beforeRangeChanged(_this, outerArgs);\n        }\n\n        if (_this._rangeChanged) {\n          _this._rangeChanged(_this, outerArgs);\n        }\n      };\n\n      this.i.rangeChanged = delegateCombine(this.i.rangeChanged, this._rangeChanged_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxis.prototype, \"renderRequested\", {\n    /**\n     * This event is raised every time a render has been requested from a series.\n    */\n    get: function () {\n      return this._renderRequested;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._renderRequested_wrapped !== null) {\n        this.i.renderRequested = delegateRemove(this.i.renderRequested, this._renderRequested_wrapped);\n        this._renderRequested_wrapped = null;\n        this._renderRequested = null;\n      }\n\n      this._renderRequested = ev;\n\n      this._renderRequested_wrapped = function (o, e) {\n        var outerArgs = new IgrRenderRequestedEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeRenderRequested) {\n          _this.beforeRenderRequested(_this, outerArgs);\n        }\n\n        if (_this._renderRequested) {\n          _this._renderRequested(_this, outerArgs);\n        }\n      };\n\n      this.i.renderRequested = delegateCombine(this.i.renderRequested, this._renderRequested_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return IgrAxis;\n}(React.Component);\n\nexport { IgrAxis };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-axis.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends, __values } from \"tslib\";\nimport * as React from 'react';\nimport { Visibility_$type } from \"igniteui-react-core\";\nimport { HorizontalAlignment_$type } from \"igniteui-react-core\";\nimport { VerticalAlignment_$type } from \"igniteui-react-core\";\nimport { AxisLabelsLocation_$type } from './AxisLabelsLocation';\nimport { AxisLabelSettings } from './AxisLabelSettings';\nimport { TitleSettings } from './TitleSettings';\nimport { AxisTitlePosition_$type } from './AxisTitlePosition';\nimport { ensureEnum, arrayFindByName, brushToString, stringToBrush, ensureBool, isValidProp, getModifiedProps, toSpinal, initializePropertiesFromCss, NamePatcher } from \"igniteui-react-core\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { IgrRenderRequestedEventArgs } from './igr-render-requested-event-args';\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { IgrAxisRangeChangedEventArgs } from './igr-axis-range-changed-event-args';\nimport { IgrAxisAnnotationCollection } from './igr-axis-annotation-collection';\nimport { AxisAnnotationCollection as AxisAnnotationCollection_internal } from './AxisAnnotationCollection';\nimport { SyncableObservableCollection$1 } from \"igniteui-react-core\";\nimport { IAxisAnnotation_$type } from './IAxisAnnotation';\n/**\n * Represents the base class from which all axis types are derived.\n*\n* The `IgrAxis` is an array of axis objects.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*  </IgrDataChart>\n* ```\n*/\nvar IgrAxis = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrAxis, _super);\n    function IgrAxis(props) {\n        var _this = _super.call(this, props) || this;\n        _this._renderer = null;\n        _this._crossingAxisName = null;\n        _this._annotations = null;\n        _this.__p = null;\n        _this._hasUserValues = new Set();\n        _this._stylingContainer = null;\n        _this._stylingParent = null;\n        _this._inStyling = false;\n        _this._rangeChanged = null;\n        _this._rangeChanged_wrapped = null;\n        _this._renderRequested = null;\n        _this._renderRequested_wrapped = null;\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._implementation = _this.createImplementation();\n        _this._implementation.externalObject = _this;\n        _this.onImplementationCreated();\n        return _this;\n    }\n    Object.defineProperty(IgrAxis.prototype, \"i\", {\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrAxis.prototype.onImplementationCreated = function () {\n    };\n    IgrAxis.prototype.componentDidMount = function () {\n        var e_1, _a;\n        {\n            try {\n                for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var p = _c.value;\n                    {\n                        if (isValidProp(this, p)) {\n                            {\n                                this[p] = this.props[p];\n                            }\n                        }\n                    }\n                }\n            }\n            catch (e_1_1) {\n                e_1 = { error: e_1_1 };\n            }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return))\n                        _a.call(_b);\n                }\n                finally {\n                    if (e_1)\n                        throw e_1.error;\n                }\n            }\n        }\n    };\n    Object.defineProperty(IgrAxis.prototype, \"axisInternal\", {\n        //private _crossingAxisName: string;\n        //public set crossingAxisName(value: string) {\n        //    this._crossingAxisName = value;\n        //}\n        //public get crossingAxisName(): string {\n        //    return this._crossingAxisName;\n        //}\n        get: function () {\n            return this.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrAxis.prototype.createImplementation = function () {\n        return null;\n    };\n    IgrAxis.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var e_2, _a;\n        var mod = getModifiedProps(this.props, nextProps);\n        try {\n            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = mod[p];\n                }\n            }\n        }\n        catch (e_2_1) {\n            e_2 = { error: e_2_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_2)\n                    throw e_2.error;\n            }\n        }\n        return true;\n    };\n    IgrAxis.prototype.render = function () {\n        return null;\n    };\n    Object.defineProperty(IgrAxis.prototype, \"name\", {\n        get: function () {\n            return this.i.name;\n        },\n        set: function (value) {\n            this.i.name = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrAxis.prototype.provideData = function (data) {\n    };\n    IgrAxis.prototype._provideRenderer = function (renderer) {\n        this._renderer = renderer;\n    };\n    IgrAxis._createFromInternal = function (internal) {\n        if (!internal) {\n            return null;\n        }\n        if (!internal.$type) {\n            return null;\n        }\n        var name = internal.$type.name;\n        var externalName = \"Igr\" + name;\n        if (!TypeRegistrar.isRegistered(externalName)) {\n            return null;\n        }\n        return TypeRegistrar.create(externalName);\n    };\n    Object.defineProperty(IgrAxis.prototype, \"isCategory\", {\n        /**\n     * Gets or sets if the current axis is of category axis type\n    */\n        get: function () {\n            return this.i.b6;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"isNumeric\", {\n        /**\n         * Gets or sets if the current axis is of numeric axis type\n        *\n        *     Gets or sets if the current axis is of numeric axis type\n        */\n        get: function () {\n            return this.i.ce;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"isAngular\", {\n        /**\n         * Gets if the current axis is of angular axis type\n        */\n        get: function () {\n            return this.i.b4;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"isRadial\", {\n        /**\n         * Gets or sets if the current axis is of radial axis type\n        */\n        get: function () {\n            return this.i.cg;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"isVertical\", {\n        /**\n         * Gets if the current axis is a vertical axis.\n        */\n        get: function () {\n            return this.i.cj;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"isSorting\", {\n        /**\n         * Gets or sets if the current axis is sorting data items\n        */\n        get: function () {\n            return this.i.ch;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"isDateTime\", {\n        /**\n         * Gets or sets if the current axis is of date time axis type\n        */\n        get: function () {\n            return this.i.b9;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"isPiecewise\", {\n        /**\n         * Gets or sets if the axis is a piecewise scaling function.\n        */\n        get: function () {\n            return this.i.cf;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"isCategoryDateTime\", {\n        /**\n         * Gets if the current axis is of category date time axis type\n        */\n        get: function () {\n            return this.i.b7;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"isContinuous\", {\n        /**\n         * Gets if the current axis is a continuous rather than a discrete scale\n        */\n        get: function () {\n            return this.i.b8;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"formatLabel\", {\n        /**\n         * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.\n        *\n        * The `formatLabel` function takes an object that produces a formatted label for displaying in the chart.\n        *\n        * ```ts\n        * <IgrDataChart dataSource={this.data}   >\n        *     <IgrCategoryXAxis\n        * \t\tname=\"xAxis\"\n        * \t\tFormatLabel=\"xAxis_FormatLabel\" />\n        * </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.at;\n        },\n        set: function (v) {\n            this.i.at = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"title\", {\n        /**\n         * Gets or sets the Title property.\n        *\n        * Use `title` property to display the title of the component.\n        *\n        * ```ts\n        * <IgrCategoryXAxis name=\"xAxis\"\n        *     title=\"Country\"\n        *     titleTextColor=\"gray\"\n        *     titleTextStyle=\"12pt Verdana\"\n        *     titleAngle={90} />\n        * ```\n        */\n        get: function () {\n            return this.i.gp;\n        },\n        set: function (v) {\n            this.i.gp = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"stroke\", {\n        /**\n         * Gets or sets the Stroke property.\n         * Null is treated as auto. The axis stroke will be displayed or not based on the axis type and series used with it.\n        *\n        * Use `stroke` property to set the stroke of the chart.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        *         ref={this.onChartRef}\n        *         width=\"100%\"\n        *         height=\"100%\"\n        *         dataSource={this.data}\n        *         titleTopMargin={5}\n        *         xAxisStroke=\"gray\"/>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.je);\n        },\n        set: function (v) {\n            this.i.je = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"actualStroke\", {\n        /**\n         * Gets or sets the effective stroke used for the axis.\n        */\n        get: function () {\n            return brushToString(this.i.ja);\n        },\n        set: function (v) {\n            this.i.ja = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"strokeThickness\", {\n        /**\n         * Gets or sets the StrokeThickness property.\n        *\n        * Use `strokeThickness` property for the thickness of the stroke.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        *         ref={this.onChartRef}\n        *         width=\"100%\"\n        *         height=\"100%\"\n        *         dataSource={this.data}\n        *         titleTopMargin={5}\n        *         xAxisStrokeThickness={2}>\n        * ```\n        */\n        get: function () {\n            return this.i.ez;\n        },\n        set: function (v) {\n            this.i.ez = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"strip\", {\n        /**\n         * Gets or sets the Strip property.\n        *\n        * Use `strip` property to set the strip of the chart.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        *         ref={this.onChartRef}\n        *         width=\"100%\"\n        *         height=\"100%\"\n        *         dataSource={this.data}\n        *         titleTopMargin={5}\n        *         xAxisStrip=\"gray\"/>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.jd);\n        },\n        set: function (v) {\n            this.i.jd = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"majorStroke\", {\n        /**\n         * Gets or sets the MajorStroke property.\n         * Null is treated as auto. Major lines will be displayed or not based on the axis type and series used with it.\n        *\n        * Gets or sets the `majorStroke` using this property.\n        *\n        * ```ts\n        * <IgrNumericYAxis name=\"yAxis\"\n        *     interval={100}\n        *     majorStroke=\"black\"\n        *     majorStrokeThickness={1}\n        *     minorInterval={25}\n        *     minorStroke=\"gray\"\n        *     minorStrokeThickness={0.5} />\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.jb);\n        },\n        set: function (v) {\n            this.i.jb = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"actualMajorStroke\", {\n        /**\n         * Gets or sets the ActualMajorStroke property.\n        *\n        * The `actualMajorStroke` property is used for ActualMajorStroke of the axis.\n        */\n        get: function () {\n            return brushToString(this.i.i8);\n        },\n        set: function (v) {\n            this.i.i8 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"majorStrokeThickness\", {\n        /**\n         * Gets or sets the MajorStrokeThickness property.\n        *\n        * Gets or sets the `majorStrokeThickness` using this property.\n        *\n        * ```ts\n        * <IgrNumericYAxis name=\"yAxis\"\n        *     interval={100}\n        *     majorStroke=\"black\"\n        *     majorStrokeThickness={1}\n        *     minorInterval={25}\n        *     minorStroke=\"gray\"\n        *     minorStrokeThickness={0.5} />\n        * ```\n        */\n        get: function () {\n            return this.i.ef;\n        },\n        set: function (v) {\n            this.i.ef = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"minorStroke\", {\n        /**\n         * Gets or sets the MinorStroke property.\n        *\n        * Gets or sets the minorStroke thickness using `minorStrokeThickness` property.\n        *\n        * ```ts\n        * <IgrNumericYAxis name=\"yAxis\"\n        *     interval={100}\n        *     majorStroke=\"black\"\n        *     majorStrokeThickness={1}\n        *     minorInterval={25}\n        *     minorStroke=\"gray\"\n        *     minorStrokeThickness={0.5} />\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.jc);\n        },\n        set: function (v) {\n            this.i.jc = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"actualMinorStroke\", {\n        /**\n         * Gets or sets the ActualMinorStroke property.\n        *\n        * The `actualMinorStroke` property is used for ActualMinorStroke of the axis.\n        */\n        get: function () {\n            return brushToString(this.i.i9);\n        },\n        set: function (v) {\n            this.i.i9 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"minorStrokeThickness\", {\n        /**\n         * Gets or sets the MinorStrokeThickness property.\n        */\n        get: function () {\n            return this.i.ei;\n        },\n        set: function (v) {\n            this.i.ei = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"tickStroke\", {\n        /**\n         * Gets or sets the TickStroke property.\n        *\n        * Use `tickStroke` property for the color of the tickmarks.\n        *\n        * ```ts\n        * <IgrCategoryXAxis name=\"xAxis\"\n        *     tickLength={10}\n        *     tickStrokeThickness={0.5}\n        *     tickStroke=\"black\" />\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.jf);\n        },\n        set: function (v) {\n            this.i.jf = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"tickStrokeThickness\", {\n        /**\n         * Gets or sets the TickStrokeThickness property.\n        *\n        * Use `tickStrokeThickness` property for thickness of the stroke tickmarks.\n        *\n        * ```ts\n        * <IgrCategoryXAxis name=\"xAxis\"\n        *     tickLength={10}\n        *     tickStrokeThickness={0.5}\n        *     tickStroke=\"black\" />\n        * ```\n        */\n        get: function () {\n            return this.i.e1;\n        },\n        set: function (v) {\n            this.i.e1 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"tickLength\", {\n        /**\n         * Gets or sets the TickLength property.\n        *\n        * Use `tickLength` property for The length of the tickmarks to display for this axis.\n        *\n        * ```ts\n        * <IgrCategoryXAxis name=\"xAxis\"\n        *     tickLength={10}\n        *     tickStrokeThickness={0.5}\n        *     tickStroke=\"black\" />\n        * ```\n        */\n        get: function () {\n            return this.i.e0;\n        },\n        set: function (v) {\n            this.i.e0 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"isDisabled\", {\n        /**\n         * Gets or sets the IsDisabled property. If true, the axis will not be rendered.\n        *\n        * The `isDisabled` property is used to decide if the axis will not be rendered.\n        */\n        get: function () {\n            return this.i.ca;\n        },\n        set: function (v) {\n            this.i.ca = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"isInverted\", {\n        /**\n         * Gets or sets the IsInverted property.\n        *\n        * Gets or sets the `isInverted` property.\n        */\n        get: function () {\n            return this.i.cc;\n        },\n        set: function (v) {\n            this.i.cc = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"shouldAvoidAnnotationCollisions\", {\n        /**\n         * Gets or sets whether annotations should be shifted to avoid collision, even if this would result in them appearing where they shouldn't be along the scale.\n        */\n        get: function () {\n            return this.i.co;\n        },\n        set: function (v) {\n            this.i.co = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"shouldKeepAnnotationsInView\", {\n        /**\n         * ets or sets whether annotations should be kept in view, even if they aren't positioned where they should appear on the scale.\n        */\n        get: function () {\n            return this.i.cq;\n        },\n        set: function (v) {\n            this.i.cq = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"useEnhancedIntervalManagement\", {\n        /**\n         * Gets or sets whether to use more advanced heuristics when determining the initial number of labels to render, before resolving collisions, etc.\n        *\n        * Use `useEnhancedIntervalManagement` property to gets/sets whether to use more advanced heuristics when determining the initial number of labels to render,\n        * before resolving collisions, etc.\n        */\n        get: function () {\n            return this.i.cy;\n        },\n        set: function (v) {\n            this.i.cy = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"enhancedIntervalMinimumCharacters\", {\n        /**\n         * Gets or sets the minimum desired characters to be displayed for horizontal axes when using advanced label heuristics. -1 will attempt to adjust the interval to precisely fit the horizontal labels.\n        *\n        * The `enhancedIntervalMinimumCharacters` property is used to set the mininum desired characters to be displayed for horizontal axes when using advanced label heuristics.\n        */\n        get: function () {\n            return this.i.e9;\n        },\n        set: function (v) {\n            this.i.e9 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"enhancedIntervalPreferMoreCategoryLabels\", {\n        /**\n         * Gets or sets whether the enhanced interval management should prefer to show all the labels if possible without collisions for supported types of category axes. This is for use with EnhancedIntervalMinimumCharacters = -1 and axes that have an integral interval.\n        */\n        get: function () {\n            return this.i.by;\n        },\n        set: function (v) {\n            this.i.by = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelTextStyle\", {\n        /**\n         * Gets or sets the text style to use for axis labels.\n        *\n        * The `labelTextStyle` property Overrides the style of the text used for the axis labels.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\"\n        * \t\tlabel=\"Year\"\n        * \t\ttitleTextStyle=\"12pt Verdana\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryXAxis name=\"xAxis\"\n        *     title=\"Country\"\n        *     titleTextColor=\"gray\"\n        *     titleTextStyle=\"12pt Verdana\"\n        *     titleAngle={90} />\n        * ```\n        */\n        get: function () {\n            return this.i.ay ? this.i.ay.textStyle : null;\n        },\n        set: function (v) {\n            this.ensureLabelSettings();\n            this.i.ay.textStyle = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelTextColor\", {\n        /**\n         * The color of the {0}.\n        *\n        * The `labelTextColor` property Overrides the color of the text used for the axis labels.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\"\n        * \t\tlabel=\"Year\"\n        * \t\tlabelTextColor=\"gray\"  />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryXAxis name=\"xAxis\"\n        *     title=\"Country\"\n        *     titleTextColor=\"gray\"\n        *     titleTextStyle=\"12pt Verdana\"\n        *     titleAngle={90} />\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.ay ? this.i.ay.textColor : null);\n        },\n        set: function (v) {\n            this.ensureLabelSettings();\n            this.i.ay.textColor = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelLocation\", {\n        /**\n         * Gets or sets the location of the {0}.\n        *\n        * The `Location` property is used for the location.\n        */\n        get: function () {\n            return this.i.ay ? this.i.ay.location : 0;\n        },\n        set: function (v) {\n            this.ensureLabelSettings();\n            this.i.ay.location = ensureEnum(AxisLabelsLocation_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelVisibility\", {\n        /**\n         * Gets or sets the visibility of the {0}.\n        *\n        * The `Visibility` property is used for the visibility of the axis.\n        */\n        get: function () {\n            return this.i.ay ? this.i.ay.visibility : 0;\n        },\n        set: function (v) {\n            this.ensureLabelSettings();\n            this.i.ay.visibility = ensureEnum(Visibility_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelShowFirstLabel\", {\n        /**\n         * Gets or sets whether the first label is displayed when the zoom level is set to 1.\n        *\n        * The `ShowFirstLabel` is used to check whether the first label is displayed when the zoom level is set to 1.\n        */\n        get: function () {\n            return this.i.ay ? this.i.ay.showFirstLabel : false;\n        },\n        set: function (v) {\n            this.ensureLabelSettings();\n            this.i.ay.showFirstLabel = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelAngle\", {\n        /**\n         * Gets or sets the angle of the {0}.\n        *\n        * The `Angle` property is used to set the angle of the axis.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\"\n        * \t\tlabel=\"Year\"\n        * \t\ttitleAngle={90} />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryXAxis name=\"xAxis\"\n        *     title=\"Country\"\n        *     titleTextColor=\"gray\"\n        *     titleTextStyle=\"12pt Verdana\"\n        *     titleAngle={90} />\n        * ```\n        */\n        get: function () {\n            return this.i.ay ? this.i.ay.angle : NaN;\n        },\n        set: function (v) {\n            this.ensureLabelSettings();\n            this.i.ay.angle = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelExtent\", {\n        /**\n         * Distance between the axis and the edge of the control.\n        *\n        * The `Extent` property is used for the extent.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\"\n        * \t\tlabel=\"Year\"/>\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ay ? this.i.ay.extent : NaN;\n        },\n        set: function (v) {\n            this.ensureLabelSettings();\n            this.i.ay.extent = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelLeftMargin\", {\n        /**\n         * Margin applied to the left of the {0}.\n        *\n        * The `labelLeftMargin` property is used for the left margin of the labels.\n        */\n        get: function () {\n            return this.i.ay ? this.i.ay.leftMargin : NaN;\n        },\n        set: function (v) {\n            this.ensureLabelSettings();\n            this.i.ay.leftMargin = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelRightMargin\", {\n        /**\n         * Margin applied to the right of the {0}.\n        *\n        * The `labelRightMargin` property is used for the right margin of the labels.\n        */\n        get: function () {\n            return this.i.ay ? this.i.ay.rightMargin : NaN;\n        },\n        set: function (v) {\n            this.ensureLabelSettings();\n            this.i.ay.rightMargin = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelTopMargin\", {\n        /**\n         * Margin applied above the {0}.\n        *\n        * The `labelTopMargin` property is used for the top margin of the labels.\n        *\n        * ```ts\n        * <IgrCategoryXAxis name=\"xAxis\"\n        *     label=\"Country\"\n        *     labelTextStyle=\"9pt Verdana\"\n        *     labelTopMargin={5}\n        *     labelTextColor=\"gray\" />\n        * ```\n        */\n        get: function () {\n            return this.i.ay ? this.i.ay.topMargin : NaN;\n        },\n        set: function (v) {\n            this.ensureLabelSettings();\n            this.i.ay.topMargin = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelBottomMargin\", {\n        /**\n         * Margin applied below the {0}.\n        *\n        * The `labelBottomMargin` is used to set the bottom margin of the labels.\n        */\n        get: function () {\n            return this.i.ay ? this.i.ay.bottomMargin : NaN;\n        },\n        set: function (v) {\n            this.ensureLabelSettings();\n            this.i.ay.bottomMargin = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelHorizontalAlignment\", {\n        /**\n         * Gets or sets the horizontal alignment of the {0}.\n        *\n        * The `HorizontalAlignment` property is used for the horizontal alignment.\n        */\n        get: function () {\n            return this.i.ay ? this.i.ay.horizontalAlignment : 0;\n        },\n        set: function (v) {\n            this.ensureLabelSettings();\n            this.i.ay.horizontalAlignment = ensureEnum(HorizontalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelVerticalAlignment\", {\n        /**\n         * Gets or sets the vertical alignment of the {0}.\n        *\n        * The `VerticalAlignment` property is used for the vertical alignment of the axis.\n        */\n        get: function () {\n            return this.i.ay ? this.i.ay.verticalAlignment : 0;\n        },\n        set: function (v) {\n            this.ensureLabelSettings();\n            this.i.ay.verticalAlignment = ensureEnum(VerticalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrAxis.prototype.ensureLabelSettings = function () {\n        if (this.i.ay) {\n            return;\n        }\n        this.i.ay = new AxisLabelSettings();\n        this.i.ay.location = this.i.az();\n        this.i.ay.angle = this.i.dw();\n        this.i.ay.leftMargin = this.i.dy();\n        this.i.ay.rightMargin = this.i.dz();\n        this.i.ay.topMargin = this.i.d0();\n        this.i.ay.bottomMargin = this.i.dx();\n        this.i.ay.horizontalAlignment = this.i.i6();\n        this.i.ay.verticalAlignment = this.i.jz();\n    };\n    Object.defineProperty(IgrAxis.prototype, \"crossingAxis\", {\n        /**\n         * Gets or sets the CrossingAxis property.\n        *\n        * The `crossingAxis` property is used for CrossingAxis .\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrNumericXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\"\n        * \t\t crossingAxisName= \"xAxis\"\n        * \t\tcrossingValue= {700}/>\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            if (this.i.ai == null) {\n                return null;\n            }\n            if (!this.i.ai.externalObject) {\n                var e = IgrAxis._createFromInternal(this.i.ai);\n                if (e) {\n                    e._implementation = this.i.ai;\n                }\n                this.i.ai.externalObject = e;\n            }\n            return this.i.ai.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.ai = null : this.i.ai = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"crossingAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve crossingAxis from markup.\n        */\n        get: function () {\n            return this._crossingAxisName;\n        },\n        set: function (v) {\n            this._crossingAxisName = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"crossingValue\", {\n        /**\n         * Gets or sets the CrossingValue property.\n        *\n        * The `crossingValue` property is used for CrossingValue of the axis.\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrNumericXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\"\n        * \t\t crossingAxis= \"xAxis\"\n        * \t\tcrossingValue= {700}/>\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.fe;\n        },\n        set: function (v) {\n            this.i.fe = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"titlePosition\", {\n        /**\n         * Gets or sets the title position relative to the axis labels.\n        */\n        get: function () {\n            return this.i.be ? this.i.be.position : 0;\n        },\n        set: function (v) {\n            this.ensureTitleSettings();\n            this.i.be.position = ensureEnum(AxisTitlePosition_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"titleTextStyle\", {\n        /**\n         * Gets or sets the text style to use for axis labels.\n        *\n        * The `labelTextStyle` property Overrides the style of the text used for the axis labels.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\"\n        * \t\tlabel=\"Year\"\n        * \t\ttitleTextStyle=\"12pt Verdana\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryXAxis name=\"xAxis\"\n        *     title=\"Country\"\n        *     titleTextColor=\"gray\"\n        *     titleTextStyle=\"12pt Verdana\"\n        *     titleAngle={90} />\n        * ```\n        */\n        get: function () {\n            return this.i.be ? this.i.be.textStyle : null;\n        },\n        set: function (v) {\n            this.ensureTitleSettings();\n            this.i.be.textStyle = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"titleTextColor\", {\n        /**\n         * The color of the {0}.\n        *\n        * The `labelTextColor` property Overrides the color of the text used for the axis labels.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\"\n        * \t\tlabel=\"Year\"\n        * \t\tlabelTextColor=\"gray\"  />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryXAxis name=\"xAxis\"\n        *     title=\"Country\"\n        *     titleTextColor=\"gray\"\n        *     titleTextStyle=\"12pt Verdana\"\n        *     titleAngle={90} />\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.be ? this.i.be.textColor : null);\n        },\n        set: function (v) {\n            this.ensureTitleSettings();\n            this.i.be.textColor = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"titleLocation\", {\n        /**\n         * Gets or sets the location of the {0}.\n        *\n        * The `Location` property is used for the location.\n        */\n        get: function () {\n            return this.i.be ? this.i.be.location : 0;\n        },\n        set: function (v) {\n            this.ensureTitleSettings();\n            this.i.be.location = ensureEnum(AxisLabelsLocation_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"titleVisibility\", {\n        /**\n         * Gets or sets the visibility of the {0}.\n        *\n        * The `Visibility` property is used for the visibility of the axis.\n        */\n        get: function () {\n            return this.i.be ? this.i.be.visibility : 0;\n        },\n        set: function (v) {\n            this.ensureTitleSettings();\n            this.i.be.visibility = ensureEnum(Visibility_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"titleShowFirstLabel\", {\n        /**\n         * Gets or sets whether the first label is displayed when the zoom level is set to 1.\n        *\n        * The `ShowFirstLabel` is used to check whether the first label is displayed when the zoom level is set to 1.\n        */\n        get: function () {\n            return this.i.be ? this.i.be.showFirstLabel : false;\n        },\n        set: function (v) {\n            this.ensureTitleSettings();\n            this.i.be.showFirstLabel = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"titleAngle\", {\n        /**\n         * Gets or sets the angle of the {0}.\n        *\n        * The `Angle` property is used to set the angle of the axis.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\"\n        * \t\tlabel=\"Year\"\n        * \t\ttitleAngle={90} />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryXAxis name=\"xAxis\"\n        *     title=\"Country\"\n        *     titleTextColor=\"gray\"\n        *     titleTextStyle=\"12pt Verdana\"\n        *     titleAngle={90} />\n        * ```\n        */\n        get: function () {\n            return this.i.be ? this.i.be.angle : NaN;\n        },\n        set: function (v) {\n            this.ensureTitleSettings();\n            this.i.be.angle = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"titleExtent\", {\n        /**\n         * Distance between the axis and the edge of the control.\n        *\n        * The `Extent` property is used for the extent.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\"\n        * \t\tlabel=\"Year\"/>\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.be ? this.i.be.extent : NaN;\n        },\n        set: function (v) {\n            this.ensureTitleSettings();\n            this.i.be.extent = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"titleLeftMargin\", {\n        /**\n         * Margin applied to the left of the {0}.\n        *\n        * The `labelLeftMargin` property is used for the left margin of the labels.\n        */\n        get: function () {\n            return this.i.be ? this.i.be.leftMargin : NaN;\n        },\n        set: function (v) {\n            this.ensureTitleSettings();\n            this.i.be.leftMargin = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"titleRightMargin\", {\n        /**\n         * Margin applied to the right of the {0}.\n        *\n        * The `labelRightMargin` property is used for the right margin of the labels.\n        */\n        get: function () {\n            return this.i.be ? this.i.be.rightMargin : NaN;\n        },\n        set: function (v) {\n            this.ensureTitleSettings();\n            this.i.be.rightMargin = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"titleTopMargin\", {\n        /**\n         * Margin applied above the {0}.\n        *\n        * The `labelTopMargin` property is used for the top margin of the labels.\n        *\n        * ```ts\n        * <IgrCategoryXAxis name=\"xAxis\"\n        *     label=\"Country\"\n        *     labelTextStyle=\"9pt Verdana\"\n        *     labelTopMargin={5}\n        *     labelTextColor=\"gray\" />\n        * ```\n        */\n        get: function () {\n            return this.i.be ? this.i.be.topMargin : NaN;\n        },\n        set: function (v) {\n            this.ensureTitleSettings();\n            this.i.be.topMargin = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"titleBottomMargin\", {\n        /**\n         * Margin applied below the {0}.\n        *\n        * The `labelBottomMargin` is used to set the bottom margin of the labels.\n        */\n        get: function () {\n            return this.i.be ? this.i.be.bottomMargin : NaN;\n        },\n        set: function (v) {\n            this.ensureTitleSettings();\n            this.i.be.bottomMargin = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"titleHorizontalAlignment\", {\n        /**\n         * Gets or sets the horizontal alignment of the {0}.\n        *\n        * The `HorizontalAlignment` property is used for the horizontal alignment.\n        */\n        get: function () {\n            return this.i.be ? this.i.be.horizontalAlignment : 0;\n        },\n        set: function (v) {\n            this.ensureTitleSettings();\n            this.i.be.horizontalAlignment = ensureEnum(HorizontalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"titleVerticalAlignment\", {\n        /**\n         * Gets or sets the vertical alignment of the {0}.\n        *\n        * The `VerticalAlignment` property is used for the vertical alignment of the axis.\n        */\n        get: function () {\n            return this.i.be ? this.i.be.verticalAlignment : 0;\n        },\n        set: function (v) {\n            this.ensureTitleSettings();\n            this.i.be.verticalAlignment = ensureEnum(VerticalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrAxis.prototype.ensureTitleSettings = function () {\n        if (this.i.be) {\n            return;\n        }\n        this.i.be = new TitleSettings();\n        this.i.be.location = this.i.a0();\n        this.i.be.angle = this.i.d1();\n        this.i.be.leftMargin = this.i.d3();\n        this.i.be.rightMargin = this.i.d4();\n        this.i.be.topMargin = this.i.d5();\n        this.i.be.bottomMargin = this.i.d2();\n        this.i.be.horizontalAlignment = this.i.i7();\n        this.i.be.verticalAlignment = this.i.j0();\n    };\n    Object.defineProperty(IgrAxis.prototype, \"annotations\", {\n        /**\n         * Gets the current annotations for the axis.\n        */\n        get: function () {\n            if (this._annotations === null) {\n                var coll = new IgrAxisAnnotationCollection();\n                var innerColl = this.i.am;\n                if (!innerColl) {\n                    innerColl = new AxisAnnotationCollection_internal();\n                }\n                this._annotations = coll._fromInner(innerColl);\n            }\n            return this._annotations;\n        },\n        set: function (v) {\n            if (this._annotations !== null) {\n                this._annotations._setSyncTarget(null);\n                this._annotations = null;\n            }\n            var coll = new IgrAxisAnnotationCollection();\n            this._annotations = coll._fromOuter(v);\n            var syncColl = new SyncableObservableCollection$1(IAxisAnnotation_$type);\n            var innerColl = this.i.am;\n            if (!innerColl) {\n                innerColl = new AxisAnnotationCollection_internal();\n            }\n            syncColl._inner = innerColl;\n            syncColl.clear();\n            this._annotations._setSyncTarget(syncColl);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"coercionMethods\", {\n        /**\n         * Gets or sets the coercion methods to use when loading data from data sources.\n         * Should be specified before setting any member paths, if being used. Setting it later\n         * will not cause data to be re-imported into the chart.\n        *\n        * The\t`coercionMethods` methods is to use when loading data from data sources. Should be specified before setting any member paths, if being used.\n        * Setting it later will not cause data to be reimported into the chart.\n        */\n        get: function () {\n            return this.i.coercionMethods;\n        },\n        set: function (v) {\n            this.i.coercionMethods = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"expectFunctions\", {\n        /**\n         * Gets or sets whether the series should expect that properties in its items source may be functions that need to be\n         * evaluated to yield their value. This defaults to false, as there will be a subtle performance impact to using this feature.\n         * This value must be set before assigning an item's source to take effect.\n        */\n        get: function () {\n            return this.i.expectFunctions;\n        },\n        set: function (v) {\n            this.i.expectFunctions = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"label\", {\n        /**\n         * Gets or sets the axis label format string.\n        *\n        * The `label` property is used for label mapping of the axis labels.\n        *\n        * ```ts\n        * <IgrCategoryXAxis name=\"xAxis\"\n        *     label=\"Country\"\n        *     labelTextStyle=\"9pt Verdana\"\n        *     labelTopMargin={5}\n        *     labelTextColor=\"gray\" />\n        * ```\n        */\n        get: function () {\n            return this.i.fj;\n        },\n        set: function (v) {\n            this.i.fj = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelFormat\", {\n        /**\n         * Gets or sets the label format string to use for the label.\n        */\n        get: function () {\n            return this.i.fz;\n        },\n        set: function (v) {\n            this.i.fz = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"labelFormatSpecifiers\", {\n        /**\n         * Gets or sets the format specifiers to use with the LabelFormat string.\n        */\n        get: function () {\n            return this.i.ag;\n        },\n        set: function (v) {\n            if (v && !Array.isArray(v) && typeof (v) == \"string\") {\n                var re = /\\s*(?:,|\\s|$)\\s*/gm;\n                v = v.split(re);\n            }\n            this.i.ag = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrAxis.prototype.bindAxes = function (axes) {\n        for (var i = 0; i < axes.length; i++) {\n            if (this.crossingAxisName && this.crossingAxisName.length > 0 &&\n                axes[i].name == this.crossingAxisName) {\n                this.crossingAxis = axes[i];\n            }\n        }\n    };\n    IgrAxis.prototype.findByName = function (name) {\n        if (this.crossingAxis && this.crossingAxis.name && this.crossingAxis.name == name) {\n            return this.crossingAxis;\n        }\n        if (this.annotations != null && this.annotations.findByName && this.annotations.findByName(name)) {\n            return this.annotations.findByName(name);\n        }\n        if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {\n            return arrayFindByName(this.labelFormatSpecifiers, name);\n        }\n        return null;\n    };\n    Object.defineProperty(IgrAxis.prototype, \"hasUserValues\", {\n        get: function () {\n            return this._hasUserValues;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrAxis.prototype.__m = function (propertyName) {\n        if (!this._inStyling) {\n            this._hasUserValues.add(propertyName);\n        }\n    };\n    IgrAxis.prototype._styling = function (container, component, parent) {\n        if (this._inStyling) {\n            return;\n        }\n        this._inStyling = true;\n        this._stylingContainer = container;\n        this._stylingParent = component;\n        var genericPrefix = \"\";\n        var typeName = this.i.$type.name;\n        if (typeName.indexOf(\"Xam\") === 0) {\n            typeName = typeName.substring(3);\n        }\n        genericPrefix = toSpinal(\"Axis\");\n        var additionalPrefixes = [];\n        var prefix = toSpinal(typeName);\n        additionalPrefixes.push(prefix + \"-\");\n        var b = this.i.$type.baseType;\n        while (b && b.name != \"Object\" &&\n            b.name != \"Base\" &&\n            b.name != \"Control\" &&\n            b.Name != \"DependencyObject\" &&\n            b.Name != \"FrameworkElement\") {\n            typeName = b.name;\n            if (typeName.indexOf(\"Xam\") === 0) {\n                typeName = typeName.substring(3);\n            }\n            var basePrefix = toSpinal(typeName);\n            additionalPrefixes.push(basePrefix + \"-\");\n            b = b.baseType;\n        }\n        if (parent) {\n            var parentTypeName = parent.i.$type.name;\n            if (parentTypeName.indexOf(\"Xam\") === 0) {\n                parentTypeName = parentTypeName.substring(3);\n            }\n            var parentPrefix = toSpinal(parentTypeName);\n            additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n            additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n        }\n        initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n        if (this.crossingAxis && this.crossingAxis._styling) {\n            this.crossingAxis._styling(container, component, this);\n        }\n        if (this._otherStyling) {\n            this._otherStyling(container, component, parent);\n        }\n        this._inStyling = false;\n    };\n    /**\n * Renders the axis with no animation.\n\r\n*/\n    IgrAxis.prototype.renderAxis = function () {\n        this.i.hp();\n    };\n    /**\n     * If using enhanced interval management and precise interval fitting, this will reset the cached maximum label width, and recalculate using the current labels.\n    \r\n    */\n    IgrAxis.prototype.resetCachedEnhancedInterval = function () {\n        this.i.hs();\n    };\n    IgrAxis.prototype.getItemValue = function (item, memberPathName) {\n        var iv = this.i.fg(item, memberPathName);\n        return (iv);\n    };\n    /**\n     * Gets the label for a data item.\n    \r\n    * @param value  * The unscaled value to get a label for.\n    */\n    IgrAxis.prototype.getValueLabel = function (value) {\n        var iv = this.i.fw(value);\n        return (iv);\n    };\n    /**\n     * Scales a value from axis space into screen space.\n    \r\n    * @param unscaledValue  * The unscaled axis value to scale.\n    */\n    IgrAxis.prototype.scaleValue = function (unscaledValue) {\n        var iv = this.i.en(unscaledValue);\n        return (iv);\n    };\n    Object.defineProperty(IgrAxis.prototype, \"rangeChanged\", {\n        /**\n         * Occurs when the axis range changes.\n        */\n        get: function () {\n            return this._rangeChanged;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._rangeChanged_wrapped !== null) {\n                this.i.rangeChanged = delegateRemove(this.i.rangeChanged, this._rangeChanged_wrapped);\n                this._rangeChanged_wrapped = null;\n                this._rangeChanged = null;\n            }\n            this._rangeChanged = ev;\n            this._rangeChanged_wrapped = function (o, e) {\n                var outerArgs = new IgrAxisRangeChangedEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeRangeChanged) {\n                    _this.beforeRangeChanged(_this, outerArgs);\n                }\n                if (_this._rangeChanged) {\n                    _this._rangeChanged(_this, outerArgs);\n                }\n            };\n            this.i.rangeChanged = delegateCombine(this.i.rangeChanged, this._rangeChanged_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxis.prototype, \"renderRequested\", {\n        /**\n         * This event is raised every time a render has been requested from a series.\n        */\n        get: function () {\n            return this._renderRequested;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._renderRequested_wrapped !== null) {\n                this.i.renderRequested = delegateRemove(this.i.renderRequested, this._renderRequested_wrapped);\n                this._renderRequested_wrapped = null;\n                this._renderRequested = null;\n            }\n            this._renderRequested = ev;\n            this._renderRequested_wrapped = function (o, e) {\n                var outerArgs = new IgrRenderRequestedEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeRenderRequested) {\n                    _this.beforeRenderRequested(_this, outerArgs);\n                }\n                if (_this._renderRequested) {\n                    _this._renderRequested(_this, outerArgs);\n                }\n            };\n            this.i.renderRequested = delegateCombine(this.i.renderRequested, this._renderRequested_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IgrAxis;\n}(React.Component));\nexport { IgrAxis };\n//# sourceMappingURL=igr-axis.js.map\n"]},"metadata":{},"sourceType":"module"}