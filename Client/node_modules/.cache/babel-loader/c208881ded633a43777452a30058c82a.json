{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrHorizontalAnchoredCategorySeries } from \"./igr-horizontal-anchored-category-series\";\nimport { WaterfallSeries } from \"./WaterfallSeries\";\nimport { brushToString, stringToBrush, toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent waterfall column series.\n*\n* `IgrWaterfallSeries` belongs to a group of `IgrCategorySeries` and it is rendered using a collection of vertical columns that show the difference between consecutive data points.\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrWaterfallSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\"/>\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series= new IgrWaterfallSeries({name: \"series\"});\n* series.xAxis = this.xAxis;\n* series.yAxis = this.yAxis;\n* series.valueMemberPath = \"value\";\n* this.chart.series.add(series);\n* ```\n*/\n\nvar IgrWaterfallSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrWaterfallSeries, _super);\n\n  function IgrWaterfallSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrWaterfallSeries.prototype.createImplementation = function () {\n    return new WaterfallSeries();\n  };\n\n  Object.defineProperty(IgrWaterfallSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrWaterfallSeries.prototype, \"isWaterfall\", {\n    /**\n     * Gets whether the current series shows a waterfall column shape.\n    */\n    get: function () {\n      return this.i.ee;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrWaterfallSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n    /**\n     * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n    */\n    get: function () {\n      return this.i.dw;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrWaterfallSeries.prototype, \"isFinancialWaterfall\", {\n    /**\n     * Gets whether the series is financial waterfall\n    */\n    get: function () {\n      return this.i.dm;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrWaterfallSeries.prototype, \"isNegativeColorSupported\", {\n    /**\n     * Overridden by derived series classes to indicate when negative colors are supported or not.\n    */\n    get: function () {\n      return this.i.dx;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrWaterfallSeries.prototype, \"negativeBrush\", {\n    /**\n     * Gets or sets the brush to use for negative portions of the series.\n    *\n    * Gets or sets the color used to draw negative declines in values for this `IgrWaterfallSeries`.\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrWaterfallSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tnegativeBrush=\"#ff0000\"\n    * \tvalueMemberPath=\"Value\"/>\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.xAxis = this.xAxis;\n    * series.yAxis = this.yAxis;\n    * series.valueMemberPath = \"value\";\n    * series.negativeBrush = \"#ff0000\";\n    * this.chart.series.add(series);\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.uq);\n    },\n    set: function (v) {\n      this.i.uq = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrWaterfallSeries.prototype, \"radiusX\", {\n    /**\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n    *\n    * Gets or sets the amount to round corners in the direction of the X axis in this series.\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrWaterfallSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tradiusX=\"15\"\n    *     radiusY=\"15\"\n    * \tvalueMemberPath=\"Value\"/>\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.xAxis = this.xAxis;\n    * series.yAxis = this.yAxis;\n    * series.valueMemberPath = \"value\";\n    * series.radiusX = 15;\n    * series.radiusY = 15;\n    * this.chart.series.add(series);\n    * ```\n    */\n    get: function () {\n      return this.i.ug;\n    },\n    set: function (v) {\n      this.i.ug = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrWaterfallSeries.prototype, \"radiusY\", {\n    /**\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n    *\n    * Gets or sets the amount to round corners in the direction of the Y axis in this series.\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrWaterfallSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tradiusX=\"15\"\n    *     radiusY=\"15\"\n    * \tvalueMemberPath=\"Value\"/>\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.xAxis = this.xAxis;\n    * series.yAxis = this.yAxis;\n    * series.valueMemberPath = \"value\";\n    * series.radiusX = 15;\n    * series.radiusY = 15;\n    * this.chart.series.add(series);\n    * ```\n    */\n    get: function () {\n      return this.i.uh;\n    },\n    set: function (v) {\n      this.i.uh = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrWaterfallSeries.prototype, \"negativeOutline\", {\n    /**\n     * Brush to use for outlining negative elements in the waterfall series.\n    *\n    * Gets or sets the color used to draw borders of negative declines in values for this `IgrWaterfallSeries`.\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrWaterfallSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tnegativeOutline=\"#ff0000\"\n    * \tvalueMemberPath=\"Value\"/>\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.xAxis = this.xAxis;\n    * series.yAxis = this.yAxis;\n    * series.valueMemberPath = \"value\";\n    * series.negativeOutline = \"#ff0000\";\n    * this.chart.series.add(series);\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.ur);\n    },\n    set: function (v) {\n      this.i.ur = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrWaterfallSeries.prototype.setNegativeColors = function (negativeBrush, negativeOutline) {\n    this.i.l5(stringToBrush(negativeBrush), stringToBrush(negativeOutline));\n  };\n  /**\n   * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinate for which to get a value bounding box for\n  *\n  * Returns a bounding box `Rect` for a data value given a `Point`.\n  */\n\n\n  IgrWaterfallSeries.prototype.getSeriesValueBoundingBox = function (world) {\n    var iv = this.i.pb(toPoint(world));\n    return fromRect(iv);\n  };\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  *\n  * Returns the width of items in the `IgrWaterfallSeries`.\n  *\n  * ```ts\n  * let itemSpan: number = series.GetItemSpan();\n  * ```\n  */\n\n\n  IgrWaterfallSeries.prototype.getItemSpan = function () {\n    var iv = this.i.f1();\n    return iv;\n  };\n\n  return IgrWaterfallSeries;\n}(IgrHorizontalAnchoredCategorySeries);\n\nexport { IgrWaterfallSeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-waterfall-series.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrHorizontalAnchoredCategorySeries } from \"./igr-horizontal-anchored-category-series\";\nimport { WaterfallSeries } from \"./WaterfallSeries\";\nimport { brushToString, stringToBrush, toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent waterfall column series.\n*\n* `IgrWaterfallSeries` belongs to a group of `IgrCategorySeries` and it is rendered using a collection of vertical columns that show the difference between consecutive data points.\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrWaterfallSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\"/>\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series= new IgrWaterfallSeries({name: \"series\"});\n* series.xAxis = this.xAxis;\n* series.yAxis = this.yAxis;\n* series.valueMemberPath = \"value\";\n* this.chart.series.add(series);\n* ```\n*/\nvar IgrWaterfallSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrWaterfallSeries, _super);\n    function IgrWaterfallSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrWaterfallSeries.prototype.createImplementation = function () {\n        return new WaterfallSeries();\n    };\n    Object.defineProperty(IgrWaterfallSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrWaterfallSeries.prototype, \"isWaterfall\", {\n        /**\n         * Gets whether the current series shows a waterfall column shape.\n        */\n        get: function () {\n            return this.i.ee;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrWaterfallSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n        /**\n         * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n        */\n        get: function () {\n            return this.i.dw;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrWaterfallSeries.prototype, \"isFinancialWaterfall\", {\n        /**\n         * Gets whether the series is financial waterfall\n        */\n        get: function () {\n            return this.i.dm;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrWaterfallSeries.prototype, \"isNegativeColorSupported\", {\n        /**\n         * Overridden by derived series classes to indicate when negative colors are supported or not.\n        */\n        get: function () {\n            return this.i.dx;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrWaterfallSeries.prototype, \"negativeBrush\", {\n        /**\n         * Gets or sets the brush to use for negative portions of the series.\n        *\n        * Gets or sets the color used to draw negative declines in values for this `IgrWaterfallSeries`.\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrWaterfallSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tnegativeBrush=\"#ff0000\"\n        * \tvalueMemberPath=\"Value\"/>\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.xAxis = this.xAxis;\n        * series.yAxis = this.yAxis;\n        * series.valueMemberPath = \"value\";\n        * series.negativeBrush = \"#ff0000\";\n        * this.chart.series.add(series);\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.uq);\n        },\n        set: function (v) {\n            this.i.uq = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrWaterfallSeries.prototype, \"radiusX\", {\n        /**\n         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n        *\n        * Gets or sets the amount to round corners in the direction of the X axis in this series.\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrWaterfallSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tradiusX=\"15\"\n        *     radiusY=\"15\"\n        * \tvalueMemberPath=\"Value\"/>\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.xAxis = this.xAxis;\n        * series.yAxis = this.yAxis;\n        * series.valueMemberPath = \"value\";\n        * series.radiusX = 15;\n        * series.radiusY = 15;\n        * this.chart.series.add(series);\n        * ```\n        */\n        get: function () {\n            return this.i.ug;\n        },\n        set: function (v) {\n            this.i.ug = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrWaterfallSeries.prototype, \"radiusY\", {\n        /**\n         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n        *\n        * Gets or sets the amount to round corners in the direction of the Y axis in this series.\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrWaterfallSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tradiusX=\"15\"\n        *     radiusY=\"15\"\n        * \tvalueMemberPath=\"Value\"/>\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.xAxis = this.xAxis;\n        * series.yAxis = this.yAxis;\n        * series.valueMemberPath = \"value\";\n        * series.radiusX = 15;\n        * series.radiusY = 15;\n        * this.chart.series.add(series);\n        * ```\n        */\n        get: function () {\n            return this.i.uh;\n        },\n        set: function (v) {\n            this.i.uh = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrWaterfallSeries.prototype, \"negativeOutline\", {\n        /**\n         * Brush to use for outlining negative elements in the waterfall series.\n        *\n        * Gets or sets the color used to draw borders of negative declines in values for this `IgrWaterfallSeries`.\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrWaterfallSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tnegativeOutline=\"#ff0000\"\n        * \tvalueMemberPath=\"Value\"/>\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.xAxis = this.xAxis;\n        * series.yAxis = this.yAxis;\n        * series.valueMemberPath = \"value\";\n        * series.negativeOutline = \"#ff0000\";\n        * this.chart.series.add(series);\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.ur);\n        },\n        set: function (v) {\n            this.i.ur = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrWaterfallSeries.prototype.setNegativeColors = function (negativeBrush, negativeOutline) {\n        this.i.l5(stringToBrush(negativeBrush), stringToBrush(negativeOutline));\n    };\n    /**\n     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinate for which to get a value bounding box for\n    *\n    * Returns a bounding box `Rect` for a data value given a `Point`.\n    */\n    IgrWaterfallSeries.prototype.getSeriesValueBoundingBox = function (world) {\n        var iv = this.i.pb(toPoint(world));\n        return fromRect(iv);\n    };\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    *\n    * Returns the width of items in the `IgrWaterfallSeries`.\n    *\n    * ```ts\n    * let itemSpan: number = series.GetItemSpan();\n    * ```\n    */\n    IgrWaterfallSeries.prototype.getItemSpan = function () {\n        var iv = this.i.f1();\n        return (iv);\n    };\n    return IgrWaterfallSeries;\n}(IgrHorizontalAnchoredCategorySeries));\nexport { IgrWaterfallSeries };\n//# sourceMappingURL=igr-waterfall-series.js.map\n"]},"metadata":{},"sourceType":"module"}