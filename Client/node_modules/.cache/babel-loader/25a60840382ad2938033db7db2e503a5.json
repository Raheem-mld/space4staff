{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrStyle } from \"igniteui-react-core\";\nimport { MarkerType_$type } from \"./MarkerType\";\nimport { CollisionAvoidanceType_$type } from \"./CollisionAvoidanceType\";\nimport { MarkerOutlineMode_$type } from \"./MarkerOutlineMode\";\nimport { MarkerFillMode_$type } from \"./MarkerFillMode\";\nimport { IgrShapeSeriesBase } from \"./igr-shape-series-base\";\nimport { ScatterPolygonSeries } from \"./ScatterPolygonSeries\";\nimport { ensureEnum, brushToString, stringToBrush } from \"igniteui-react-core\";\n/**\n * Series class which renders polygons as Paths based on lists of points in the ItemsSource.\n*/\n\nvar IgrScatterPolygonSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrScatterPolygonSeries, _super);\n\n  function IgrScatterPolygonSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrScatterPolygonSeries.prototype.createImplementation = function () {\n    return new ScatterPolygonSeries();\n  };\n\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"isPolygon\", {\n    /**\n     * Gets whether the current series shows a polygon shape.\n    */\n    get: function () {\n      return this.i.d1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n    /**\n     * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n    */\n    get: function () {\n      return this.i.dw;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"hasMarkers\", {\n    /**\n     * Returns whether the current series supports visual markers.\n    */\n    get: function () {\n      return this.i.hasMarkers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"shapeStyle\", {\n    /**\n     * The default style to apply to all Shapes in the series.\n    */\n    get: function () {\n      if (this.i.tr == null) {\n        return null;\n      }\n\n      if (!this.i.tr.externalObject) {\n        var e = new IgrStyle();\n        e._implementation = this.i.tr;\n        this.i.tr.externalObject = e;\n      }\n\n      return this.i.tr.externalObject;\n    },\n    set: function (v) {\n      v == null ? this.i.tr = null : this.i.tr = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerType\", {\n    /**\n     * Gets or sets the marker type for the current series object.\n     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.\n    */\n    get: function () {\n      return this.i.sf;\n    },\n    set: function (v) {\n      this.i.sf = ensureEnum(MarkerType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerTemplate\", {\n    /**\n     * Gets or sets the MarkerTemplate for the current series object.\n    */\n    get: function () {\n      return this.i.s6;\n    },\n    set: function (v) {\n      this.i.s6 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerThickness\", {\n    /**\n     * Gets or sets thickness of the marker outline\n    */\n    get: function () {\n      return this.i.sn;\n    },\n    set: function (v) {\n      this.i.sn = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"actualMarkerTemplate\", {\n    /**\n     * Gets the effective marker template for the current series object.\n    */\n    get: function () {\n      return this.i.s4;\n    },\n    set: function (v) {\n      this.i.s4 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerBrush\", {\n    /**\n     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.\n    */\n    get: function () {\n      return brushToString(this.i.tn);\n    },\n    set: function (v) {\n      this.i.tn = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"actualMarkerBrush\", {\n    /**\n     * Gets the effective marker brush for the current series object.\n    */\n    get: function () {\n      return brushToString(this.i.tl);\n    },\n    set: function (v) {\n      this.i.tl = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerOutline\", {\n    /**\n     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.\n    */\n    get: function () {\n      return brushToString(this.i.to);\n    },\n    set: function (v) {\n      this.i.to = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"actualMarkerOutline\", {\n    /**\n     * Gets the effective marker outline for the current series object.\n    */\n    get: function () {\n      return brushToString(this.i.tm);\n    },\n    set: function (v) {\n      this.i.tm = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerCollisionAvoidance\", {\n    /**\n     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.\n    */\n    get: function () {\n      return this.i.r6;\n    },\n    set: function (v) {\n      this.i.r6 = ensureEnum(CollisionAvoidanceType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerOutlineMode\", {\n    /**\n     * Gets or sets whether the marker outline is based on the marker brush of the series rather than the marker outlines collection.\n    */\n    get: function () {\n      return this.i.sd;\n    },\n    set: function (v) {\n      this.i.sd = ensureEnum(MarkerOutlineMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerFillMode\", {\n    /**\n     * Gets or sets whether the marker fill is based on the marker outline of the series rather than the marker brushes collection.\n    */\n    get: function () {\n      return this.i.r9;\n    },\n    set: function (v) {\n      this.i.r9 = ensureEnum(MarkerFillMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrScatterPolygonSeries.prototype.findByName = function (name) {\n    var baseResult = _super.prototype.findByName.call(this, name);\n\n    if (baseResult) {\n      return baseResult;\n    }\n\n    if (this.shapeStyle && this.shapeStyle.name && this.shapeStyle.name == name) {\n      return this.shapeStyle;\n    }\n\n    return null;\n  };\n\n  return IgrScatterPolygonSeries;\n}(IgrShapeSeriesBase);\n\nexport { IgrScatterPolygonSeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-scatter-polygon-series.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrStyle } from \"igniteui-react-core\";\nimport { MarkerType_$type } from \"./MarkerType\";\nimport { CollisionAvoidanceType_$type } from \"./CollisionAvoidanceType\";\nimport { MarkerOutlineMode_$type } from \"./MarkerOutlineMode\";\nimport { MarkerFillMode_$type } from \"./MarkerFillMode\";\nimport { IgrShapeSeriesBase } from \"./igr-shape-series-base\";\nimport { ScatterPolygonSeries } from \"./ScatterPolygonSeries\";\nimport { ensureEnum, brushToString, stringToBrush } from \"igniteui-react-core\";\n/**\n * Series class which renders polygons as Paths based on lists of points in the ItemsSource.\n*/\nvar IgrScatterPolygonSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrScatterPolygonSeries, _super);\n    function IgrScatterPolygonSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrScatterPolygonSeries.prototype.createImplementation = function () {\n        return new ScatterPolygonSeries();\n    };\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"isPolygon\", {\n        /**\n         * Gets whether the current series shows a polygon shape.\n        */\n        get: function () {\n            return this.i.d1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n        /**\n         * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n        */\n        get: function () {\n            return this.i.dw;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"hasMarkers\", {\n        /**\n         * Returns whether the current series supports visual markers.\n        */\n        get: function () {\n            return this.i.hasMarkers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"shapeStyle\", {\n        /**\n         * The default style to apply to all Shapes in the series.\n        */\n        get: function () {\n            if (this.i.tr == null) {\n                return null;\n            }\n            if (!this.i.tr.externalObject) {\n                var e = new IgrStyle();\n                e._implementation = this.i.tr;\n                this.i.tr.externalObject = e;\n            }\n            return this.i.tr.externalObject;\n        },\n        set: function (v) {\n            v == null ? this.i.tr = null : this.i.tr = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerType\", {\n        /**\n         * Gets or sets the marker type for the current series object.\n         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.\n        */\n        get: function () {\n            return this.i.sf;\n        },\n        set: function (v) {\n            this.i.sf = ensureEnum(MarkerType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerTemplate\", {\n        /**\n         * Gets or sets the MarkerTemplate for the current series object.\n        */\n        get: function () {\n            return this.i.s6;\n        },\n        set: function (v) {\n            this.i.s6 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerThickness\", {\n        /**\n         * Gets or sets thickness of the marker outline\n        */\n        get: function () {\n            return this.i.sn;\n        },\n        set: function (v) {\n            this.i.sn = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"actualMarkerTemplate\", {\n        /**\n         * Gets the effective marker template for the current series object.\n        */\n        get: function () {\n            return this.i.s4;\n        },\n        set: function (v) {\n            this.i.s4 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerBrush\", {\n        /**\n         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.\n        */\n        get: function () {\n            return brushToString(this.i.tn);\n        },\n        set: function (v) {\n            this.i.tn = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"actualMarkerBrush\", {\n        /**\n         * Gets the effective marker brush for the current series object.\n        */\n        get: function () {\n            return brushToString(this.i.tl);\n        },\n        set: function (v) {\n            this.i.tl = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerOutline\", {\n        /**\n         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.\n        */\n        get: function () {\n            return brushToString(this.i.to);\n        },\n        set: function (v) {\n            this.i.to = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"actualMarkerOutline\", {\n        /**\n         * Gets the effective marker outline for the current series object.\n        */\n        get: function () {\n            return brushToString(this.i.tm);\n        },\n        set: function (v) {\n            this.i.tm = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerCollisionAvoidance\", {\n        /**\n         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.\n        */\n        get: function () {\n            return this.i.r6;\n        },\n        set: function (v) {\n            this.i.r6 = ensureEnum(CollisionAvoidanceType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerOutlineMode\", {\n        /**\n         * Gets or sets whether the marker outline is based on the marker brush of the series rather than the marker outlines collection.\n        */\n        get: function () {\n            return this.i.sd;\n        },\n        set: function (v) {\n            this.i.sd = ensureEnum(MarkerOutlineMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterPolygonSeries.prototype, \"markerFillMode\", {\n        /**\n         * Gets or sets whether the marker fill is based on the marker outline of the series rather than the marker brushes collection.\n        */\n        get: function () {\n            return this.i.r9;\n        },\n        set: function (v) {\n            this.i.r9 = ensureEnum(MarkerFillMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrScatterPolygonSeries.prototype.findByName = function (name) {\n        var baseResult = _super.prototype.findByName.call(this, name);\n        if (baseResult) {\n            return baseResult;\n        }\n        if (this.shapeStyle && this.shapeStyle.name && this.shapeStyle.name == name) {\n            return this.shapeStyle;\n        }\n        return null;\n    };\n    return IgrScatterPolygonSeries;\n}(IgrShapeSeriesBase));\nexport { IgrScatterPolygonSeries };\n//# sourceMappingURL=igr-scatter-polygon-series.js.map\n"]},"metadata":{},"sourceType":"module"}