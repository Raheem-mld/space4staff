{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrColorScale } from \"./igr-color-scale\";\nimport { IgrScatterTriangulationSeries } from \"./igr-scatter-triangulation-series\";\nimport { ScatterAreaSeries } from \"./ScatterAreaSeries\";\nimport { toPoint } from \"igniteui-react-core\";\n/**\n * Series class which draws a colored 2D surface based on a triangulation of XY data with numeric values assigned to each point.\n*/\n\nvar IgrScatterAreaSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrScatterAreaSeries, _super);\n\n  function IgrScatterAreaSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrScatterAreaSeries.prototype.createImplementation = function () {\n    return new ScatterAreaSeries();\n  };\n\n  Object.defineProperty(IgrScatterAreaSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterAreaSeries.prototype, \"isArea\", {\n    /**\n     * Gets whether the current series shows an area shape.\n    */\n    get: function () {\n      return this.i.c7;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterAreaSeries.prototype, \"colorScale\", {\n    /**\n     * Gets or sets ColorScale used to resolve the color values of points in the series.\n    */\n    get: function () {\n      if (this.i.q3 == null) {\n        return null;\n      }\n\n      if (!this.i.q3.externalObject) {\n        var e = IgrColorScale._createFromInternal(this.i.q3);\n\n        if (e) {\n          e._implementation = this.i.q3;\n        }\n\n        this.i.q3.externalObject = e;\n      }\n\n      return this.i.q3.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.q3 = null : this.i.q3 = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterAreaSeries.prototype, \"colorMemberPath\", {\n    /**\n     * Gets or sets the name of the property on each data item containing a numeric value which can be converted to a color by the ColorScale.\n    */\n    get: function () {\n      return this.i.rb;\n    },\n    set: function (v) {\n      this.i.rb = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterAreaSeries.prototype, \"actualColorScale\", {\n    /**\n     * Gets actual color scale that is set on ColorScale property or default ColorScale\n    */\n    get: function () {\n      if (this.i.q2 == null) {\n        return null;\n      }\n\n      if (!this.i.q2.externalObject) {\n        var e = IgrColorScale._createFromInternal(this.i.q2);\n\n        if (e) {\n          e._implementation = this.i.q2;\n        }\n\n        this.i.q2.externalObject = e;\n      }\n\n      return this.i.q2.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.q2 = null : this.i.q2 = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrScatterAreaSeries.prototype.findByName = function (name) {\n    var baseResult = _super.prototype.findByName.call(this, name);\n\n    if (baseResult) {\n      return baseResult;\n    }\n\n    if (this.colorScale && this.colorScale.name && this.colorScale.name == name) {\n      return this.colorScale;\n    }\n\n    if (this.actualColorScale && this.actualColorScale.name && this.actualColorScale.name == name) {\n      return this.actualColorScale;\n    }\n\n    return null;\n  };\n\n  IgrScatterAreaSeries.prototype._styling = function (container, component, parent) {\n    _super.prototype._styling.call(this, container, component, parent);\n\n    this._inStyling = true;\n\n    if (this.colorScale && this.colorScale._styling) {\n      this.colorScale._styling(container, component, this);\n    }\n\n    if (this.actualColorScale && this.actualColorScale._styling) {\n      this.actualColorScale._styling(container, component, this);\n    }\n\n    this._inStyling = false;\n  };\n\n  IgrScatterAreaSeries.prototype.getItemValue = function (item, memberPathName) {\n    var iv = this.i.hk(item, memberPathName);\n    return iv;\n  };\n  /**\n   * Gets the item that is the best match for the specified world coordinates.\n  \r\n  * @param world  * The world coordinates to use.\n  */\n\n\n  IgrScatterAreaSeries.prototype.getItem = function (world) {\n    var iv = this.i.hh(toPoint(world));\n    return iv;\n  };\n  /**\n   * Updates ActualColorScale properties when the ColorScale property has changed\n  \r\n  */\n\n\n  IgrScatterAreaSeries.prototype.updateActualColorScale = function () {\n    this.i.ri();\n  };\n  /**\n   * Attaches an image to the view of this series\n  \r\n  */\n\n\n  IgrScatterAreaSeries.prototype.attachImage = function (image) {\n    this.i.rf(image);\n  };\n\n  return IgrScatterAreaSeries;\n}(IgrScatterTriangulationSeries);\n\nexport { IgrScatterAreaSeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-scatter-area-series.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrColorScale } from \"./igr-color-scale\";\nimport { IgrScatterTriangulationSeries } from \"./igr-scatter-triangulation-series\";\nimport { ScatterAreaSeries } from \"./ScatterAreaSeries\";\nimport { toPoint } from \"igniteui-react-core\";\n/**\n * Series class which draws a colored 2D surface based on a triangulation of XY data with numeric values assigned to each point.\n*/\nvar IgrScatterAreaSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrScatterAreaSeries, _super);\n    function IgrScatterAreaSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrScatterAreaSeries.prototype.createImplementation = function () {\n        return new ScatterAreaSeries();\n    };\n    Object.defineProperty(IgrScatterAreaSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterAreaSeries.prototype, \"isArea\", {\n        /**\n         * Gets whether the current series shows an area shape.\n        */\n        get: function () {\n            return this.i.c7;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterAreaSeries.prototype, \"colorScale\", {\n        /**\n         * Gets or sets ColorScale used to resolve the color values of points in the series.\n        */\n        get: function () {\n            if (this.i.q3 == null) {\n                return null;\n            }\n            if (!this.i.q3.externalObject) {\n                var e = IgrColorScale._createFromInternal(this.i.q3);\n                if (e) {\n                    e._implementation = this.i.q3;\n                }\n                this.i.q3.externalObject = e;\n            }\n            return this.i.q3.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.q3 = null : this.i.q3 = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterAreaSeries.prototype, \"colorMemberPath\", {\n        /**\n         * Gets or sets the name of the property on each data item containing a numeric value which can be converted to a color by the ColorScale.\n        */\n        get: function () {\n            return this.i.rb;\n        },\n        set: function (v) {\n            this.i.rb = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterAreaSeries.prototype, \"actualColorScale\", {\n        /**\n         * Gets actual color scale that is set on ColorScale property or default ColorScale\n        */\n        get: function () {\n            if (this.i.q2 == null) {\n                return null;\n            }\n            if (!this.i.q2.externalObject) {\n                var e = IgrColorScale._createFromInternal(this.i.q2);\n                if (e) {\n                    e._implementation = this.i.q2;\n                }\n                this.i.q2.externalObject = e;\n            }\n            return this.i.q2.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.q2 = null : this.i.q2 = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrScatterAreaSeries.prototype.findByName = function (name) {\n        var baseResult = _super.prototype.findByName.call(this, name);\n        if (baseResult) {\n            return baseResult;\n        }\n        if (this.colorScale && this.colorScale.name && this.colorScale.name == name) {\n            return this.colorScale;\n        }\n        if (this.actualColorScale && this.actualColorScale.name && this.actualColorScale.name == name) {\n            return this.actualColorScale;\n        }\n        return null;\n    };\n    IgrScatterAreaSeries.prototype._styling = function (container, component, parent) {\n        _super.prototype._styling.call(this, container, component, parent);\n        this._inStyling = true;\n        if (this.colorScale && this.colorScale._styling) {\n            this.colorScale._styling(container, component, this);\n        }\n        if (this.actualColorScale && this.actualColorScale._styling) {\n            this.actualColorScale._styling(container, component, this);\n        }\n        this._inStyling = false;\n    };\n    IgrScatterAreaSeries.prototype.getItemValue = function (item, memberPathName) {\n        var iv = this.i.hk(item, memberPathName);\n        return (iv);\n    };\n    /**\n     * Gets the item that is the best match for the specified world coordinates.\n    \r\n    * @param world  * The world coordinates to use.\n    */\n    IgrScatterAreaSeries.prototype.getItem = function (world) {\n        var iv = this.i.hh(toPoint(world));\n        return (iv);\n    };\n    /**\n     * Updates ActualColorScale properties when the ColorScale property has changed\n    \r\n    */\n    IgrScatterAreaSeries.prototype.updateActualColorScale = function () {\n        this.i.ri();\n    };\n    /**\n     * Attaches an image to the view of this series\n    \r\n    */\n    IgrScatterAreaSeries.prototype.attachImage = function (image) {\n        this.i.rf(image);\n    };\n    return IgrScatterAreaSeries;\n}(IgrScatterTriangulationSeries));\nexport { IgrScatterAreaSeries };\n//# sourceMappingURL=igr-scatter-area-series.js.map\n"]},"metadata":{},"sourceType":"module"}