{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrVerticalStackedSeriesBase } from \"./igr-vertical-stacked-series-base\";\nimport { StackedBarSeries } from \"./StackedBarSeries\";\nimport { toPoint } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent stacked bar series.\n*/\n\nvar IgrStackedBarSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrStackedBarSeries, _super);\n\n  function IgrStackedBarSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrStackedBarSeries.prototype.createImplementation = function () {\n    return new StackedBarSeries();\n  };\n\n  Object.defineProperty(IgrStackedBarSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedBarSeries.prototype, \"isBar\", {\n    /**\n     * Gets whether the current series shows a bar shape.\n    */\n    get: function () {\n      return this.i.c9;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedBarSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n    /**\n     * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n    */\n    get: function () {\n      return this.i.dw;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedBarSeries.prototype, \"radiusX\", {\n    /**\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the bar.\n    */\n    get: function () {\n      return this.i.t1;\n    },\n    set: function (v) {\n      this.i.t1 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedBarSeries.prototype, \"radiusY\", {\n    /**\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the bar.\n    */\n    get: function () {\n      return this.i.t2;\n    },\n    set: function (v) {\n      this.i.t2 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Scrolls the series to display the item for the specified data item.\n   * The series is scrolled by the minimum amount required to place the specified data item within\n   * the central 80% of the visible axis.\n  \r\n  * @param item  * The data item (item) to scroll to.\n  */\n\n  IgrStackedBarSeries.prototype.scrollIntoView = function (item) {\n    var iv = this.i.eh(item);\n    return iv;\n  };\n  /**\n   * Gets the index of the item that resides at the provided world coordinates.\n  \r\n  * @param world  * The world coordinates of the requested item.\n  */\n\n\n  IgrStackedBarSeries.prototype.getItemIndex = function (world) {\n    var iv = this.i.g0(toPoint(world));\n    return iv;\n  };\n  /**\n   * Gets the item that is the best match for the specified world coordinates.\n  \r\n  * @param world  * The world coordinates to use.\n  */\n\n\n  IgrStackedBarSeries.prototype.getItem = function (world) {\n    var iv = this.i.hh(toPoint(world));\n    return iv;\n  };\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  */\n\n\n  IgrStackedBarSeries.prototype.getItemSpan = function () {\n    var iv = this.i.f1();\n    return iv;\n  };\n\n  return IgrStackedBarSeries;\n}(IgrVerticalStackedSeriesBase);\n\nexport { IgrStackedBarSeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-stacked-bar-series.ts"],"names":[],"mappings":";AAKA,SAAS,4BAAT,QAAiF,oCAAjF;AAKA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,SAAqB,OAArB,QAAoC,qBAApC;AAEA;;AAEE;;AACF,IAAA,mBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0G,EAAA,SAAA,CAAA,mBAAA,EAAA,MAAA,CAAA;;AAazG,WAAA,mBAAA,CAAY,KAAZ,EAAoB;WACgB,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AAG/C;;AAdQ,EAAA,mBAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,gBAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,mBAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;AAE+B;SACH,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;qBAAA;;AAAA,GAAZ;AAW5B,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;AAHT;;AAEE;SACF,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFQ;qBAAA;;AAAA,GAAT;AAMA,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,8BAAJ,EAAgC;AAHhC;;AAEE;SACF,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAF+B;qBAAA;;AAAA,GAAhC;AAMA,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;AAEE;SACF,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;SAGX,UAAY,CAAZ,EAAqB;AACpB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALU;qBAAA;;AAAA,GAAX;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;AAEE;SACF,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;SAGX,UAAY,CAAZ,EAAqB;AACpB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALU;qBAAA;;AAAA,GAAX;AAMA;;;;;;AAME;;AACK,EAAA,mBAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,IAAtB,EAA+B;AAC9B,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,IAAV,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;AAIP;;;;AAIE;;;AACK,EAAA,mBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,KAApB,EAAkC;AACjC,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;AAIP;;;;AAIE;;;AACK,EAAA,mBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,KAAf,EAA6B;AAC5B,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;AAIP;;;AAGE;;;AACK,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACC,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,EAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIR,SAAA,mBAAA;AAAC,CArFD,CAA0G,4BAA1G,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrVerticalStackedSeriesBase } from \"./igr-vertical-stacked-series-base\";\nimport { StackedBarSeries } from \"./StackedBarSeries\";\nimport { toPoint } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent stacked bar series.\n*/\nvar IgrStackedBarSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrStackedBarSeries, _super);\n    function IgrStackedBarSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrStackedBarSeries.prototype.createImplementation = function () {\n        return new StackedBarSeries();\n    };\n    Object.defineProperty(IgrStackedBarSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedBarSeries.prototype, \"isBar\", {\n        /**\n         * Gets whether the current series shows a bar shape.\n        */\n        get: function () {\n            return this.i.c9;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedBarSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n        /**\n         * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n        */\n        get: function () {\n            return this.i.dw;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedBarSeries.prototype, \"radiusX\", {\n        /**\n         * Gets or sets the x-radius of the ellipse that is used to round the corners of the bar.\n        */\n        get: function () {\n            return this.i.t1;\n        },\n        set: function (v) {\n            this.i.t1 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedBarSeries.prototype, \"radiusY\", {\n        /**\n         * Gets or sets the y-radius of the ellipse that is used to round the corners of the bar.\n        */\n        get: function () {\n            return this.i.t2;\n        },\n        set: function (v) {\n            this.i.t2 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Scrolls the series to display the item for the specified data item.\n     * The series is scrolled by the minimum amount required to place the specified data item within\n     * the central 80% of the visible axis.\n    \r\n    * @param item  * The data item (item) to scroll to.\n    */\n    IgrStackedBarSeries.prototype.scrollIntoView = function (item) {\n        var iv = this.i.eh(item);\n        return (iv);\n    };\n    /**\n     * Gets the index of the item that resides at the provided world coordinates.\n    \r\n    * @param world  * The world coordinates of the requested item.\n    */\n    IgrStackedBarSeries.prototype.getItemIndex = function (world) {\n        var iv = this.i.g0(toPoint(world));\n        return (iv);\n    };\n    /**\n     * Gets the item that is the best match for the specified world coordinates.\n    \r\n    * @param world  * The world coordinates to use.\n    */\n    IgrStackedBarSeries.prototype.getItem = function (world) {\n        var iv = this.i.hh(toPoint(world));\n        return (iv);\n    };\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    */\n    IgrStackedBarSeries.prototype.getItemSpan = function () {\n        var iv = this.i.f1();\n        return (iv);\n    };\n    return IgrStackedBarSeries;\n}(IgrVerticalStackedSeriesBase));\nexport { IgrStackedBarSeries };\n//# sourceMappingURL=igr-stacked-bar-series.js.map\n"]},"metadata":{},"sourceType":"module"}