{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport * as React from 'react';\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { LabelsPosition_$type } from \"./LabelsPosition\";\nimport { Visibility_$type } from \"igniteui-react-core\";\nimport { LeaderLineType_$type } from \"./LeaderLineType\";\nimport { OthersCategoryType_$type } from \"./OthersCategoryType\";\nimport { IgrIndexCollection } from \"./igr-index-collection\";\nimport { SweepDirection_$type } from \"igniteui-react-core\";\nimport { SliceSelectionMode_$type } from \"./SliceSelectionMode\";\nimport { IgrObjectCollection } from \"igniteui-react-core\";\nimport { IgrLabelClickEventArgs } from \"./igr-label-click-event-args\";\nimport { IgrSelectedItemChangingEventArgs } from \"./igr-selected-item-changing-event-args\";\nimport { IgrSelectedItemsChangingEventArgs } from \"./igr-selected-items-changing-event-args\";\nimport { IgrSelectedItemChangedEventArgs } from \"./igr-selected-item-changed-event-args\";\nimport { IgrSelectedItemsChangedEventArgs } from \"./igr-selected-items-changed-event-args\";\nimport { IgrSliceClickEventArgs } from \"./igr-slice-click-event-args\";\nimport { IgrSliceEventArgs } from \"./igr-slice-event-args\";\nimport { TypeRegistrar, Number_$type, Base } from \"igniteui-react-core\";\nimport { NamePatcher, getModifiedProps, isValidProp, ensureEnum, brushToString, stringToBrush, ensureBool, toBrushCollection, fromBrushCollection, arrayFindByName, toSpinal, initializePropertiesFromCss, toPoint } from \"igniteui-react-core\";\nimport { IndexCollection as IndexCollection_internal } from \"./IndexCollection\";\nimport { SyncableObservableCollection$1 } from \"igniteui-react-core\";\nimport { Style } from \"igniteui-react-core\";\nimport { ObjectCollection as ObjectCollection_internal } from \"igniteui-react-core\";\n/**\n * Represents the base class for the pie chart.\n*/\n\nvar IgrPieChartBase =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrPieChartBase, _super);\n\n  function IgrPieChartBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._explodedSlices = null;\n    _this._selectedItems = null;\n    _this.__p = null;\n    _this._hasUserValues = new Set();\n    _this._stylingContainer = null;\n    _this._stylingParent = null;\n    _this._inStyling = false;\n    _this._labelClick = null;\n    _this._labelClick_wrapped = null;\n    _this._selectedItemChanging = null;\n    _this._selectedItemChanging_wrapped = null;\n    _this._selectedItemsChanging = null;\n    _this._selectedItemsChanging_wrapped = null;\n    _this._selectedItemChanged = null;\n    _this._selectedItemChanged_wrapped = null;\n    _this._selectedItemsChanged = null;\n    _this._selectedItemsChanged_wrapped = null;\n    _this._sliceClick = null;\n    _this._sliceClick_wrapped = null;\n    _this._sliceEnter = null;\n    _this._sliceEnter_wrapped = null;\n    _this._sliceLeave = null;\n    _this._sliceLeave_wrapped = null;\n    _this._sliceHover = null;\n    _this._sliceHover_wrapped = null;\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._implementation = _this.createImplementation();\n    _this._implementation.externalObject = _this;\n\n    _this.onImplementationCreated();\n\n    return _this;\n  }\n\n  IgrPieChartBase.prototype.createImplementation = function () {\n    return null;\n  };\n\n  Object.defineProperty(IgrPieChartBase.prototype, \"i\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this._implementation;\n    }\n    /**\n                               * @hidden\n                               */\n    ,\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrPieChartBase._createFromInternal = function (internal) {\n    if (!internal) {\n      return null;\n    }\n\n    if (!internal.$type) {\n      return null;\n    }\n\n    var name = internal.$type.name;\n    var externalName = \"Igr\" + name;\n\n    if (!TypeRegistrar.isRegistered(externalName)) {\n      return null;\n    }\n\n    return TypeRegistrar.create(externalName);\n  };\n\n  IgrPieChartBase.prototype.onImplementationCreated = function () {};\n\n  IgrPieChartBase.prototype.componentDidMount = function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = this.props[p];\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  IgrPieChartBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var e_2, _a;\n\n    var mod = getModifiedProps(this.props, nextProps);\n\n    try {\n      for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = mod[p];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return true;\n  };\n\n  IgrPieChartBase.prototype.render = function () {\n    return null;\n  };\n\n  Object.defineProperty(IgrPieChartBase.prototype, \"innerExtent\", {\n    /**\n     * Gets or sets the amount of space between the center and the start of the arc. This property should be set between 0 and 1.\n     * If InnerExtent is set to a value greater than 1, it will be interpreted as a percentage, effectively divided by 100.\n    */\n    get: function () {\n      return this.i.c7;\n    },\n    set: function (v) {\n      this.i.c7 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"valueMemberPath\", {\n    /**\n     * Gets or Sets the property name that contains the values.\n    */\n    get: function () {\n      return this.i.fq;\n    },\n    set: function (v) {\n      this.i.fq = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"labelMemberPath\", {\n    /**\n     * Gets or sets the property name that contains the labels.\n    */\n    get: function () {\n      return this.i.ef;\n    },\n    set: function (v) {\n      this.i.ef = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"legendLabelMemberPath\", {\n    /**\n     * Gets or sets the property name that contains the legend labels.\n    */\n    get: function () {\n      return this.i.eu;\n    },\n    set: function (v) {\n      this.i.eu = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"labelsPosition\", {\n    /**\n     * Gets or sets the position of chart labels.\n    */\n    get: function () {\n      return this.i.az;\n    },\n    set: function (v) {\n      this.i.az = ensureEnum(LabelsPosition_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"labelOuterColor\", {\n    /**\n     * Gets or sets the color for labels rendered outside of the pie chart.\n    */\n    get: function () {\n      return brushToString(this.i.iu);\n    },\n    set: function (v) {\n      this.i.iu = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"labelInnerColor\", {\n    /**\n     * Gets or sets the color for labels rendered inside of the pie chart.\n    */\n    get: function () {\n      return brushToString(this.i.it);\n    },\n    set: function (v) {\n      this.i.it = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"actualLabelOuterColor\", {\n    /**\n     * Gets the actual color for labels rendered outside of the pie chart.\n    */\n    get: function () {\n      return brushToString(this.i.is);\n    },\n    set: function (v) {\n      this.i.is = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"actualLabelInnerColor\", {\n    /**\n     * Gets the actual color for labels rendered inside of the pie chart.\n    */\n    get: function () {\n      return brushToString(this.i.ir);\n    },\n    set: function (v) {\n      this.i.ir = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"leaderLineVisibility\", {\n    /**\n     * Gets or sets whether the leader lines are visible.\n    */\n    get: function () {\n      return this.i.i7;\n    },\n    set: function (v) {\n      this.i.i7 = ensureEnum(Visibility_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"leaderLineType\", {\n    /**\n     * Gets or sets what type of leader lines will be used for the outside end labels.\n    */\n    get: function () {\n      return this.i.a0;\n    },\n    set: function (v) {\n      this.i.a0 = ensureEnum(LeaderLineType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"leaderLineMargin\", {\n    /**\n     * Gets or sets the margin between a label and the end of its leader line. The default is 6 pixels.\n    */\n    get: function () {\n      return this.i.c9;\n    },\n    set: function (v) {\n      this.i.c9 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"toolTip\", {\n    /**\n     * Gets or sets the ToolTip for the chart.\n    */\n    get: function () {\n      return this.i.dn;\n    },\n    set: function (v) {\n      this.i.dn = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"othersCategoryThreshold\", {\n    /**\n     * Gets or sets the threshold value that determines if slices are grouped into the Others slice.\n    */\n    get: function () {\n      return this.i.da;\n    },\n    set: function (v) {\n      this.i.da = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"othersCategoryType\", {\n    /**\n     * Gets or sets whether to use numeric or percent-based threshold value.\n    */\n    get: function () {\n      return this.i.a1;\n    },\n    set: function (v) {\n      this.i.a1 = ensureEnum(OthersCategoryType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"othersCategoryText\", {\n    /**\n     * Gets or sets the label of the Others slice.\n    */\n    get: function () {\n      return this.i.e1;\n    },\n    set: function (v) {\n      this.i.e1 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"explodedRadius\", {\n    /**\n     * Determines how much the exploded slice is offset from the center. Value between 0 and 1.\n    */\n    get: function () {\n      return this.i.c2;\n    },\n    set: function (v) {\n      this.i.c2 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"radiusFactor\", {\n    /**\n     * Gets or sets the scaling factor of the chart's radius. Value between 0 and 1.\n    */\n    get: function () {\n      return this.i.dd;\n    },\n    set: function (v) {\n      this.i.dd = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"allowSliceSelection\", {\n    /**\n     * Gets or sets whether the slices can be selected.\n    */\n    get: function () {\n      return this.i.b7;\n    },\n    set: function (v) {\n      this.i.b7 = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"allowSliceExplosion\", {\n    /**\n     * Gets or sets whether the slices can be exploded.\n    */\n    get: function () {\n      return this.i.b6;\n    },\n    set: function (v) {\n      this.i.b6 = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"explodedSlices\", {\n    /**\n     * Gets or sets the collection of exploded slice indices.\n    */\n    get: function () {\n      if (this._explodedSlices === null) {\n        var coll = new IgrIndexCollection();\n        var innerColl = this.i.explodedSlices;\n\n        if (!innerColl) {\n          innerColl = new IndexCollection_internal();\n        }\n\n        this._explodedSlices = coll._fromInner(innerColl);\n        this.i.explodedSlices = innerColl;\n      }\n\n      return this._explodedSlices;\n    },\n    set: function (v) {\n      if (this._explodedSlices !== null) {\n        this._explodedSlices._setSyncTarget(null);\n\n        this._explodedSlices = null;\n      }\n\n      var coll = new IgrIndexCollection();\n      this._explodedSlices = coll._fromOuter(v);\n      var syncColl = new SyncableObservableCollection$1(Number_$type);\n      var innerColl = this.i.explodedSlices;\n\n      if (!innerColl) {\n        innerColl = new IndexCollection_internal();\n      }\n\n      syncColl._inner = innerColl;\n      syncColl.clear();\n\n      this._explodedSlices._setSyncTarget(syncColl);\n\n      this.i.explodedSlices = innerColl;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"labelExtent\", {\n    /**\n     * Gets or sets the pixel amount by which the labels are offset from the edge of the slices.\n    */\n    get: function () {\n      return this.i.c8;\n    },\n    set: function (v) {\n      this.i.c8 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"startAngle\", {\n    /**\n     * Gets or sets the starting angle of the chart.\n     * The default zero value is equivalent to 3 o'clock.\n    */\n    get: function () {\n      return this.i.df;\n    },\n    set: function (v) {\n      this.i.df = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"sweepDirection\", {\n    /**\n     * Gets or sets the rotational direction of the chart.\n    */\n    get: function () {\n      return this.i.iw;\n    },\n    set: function (v) {\n      this.i.iw = ensureEnum(SweepDirection_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"othersCategoryFill\", {\n    /**\n     * Gets or sets the fill brush.\n    */\n    get: function () {\n      return this.i.i4 ? this.i.i4.fill : null;\n    },\n    set: function (v) {\n      this.ensureOthersCategoryStyle();\n      this.i.i4.fill = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"othersCategoryStroke\", {\n    /**\n     * Gets or sets the stroke brush.\n    */\n    get: function () {\n      return this.i.i4 ? this.i.i4.stroke : null;\n    },\n    set: function (v) {\n      this.ensureOthersCategoryStyle();\n      this.i.i4.stroke = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"othersCategoryStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness.\n    */\n    get: function () {\n      return this.i.i4 ? this.i.i4.strokeThickness : NaN;\n    },\n    set: function (v) {\n      this.ensureOthersCategoryStyle();\n      this.i.i4.strokeThickness = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"othersCategoryOpacity\", {\n    /**\n     * Gets or sets the opacity.\n    */\n    get: function () {\n      return this.i.i4 ? this.i.i4.opacity : NaN;\n    },\n    set: function (v) {\n      this.ensureOthersCategoryStyle();\n      this.i.i4.opacity = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrPieChartBase.prototype.ensureOthersCategoryStyle = function () {\n    if (this.i.i4) {\n      return;\n    }\n\n    this.i.i4 = new Style();\n  };\n\n  Object.defineProperty(IgrPieChartBase.prototype, \"selectedSliceFill\", {\n    /**\n     * Gets or sets the fill brush.\n    */\n    get: function () {\n      return this.i.i5 ? this.i.i5.fill : null;\n    },\n    set: function (v) {\n      this.ensureSelectedStyle();\n      this.i.i5.fill = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"selectedSliceStroke\", {\n    /**\n     * Gets or sets the stroke brush.\n    */\n    get: function () {\n      return this.i.i5 ? this.i.i5.stroke : null;\n    },\n    set: function (v) {\n      this.ensureSelectedStyle();\n      this.i.i5.stroke = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"selectedSliceStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness.\n    */\n    get: function () {\n      return this.i.i5 ? this.i.i5.strokeThickness : NaN;\n    },\n    set: function (v) {\n      this.ensureSelectedStyle();\n      this.i.i5.strokeThickness = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"selectedSliceOpacity\", {\n    /**\n     * Gets or sets the opacity.\n    */\n    get: function () {\n      return this.i.i5 ? this.i.i5.opacity : NaN;\n    },\n    set: function (v) {\n      this.ensureSelectedStyle();\n      this.i.i5.opacity = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrPieChartBase.prototype.ensureSelectedStyle = function () {\n    if (this.i.i5) {\n      return;\n    }\n\n    this.i.i5 = new Style();\n  };\n\n  Object.defineProperty(IgrPieChartBase.prototype, \"brushes\", {\n    /**\n     * Gets or sets the palette of brushes to use for coloring the slices.\n    */\n    get: function () {\n      return fromBrushCollection(this.i.am);\n    },\n    set: function (v) {\n      this.i.am = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"actualBrushes\", {\n    /**\n     * Gets the actual palette of brushes to use for coloring the slices.\n    */\n    get: function () {\n      return fromBrushCollection(this.i.ak);\n    },\n    set: function (v) {\n      this.i.ak = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"outlines\", {\n    /**\n     * Gets or sets the palette of brushes to use for outlines on the slices.\n    */\n    get: function () {\n      return fromBrushCollection(this.i.an);\n    },\n    set: function (v) {\n      this.i.an = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"actualOutlines\", {\n    /**\n     * Gets the actual palette of brushes to use for outlines on the slices.\n    */\n    get: function () {\n      return fromBrushCollection(this.i.al);\n    },\n    set: function (v) {\n      this.i.al = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"labelFormat\", {\n    /**\n     * Gets or sets the label format string to use for the label.\n    */\n    get: function () {\n      return this.i.eb;\n    },\n    set: function (v) {\n      this.i.eb = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"labelFormatSpecifiers\", {\n    /**\n     * Gets or sets the format specifiers to use with the LabelFormat string.\n    */\n    get: function () {\n      return this.i.ag;\n    },\n    set: function (v) {\n      if (v && !Array.isArray(v) && typeof v == \"string\") {\n        var re = /\\s*(?:,|\\s|$)\\s*/gm;\n        v = v.split(re);\n      }\n\n      this.i.ag = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"othersLabelFormat\", {\n    /**\n     * Gets or sets the label format string to use for the label.\n    */\n    get: function () {\n      return this.i.e5;\n    },\n    set: function (v) {\n      this.i.e5 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"othersLabelFormatSpecifiers\", {\n    /**\n     * Gets or sets the format specifiers to use with the OthersLabelFormat string.\n    */\n    get: function () {\n      return this.i.aj;\n    },\n    set: function (v) {\n      if (v && !Array.isArray(v) && typeof v == \"string\") {\n        var re = /\\s*(?:,|\\s|$)\\s*/gm;\n        v = v.split(re);\n      }\n\n      this.i.aj = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"legendLabelFormat\", {\n    /**\n     * Gets or sets the label format string to use for the label.\n    */\n    get: function () {\n      return this.i.er;\n    },\n    set: function (v) {\n      this.i.er = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"legendLabelFormatSpecifiers\", {\n    /**\n     * Gets or sets the format specifiers to use with the LegendLabelFormat string.\n    */\n    get: function () {\n      return this.i.ah;\n    },\n    set: function (v) {\n      if (v && !Array.isArray(v) && typeof v == \"string\") {\n        var re = /\\s*(?:,|\\s|$)\\s*/gm;\n        v = v.split(re);\n      }\n\n      this.i.ah = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"legendOthersLabelFormat\", {\n    /**\n     * Gets or sets the label format string to use for the label.\n    */\n    get: function () {\n      return this.i.ew;\n    },\n    set: function (v) {\n      this.i.ew = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"legendOthersLabelFormatSpecifiers\", {\n    /**\n     * Gets or sets the format specifiers to use with the LegendOthersLabelFormat string.\n    */\n    get: function () {\n      return this.i.ai;\n    },\n    set: function (v) {\n      if (v && !Array.isArray(v) && typeof v == \"string\") {\n        var re = /\\s*(?:,|\\s|$)\\s*/gm;\n        v = v.split(re);\n      }\n\n      this.i.ai = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"legendItemTemplate\", {\n    /**\n     * Gets or sets the LegendItemTemplate property.\n     * The legend item control content is created according to the LegendItemTemplate on-demand by\n     * the chart object itself.\n    */\n    get: function () {\n      return this.i.legendItemTemplate;\n    },\n    set: function (v) {\n      this.i.legendItemTemplate = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"legendItemBadgeTemplate\", {\n    /**\n     * Gets or sets the LegendItemBadgeTemplate property.\n     * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by\n     * the chart object itself.\n    */\n    get: function () {\n      return this.i.legendItemBadgeTemplate;\n    },\n    set: function (v) {\n      this.i.legendItemBadgeTemplate = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"isSurfaceInteractionDisabled\", {\n    /**\n     * Gets or sets whether all surface interactions with the plot area should be disabled.\n    */\n    get: function () {\n      return this.i.cc;\n    },\n    set: function (v) {\n      this.i.cc = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"shouldDisplayMockData\", {\n    /**\n     * Gets or sets whether the pie chart should display mock data when data isn't present.\n    */\n    get: function () {\n      return this.i.ce;\n    },\n    set: function (v) {\n      this.i.ce = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"shouldUseSkeletonStyleForMockData\", {\n    /**\n     * Gets or sets whether the pie chart should use a skeleton style for mock data.\n    */\n    get: function () {\n      return this.i.cf;\n    },\n    set: function (v) {\n      this.i.cf = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"formatLabel\", {\n    /**\n     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.\n    */\n    get: function () {\n      return this.i.a4;\n    },\n    set: function (v) {\n      this.i.a4 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"formatLegendLabel\", {\n    /**\n     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart's legend.\n    */\n    get: function () {\n      return this.i.a5;\n    },\n    set: function (v) {\n      this.i.a5 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"pixelScalingRatio\", {\n    /**\n     * Gets or sets the scaling value used to affect the pixel density of the control.\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n     * to appear blurry.\n    */\n    get: function () {\n      return this.i.dc;\n    },\n    set: function (v) {\n      this.i.dc = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"actualPixelScalingRatio\", {\n    /**\n     * Resolved pixel scaling ratio. Unless explicitly overridden by the PieChartBase.PixelScalingRatio property,\n     * this one returns the default ratio enforced by device. High resolution devices will initialize this property\n     * to a higher value.\n    */\n    get: function () {\n      return this.i.cz;\n    },\n    set: function (v) {\n      this.i.cz = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"selectionMode\", {\n    /**\n     * Gets or sets which mode to use for selecting slices.\n    */\n    get: function () {\n      return this.i.bi;\n    },\n    set: function (v) {\n      this.i.bi = ensureEnum(SliceSelectionMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"selectedItem\", {\n    /**\n     * Gets or sets the currently selected data item.  If a different data item is provided the pie chart\n     * will select the slice associated with the new item.\n    */\n    get: function () {\n      return this.i.selectedItem;\n    },\n    set: function (v) {\n      this.i.selectedItem = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"selectedItems\", {\n    /**\n     * Gets the currently selected data items.  Adding or removing data items from this collection will\n     * select or deselect the slices associated with those items.\n    */\n    get: function () {\n      if (this._selectedItems === null) {\n        var coll = new IgrObjectCollection();\n        var innerColl = this.i.selectedItems;\n\n        if (!innerColl) {\n          innerColl = new ObjectCollection_internal(0);\n        }\n\n        this._selectedItems = coll._fromInner(innerColl);\n        this.i.selectedItems = innerColl;\n      }\n\n      return this._selectedItems;\n    },\n    set: function (v) {\n      if (this._selectedItems !== null) {\n        this._selectedItems._setSyncTarget(null);\n\n        this._selectedItems = null;\n      }\n\n      var coll = new IgrObjectCollection();\n      this._selectedItems = coll._fromOuter(v);\n      var syncColl = new SyncableObservableCollection$1(Base.$type);\n      var innerColl = this.i.selectedItems;\n\n      if (!innerColl) {\n        innerColl = new ObjectCollection_internal(0);\n      }\n\n      syncColl._inner = innerColl;\n      syncColl.clear();\n\n      this._selectedItems._setSyncTarget(syncColl);\n\n      this.i.selectedItems = innerColl;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"textStyle\", {\n    /**\n     * Manually overrides the style to use for the labels.\n    */\n    get: function () {\n      return this.i.fl;\n    },\n    set: function (v) {\n      this.i.fl = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrPieChartBase.prototype.findByName = function (name) {\n    if (this.legend && this.legend.name && this.legend.name == name) {\n      return this.legend;\n    }\n\n    if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {\n      return arrayFindByName(this.labelFormatSpecifiers, name);\n    }\n\n    if (this.othersLabelFormatSpecifiers != null && arrayFindByName(this.othersLabelFormatSpecifiers, name)) {\n      return arrayFindByName(this.othersLabelFormatSpecifiers, name);\n    }\n\n    if (this.legendLabelFormatSpecifiers != null && arrayFindByName(this.legendLabelFormatSpecifiers, name)) {\n      return arrayFindByName(this.legendLabelFormatSpecifiers, name);\n    }\n\n    if (this.legendOthersLabelFormatSpecifiers != null && arrayFindByName(this.legendOthersLabelFormatSpecifiers, name)) {\n      return arrayFindByName(this.legendOthersLabelFormatSpecifiers, name);\n    }\n\n    return null;\n  };\n\n  Object.defineProperty(IgrPieChartBase.prototype, \"hasUserValues\", {\n    get: function () {\n      return this._hasUserValues;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrPieChartBase.prototype.__m = function (propertyName) {\n    if (!this._inStyling) {\n      this._hasUserValues.add(propertyName);\n    }\n  };\n\n  IgrPieChartBase.prototype._styling = function (container, component, parent) {\n    if (this._inStyling) {\n      return;\n    }\n\n    this._inStyling = true;\n    this._stylingContainer = container;\n    this._stylingParent = component;\n    var genericPrefix = \"\";\n    var typeName = this.i.$type.name;\n\n    if (typeName.indexOf(\"Xam\") === 0) {\n      typeName = typeName.substring(3);\n    }\n\n    genericPrefix = toSpinal(\"PieChartBase\");\n    var additionalPrefixes = [];\n    var prefix = toSpinal(typeName);\n    additionalPrefixes.push(prefix + \"-\");\n    var b = this.i.$type.baseType;\n\n    while (b && b.name != \"Object\" && b.name != \"Base\" && b.name != \"Control\" && b.Name != \"DependencyObject\" && b.Name != \"FrameworkElement\") {\n      typeName = b.name;\n\n      if (typeName.indexOf(\"Xam\") === 0) {\n        typeName = typeName.substring(3);\n      }\n\n      var basePrefix = toSpinal(typeName);\n      additionalPrefixes.push(basePrefix + \"-\");\n      b = b.baseType;\n    }\n\n    if (parent) {\n      var parentTypeName = parent.i.$type.name;\n\n      if (parentTypeName.indexOf(\"Xam\") === 0) {\n        parentTypeName = parentTypeName.substring(3);\n      }\n\n      var parentPrefix = toSpinal(parentTypeName);\n      additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n      additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n    }\n\n    initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n\n    if (this._otherStyling) {\n      this._otherStyling(container, component, parent);\n    }\n\n    this._inStyling = false;\n  };\n  /**\n   * Returns the chart visuals expressed as a serialized string.\n  \r\n  */\n\n\n  IgrPieChartBase.prototype.exportSerializedVisualData = function () {\n    var iv = this.i.d1();\n    return iv;\n  };\n  /**\n   * Simulates a mouse click action at the specified point.\n  \r\n  * @param point  * The point to click at.\n  */\n\n\n  IgrPieChartBase.prototype.simulateLeftClick = function (point) {\n    this.i.g0(toPoint(point));\n  };\n  /**\n   * Invoked by the containing object to provide reference to the container.\n  \r\n  * @param container  * Reference to the container.\n  */\n\n\n  IgrPieChartBase.prototype.provideContainer = function (container) {\n    this.i.provideContainer(container);\n  };\n  /**\n   * Notification from the containing object that the container has been resized.\n  \r\n  */\n\n\n  IgrPieChartBase.prototype.notifyContainerResized = function () {\n    this.i.notifyContainerResized();\n  };\n  /**\n   * Invoked when the instance is being destroyed.\n  \r\n  */\n\n\n  IgrPieChartBase.prototype.destroy = function () {\n    this.i.destroy();\n  };\n  /**\n   * Use to force the pie chart to finish any deferred work before printing or evaluating its visual.\n   * This should only be called if the visual of the pie chart needs to be synchronously saved or evaluated.\n   * Calling this method too often will hinder the performance of the pie chart.\n  \r\n  */\n\n\n  IgrPieChartBase.prototype.flush = function () {\n    this.i.fv();\n  };\n\n  IgrPieChartBase.prototype.notifySetItem = function (source_, index, oldItem, newItem) {\n    this.i.f4(source_, index, oldItem, newItem);\n  };\n  /**\n   * Manually notifies the pie chart's data source that the data it has bound to has been cleared and needs to be re-examined.\n   * This should not be called if the data that the pie chart is bound to is already observable.\n  \r\n  * @param source_  * The data source.\n  */\n\n\n  IgrPieChartBase.prototype.notifyClearItems = function (source_) {\n    this.i.f0(source_);\n  };\n\n  IgrPieChartBase.prototype.notifyInsertItem = function (source_, index, newItem) {\n    this.i.f2(source_, index, newItem);\n  };\n\n  IgrPieChartBase.prototype.notifyRemoveItem = function (source_, index, oldItem) {\n    this.i.f3(source_, index, oldItem);\n  };\n  /**\n   * Assigns data source for the items.\n  \r\n  * @param source_  * Array of the data source items.\n  */\n\n\n  IgrPieChartBase.prototype.setWidgetLevelDataSource = function (source_) {\n    this.i.gz(source_);\n  };\n  /**\n   * Resets items data source.\n  \r\n  */\n\n\n  IgrPieChartBase.prototype.removeWidgetLevelDataSource = function () {\n    this.i.gq();\n  };\n  /**\n   * Invoked when style is updated.\n  \r\n  */\n\n\n  IgrPieChartBase.prototype.styleUpdated = function () {\n    this.i.g4();\n  };\n\n  Object.defineProperty(IgrPieChartBase.prototype, \"labelClick\", {\n    /**\n     * Raised when the slice's label is clicked.\n    */\n    get: function () {\n      return this._labelClick;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._labelClick_wrapped !== null) {\n        this.i.labelClick = delegateRemove(this.i.labelClick, this._labelClick_wrapped);\n        this._labelClick_wrapped = null;\n        this._labelClick = null;\n      }\n\n      this._labelClick = ev;\n\n      this._labelClick_wrapped = function (o, e) {\n        var outerArgs = new IgrLabelClickEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeLabelClick) {\n          _this.beforeLabelClick(_this, outerArgs);\n        }\n\n        if (_this._labelClick) {\n          _this._labelClick(_this, outerArgs);\n        }\n      };\n\n      this.i.labelClick = delegateCombine(this.i.labelClick, this._labelClick_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"selectedItemChanging\", {\n    /**\n     * Raised when the SelectedItem property is changing.  This event is cancelable.\n    */\n    get: function () {\n      return this._selectedItemChanging;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._selectedItemChanging_wrapped !== null) {\n        this.i.selectedItemChanging = delegateRemove(this.i.selectedItemChanging, this._selectedItemChanging_wrapped);\n        this._selectedItemChanging_wrapped = null;\n        this._selectedItemChanging = null;\n      }\n\n      this._selectedItemChanging = ev;\n\n      this._selectedItemChanging_wrapped = function (o, e) {\n        var outerArgs = new IgrSelectedItemChangingEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSelectedItemChanging) {\n          _this.beforeSelectedItemChanging(_this, outerArgs);\n        }\n\n        if (_this._selectedItemChanging) {\n          _this._selectedItemChanging(_this, outerArgs);\n        }\n      };\n\n      this.i.selectedItemChanging = delegateCombine(this.i.selectedItemChanging, this._selectedItemChanging_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"selectedItemsChanging\", {\n    /**\n     * Raised when the SelectedItems collection is changing.  This event is cancelable.\n    */\n    get: function () {\n      return this._selectedItemsChanging;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._selectedItemsChanging_wrapped !== null) {\n        this.i.selectedItemsChanging = delegateRemove(this.i.selectedItemsChanging, this._selectedItemsChanging_wrapped);\n        this._selectedItemsChanging_wrapped = null;\n        this._selectedItemsChanging = null;\n      }\n\n      this._selectedItemsChanging = ev;\n\n      this._selectedItemsChanging_wrapped = function (o, e) {\n        var outerArgs = new IgrSelectedItemsChangingEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSelectedItemsChanging) {\n          _this.beforeSelectedItemsChanging(_this, outerArgs);\n        }\n\n        if (_this._selectedItemsChanging) {\n          _this._selectedItemsChanging(_this, outerArgs);\n        }\n      };\n\n      this.i.selectedItemsChanging = delegateCombine(this.i.selectedItemsChanging, this._selectedItemsChanging_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"selectedItemChanged\", {\n    /**\n     * Raised when the SelectedItem property has changed.\n    */\n    get: function () {\n      return this._selectedItemChanged;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._selectedItemChanged_wrapped !== null) {\n        this.i.selectedItemChanged = delegateRemove(this.i.selectedItemChanged, this._selectedItemChanged_wrapped);\n        this._selectedItemChanged_wrapped = null;\n        this._selectedItemChanged = null;\n      }\n\n      this._selectedItemChanged = ev;\n\n      this._selectedItemChanged_wrapped = function (o, e) {\n        var outerArgs = new IgrSelectedItemChangedEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSelectedItemChanged) {\n          _this.beforeSelectedItemChanged(_this, outerArgs);\n        }\n\n        if (_this._selectedItemChanged) {\n          _this._selectedItemChanged(_this, outerArgs);\n        }\n      };\n\n      this.i.selectedItemChanged = delegateCombine(this.i.selectedItemChanged, this._selectedItemChanged_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"selectedItemsChanged\", {\n    /**\n     * Raised when the SelectedItems collection has changed.\n    */\n    get: function () {\n      return this._selectedItemsChanged;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._selectedItemsChanged_wrapped !== null) {\n        this.i.selectedItemsChanged = delegateRemove(this.i.selectedItemsChanged, this._selectedItemsChanged_wrapped);\n        this._selectedItemsChanged_wrapped = null;\n        this._selectedItemsChanged = null;\n      }\n\n      this._selectedItemsChanged = ev;\n\n      this._selectedItemsChanged_wrapped = function (o, e) {\n        var outerArgs = new IgrSelectedItemsChangedEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSelectedItemsChanged) {\n          _this.beforeSelectedItemsChanged(_this, outerArgs);\n        }\n\n        if (_this._selectedItemsChanged) {\n          _this._selectedItemsChanged(_this, outerArgs);\n        }\n      };\n\n      this.i.selectedItemsChanged = delegateCombine(this.i.selectedItemsChanged, this._selectedItemsChanged_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"sliceClick\", {\n    /**\n     * Raised when the slice is clicked.\n    */\n    get: function () {\n      return this._sliceClick;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._sliceClick_wrapped !== null) {\n        this.i.sliceClick = delegateRemove(this.i.sliceClick, this._sliceClick_wrapped);\n        this._sliceClick_wrapped = null;\n        this._sliceClick = null;\n      }\n\n      this._sliceClick = ev;\n\n      this._sliceClick_wrapped = function (o, e) {\n        var outerArgs = new IgrSliceClickEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSliceClick) {\n          _this.beforeSliceClick(_this, outerArgs);\n        }\n\n        if (_this._sliceClick) {\n          _this._sliceClick(_this, outerArgs);\n        }\n      };\n\n      this.i.sliceClick = delegateCombine(this.i.sliceClick, this._sliceClick_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"sliceEnter\", {\n    /**\n     * Raised when a slice is entered by the pointer.\n    */\n    get: function () {\n      return this._sliceEnter;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._sliceEnter_wrapped !== null) {\n        this.i.sliceEnter = delegateRemove(this.i.sliceEnter, this._sliceEnter_wrapped);\n        this._sliceEnter_wrapped = null;\n        this._sliceEnter = null;\n      }\n\n      this._sliceEnter = ev;\n\n      this._sliceEnter_wrapped = function (o, e) {\n        var outerArgs = new IgrSliceEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSliceEnter) {\n          _this.beforeSliceEnter(_this, outerArgs);\n        }\n\n        if (_this._sliceEnter) {\n          _this._sliceEnter(_this, outerArgs);\n        }\n      };\n\n      this.i.sliceEnter = delegateCombine(this.i.sliceEnter, this._sliceEnter_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"sliceLeave\", {\n    /**\n     * Raised when a slice is left by the pointer;\n    */\n    get: function () {\n      return this._sliceLeave;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._sliceLeave_wrapped !== null) {\n        this.i.sliceLeave = delegateRemove(this.i.sliceLeave, this._sliceLeave_wrapped);\n        this._sliceLeave_wrapped = null;\n        this._sliceLeave = null;\n      }\n\n      this._sliceLeave = ev;\n\n      this._sliceLeave_wrapped = function (o, e) {\n        var outerArgs = new IgrSliceEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSliceLeave) {\n          _this.beforeSliceLeave(_this, outerArgs);\n        }\n\n        if (_this._sliceLeave) {\n          _this._sliceLeave(_this, outerArgs);\n        }\n      };\n\n      this.i.sliceLeave = delegateCombine(this.i.sliceLeave, this._sliceLeave_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPieChartBase.prototype, \"sliceHover\", {\n    /**\n     * Raised when a pointer moves over a slice.\n    */\n    get: function () {\n      return this._sliceHover;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._sliceHover_wrapped !== null) {\n        this.i.sliceHover = delegateRemove(this.i.sliceHover, this._sliceHover_wrapped);\n        this._sliceHover_wrapped = null;\n        this._sliceHover = null;\n      }\n\n      this._sliceHover = ev;\n\n      this._sliceHover_wrapped = function (o, e) {\n        var outerArgs = new IgrSliceEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSliceHover) {\n          _this.beforeSliceHover(_this, outerArgs);\n        }\n\n        if (_this._sliceHover) {\n          _this._sliceHover(_this, outerArgs);\n        }\n      };\n\n      this.i.sliceHover = delegateCombine(this.i.sliceHover, this._sliceHover_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return IgrPieChartBase;\n}(React.Component);\n\nexport { IgrPieChartBase };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-pie-chart-base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends, __values } from \"tslib\";\nimport * as React from 'react';\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { LabelsPosition_$type } from \"./LabelsPosition\";\nimport { Visibility_$type } from \"igniteui-react-core\";\nimport { LeaderLineType_$type } from \"./LeaderLineType\";\nimport { OthersCategoryType_$type } from \"./OthersCategoryType\";\nimport { IgrIndexCollection } from \"./igr-index-collection\";\nimport { SweepDirection_$type } from \"igniteui-react-core\";\nimport { SliceSelectionMode_$type } from \"./SliceSelectionMode\";\nimport { IgrObjectCollection } from \"igniteui-react-core\";\nimport { IgrLabelClickEventArgs } from \"./igr-label-click-event-args\";\nimport { IgrSelectedItemChangingEventArgs } from \"./igr-selected-item-changing-event-args\";\nimport { IgrSelectedItemsChangingEventArgs } from \"./igr-selected-items-changing-event-args\";\nimport { IgrSelectedItemChangedEventArgs } from \"./igr-selected-item-changed-event-args\";\nimport { IgrSelectedItemsChangedEventArgs } from \"./igr-selected-items-changed-event-args\";\nimport { IgrSliceClickEventArgs } from \"./igr-slice-click-event-args\";\nimport { IgrSliceEventArgs } from \"./igr-slice-event-args\";\nimport { TypeRegistrar, Number_$type, Base } from \"igniteui-react-core\";\nimport { NamePatcher, getModifiedProps, isValidProp, ensureEnum, brushToString, stringToBrush, ensureBool, toBrushCollection, fromBrushCollection, arrayFindByName, toSpinal, initializePropertiesFromCss, toPoint } from \"igniteui-react-core\";\nimport { IndexCollection as IndexCollection_internal } from \"./IndexCollection\";\nimport { SyncableObservableCollection$1 } from \"igniteui-react-core\";\nimport { Style } from \"igniteui-react-core\";\nimport { ObjectCollection as ObjectCollection_internal } from \"igniteui-react-core\";\n/**\n * Represents the base class for the pie chart.\n*/\nvar IgrPieChartBase = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrPieChartBase, _super);\n    function IgrPieChartBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._explodedSlices = null;\n        _this._selectedItems = null;\n        _this.__p = null;\n        _this._hasUserValues = new Set();\n        _this._stylingContainer = null;\n        _this._stylingParent = null;\n        _this._inStyling = false;\n        _this._labelClick = null;\n        _this._labelClick_wrapped = null;\n        _this._selectedItemChanging = null;\n        _this._selectedItemChanging_wrapped = null;\n        _this._selectedItemsChanging = null;\n        _this._selectedItemsChanging_wrapped = null;\n        _this._selectedItemChanged = null;\n        _this._selectedItemChanged_wrapped = null;\n        _this._selectedItemsChanged = null;\n        _this._selectedItemsChanged_wrapped = null;\n        _this._sliceClick = null;\n        _this._sliceClick_wrapped = null;\n        _this._sliceEnter = null;\n        _this._sliceEnter_wrapped = null;\n        _this._sliceLeave = null;\n        _this._sliceLeave_wrapped = null;\n        _this._sliceHover = null;\n        _this._sliceHover_wrapped = null;\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._implementation = _this.createImplementation();\n        _this._implementation.externalObject = _this;\n        _this.onImplementationCreated();\n        return _this;\n    }\n    IgrPieChartBase.prototype.createImplementation = function () {\n        return null;\n    };\n    Object.defineProperty(IgrPieChartBase.prototype, \"i\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._implementation;\n        } /**\n                                     * @hidden\n                                     */,\n        enumerable: false,\n        configurable: true\n    });\n    IgrPieChartBase._createFromInternal = function (internal) {\n        if (!internal) {\n            return null;\n        }\n        if (!internal.$type) {\n            return null;\n        }\n        var name = internal.$type.name;\n        var externalName = \"Igr\" + name;\n        if (!TypeRegistrar.isRegistered(externalName)) {\n            return null;\n        }\n        return TypeRegistrar.create(externalName);\n    };\n    IgrPieChartBase.prototype.onImplementationCreated = function () {\n    };\n    IgrPieChartBase.prototype.componentDidMount = function () {\n        var e_1, _a;\n        try {\n            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = this.props[p];\n                }\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n    };\n    IgrPieChartBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var e_2, _a;\n        var mod = getModifiedProps(this.props, nextProps);\n        try {\n            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = mod[p];\n                }\n            }\n        }\n        catch (e_2_1) {\n            e_2 = { error: e_2_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_2)\n                    throw e_2.error;\n            }\n        }\n        return true;\n    };\n    IgrPieChartBase.prototype.render = function () {\n        return null;\n    };\n    Object.defineProperty(IgrPieChartBase.prototype, \"innerExtent\", {\n        /**\n         * Gets or sets the amount of space between the center and the start of the arc. This property should be set between 0 and 1.\n         * If InnerExtent is set to a value greater than 1, it will be interpreted as a percentage, effectively divided by 100.\n        */\n        get: function () {\n            return this.i.c7;\n        },\n        set: function (v) {\n            this.i.c7 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"valueMemberPath\", {\n        /**\n         * Gets or Sets the property name that contains the values.\n        */\n        get: function () {\n            return this.i.fq;\n        },\n        set: function (v) {\n            this.i.fq = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"labelMemberPath\", {\n        /**\n         * Gets or sets the property name that contains the labels.\n        */\n        get: function () {\n            return this.i.ef;\n        },\n        set: function (v) {\n            this.i.ef = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"legendLabelMemberPath\", {\n        /**\n         * Gets or sets the property name that contains the legend labels.\n        */\n        get: function () {\n            return this.i.eu;\n        },\n        set: function (v) {\n            this.i.eu = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"labelsPosition\", {\n        /**\n         * Gets or sets the position of chart labels.\n        */\n        get: function () {\n            return this.i.az;\n        },\n        set: function (v) {\n            this.i.az = ensureEnum(LabelsPosition_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"labelOuterColor\", {\n        /**\n         * Gets or sets the color for labels rendered outside of the pie chart.\n        */\n        get: function () {\n            return brushToString(this.i.iu);\n        },\n        set: function (v) {\n            this.i.iu = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"labelInnerColor\", {\n        /**\n         * Gets or sets the color for labels rendered inside of the pie chart.\n        */\n        get: function () {\n            return brushToString(this.i.it);\n        },\n        set: function (v) {\n            this.i.it = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"actualLabelOuterColor\", {\n        /**\n         * Gets the actual color for labels rendered outside of the pie chart.\n        */\n        get: function () {\n            return brushToString(this.i.is);\n        },\n        set: function (v) {\n            this.i.is = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"actualLabelInnerColor\", {\n        /**\n         * Gets the actual color for labels rendered inside of the pie chart.\n        */\n        get: function () {\n            return brushToString(this.i.ir);\n        },\n        set: function (v) {\n            this.i.ir = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"leaderLineVisibility\", {\n        /**\n         * Gets or sets whether the leader lines are visible.\n        */\n        get: function () {\n            return this.i.i7;\n        },\n        set: function (v) {\n            this.i.i7 = ensureEnum(Visibility_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"leaderLineType\", {\n        /**\n         * Gets or sets what type of leader lines will be used for the outside end labels.\n        */\n        get: function () {\n            return this.i.a0;\n        },\n        set: function (v) {\n            this.i.a0 = ensureEnum(LeaderLineType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"leaderLineMargin\", {\n        /**\n         * Gets or sets the margin between a label and the end of its leader line. The default is 6 pixels.\n        */\n        get: function () {\n            return this.i.c9;\n        },\n        set: function (v) {\n            this.i.c9 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"toolTip\", {\n        /**\n         * Gets or sets the ToolTip for the chart.\n        */\n        get: function () {\n            return this.i.dn;\n        },\n        set: function (v) {\n            this.i.dn = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"othersCategoryThreshold\", {\n        /**\n         * Gets or sets the threshold value that determines if slices are grouped into the Others slice.\n        */\n        get: function () {\n            return this.i.da;\n        },\n        set: function (v) {\n            this.i.da = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"othersCategoryType\", {\n        /**\n         * Gets or sets whether to use numeric or percent-based threshold value.\n        */\n        get: function () {\n            return this.i.a1;\n        },\n        set: function (v) {\n            this.i.a1 = ensureEnum(OthersCategoryType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"othersCategoryText\", {\n        /**\n         * Gets or sets the label of the Others slice.\n        */\n        get: function () {\n            return this.i.e1;\n        },\n        set: function (v) {\n            this.i.e1 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"explodedRadius\", {\n        /**\n         * Determines how much the exploded slice is offset from the center. Value between 0 and 1.\n        */\n        get: function () {\n            return this.i.c2;\n        },\n        set: function (v) {\n            this.i.c2 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"radiusFactor\", {\n        /**\n         * Gets or sets the scaling factor of the chart's radius. Value between 0 and 1.\n        */\n        get: function () {\n            return this.i.dd;\n        },\n        set: function (v) {\n            this.i.dd = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"allowSliceSelection\", {\n        /**\n         * Gets or sets whether the slices can be selected.\n        */\n        get: function () {\n            return this.i.b7;\n        },\n        set: function (v) {\n            this.i.b7 = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"allowSliceExplosion\", {\n        /**\n         * Gets or sets whether the slices can be exploded.\n        */\n        get: function () {\n            return this.i.b6;\n        },\n        set: function (v) {\n            this.i.b6 = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"explodedSlices\", {\n        /**\n         * Gets or sets the collection of exploded slice indices.\n        */\n        get: function () {\n            if (this._explodedSlices === null) {\n                var coll = new IgrIndexCollection();\n                var innerColl = this.i.explodedSlices;\n                if (!innerColl) {\n                    innerColl = new IndexCollection_internal();\n                }\n                this._explodedSlices = coll._fromInner(innerColl);\n                this.i.explodedSlices = innerColl;\n            }\n            return this._explodedSlices;\n        },\n        set: function (v) {\n            if (this._explodedSlices !== null) {\n                this._explodedSlices._setSyncTarget(null);\n                this._explodedSlices = null;\n            }\n            var coll = new IgrIndexCollection();\n            this._explodedSlices = coll._fromOuter(v);\n            var syncColl = new SyncableObservableCollection$1(Number_$type);\n            var innerColl = this.i.explodedSlices;\n            if (!innerColl) {\n                innerColl = new IndexCollection_internal();\n            }\n            syncColl._inner = innerColl;\n            syncColl.clear();\n            this._explodedSlices._setSyncTarget(syncColl);\n            this.i.explodedSlices = innerColl;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"labelExtent\", {\n        /**\n         * Gets or sets the pixel amount by which the labels are offset from the edge of the slices.\n        */\n        get: function () {\n            return this.i.c8;\n        },\n        set: function (v) {\n            this.i.c8 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"startAngle\", {\n        /**\n         * Gets or sets the starting angle of the chart.\n         * The default zero value is equivalent to 3 o'clock.\n        */\n        get: function () {\n            return this.i.df;\n        },\n        set: function (v) {\n            this.i.df = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"sweepDirection\", {\n        /**\n         * Gets or sets the rotational direction of the chart.\n        */\n        get: function () {\n            return this.i.iw;\n        },\n        set: function (v) {\n            this.i.iw = ensureEnum(SweepDirection_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"othersCategoryFill\", {\n        /**\n         * Gets or sets the fill brush.\n        */\n        get: function () {\n            return this.i.i4 ? this.i.i4.fill : null;\n        },\n        set: function (v) {\n            this.ensureOthersCategoryStyle();\n            this.i.i4.fill = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"othersCategoryStroke\", {\n        /**\n         * Gets or sets the stroke brush.\n        */\n        get: function () {\n            return this.i.i4 ? this.i.i4.stroke : null;\n        },\n        set: function (v) {\n            this.ensureOthersCategoryStyle();\n            this.i.i4.stroke = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"othersCategoryStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness.\n        */\n        get: function () {\n            return this.i.i4 ? this.i.i4.strokeThickness : NaN;\n        },\n        set: function (v) {\n            this.ensureOthersCategoryStyle();\n            this.i.i4.strokeThickness = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"othersCategoryOpacity\", {\n        /**\n         * Gets or sets the opacity.\n        */\n        get: function () {\n            return this.i.i4 ? this.i.i4.opacity : NaN;\n        },\n        set: function (v) {\n            this.ensureOthersCategoryStyle();\n            this.i.i4.opacity = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrPieChartBase.prototype.ensureOthersCategoryStyle = function () {\n        if (this.i.i4) {\n            return;\n        }\n        this.i.i4 = new Style();\n    };\n    Object.defineProperty(IgrPieChartBase.prototype, \"selectedSliceFill\", {\n        /**\n         * Gets or sets the fill brush.\n        */\n        get: function () {\n            return this.i.i5 ? this.i.i5.fill : null;\n        },\n        set: function (v) {\n            this.ensureSelectedStyle();\n            this.i.i5.fill = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"selectedSliceStroke\", {\n        /**\n         * Gets or sets the stroke brush.\n        */\n        get: function () {\n            return this.i.i5 ? this.i.i5.stroke : null;\n        },\n        set: function (v) {\n            this.ensureSelectedStyle();\n            this.i.i5.stroke = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"selectedSliceStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness.\n        */\n        get: function () {\n            return this.i.i5 ? this.i.i5.strokeThickness : NaN;\n        },\n        set: function (v) {\n            this.ensureSelectedStyle();\n            this.i.i5.strokeThickness = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"selectedSliceOpacity\", {\n        /**\n         * Gets or sets the opacity.\n        */\n        get: function () {\n            return this.i.i5 ? this.i.i5.opacity : NaN;\n        },\n        set: function (v) {\n            this.ensureSelectedStyle();\n            this.i.i5.opacity = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrPieChartBase.prototype.ensureSelectedStyle = function () {\n        if (this.i.i5) {\n            return;\n        }\n        this.i.i5 = new Style();\n    };\n    Object.defineProperty(IgrPieChartBase.prototype, \"brushes\", {\n        /**\n         * Gets or sets the palette of brushes to use for coloring the slices.\n        */\n        get: function () {\n            return fromBrushCollection(this.i.am);\n        },\n        set: function (v) {\n            this.i.am = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"actualBrushes\", {\n        /**\n         * Gets the actual palette of brushes to use for coloring the slices.\n        */\n        get: function () {\n            return fromBrushCollection(this.i.ak);\n        },\n        set: function (v) {\n            this.i.ak = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"outlines\", {\n        /**\n         * Gets or sets the palette of brushes to use for outlines on the slices.\n        */\n        get: function () {\n            return fromBrushCollection(this.i.an);\n        },\n        set: function (v) {\n            this.i.an = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"actualOutlines\", {\n        /**\n         * Gets the actual palette of brushes to use for outlines on the slices.\n        */\n        get: function () {\n            return fromBrushCollection(this.i.al);\n        },\n        set: function (v) {\n            this.i.al = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"labelFormat\", {\n        /**\n         * Gets or sets the label format string to use for the label.\n        */\n        get: function () {\n            return this.i.eb;\n        },\n        set: function (v) {\n            this.i.eb = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"labelFormatSpecifiers\", {\n        /**\n         * Gets or sets the format specifiers to use with the LabelFormat string.\n        */\n        get: function () {\n            return this.i.ag;\n        },\n        set: function (v) {\n            if (v && !Array.isArray(v) && typeof (v) == \"string\") {\n                var re = /\\s*(?:,|\\s|$)\\s*/gm;\n                v = v.split(re);\n            }\n            this.i.ag = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"othersLabelFormat\", {\n        /**\n         * Gets or sets the label format string to use for the label.\n        */\n        get: function () {\n            return this.i.e5;\n        },\n        set: function (v) {\n            this.i.e5 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"othersLabelFormatSpecifiers\", {\n        /**\n         * Gets or sets the format specifiers to use with the OthersLabelFormat string.\n        */\n        get: function () {\n            return this.i.aj;\n        },\n        set: function (v) {\n            if (v && !Array.isArray(v) && typeof (v) == \"string\") {\n                var re = /\\s*(?:,|\\s|$)\\s*/gm;\n                v = v.split(re);\n            }\n            this.i.aj = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"legendLabelFormat\", {\n        /**\n         * Gets or sets the label format string to use for the label.\n        */\n        get: function () {\n            return this.i.er;\n        },\n        set: function (v) {\n            this.i.er = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"legendLabelFormatSpecifiers\", {\n        /**\n         * Gets or sets the format specifiers to use with the LegendLabelFormat string.\n        */\n        get: function () {\n            return this.i.ah;\n        },\n        set: function (v) {\n            if (v && !Array.isArray(v) && typeof (v) == \"string\") {\n                var re = /\\s*(?:,|\\s|$)\\s*/gm;\n                v = v.split(re);\n            }\n            this.i.ah = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"legendOthersLabelFormat\", {\n        /**\n         * Gets or sets the label format string to use for the label.\n        */\n        get: function () {\n            return this.i.ew;\n        },\n        set: function (v) {\n            this.i.ew = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"legendOthersLabelFormatSpecifiers\", {\n        /**\n         * Gets or sets the format specifiers to use with the LegendOthersLabelFormat string.\n        */\n        get: function () {\n            return this.i.ai;\n        },\n        set: function (v) {\n            if (v && !Array.isArray(v) && typeof (v) == \"string\") {\n                var re = /\\s*(?:,|\\s|$)\\s*/gm;\n                v = v.split(re);\n            }\n            this.i.ai = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"legendItemTemplate\", {\n        /**\n         * Gets or sets the LegendItemTemplate property.\n         * The legend item control content is created according to the LegendItemTemplate on-demand by\n         * the chart object itself.\n        */\n        get: function () {\n            return this.i.legendItemTemplate;\n        },\n        set: function (v) {\n            this.i.legendItemTemplate = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"legendItemBadgeTemplate\", {\n        /**\n         * Gets or sets the LegendItemBadgeTemplate property.\n         * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by\n         * the chart object itself.\n        */\n        get: function () {\n            return this.i.legendItemBadgeTemplate;\n        },\n        set: function (v) {\n            this.i.legendItemBadgeTemplate = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"isSurfaceInteractionDisabled\", {\n        /**\n         * Gets or sets whether all surface interactions with the plot area should be disabled.\n        */\n        get: function () {\n            return this.i.cc;\n        },\n        set: function (v) {\n            this.i.cc = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"shouldDisplayMockData\", {\n        /**\n         * Gets or sets whether the pie chart should display mock data when data isn't present.\n        */\n        get: function () {\n            return this.i.ce;\n        },\n        set: function (v) {\n            this.i.ce = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"shouldUseSkeletonStyleForMockData\", {\n        /**\n         * Gets or sets whether the pie chart should use a skeleton style for mock data.\n        */\n        get: function () {\n            return this.i.cf;\n        },\n        set: function (v) {\n            this.i.cf = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"formatLabel\", {\n        /**\n         * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.\n        */\n        get: function () {\n            return this.i.a4;\n        },\n        set: function (v) {\n            this.i.a4 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"formatLegendLabel\", {\n        /**\n         * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart's legend.\n        */\n        get: function () {\n            return this.i.a5;\n        },\n        set: function (v) {\n            this.i.a5 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"pixelScalingRatio\", {\n        /**\n         * Gets or sets the scaling value used to affect the pixel density of the control.\n         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n         * to appear blurry.\n        */\n        get: function () {\n            return this.i.dc;\n        },\n        set: function (v) {\n            this.i.dc = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"actualPixelScalingRatio\", {\n        /**\n         * Resolved pixel scaling ratio. Unless explicitly overridden by the PieChartBase.PixelScalingRatio property,\n         * this one returns the default ratio enforced by device. High resolution devices will initialize this property\n         * to a higher value.\n        */\n        get: function () {\n            return this.i.cz;\n        },\n        set: function (v) {\n            this.i.cz = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"selectionMode\", {\n        /**\n         * Gets or sets which mode to use for selecting slices.\n        */\n        get: function () {\n            return this.i.bi;\n        },\n        set: function (v) {\n            this.i.bi = ensureEnum(SliceSelectionMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"selectedItem\", {\n        /**\n         * Gets or sets the currently selected data item.  If a different data item is provided the pie chart\n         * will select the slice associated with the new item.\n        */\n        get: function () {\n            return this.i.selectedItem;\n        },\n        set: function (v) {\n            this.i.selectedItem = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"selectedItems\", {\n        /**\n         * Gets the currently selected data items.  Adding or removing data items from this collection will\n         * select or deselect the slices associated with those items.\n        */\n        get: function () {\n            if (this._selectedItems === null) {\n                var coll = new IgrObjectCollection();\n                var innerColl = this.i.selectedItems;\n                if (!innerColl) {\n                    innerColl = new ObjectCollection_internal(0);\n                }\n                this._selectedItems = coll._fromInner(innerColl);\n                this.i.selectedItems = innerColl;\n            }\n            return this._selectedItems;\n        },\n        set: function (v) {\n            if (this._selectedItems !== null) {\n                this._selectedItems._setSyncTarget(null);\n                this._selectedItems = null;\n            }\n            var coll = new IgrObjectCollection();\n            this._selectedItems = coll._fromOuter(v);\n            var syncColl = new SyncableObservableCollection$1(Base.$type);\n            var innerColl = this.i.selectedItems;\n            if (!innerColl) {\n                innerColl = new ObjectCollection_internal(0);\n            }\n            syncColl._inner = innerColl;\n            syncColl.clear();\n            this._selectedItems._setSyncTarget(syncColl);\n            this.i.selectedItems = innerColl;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"textStyle\", {\n        /**\n         * Manually overrides the style to use for the labels.\n        */\n        get: function () {\n            return this.i.fl;\n        },\n        set: function (v) {\n            this.i.fl = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrPieChartBase.prototype.findByName = function (name) {\n        if (this.legend && this.legend.name && this.legend.name == name) {\n            return this.legend;\n        }\n        if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {\n            return arrayFindByName(this.labelFormatSpecifiers, name);\n        }\n        if (this.othersLabelFormatSpecifiers != null && arrayFindByName(this.othersLabelFormatSpecifiers, name)) {\n            return arrayFindByName(this.othersLabelFormatSpecifiers, name);\n        }\n        if (this.legendLabelFormatSpecifiers != null && arrayFindByName(this.legendLabelFormatSpecifiers, name)) {\n            return arrayFindByName(this.legendLabelFormatSpecifiers, name);\n        }\n        if (this.legendOthersLabelFormatSpecifiers != null && arrayFindByName(this.legendOthersLabelFormatSpecifiers, name)) {\n            return arrayFindByName(this.legendOthersLabelFormatSpecifiers, name);\n        }\n        return null;\n    };\n    Object.defineProperty(IgrPieChartBase.prototype, \"hasUserValues\", {\n        get: function () {\n            return this._hasUserValues;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrPieChartBase.prototype.__m = function (propertyName) {\n        if (!this._inStyling) {\n            this._hasUserValues.add(propertyName);\n        }\n    };\n    IgrPieChartBase.prototype._styling = function (container, component, parent) {\n        if (this._inStyling) {\n            return;\n        }\n        this._inStyling = true;\n        this._stylingContainer = container;\n        this._stylingParent = component;\n        var genericPrefix = \"\";\n        var typeName = this.i.$type.name;\n        if (typeName.indexOf(\"Xam\") === 0) {\n            typeName = typeName.substring(3);\n        }\n        genericPrefix = toSpinal(\"PieChartBase\");\n        var additionalPrefixes = [];\n        var prefix = toSpinal(typeName);\n        additionalPrefixes.push(prefix + \"-\");\n        var b = this.i.$type.baseType;\n        while (b && b.name != \"Object\" &&\n            b.name != \"Base\" &&\n            b.name != \"Control\" &&\n            b.Name != \"DependencyObject\" &&\n            b.Name != \"FrameworkElement\") {\n            typeName = b.name;\n            if (typeName.indexOf(\"Xam\") === 0) {\n                typeName = typeName.substring(3);\n            }\n            var basePrefix = toSpinal(typeName);\n            additionalPrefixes.push(basePrefix + \"-\");\n            b = b.baseType;\n        }\n        if (parent) {\n            var parentTypeName = parent.i.$type.name;\n            if (parentTypeName.indexOf(\"Xam\") === 0) {\n                parentTypeName = parentTypeName.substring(3);\n            }\n            var parentPrefix = toSpinal(parentTypeName);\n            additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n            additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n        }\n        initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n        if (this._otherStyling) {\n            this._otherStyling(container, component, parent);\n        }\n        this._inStyling = false;\n    };\n    /**\n     * Returns the chart visuals expressed as a serialized string.\n    \r\n    */\n    IgrPieChartBase.prototype.exportSerializedVisualData = function () {\n        var iv = this.i.d1();\n        return (iv);\n    };\n    /**\n     * Simulates a mouse click action at the specified point.\n    \r\n    * @param point  * The point to click at.\n    */\n    IgrPieChartBase.prototype.simulateLeftClick = function (point) {\n        this.i.g0(toPoint(point));\n    };\n    /**\n     * Invoked by the containing object to provide reference to the container.\n    \r\n    * @param container  * Reference to the container.\n    */\n    IgrPieChartBase.prototype.provideContainer = function (container) {\n        this.i.provideContainer(container);\n    };\n    /**\n     * Notification from the containing object that the container has been resized.\n    \r\n    */\n    IgrPieChartBase.prototype.notifyContainerResized = function () {\n        this.i.notifyContainerResized();\n    };\n    /**\n     * Invoked when the instance is being destroyed.\n    \r\n    */\n    IgrPieChartBase.prototype.destroy = function () {\n        this.i.destroy();\n    };\n    /**\n     * Use to force the pie chart to finish any deferred work before printing or evaluating its visual.\n     * This should only be called if the visual of the pie chart needs to be synchronously saved or evaluated.\n     * Calling this method too often will hinder the performance of the pie chart.\n    \r\n    */\n    IgrPieChartBase.prototype.flush = function () {\n        this.i.fv();\n    };\n    IgrPieChartBase.prototype.notifySetItem = function (source_, index, oldItem, newItem) {\n        this.i.f4(source_, index, oldItem, newItem);\n    };\n    /**\n     * Manually notifies the pie chart's data source that the data it has bound to has been cleared and needs to be re-examined.\n     * This should not be called if the data that the pie chart is bound to is already observable.\n    \r\n    * @param source_  * The data source.\n    */\n    IgrPieChartBase.prototype.notifyClearItems = function (source_) {\n        this.i.f0(source_);\n    };\n    IgrPieChartBase.prototype.notifyInsertItem = function (source_, index, newItem) {\n        this.i.f2(source_, index, newItem);\n    };\n    IgrPieChartBase.prototype.notifyRemoveItem = function (source_, index, oldItem) {\n        this.i.f3(source_, index, oldItem);\n    };\n    /**\n     * Assigns data source for the items.\n    \r\n    * @param source_  * Array of the data source items.\n    */\n    IgrPieChartBase.prototype.setWidgetLevelDataSource = function (source_) {\n        this.i.gz(source_);\n    };\n    /**\n     * Resets items data source.\n    \r\n    */\n    IgrPieChartBase.prototype.removeWidgetLevelDataSource = function () {\n        this.i.gq();\n    };\n    /**\n     * Invoked when style is updated.\n    \r\n    */\n    IgrPieChartBase.prototype.styleUpdated = function () {\n        this.i.g4();\n    };\n    Object.defineProperty(IgrPieChartBase.prototype, \"labelClick\", {\n        /**\n         * Raised when the slice's label is clicked.\n        */\n        get: function () {\n            return this._labelClick;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._labelClick_wrapped !== null) {\n                this.i.labelClick = delegateRemove(this.i.labelClick, this._labelClick_wrapped);\n                this._labelClick_wrapped = null;\n                this._labelClick = null;\n            }\n            this._labelClick = ev;\n            this._labelClick_wrapped = function (o, e) {\n                var outerArgs = new IgrLabelClickEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeLabelClick) {\n                    _this.beforeLabelClick(_this, outerArgs);\n                }\n                if (_this._labelClick) {\n                    _this._labelClick(_this, outerArgs);\n                }\n            };\n            this.i.labelClick = delegateCombine(this.i.labelClick, this._labelClick_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"selectedItemChanging\", {\n        /**\n         * Raised when the SelectedItem property is changing.  This event is cancelable.\n        */\n        get: function () {\n            return this._selectedItemChanging;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._selectedItemChanging_wrapped !== null) {\n                this.i.selectedItemChanging = delegateRemove(this.i.selectedItemChanging, this._selectedItemChanging_wrapped);\n                this._selectedItemChanging_wrapped = null;\n                this._selectedItemChanging = null;\n            }\n            this._selectedItemChanging = ev;\n            this._selectedItemChanging_wrapped = function (o, e) {\n                var outerArgs = new IgrSelectedItemChangingEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSelectedItemChanging) {\n                    _this.beforeSelectedItemChanging(_this, outerArgs);\n                }\n                if (_this._selectedItemChanging) {\n                    _this._selectedItemChanging(_this, outerArgs);\n                }\n            };\n            this.i.selectedItemChanging = delegateCombine(this.i.selectedItemChanging, this._selectedItemChanging_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"selectedItemsChanging\", {\n        /**\n         * Raised when the SelectedItems collection is changing.  This event is cancelable.\n        */\n        get: function () {\n            return this._selectedItemsChanging;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._selectedItemsChanging_wrapped !== null) {\n                this.i.selectedItemsChanging = delegateRemove(this.i.selectedItemsChanging, this._selectedItemsChanging_wrapped);\n                this._selectedItemsChanging_wrapped = null;\n                this._selectedItemsChanging = null;\n            }\n            this._selectedItemsChanging = ev;\n            this._selectedItemsChanging_wrapped = function (o, e) {\n                var outerArgs = new IgrSelectedItemsChangingEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSelectedItemsChanging) {\n                    _this.beforeSelectedItemsChanging(_this, outerArgs);\n                }\n                if (_this._selectedItemsChanging) {\n                    _this._selectedItemsChanging(_this, outerArgs);\n                }\n            };\n            this.i.selectedItemsChanging = delegateCombine(this.i.selectedItemsChanging, this._selectedItemsChanging_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"selectedItemChanged\", {\n        /**\n         * Raised when the SelectedItem property has changed.\n        */\n        get: function () {\n            return this._selectedItemChanged;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._selectedItemChanged_wrapped !== null) {\n                this.i.selectedItemChanged = delegateRemove(this.i.selectedItemChanged, this._selectedItemChanged_wrapped);\n                this._selectedItemChanged_wrapped = null;\n                this._selectedItemChanged = null;\n            }\n            this._selectedItemChanged = ev;\n            this._selectedItemChanged_wrapped = function (o, e) {\n                var outerArgs = new IgrSelectedItemChangedEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSelectedItemChanged) {\n                    _this.beforeSelectedItemChanged(_this, outerArgs);\n                }\n                if (_this._selectedItemChanged) {\n                    _this._selectedItemChanged(_this, outerArgs);\n                }\n            };\n            this.i.selectedItemChanged = delegateCombine(this.i.selectedItemChanged, this._selectedItemChanged_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"selectedItemsChanged\", {\n        /**\n         * Raised when the SelectedItems collection has changed.\n        */\n        get: function () {\n            return this._selectedItemsChanged;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._selectedItemsChanged_wrapped !== null) {\n                this.i.selectedItemsChanged = delegateRemove(this.i.selectedItemsChanged, this._selectedItemsChanged_wrapped);\n                this._selectedItemsChanged_wrapped = null;\n                this._selectedItemsChanged = null;\n            }\n            this._selectedItemsChanged = ev;\n            this._selectedItemsChanged_wrapped = function (o, e) {\n                var outerArgs = new IgrSelectedItemsChangedEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSelectedItemsChanged) {\n                    _this.beforeSelectedItemsChanged(_this, outerArgs);\n                }\n                if (_this._selectedItemsChanged) {\n                    _this._selectedItemsChanged(_this, outerArgs);\n                }\n            };\n            this.i.selectedItemsChanged = delegateCombine(this.i.selectedItemsChanged, this._selectedItemsChanged_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"sliceClick\", {\n        /**\n         * Raised when the slice is clicked.\n        */\n        get: function () {\n            return this._sliceClick;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._sliceClick_wrapped !== null) {\n                this.i.sliceClick = delegateRemove(this.i.sliceClick, this._sliceClick_wrapped);\n                this._sliceClick_wrapped = null;\n                this._sliceClick = null;\n            }\n            this._sliceClick = ev;\n            this._sliceClick_wrapped = function (o, e) {\n                var outerArgs = new IgrSliceClickEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSliceClick) {\n                    _this.beforeSliceClick(_this, outerArgs);\n                }\n                if (_this._sliceClick) {\n                    _this._sliceClick(_this, outerArgs);\n                }\n            };\n            this.i.sliceClick = delegateCombine(this.i.sliceClick, this._sliceClick_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"sliceEnter\", {\n        /**\n         * Raised when a slice is entered by the pointer.\n        */\n        get: function () {\n            return this._sliceEnter;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._sliceEnter_wrapped !== null) {\n                this.i.sliceEnter = delegateRemove(this.i.sliceEnter, this._sliceEnter_wrapped);\n                this._sliceEnter_wrapped = null;\n                this._sliceEnter = null;\n            }\n            this._sliceEnter = ev;\n            this._sliceEnter_wrapped = function (o, e) {\n                var outerArgs = new IgrSliceEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSliceEnter) {\n                    _this.beforeSliceEnter(_this, outerArgs);\n                }\n                if (_this._sliceEnter) {\n                    _this._sliceEnter(_this, outerArgs);\n                }\n            };\n            this.i.sliceEnter = delegateCombine(this.i.sliceEnter, this._sliceEnter_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"sliceLeave\", {\n        /**\n         * Raised when a slice is left by the pointer;\n        */\n        get: function () {\n            return this._sliceLeave;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._sliceLeave_wrapped !== null) {\n                this.i.sliceLeave = delegateRemove(this.i.sliceLeave, this._sliceLeave_wrapped);\n                this._sliceLeave_wrapped = null;\n                this._sliceLeave = null;\n            }\n            this._sliceLeave = ev;\n            this._sliceLeave_wrapped = function (o, e) {\n                var outerArgs = new IgrSliceEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSliceLeave) {\n                    _this.beforeSliceLeave(_this, outerArgs);\n                }\n                if (_this._sliceLeave) {\n                    _this._sliceLeave(_this, outerArgs);\n                }\n            };\n            this.i.sliceLeave = delegateCombine(this.i.sliceLeave, this._sliceLeave_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPieChartBase.prototype, \"sliceHover\", {\n        /**\n         * Raised when a pointer moves over a slice.\n        */\n        get: function () {\n            return this._sliceHover;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._sliceHover_wrapped !== null) {\n                this.i.sliceHover = delegateRemove(this.i.sliceHover, this._sliceHover_wrapped);\n                this._sliceHover_wrapped = null;\n                this._sliceHover = null;\n            }\n            this._sliceHover = ev;\n            this._sliceHover_wrapped = function (o, e) {\n                var outerArgs = new IgrSliceEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSliceHover) {\n                    _this.beforeSliceHover(_this, outerArgs);\n                }\n                if (_this._sliceHover) {\n                    _this._sliceHover(_this, outerArgs);\n                }\n            };\n            this.i.sliceHover = delegateCombine(this.i.sliceHover, this._sliceHover_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IgrPieChartBase;\n}(React.Component));\nexport { IgrPieChartBase };\n//# sourceMappingURL=igr-pie-chart-base.js.map\n"]},"metadata":{},"sourceType":"module"}