{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { OperatorSelectorValueChangedEventArgsDescription } from \"./OperatorSelectorValueChangedEventArgsDescription\";\n/**\n * @hidden\n */\n\nvar OperatorSelectorValueChangedEventArgsDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(OperatorSelectorValueChangedEventArgsDescriptionMetadata, _super);\n\n  function OperatorSelectorValueChangedEventArgsDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  OperatorSelectorValueChangedEventArgsDescriptionMetadata.b = function (a) {\n    if (OperatorSelectorValueChangedEventArgsDescriptionMetadata.a == null) {\n      OperatorSelectorValueChangedEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      OperatorSelectorValueChangedEventArgsDescriptionMetadata.c(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);\n    }\n\n    if (a.g(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a)) {\n      return;\n    }\n\n    a.s(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);\n  };\n\n  OperatorSelectorValueChangedEventArgsDescriptionMetadata.c = function (a) {\n    a.item(\"OldValue\", \"ExportedType:string:ColumnComparisonConditionOperatorType\");\n    a.item(\"OldValue@names\", \"Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom\");\n    a.item(\"NewValue\", \"ExportedType:string:ColumnComparisonConditionOperatorType\");\n    a.item(\"NewValue@names\", \"Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom\");\n  };\n\n  OperatorSelectorValueChangedEventArgsDescriptionMetadata.d = function (a) {\n    OperatorSelectorValueChangedEventArgsDescriptionMetadata.b(a);\n    a.u(\"OperatorSelectorValueChangedEventArgs\", function () {\n      return new OperatorSelectorValueChangedEventArgsDescription();\n    });\n    a.t(\"OperatorSelectorValueChangedEventArgs\", OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);\n  };\n\n  OperatorSelectorValueChangedEventArgsDescriptionMetadata.$t = markType(OperatorSelectorValueChangedEventArgsDescriptionMetadata, 'OperatorSelectorValueChangedEventArgsDescriptionMetadata');\n  OperatorSelectorValueChangedEventArgsDescriptionMetadata.a = null;\n  return OperatorSelectorValueChangedEventArgsDescriptionMetadata;\n}(Base);\n\nexport { OperatorSelectorValueChangedEventArgsDescriptionMetadata };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/OperatorSelectorValueChangedEventArgsDescriptionMetadata.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,IAAT,EAAe,YAAf,EAAmC,QAAnC,QAAmD,QAAnD;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,gDAAT,QAAiE,oDAAjE;AAEA;;AAEG;;AACH,IAAA,wDAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8E,EAAA,SAAA,CAAA,wDAAA,EAAA,MAAA,CAAA;;AAA9E,WAAA,wDAAA,GAAA;;AAwBC;;AArBe,EAAA,wDAAA,CAAA,CAAA,GAAf,UAAiB,CAAjB,EAA0C;AACzC,QAAI,wDAAwD,CAAC,CAAzD,IAA8D,IAAlE,EAAwE;AACvE,MAAA,wDAAwD,CAAC,CAAzD,GAA6D,IAAI,YAAJ,CAAiC,YAAjC,EAA+C,YAA/C,EAA6D,CAA7D,CAA7D;AACA,MAAA,wDAAwD,CAAC,CAAzD,CAA2D,wDAAwD,CAAC,CAApH;AACA;;AACD,QAAI,CAAC,CAAC,CAAF,CAAI,wDAAwD,CAAC,CAA7D,CAAJ,EAAqE;AACpE;AACA;;AACD,IAAA,CAAC,CAAC,CAAF,CAAI,wDAAwD,CAAC,CAA7D;AACA,GATc;;AAUR,EAAA,wDAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAwC;AACvC,IAAA,CAAC,CAAC,IAAF,CAAO,UAAP,EAAmB,2DAAnB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,yaAAzB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,UAAP,EAAmB,2DAAnB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,yaAAzB;AACA,GALM;;AAMA,EAAA,wDAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAkC;AACjC,IAAA,wDAAwD,CAAC,CAAzD,CAA2D,CAA3D;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,uCAAJ,EAA6C,YAAA;AAAM,aAAA,IAAA,gDAAA,EAAA;AAAsD,KAAzG;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,uCAAJ,EAA6C,wDAAwD,CAAC,CAAtG;AACA,GAJM;;AAlBA,EAAA,wDAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,wDAAD,EAA2D,0DAA3D,CAAnB;AACQ,EAAA,wDAAA,CAAA,CAAA,GAAkC,IAAlC;AAsBhB,SAAA,wDAAA;AAAC,CAxBD,CAA8E,IAA9E,CAAA;;SAAa,wD","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { OperatorSelectorValueChangedEventArgsDescription } from \"./OperatorSelectorValueChangedEventArgsDescription\";\n/**\n * @hidden\n */\nvar OperatorSelectorValueChangedEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(OperatorSelectorValueChangedEventArgsDescriptionMetadata, _super);\n    function OperatorSelectorValueChangedEventArgsDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OperatorSelectorValueChangedEventArgsDescriptionMetadata.b = function (a) {\n        if (OperatorSelectorValueChangedEventArgsDescriptionMetadata.a == null) {\n            OperatorSelectorValueChangedEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            OperatorSelectorValueChangedEventArgsDescriptionMetadata.c(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);\n        }\n        if (a.g(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a)) {\n            return;\n        }\n        a.s(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);\n    };\n    OperatorSelectorValueChangedEventArgsDescriptionMetadata.c = function (a) {\n        a.item(\"OldValue\", \"ExportedType:string:ColumnComparisonConditionOperatorType\");\n        a.item(\"OldValue@names\", \"Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom\");\n        a.item(\"NewValue\", \"ExportedType:string:ColumnComparisonConditionOperatorType\");\n        a.item(\"NewValue@names\", \"Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom\");\n    };\n    OperatorSelectorValueChangedEventArgsDescriptionMetadata.d = function (a) {\n        OperatorSelectorValueChangedEventArgsDescriptionMetadata.b(a);\n        a.u(\"OperatorSelectorValueChangedEventArgs\", function () { return new OperatorSelectorValueChangedEventArgsDescription(); });\n        a.t(\"OperatorSelectorValueChangedEventArgs\", OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);\n    };\n    OperatorSelectorValueChangedEventArgsDescriptionMetadata.$t = markType(OperatorSelectorValueChangedEventArgsDescriptionMetadata, 'OperatorSelectorValueChangedEventArgsDescriptionMetadata');\n    OperatorSelectorValueChangedEventArgsDescriptionMetadata.a = null;\n    return OperatorSelectorValueChangedEventArgsDescriptionMetadata;\n}(Base));\nexport { OperatorSelectorValueChangedEventArgsDescriptionMetadata };\n//# sourceMappingURL=OperatorSelectorValueChangedEventArgsDescriptionMetadata.js.map\n"]},"metadata":{},"sourceType":"module"}