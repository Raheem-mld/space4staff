{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { IgrNumericXAxis } from \"./igr-numeric-x-axis\";\nimport { IgrNumericYAxis } from \"./igr-numeric-y-axis\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { CollisionAvoidanceType_$type } from \"./CollisionAvoidanceType\";\nimport { ScatterItemSearchMode_$type } from \"./ScatterItemSearchMode\";\nimport { IgrAssigningScatterStyleEventArgs } from \"./igr-assigning-scatter-style-event-args\";\nimport { IgrAssigningScatterMarkerStyleEventArgs } from \"./igr-assigning-scatter-marker-style-event-args\";\nimport { IgrMarkerSeries } from \"./igr-marker-series\";\nimport { ensureBool, ensureEnum, brushToString, stringToBrush, toPoint, fromRect, fromPoint } from \"igniteui-react-core\";\n/**\n * Represents the base class for all IgxDataChartComponent scatter series\n*/\n\nvar IgrScatterBase =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrScatterBase, _super);\n\n  function IgrScatterBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._xAxisName = null;\n    _this._yAxisName = null;\n    _this._assigningScatterStyle = null;\n    _this._assigningScatterStyle_wrapped = null;\n    _this._assigningScatterMarkerStyle = null;\n    _this._assigningScatterMarkerStyle_wrapped = null;\n    return _this;\n  }\n\n  Object.defineProperty(IgrScatterBase.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"isScatter\", {\n    /**\n     * Checks if this series is a scatter series\n    */\n    get: function () {\n      return this.i.d6;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"xAxis\", {\n    /**\n     * Gets or sets the effective x-axis for the current object.\n    */\n    get: function () {\n      if (this.i.xAxis == null) {\n        return null;\n      }\n\n      if (!this.i.xAxis.externalObject) {\n        var e = IgrNumericXAxis._createFromInternal(this.i.xAxis);\n\n        if (e) {\n          e._implementation = this.i.xAxis;\n        }\n\n        this.i.xAxis.externalObject = e;\n      }\n\n      return this.i.xAxis.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.xAxis = null : this.i.xAxis = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"xAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve xAxis from markup.\n    */\n    get: function () {\n      return this._xAxisName;\n    },\n    set: function (v) {\n      this._xAxisName = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"yAxis\", {\n    /**\n     * Gets or sets the effective y-axis for the current object.\n    */\n    get: function () {\n      if (this.i.yAxis == null) {\n        return null;\n      }\n\n      if (!this.i.yAxis.externalObject) {\n        var e = IgrNumericYAxis._createFromInternal(this.i.yAxis);\n\n        if (e) {\n          e._implementation = this.i.yAxis;\n        }\n\n        this.i.yAxis.externalObject = e;\n      }\n\n      return this.i.yAxis.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.yAxis = null : this.i.yAxis = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"yAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve yAxis from markup.\n    */\n    get: function () {\n      return this._yAxisName;\n    },\n    set: function (v) {\n      this._yAxisName = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"xMemberPath\", {\n    /**\n     * Gets or sets the value mapping property for the current series object.\n    */\n    get: function () {\n      return this.i.so;\n    },\n    set: function (v) {\n      this.i.so = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"yMemberPath\", {\n    /**\n     * Gets or sets the value mapping property for the current series object.\n    */\n    get: function () {\n      return this.i.ss;\n    },\n    set: function (v) {\n      this.i.ss = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"trendLineType\", {\n    /**\n     * Gets or sets the trend type for the current scatter series.\n    */\n    get: function () {\n      return this.i.trendLineType;\n    },\n    set: function (v) {\n      this.i.trendLineType = ensureEnum(TrendLineType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"trendLineBrush\", {\n    /**\n     * Gets or sets the brush to use to draw the trend line.\n    */\n    get: function () {\n      return brushToString(this.i.trendLineBrush);\n    },\n    set: function (v) {\n      this.i.trendLineBrush = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"actualTrendLineBrush\", {\n    /**\n     * Gets the effective TrendLineBrush for this series.\n    */\n    get: function () {\n      return brushToString(this.i.tz);\n    },\n    set: function (v) {\n      this.i.tz = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"trendLineThickness\", {\n    /**\n     * Gets or sets the thickness of the current scatter series object's trend line.\n    */\n    get: function () {\n      return this.i.trendLineThickness;\n    },\n    set: function (v) {\n      this.i.trendLineThickness = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"trendLinePeriod\", {\n    /**\n     * Gets or sets the moving average period for the current scatter series object.\n     * The typical, and initial, value for trend line period is 7.\n    */\n    get: function () {\n      return this.i.trendLinePeriod;\n    },\n    set: function (v) {\n      this.i.trendLinePeriod = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"markerCollisionAvoidance\", {\n    /**\n     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.\n    */\n    get: function () {\n      return this.i.q3;\n    },\n    set: function (v) {\n      this.i.q3 = ensureEnum(CollisionAvoidanceType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"trendLineZIndex\", {\n    /**\n     * Gets or sets the Z-Index of the trend line.  Values greater than 1000 will result in the trend line being rendered in front of the series data.\n    */\n    get: function () {\n      return this.i.sd;\n    },\n    set: function (v) {\n      this.i.sd = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"maximumMarkers\", {\n    /**\n     * Gets or sets the maximum number of markerItems displayed by the current series.\n     * If more than the specified number of markerItems are visible, the series will automatically\n     * choose a representative set.\n    */\n    get: function () {\n      return this.i.sc;\n    },\n    set: function (v) {\n      this.i.sc = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"itemSearchMode\", {\n    /**\n     * Gets or sets the mode the series will use to find the closest point to the cursor.\n    */\n    get: function () {\n      return this.i.rn;\n    },\n    set: function (v) {\n      this.i.rn = ensureEnum(ScatterItemSearchMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"itemSearchThreshold\", {\n    /**\n     * Gets or sets the threshold to use when searching for items using ItemSearchMode.\n    */\n    get: function () {\n      return this.i.sb;\n    },\n    set: function (v) {\n      this.i.sb = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"actualItemSearchMode\", {\n    get: function () {\n      return this.i.rl;\n    },\n    set: function (v) {\n      this.i.rl = ensureEnum(ScatterItemSearchMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"isCustomScatterStyleAllowed\", {\n    /**\n     * Gets or sets whether this Scatter series should allow custom style overrides of its individual visuals.\n    */\n    get: function () {\n      return this.i.ry;\n    },\n    set: function (v) {\n      this.i.ry = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"isCustomScatterMarkerStyleAllowed\", {\n    /**\n     * Gets or sets whether this Scatter series should allow custom style overrides of its individual marker visuals.\n    */\n    get: function () {\n      return this.i.rx;\n    },\n    set: function (v) {\n      this.i.rx = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrScatterBase.prototype.bindAxes = function (axes) {\n    _super.prototype.bindAxes.call(this, axes);\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.xAxisName && this.xAxisName.length > 0 && axes[i].name == this.xAxisName) {\n        this.xAxis = axes[i];\n      }\n    }\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.yAxisName && this.yAxisName.length > 0 && axes[i].name == this.yAxisName) {\n        this.yAxis = axes[i];\n      }\n    }\n  };\n\n  IgrScatterBase.prototype.findByName = function (name) {\n    var baseResult = _super.prototype.findByName.call(this, name);\n\n    if (baseResult) {\n      return baseResult;\n    }\n\n    if (this.xAxis && this.xAxis.name && this.xAxis.name == name) {\n      return this.xAxis;\n    }\n\n    if (this.yAxis && this.yAxis.name && this.yAxis.name == name) {\n      return this.yAxis;\n    }\n\n    return null;\n  };\n\n  IgrScatterBase.prototype._styling = function (container, component, parent) {\n    _super.prototype._styling.call(this, container, component, parent);\n\n    this._inStyling = true;\n\n    if (this.xAxis && this.xAxis._styling) {\n      this.xAxis._styling(container, component, this);\n    }\n\n    if (this.yAxis && this.yAxis._styling) {\n      this.yAxis._styling(container, component, this);\n    }\n\n    this._inStyling = false;\n  };\n\n  IgrScatterBase.prototype.getItemValue = function (item, memberPathName) {\n    var iv = this.i.hk(item, memberPathName);\n    return iv;\n  };\n  /**\n   * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinates for which to get a value marker bounding box for\n  */\n\n\n  IgrScatterBase.prototype.getSeriesValueMarkerBoundingBox = function (world) {\n    var iv = this.i.pd(toPoint(world));\n    return fromRect(iv);\n  };\n  /**\n   * Determine if object can be used as YAxis\n  \r\n  * @param axis  * The object to check\n  */\n\n\n  IgrScatterBase.prototype.canUseAsYAxis = function (axis) {\n    var iv = this.i.rw(axis);\n    return iv;\n  };\n  /**\n   * Determine if object can be used as XAxis\n  \r\n  * @param axis  * The object to check\n  */\n\n\n  IgrScatterBase.prototype.canUseAsXAxis = function (axis) {\n    var iv = this.i.rv(axis);\n    return iv;\n  };\n  /**\n   * Gets the item that is the best match for the specified world coordinates.\n  \r\n  * @param world  * The world coordinates to use.\n  */\n\n\n  IgrScatterBase.prototype.getItem = function (world) {\n    var iv = this.i.hh(toPoint(world));\n    return iv;\n  };\n  /**\n   * Gets the index of the item that resides at the provided world coordinates.\n  \r\n  * @param world  * The world coordinates of the requested item.\n  */\n\n\n  IgrScatterBase.prototype.getItemIndex = function (world) {\n    var iv = this.i.g0(toPoint(world));\n    return iv;\n  };\n\n  IgrScatterBase.prototype.getExactItemIndex = function (world) {\n    var iv = this.i.fw(toPoint(world));\n    return iv;\n  };\n\n  IgrScatterBase.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.o2(toPoint(world), useInterpolation, skipUnknowns);\n    return fromPoint(iv);\n  };\n  /**\n   * Scrolls the series to display the item for the specified data item.\n   * The series is scrolled by the minimum amount required to place the specified data item within\n   * the central 80% of the visible axis.\n  \r\n  * @param item  * The data item (item) to scroll to.\n  */\n\n\n  IgrScatterBase.prototype.scrollIntoView = function (item) {\n    var iv = this.i.eh(item);\n    return iv;\n  };\n\n  Object.defineProperty(IgrScatterBase.prototype, \"assigningScatterStyle\", {\n    /**\n     * Event raised when Assigning Category Style\n    */\n    get: function () {\n      return this._assigningScatterStyle;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._assigningScatterStyle_wrapped !== null) {\n        this.i.assigningScatterStyle = delegateRemove(this.i.assigningScatterStyle, this._assigningScatterStyle_wrapped);\n        this._assigningScatterStyle_wrapped = null;\n        this._assigningScatterStyle = null;\n      }\n\n      this._assigningScatterStyle = ev;\n\n      this._assigningScatterStyle_wrapped = function (o, e) {\n        var outerArgs = new IgrAssigningScatterStyleEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeAssigningScatterStyle) {\n          _this.beforeAssigningScatterStyle(_this, outerArgs);\n        }\n\n        if (_this._assigningScatterStyle) {\n          _this._assigningScatterStyle(_this, outerArgs);\n        }\n      };\n\n      this.i.assigningScatterStyle = delegateCombine(this.i.assigningScatterStyle, this._assigningScatterStyle_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"assigningScatterMarkerStyle\", {\n    /**\n     * Event raised when Assigning Scatter Marker Style\n    */\n    get: function () {\n      return this._assigningScatterMarkerStyle;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._assigningScatterMarkerStyle_wrapped !== null) {\n        this.i.assigningScatterMarkerStyle = delegateRemove(this.i.assigningScatterMarkerStyle, this._assigningScatterMarkerStyle_wrapped);\n        this._assigningScatterMarkerStyle_wrapped = null;\n        this._assigningScatterMarkerStyle = null;\n      }\n\n      this._assigningScatterMarkerStyle = ev;\n\n      this._assigningScatterMarkerStyle_wrapped = function (o, e) {\n        var outerArgs = new IgrAssigningScatterMarkerStyleEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeAssigningScatterMarkerStyle) {\n          _this.beforeAssigningScatterMarkerStyle(_this, outerArgs);\n        }\n\n        if (_this._assigningScatterMarkerStyle) {\n          _this._assigningScatterMarkerStyle(_this, outerArgs);\n        }\n      };\n\n      this.i.assigningScatterMarkerStyle = delegateCombine(this.i.assigningScatterMarkerStyle, this._assigningScatterMarkerStyle_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return IgrScatterBase;\n}(IgrMarkerSeries);\n\nexport { IgrScatterBase };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-scatter-base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { IgrNumericXAxis } from \"./igr-numeric-x-axis\";\nimport { IgrNumericYAxis } from \"./igr-numeric-y-axis\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { CollisionAvoidanceType_$type } from \"./CollisionAvoidanceType\";\nimport { ScatterItemSearchMode_$type } from \"./ScatterItemSearchMode\";\nimport { IgrAssigningScatterStyleEventArgs } from \"./igr-assigning-scatter-style-event-args\";\nimport { IgrAssigningScatterMarkerStyleEventArgs } from \"./igr-assigning-scatter-marker-style-event-args\";\nimport { IgrMarkerSeries } from \"./igr-marker-series\";\nimport { ensureBool, ensureEnum, brushToString, stringToBrush, toPoint, fromRect, fromPoint } from \"igniteui-react-core\";\n/**\n * Represents the base class for all IgxDataChartComponent scatter series\n*/\nvar IgrScatterBase = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrScatterBase, _super);\n    function IgrScatterBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._xAxisName = null;\n        _this._yAxisName = null;\n        _this._assigningScatterStyle = null;\n        _this._assigningScatterStyle_wrapped = null;\n        _this._assigningScatterMarkerStyle = null;\n        _this._assigningScatterMarkerStyle_wrapped = null;\n        return _this;\n    }\n    Object.defineProperty(IgrScatterBase.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"isScatter\", {\n        /**\n         * Checks if this series is a scatter series\n        */\n        get: function () {\n            return this.i.d6;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"xAxis\", {\n        /**\n         * Gets or sets the effective x-axis for the current object.\n        */\n        get: function () {\n            if (this.i.xAxis == null) {\n                return null;\n            }\n            if (!this.i.xAxis.externalObject) {\n                var e = IgrNumericXAxis._createFromInternal(this.i.xAxis);\n                if (e) {\n                    e._implementation = this.i.xAxis;\n                }\n                this.i.xAxis.externalObject = e;\n            }\n            return this.i.xAxis.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.xAxis = null : this.i.xAxis = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"xAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve xAxis from markup.\n        */\n        get: function () {\n            return this._xAxisName;\n        },\n        set: function (v) {\n            this._xAxisName = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"yAxis\", {\n        /**\n         * Gets or sets the effective y-axis for the current object.\n        */\n        get: function () {\n            if (this.i.yAxis == null) {\n                return null;\n            }\n            if (!this.i.yAxis.externalObject) {\n                var e = IgrNumericYAxis._createFromInternal(this.i.yAxis);\n                if (e) {\n                    e._implementation = this.i.yAxis;\n                }\n                this.i.yAxis.externalObject = e;\n            }\n            return this.i.yAxis.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.yAxis = null : this.i.yAxis = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"yAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve yAxis from markup.\n        */\n        get: function () {\n            return this._yAxisName;\n        },\n        set: function (v) {\n            this._yAxisName = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"xMemberPath\", {\n        /**\n         * Gets or sets the value mapping property for the current series object.\n        */\n        get: function () {\n            return this.i.so;\n        },\n        set: function (v) {\n            this.i.so = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"yMemberPath\", {\n        /**\n         * Gets or sets the value mapping property for the current series object.\n        */\n        get: function () {\n            return this.i.ss;\n        },\n        set: function (v) {\n            this.i.ss = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"trendLineType\", {\n        /**\n         * Gets or sets the trend type for the current scatter series.\n        */\n        get: function () {\n            return this.i.trendLineType;\n        },\n        set: function (v) {\n            this.i.trendLineType = ensureEnum(TrendLineType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"trendLineBrush\", {\n        /**\n         * Gets or sets the brush to use to draw the trend line.\n        */\n        get: function () {\n            return brushToString(this.i.trendLineBrush);\n        },\n        set: function (v) {\n            this.i.trendLineBrush = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"actualTrendLineBrush\", {\n        /**\n         * Gets the effective TrendLineBrush for this series.\n        */\n        get: function () {\n            return brushToString(this.i.tz);\n        },\n        set: function (v) {\n            this.i.tz = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"trendLineThickness\", {\n        /**\n         * Gets or sets the thickness of the current scatter series object's trend line.\n        */\n        get: function () {\n            return this.i.trendLineThickness;\n        },\n        set: function (v) {\n            this.i.trendLineThickness = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"trendLinePeriod\", {\n        /**\n         * Gets or sets the moving average period for the current scatter series object.\n         * The typical, and initial, value for trend line period is 7.\n        */\n        get: function () {\n            return this.i.trendLinePeriod;\n        },\n        set: function (v) {\n            this.i.trendLinePeriod = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"markerCollisionAvoidance\", {\n        /**\n         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.\n        */\n        get: function () {\n            return this.i.q3;\n        },\n        set: function (v) {\n            this.i.q3 = ensureEnum(CollisionAvoidanceType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"trendLineZIndex\", {\n        /**\n         * Gets or sets the Z-Index of the trend line.  Values greater than 1000 will result in the trend line being rendered in front of the series data.\n        */\n        get: function () {\n            return this.i.sd;\n        },\n        set: function (v) {\n            this.i.sd = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"maximumMarkers\", {\n        /**\n         * Gets or sets the maximum number of markerItems displayed by the current series.\n         * If more than the specified number of markerItems are visible, the series will automatically\n         * choose a representative set.\n        */\n        get: function () {\n            return this.i.sc;\n        },\n        set: function (v) {\n            this.i.sc = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"itemSearchMode\", {\n        /**\n         * Gets or sets the mode the series will use to find the closest point to the cursor.\n        */\n        get: function () {\n            return this.i.rn;\n        },\n        set: function (v) {\n            this.i.rn = ensureEnum(ScatterItemSearchMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"itemSearchThreshold\", {\n        /**\n         * Gets or sets the threshold to use when searching for items using ItemSearchMode.\n        */\n        get: function () {\n            return this.i.sb;\n        },\n        set: function (v) {\n            this.i.sb = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"actualItemSearchMode\", {\n        get: function () {\n            return this.i.rl;\n        },\n        set: function (v) {\n            this.i.rl = ensureEnum(ScatterItemSearchMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"isCustomScatterStyleAllowed\", {\n        /**\n         * Gets or sets whether this Scatter series should allow custom style overrides of its individual visuals.\n        */\n        get: function () {\n            return this.i.ry;\n        },\n        set: function (v) {\n            this.i.ry = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"isCustomScatterMarkerStyleAllowed\", {\n        /**\n         * Gets or sets whether this Scatter series should allow custom style overrides of its individual marker visuals.\n        */\n        get: function () {\n            return this.i.rx;\n        },\n        set: function (v) {\n            this.i.rx = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrScatterBase.prototype.bindAxes = function (axes) {\n        _super.prototype.bindAxes.call(this, axes);\n        for (var i = 0; i < axes.length; i++) {\n            if (this.xAxisName && this.xAxisName.length > 0 &&\n                axes[i].name == this.xAxisName) {\n                this.xAxis = axes[i];\n            }\n        }\n        for (var i = 0; i < axes.length; i++) {\n            if (this.yAxisName && this.yAxisName.length > 0 &&\n                axes[i].name == this.yAxisName) {\n                this.yAxis = axes[i];\n            }\n        }\n    };\n    IgrScatterBase.prototype.findByName = function (name) {\n        var baseResult = _super.prototype.findByName.call(this, name);\n        if (baseResult) {\n            return baseResult;\n        }\n        if (this.xAxis && this.xAxis.name && this.xAxis.name == name) {\n            return this.xAxis;\n        }\n        if (this.yAxis && this.yAxis.name && this.yAxis.name == name) {\n            return this.yAxis;\n        }\n        return null;\n    };\n    IgrScatterBase.prototype._styling = function (container, component, parent) {\n        _super.prototype._styling.call(this, container, component, parent);\n        this._inStyling = true;\n        if (this.xAxis && this.xAxis._styling) {\n            this.xAxis._styling(container, component, this);\n        }\n        if (this.yAxis && this.yAxis._styling) {\n            this.yAxis._styling(container, component, this);\n        }\n        this._inStyling = false;\n    };\n    IgrScatterBase.prototype.getItemValue = function (item, memberPathName) {\n        var iv = this.i.hk(item, memberPathName);\n        return (iv);\n    };\n    /**\n     * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinates for which to get a value marker bounding box for\n    */\n    IgrScatterBase.prototype.getSeriesValueMarkerBoundingBox = function (world) {\n        var iv = this.i.pd(toPoint(world));\n        return fromRect(iv);\n    };\n    /**\n     * Determine if object can be used as YAxis\n    \r\n    * @param axis  * The object to check\n    */\n    IgrScatterBase.prototype.canUseAsYAxis = function (axis) {\n        var iv = this.i.rw(axis);\n        return (iv);\n    };\n    /**\n     * Determine if object can be used as XAxis\n    \r\n    * @param axis  * The object to check\n    */\n    IgrScatterBase.prototype.canUseAsXAxis = function (axis) {\n        var iv = this.i.rv(axis);\n        return (iv);\n    };\n    /**\n     * Gets the item that is the best match for the specified world coordinates.\n    \r\n    * @param world  * The world coordinates to use.\n    */\n    IgrScatterBase.prototype.getItem = function (world) {\n        var iv = this.i.hh(toPoint(world));\n        return (iv);\n    };\n    /**\n     * Gets the index of the item that resides at the provided world coordinates.\n    \r\n    * @param world  * The world coordinates of the requested item.\n    */\n    IgrScatterBase.prototype.getItemIndex = function (world) {\n        var iv = this.i.g0(toPoint(world));\n        return (iv);\n    };\n    IgrScatterBase.prototype.getExactItemIndex = function (world) {\n        var iv = this.i.fw(toPoint(world));\n        return (iv);\n    };\n    IgrScatterBase.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.o2(toPoint(world), useInterpolation, skipUnknowns);\n        return fromPoint(iv);\n    };\n    /**\n     * Scrolls the series to display the item for the specified data item.\n     * The series is scrolled by the minimum amount required to place the specified data item within\n     * the central 80% of the visible axis.\n    \r\n    * @param item  * The data item (item) to scroll to.\n    */\n    IgrScatterBase.prototype.scrollIntoView = function (item) {\n        var iv = this.i.eh(item);\n        return (iv);\n    };\n    Object.defineProperty(IgrScatterBase.prototype, \"assigningScatterStyle\", {\n        /**\n         * Event raised when Assigning Category Style\n        */\n        get: function () {\n            return this._assigningScatterStyle;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._assigningScatterStyle_wrapped !== null) {\n                this.i.assigningScatterStyle = delegateRemove(this.i.assigningScatterStyle, this._assigningScatterStyle_wrapped);\n                this._assigningScatterStyle_wrapped = null;\n                this._assigningScatterStyle = null;\n            }\n            this._assigningScatterStyle = ev;\n            this._assigningScatterStyle_wrapped = function (o, e) {\n                var outerArgs = new IgrAssigningScatterStyleEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeAssigningScatterStyle) {\n                    _this.beforeAssigningScatterStyle(_this, outerArgs);\n                }\n                if (_this._assigningScatterStyle) {\n                    _this._assigningScatterStyle(_this, outerArgs);\n                }\n            };\n            this.i.assigningScatterStyle = delegateCombine(this.i.assigningScatterStyle, this._assigningScatterStyle_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"assigningScatterMarkerStyle\", {\n        /**\n         * Event raised when Assigning Scatter Marker Style\n        */\n        get: function () {\n            return this._assigningScatterMarkerStyle;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._assigningScatterMarkerStyle_wrapped !== null) {\n                this.i.assigningScatterMarkerStyle = delegateRemove(this.i.assigningScatterMarkerStyle, this._assigningScatterMarkerStyle_wrapped);\n                this._assigningScatterMarkerStyle_wrapped = null;\n                this._assigningScatterMarkerStyle = null;\n            }\n            this._assigningScatterMarkerStyle = ev;\n            this._assigningScatterMarkerStyle_wrapped = function (o, e) {\n                var outerArgs = new IgrAssigningScatterMarkerStyleEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeAssigningScatterMarkerStyle) {\n                    _this.beforeAssigningScatterMarkerStyle(_this, outerArgs);\n                }\n                if (_this._assigningScatterMarkerStyle) {\n                    _this._assigningScatterMarkerStyle(_this, outerArgs);\n                }\n            };\n            this.i.assigningScatterMarkerStyle = delegateCombine(this.i.assigningScatterMarkerStyle, this._assigningScatterMarkerStyle_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IgrScatterBase;\n}(IgrMarkerSeries));\nexport { IgrScatterBase };\n//# sourceMappingURL=igr-scatter-base.js.map\n"]},"metadata":{},"sourceType":"module"}