import { XYChartDescription } from "./XYChartDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class CategoryChartDescription extends XYChartDescription {
    static $t: Type;
    private kr;
    get tooltipTemplateRef(): string;
    set tooltipTemplateRef(a: string);
    private kv;
    get width(): string;
    set width(a: string);
    private kp;
    get height(): string;
    set height(a: string);
    private kn;
    get background(): string;
    set background(a: string);
    protected get_type(): string;
    constructor();
    private kj;
    get transitionInDuration(): number;
    set transitionInDuration(a: number);
    private ks;
    get transitionInEasingFunctionRef(): string;
    set transitionInEasingFunctionRef(a: string);
    private ko;
    get chartType(): string;
    set chartType(a: string);
    private kq;
    get markerCollisionAvoidance(): string;
    set markerCollisionAvoidance(a: string);
    private jv;
    get isTransitionInEnabled(): boolean;
    set isTransitionInEnabled(a: boolean);
    private kt;
    get transitionInMode(): string;
    set transitionInMode(a: string);
    private ku;
    get transitionInSpeedType(): string;
    set transitionInSpeedType(a: string);
    private j4;
    get xAxisInterval(): number;
    set xAxisInterval(a: number);
    private j5;
    get xAxisMinorInterval(): number;
    set xAxisMinorInterval(a: number);
    private j3;
    get xAxisGap(): number;
    set xAxisGap(a: number);
    private j6;
    get xAxisOverlap(): number;
    set xAxisOverlap(a: number);
    private j7;
    get yAxisInterval(): number;
    set yAxisInterval(a: number);
    private jx;
    get yAxisIsLogarithmic(): boolean;
    set yAxisIsLogarithmic(a: boolean);
    private kk;
    get yAxisLogarithmBase(): number;
    set yAxisLogarithmBase(a: number);
    private j9;
    get yAxisMinimumValue(): number;
    set yAxisMinimumValue(a: number);
    private j8;
    get yAxisMaximumValue(): number;
    set yAxisMaximumValue(a: number);
    private ka;
    get yAxisMinorInterval(): number;
    set yAxisMinorInterval(a: number);
    private jp;
    get negativeBrushes(): string[];
    set negativeBrushes(a: string[]);
    private jq;
    get negativeOutlines(): string[];
    set negativeOutlines(a: string[]);
    private jw;
    get yAxisAbbreviateLargeNumbers(): boolean;
    set yAxisAbbreviateLargeNumbers(a: boolean);
    private jt;
    get isCategoryHighlightingEnabled(): boolean;
    set isCategoryHighlightingEnabled(a: boolean);
    private ju;
    get isItemHighlightingEnabled(): boolean;
    set isItemHighlightingEnabled(a: boolean);
}
