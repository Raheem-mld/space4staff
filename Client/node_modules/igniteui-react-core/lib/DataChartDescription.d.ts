import { SeriesViewerDescription } from "./SeriesViewerDescription";
import { AxisDescription } from "./AxisDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class DataChartDescription extends SeriesViewerDescription {
    static $t: Type;
    protected get_type(): string;
    constructor();
    private e7;
    get isSquare(): boolean;
    set isSquare(a: boolean);
    private fr;
    get windowScaleHorizontal(): number;
    set windowScaleHorizontal(a: number);
    private fs;
    get windowScaleVertical(): number;
    set windowScaleVertical(a: number);
    private fj;
    get actualWindowScaleHorizontal(): number;
    set actualWindowScaleHorizontal(a: number);
    private fk;
    get actualWindowScaleVertical(): number;
    set actualWindowScaleVertical(a: number);
    private e6;
    get isHorizontalZoomEnabled(): boolean;
    set isHorizontalZoomEnabled(a: boolean);
    private e8;
    get isVerticalZoomEnabled(): boolean;
    set isVerticalZoomEnabled(a: boolean);
    private gb;
    get gridMode(): string;
    set gridMode(a: string);
    private e5;
    get alignsGridLinesToPixels(): boolean;
    set alignsGridLinesToPixels(a: boolean);
    private fm;
    get autoExpandMarginMaximumValue(): number;
    set autoExpandMarginMaximumValue(a: number);
    private fl;
    get autoExpandMarginExtraPadding(): number;
    set autoExpandMarginExtraPadding(a: number);
    private e9;
    get shouldAutoExpandMarginForInitialLabels(): boolean;
    set shouldAutoExpandMarginForInitialLabels(a: boolean);
    private ga;
    get defaultAxisStroke(): string;
    set defaultAxisStroke(a: string);
    private f8;
    get defaultAxisMajorStroke(): string;
    set defaultAxisMajorStroke(a: string);
    private f9;
    get defaultAxisMinorStroke(): string;
    set defaultAxisMinorStroke(a: string);
    private e3;
    get axes(): AxisDescription[];
    set axes(a: AxisDescription[]);
    private fg;
    get actualPlotAreaMarginLeft(): number;
    set actualPlotAreaMarginLeft(a: number);
    private fi;
    get actualPlotAreaMarginTop(): number;
    set actualPlotAreaMarginTop(a: number);
    private fh;
    get actualPlotAreaMarginRight(): number;
    set actualPlotAreaMarginRight(a: number);
    private ff;
    get actualPlotAreaMarginBottom(): number;
    set actualPlotAreaMarginBottom(a: number);
    private f7;
    get computedPlotAreaMarginMode(): string;
    set computedPlotAreaMarginMode(a: string);
    private fo;
    get plotAreaMarginLeft(): number;
    set plotAreaMarginLeft(a: number);
    private fq;
    get plotAreaMarginTop(): number;
    set plotAreaMarginTop(a: number);
    private fp;
    get plotAreaMarginRight(): number;
    set plotAreaMarginRight(a: number);
    private fn;
    get plotAreaMarginBottom(): number;
    set plotAreaMarginBottom(a: number);
    private gd;
    get width(): string;
    set width(a: string);
    private gc;
    get height(): string;
    set height(a: string);
}
