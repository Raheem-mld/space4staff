import { Description } from "./Description";
import { SectionHeaderDescription } from "./SectionHeaderDescription";
import { SummaryRowRootDescription } from "./SummaryRowRootDescription";
import { SummaryRowSectionDescription } from "./SummaryRowSectionDescription";
import { RowSeparatorDescription } from "./RowSeparatorDescription";
import { HeaderRowSeparatorDescription } from "./HeaderRowSeparatorDescription";
import { HeaderSeparatorDescription } from "./HeaderSeparatorDescription";
import { ColumnResizingSeparatorDescription } from "./ColumnResizingSeparatorDescription";
import { ColumnMovingSeparatorDescription } from "./ColumnMovingSeparatorDescription";
import { PinnedAreaSeparatorDescription } from "./PinnedAreaSeparatorDescription";
import { BaseDataSourceDescription } from "./BaseDataSourceDescription";
import { GridAnimationSettingsDescription } from "./GridAnimationSettingsDescription";
import { Type } from "./type";
import { PrimaryKeyValueDescription } from "./PrimaryKeyValueDescription";
import { CellKeyDescription } from "./CellKeyDescription";
import { CellRangeDescription } from "./CellRangeDescription";
import { GridCellPositionDescription } from "./GridCellPositionDescription";
import { ResponsiveStateDescription } from "./ResponsiveStateDescription";
import { ColumnSortDescriptionDescription } from "./ColumnSortDescriptionDescription";
import { ColumnGroupDescriptionDescription } from "./ColumnGroupDescriptionDescription";
import { FilterExpressionDescription } from "./FilterExpressionDescription";
import { ColumnSummaryDescriptionDescription } from "./ColumnSummaryDescriptionDescription";
import { ColumnDescription } from "./ColumnDescription";
/**
 * @hidden
 */
export declare class DataGridDescription extends Description {
    static $t: Type;
    private ht;
    get width(): string;
    set width(a: string);
    private gc;
    get height(): string;
    set height(a: string);
    private eg;
    get background(): string;
    set background(a: string);
    private bi;
    get isGroupByAreaVisible(): boolean;
    set isGroupByAreaVisible(a: boolean);
    protected get_type(): string;
    get type(): string;
    constructor();
    private fb;
    get columnResizingMode(): string;
    set columnResizingMode(a: string);
    private e3;
    get columnMovingMode(): string;
    set columnMovingMode(a: string);
    private bo;
    get isRowHoverEnabled(): boolean;
    set isRowHoverEnabled(a: boolean);
    private gk;
    get rowHoverBackground(): string;
    set rowHoverBackground(a: string);
    private gl;
    get rowHoverTextColor(): string;
    set rowHoverTextColor(a: string);
    private fr;
    get editRowBorder(): string;
    set editRowBorder(a: string);
    private ct;
    get editRowBorderWidthBottom(): number;
    set editRowBorderWidthBottom(a: number);
    private cu;
    get editRowBorderWidthLeft(): number;
    set editRowBorderWidthLeft(a: number);
    private cv;
    get editRowBorderWidthRight(): number;
    set editRowBorderWidthRight(a: number);
    private cw;
    get editRowBorderWidthTop(): number;
    set editRowBorderWidthTop(a: number);
    private a5;
    get sectionHeader(): SectionHeaderDescription;
    set sectionHeader(a: SectionHeaderDescription);
    private a7;
    get summaryRowRoot(): SummaryRowRootDescription;
    set summaryRowRoot(a: SummaryRowRootDescription);
    private a9;
    get summaryRowSection(): SummaryRowSectionDescription;
    set summaryRowSection(a: SummaryRowSectionDescription);
    private a3;
    get rowSeparator(): RowSeparatorDescription;
    set rowSeparator(a: RowSeparatorDescription);
    private ax;
    get headerRowSeparator(): HeaderRowSeparatorDescription;
    set headerRowSeparator(a: HeaderRowSeparatorDescription);
    private az;
    get headerSeparator(): HeaderSeparatorDescription;
    set headerSeparator(a: HeaderSeparatorDescription);
    private ar;
    get columnResizingSeparator(): ColumnResizingSeparatorDescription;
    set columnResizingSeparator(a: ColumnResizingSeparatorDescription);
    private ap;
    get columnMovingSeparator(): ColumnMovingSeparatorDescription;
    set columnMovingSeparator(a: ColumnMovingSeparatorDescription);
    private a1;
    get pinnedAreaSeparator(): PinnedAreaSeparatorDescription;
    set pinnedAreaSeparator(a: PinnedAreaSeparatorDescription);
    private h;
    get autoGenerateDesiredProperties(): string[];
    set autoGenerateDesiredProperties(a: string[]);
    private j;
    get dataSourceDesiredProperties(): string[];
    set dataSourceDesiredProperties(a: string[]);
    private fl;
    get density(): string;
    set density(a: string);
    private dv;
    get actualRowHeight(): number;
    set actualRowHeight(a: number);
    private d1;
    get rowHeight(): number;
    set rowHeight(a: number);
    private cq;
    get defaultColumnMinWidth(): number;
    set defaultColumnMinWidth(a: number);
    private du;
    get actualHeaderHeight(): number;
    set actualHeaderHeight(a: number);
    private dy;
    get headerHeight(): number;
    set headerHeight(a: number);
    private fj;
    get dataSourceRef(): string;
    set dataSourceRef(a: string);
    private an;
    get dataSource(): BaseDataSourceDescription;
    set dataSource(a: BaseDataSourceDescription);
    private f3;
    get headerClickAction(): string;
    set headerClickAction(a: string);
    private fp;
    get editMode(): string;
    set editMode(a: string);
    private fq;
    get editModeClickAction(): string;
    set editModeClickAction(a: string);
    private be;
    get editOnKeyPress(): boolean;
    set editOnKeyPress(a: boolean);
    private bc;
    get autoGenerateColumns(): boolean;
    set autoGenerateColumns(a: boolean);
    private d2;
    get rowSeparatorHeight(): number;
    set rowSeparatorHeight(a: number);
    private bn;
    get isPlaceholderRenderingEnabled(): boolean;
    set isPlaceholderRenderingEnabled(a: boolean);
    private ey;
    get columnAddingAnimationMode(): string;
    set columnAddingAnimationMode(a: string);
    private e9;
    get columnPropertyUpdatingAnimationMode(): string;
    set columnPropertyUpdatingAnimationMode(a: string);
    private ek;
    get cellDataLoadedAnimationMode(): string;
    set cellDataLoadedAnimationMode(a: string);
    private gm;
    get rowSelectionAnimationMode(): string;
    set rowSelectionAnimationMode(a: string);
    private gj;
    get rowHoverAnimationMode(): string;
    set rowHoverAnimationMode(a: string);
    private ev;
    get cellSelectionAnimationMode(): string;
    set cellSelectionAnimationMode(a: string);
    private at;
    get animationSettings(): GridAnimationSettingsDescription;
    set animationSettings(a: GridAnimationSettingsDescription);
    private fa;
    get columnResizingAnimationMode(): string;
    set columnResizingAnimationMode(a: string);
    private fe;
    get columnShowingAnimationMode(): string;
    set columnShowingAnimationMode(a: string);
    private e2;
    get columnMovingAnimationMode(): string;
    set columnMovingAnimationMode(a: string);
    private e1;
    get columnHidingAnimationMode(): string;
    set columnHidingAnimationMode(a: string);
    private ez;
    get columnExchangingAnimationMode(): string;
    set columnExchangingAnimationMode(a: string);
    private g3;
    get selectionMode(): string;
    set selectionMode(a: string);
    private ec;
    get activationMode(): string;
    set activationMode(a: string);
    private g1;
    get selectionBehavior(): string;
    set selectionBehavior(a: string);
    private s;
    get selectedItems(): any[];
    set selectedItems(a: any[]);
    private t;
    get selectedKeys(): PrimaryKeyValueDescription[];
    set selectedKeys(a: PrimaryKeyValueDescription[]);
    private r;
    get selectedCells(): CellKeyDescription[];
    set selectedCells(a: CellKeyDescription[]);
    private q;
    get selectedCellRanges(): CellRangeDescription[];
    set selectedCellRanges(a: CellRangeDescription[]);
    private m;
    get pinnedItems(): any[];
    set pinnedItems(a: any[]);
    private n;
    get pinnedKeys(): PrimaryKeyValueDescription[];
    set pinnedKeys(a: PrimaryKeyValueDescription[]);
    private bg;
    get isColumnOptionsEnabled(): boolean;
    set isColumnOptionsEnabled(a: boolean);
    private bl;
    get isGroupRowSticky(): boolean;
    set isGroupRowSticky(a: boolean);
    private bm;
    get isHeaderSeparatorVisible(): boolean;
    set isHeaderSeparatorVisible(a: boolean);
    private eu;
    get cellSelectedBackground(): string;
    set cellSelectedBackground(a: string);
    private gv;
    get sectionHeaderSelectedBackground(): string;
    set sectionHeaderSelectedBackground(a: string);
    private g8;
    get summaryRootBackground(): string;
    set summaryRootBackground(a: string);
    private hj;
    get summarySectionBackground(): string;
    set summarySectionBackground(a: string);
    private cy;
    get pinnedRowOpacity(): number;
    set pinnedRowOpacity(a: number);
    private fm;
    get editFontFamily(): string;
    set editFontFamily(a: string);
    private cr;
    get editFontSize(): number;
    set editFontSize(a: number);
    private fn;
    get editFontStyle(): string;
    set editFontStyle(a: string);
    private fo;
    get editFontWeight(): string;
    set editFontWeight(a: string);
    private cs;
    get editOpacity(): number;
    set editOpacity(a: number);
    private fk;
    get deletedTextColor(): string;
    set deletedTextColor(a: string);
    private g6;
    get stickyRowBackground(): string;
    set stickyRowBackground(a: string);
    private gg;
    get pinnedRowBackground(): string;
    set pinnedRowBackground(a: string);
    private gd;
    get lastStickyRowBackground(): string;
    set lastStickyRowBackground(a: string);
    private av;
    get activeCell(): GridCellPositionDescription;
    set activeCell(a: GridCellPositionDescription);
    private ei;
    get cellBackground(): string;
    set cellBackground(a: string);
    private ew;
    get cellTextColor(): string;
    set cellTextColor(a: string);
    private f9;
    get headerSortIndicatorColor(): string;
    set headerSortIndicatorColor(a: string);
    private ga;
    get headerSortIndicatorStyle(): string;
    set headerSortIndicatorStyle(a: string);
    private en;
    get cellFontFamily(): string;
    set cellFontFamily(a: string);
    private cj;
    get cellFontSize(): number;
    set cellFontSize(a: number);
    private eo;
    get cellFontStyle(): string;
    set cellFontStyle(a: string);
    private ep;
    get cellFontWeight(): string;
    set cellFontWeight(a: string);
    private gr;
    get sectionHeaderBackground(): string;
    set sectionHeaderBackground(a: string);
    private gw;
    get sectionHeaderTextColor(): string;
    set sectionHeaderTextColor(a: string);
    private gs;
    get sectionHeaderFontFamily(): string;
    set sectionHeaderFontFamily(a: string);
    private cz;
    get sectionHeaderFontSize(): number;
    set sectionHeaderFontSize(a: number);
    private gt;
    get sectionHeaderFontStyle(): string;
    set sectionHeaderFontStyle(a: string);
    private gu;
    get sectionHeaderFontWeight(): string;
    set sectionHeaderFontWeight(a: string);
    private g9;
    get summaryRootLabelFontFamily(): string;
    set summaryRootLabelFontFamily(a: string);
    private c0;
    get summaryRootLabelFontSize(): number;
    set summaryRootLabelFontSize(a: number);
    private ha;
    get summaryRootLabelFontStyle(): string;
    set summaryRootLabelFontStyle(a: string);
    private hb;
    get summaryRootLabelFontWeight(): string;
    set summaryRootLabelFontWeight(a: string);
    private hk;
    get summarySectionLabelFontFamily(): string;
    set summarySectionLabelFontFamily(a: string);
    private c2;
    get summarySectionLabelFontSize(): number;
    set summarySectionLabelFontSize(a: number);
    private hl;
    get summarySectionLabelFontStyle(): string;
    set summarySectionLabelFontStyle(a: string);
    private hm;
    get summarySectionLabelFontWeight(): string;
    set summarySectionLabelFontWeight(a: string);
    private hh;
    get summaryRootValueTextColor(): string;
    set summaryRootValueTextColor(a: string);
    private he;
    get summaryRootValueFontFamily(): string;
    set summaryRootValueFontFamily(a: string);
    private c1;
    get summaryRootValueFontSize(): number;
    set summaryRootValueFontSize(a: number);
    private hf;
    get summaryRootValueFontStyle(): string;
    set summaryRootValueFontStyle(a: string);
    private hg;
    get summaryRootValueFontWeight(): string;
    set summaryRootValueFontWeight(a: string);
    private hp;
    get summarySectionValueFontFamily(): string;
    set summarySectionValueFontFamily(a: string);
    private c3;
    get summarySectionValueFontSize(): number;
    set summarySectionValueFontSize(a: number);
    private hq;
    get summarySectionValueFontStyle(): string;
    set summarySectionValueFontStyle(a: string);
    private hr;
    get summarySectionValueFontWeight(): string;
    set summarySectionValueFontWeight(a: string);
    private hs;
    get summarySectionValueTextColor(): string;
    set summarySectionValueTextColor(a: string);
    private hc;
    get summaryRootLabelTextColor(): string;
    set summaryRootLabelTextColor(a: string);
    private hn;
    get summarySectionLabelTextColor(): string;
    set summarySectionLabelTextColor(a: string);
    private hd;
    get summaryRootSelectedBackground(): string;
    set summaryRootSelectedBackground(a: string);
    private ho;
    get summarySectionSelectedBackground(): string;
    set summarySectionSelectedBackground(a: string);
    private d0;
    get pinnedAreaSeparatorWidth(): number;
    set pinnedAreaSeparatorWidth(a: number);
    private dz;
    get headerSeparatorWidth(): number;
    set headerSeparatorWidth(a: number);
    private f8;
    get headerSeparatorBackground(): string;
    set headerSeparatorBackground(a: string);
    private f2;
    get headerBackground(): string;
    set headerBackground(a: string);
    private gb;
    get headerTextColor(): string;
    set headerTextColor(a: string);
    private f4;
    get headerFontFamily(): string;
    set headerFontFamily(a: string);
    private cx;
    get headerFontSize(): number;
    set headerFontSize(a: number);
    private f5;
    get headerFontStyle(): string;
    set headerFontStyle(a: string);
    private f6;
    get headerFontWeight(): string;
    set headerFontWeight(a: string);
    private gn;
    get rowSeparatorBackground(): string;
    set rowSeparatorBackground(a: string);
    private f7;
    get headerRowSeparatorBackground(): string;
    set headerRowSeparatorBackground(a: string);
    private gq;
    get rowSeparatorStickyRowBackground(): string;
    set rowSeparatorStickyRowBackground(a: string);
    private go;
    get rowSeparatorLastStickyRowBackground(): string;
    set rowSeparatorLastStickyRowBackground(a: string);
    private gp;
    get rowSeparatorPinnedRowBackground(): string;
    set rowSeparatorPinnedRowBackground(a: string);
    private dx;
    get columnResizingSeparatorWidth(): number;
    set columnResizingSeparatorWidth(a: number);
    private cl;
    get columnResizingSeparatorOpacity(): number;
    set columnResizingSeparatorOpacity(a: number);
    private dw;
    get columnMovingSeparatorWidth(): number;
    set columnMovingSeparatorWidth(a: number);
    private ck;
    get columnMovingSeparatorOpacity(): number;
    set columnMovingSeparatorOpacity(a: number);
    private fc;
    get columnResizingSeparatorBackground(): string;
    set columnResizingSeparatorBackground(a: string);
    private e4;
    get columnMovingSeparatorBackground(): string;
    set columnMovingSeparatorBackground(a: string);
    private bt;
    get shiftSectionContent(): boolean;
    set shiftSectionContent(a: boolean);
    private e5;
    get columnOptionsIconAlignment(): string;
    set columnOptionsIconAlignment(a: string);
    private e7;
    get columnOptionsIconColor(): string;
    set columnOptionsIconColor(a: string);
    private e6;
    get columnOptionsIconBehavior(): string;
    set columnOptionsIconBehavior(a: string);
    private eh;
    get border(): string;
    set border(a: string);
    private cf;
    get borderWidthBottom(): number;
    set borderWidthBottom(a: number);
    private cg;
    get borderWidthLeft(): number;
    set borderWidthLeft(a: number);
    private ch;
    get borderWidthRight(): number;
    set borderWidthRight(a: number);
    private ci;
    get borderWidthTop(): number;
    set borderWidthTop(a: number);
    private bp;
    get notifyOnAllSelectionChanges(): boolean;
    set notifyOnAllSelectionChanges(a: boolean);
    private cn;
    get cornerRadiusBottomRight(): number;
    set cornerRadiusBottomRight(a: number);
    private cm;
    get cornerRadiusBottomLeft(): number;
    set cornerRadiusBottomLeft(a: number);
    private co;
    get cornerRadiusTopLeft(): number;
    set cornerRadiusTopLeft(a: number);
    private cp;
    get cornerRadiusTopRight(): number;
    set cornerRadiusTopRight(a: number);
    private bf;
    get isActiveCellStyleEnabled(): boolean;
    set isActiveCellStyleEnabled(a: boolean);
    private p;
    get responsiveStates(): ResponsiveStateDescription[];
    set responsiveStates(a: ResponsiveStateDescription[]);
    private u;
    get sortDescriptions(): ColumnSortDescriptionDescription[];
    set sortDescriptions(a: ColumnSortDescriptionDescription[]);
    private l;
    get groupDescriptions(): ColumnGroupDescriptionDescription[];
    set groupDescriptions(a: ColumnGroupDescriptionDescription[]);
    private k;
    get filterExpressions(): FilterExpressionDescription[];
    set filterExpressions(a: FilterExpressionDescription[]);
    private v;
    get summaryDescriptions(): ColumnSummaryDescriptionDescription[];
    set summaryDescriptions(a: ColumnSummaryDescriptionDescription[]);
    private hi;
    get summaryScope(): string;
    set summaryScope(a: string);
    private bj;
    get isGroupCollapsable(): boolean;
    set isGroupCollapsable(a: boolean);
    private f0;
    get groupHeaderDisplayMode(): string;
    set groupHeaderDisplayMode(a: string);
    private bk;
    get isGroupExpandedDefault(): boolean;
    set isGroupExpandedDefault(a: boolean);
    private f1;
    get groupSummaryDisplayMode(): string;
    set groupSummaryDisplayMode(a: string);
    private bb;
    get autoAcceptEdits(): boolean;
    set autoAcceptEdits(a: boolean);
    private o;
    get primaryKey(): string[];
    set primaryKey(a: string[]);
    private g;
    get actualPrimaryKey(): string[];
    set actualPrimaryKey(a: string[]);
    private f;
    get actualColumns(): ColumnDescription[];
    set actualColumns(a: ColumnDescription[]);
    private i;
    get columns(): ColumnDescription[];
    set columns(a: ColumnDescription[]);
    private bs;
    get reactsToSortChanges(): boolean;
    set reactsToSortChanges(a: boolean);
    private br;
    get reactsToGroupChanges(): boolean;
    set reactsToGroupChanges(a: boolean);
    private bq;
    get reactsToFilterChanges(): boolean;
    set reactsToFilterChanges(a: boolean);
    private fs;
    get enterBehavior(): string;
    set enterBehavior(a: string);
    private ft;
    get enterBehaviorAfterEdit(): string;
    set enterBehaviorAfterEdit(a: string);
    private bh;
    get isColumnOptionsSummariesEnabled(): boolean;
    set isColumnOptionsSummariesEnabled(a: boolean);
    private gf;
    get mergedCellMode(): string;
    set mergedCellMode(a: string);
    private ge;
    get mergedCellEvaluationCriteria(): string;
    set mergedCellEvaluationCriteria(a: string);
    private fy;
    get filterUIType(): string;
    set filterUIType(a: string);
    private fx;
    get filterLogicalOperator(): string;
    set filterLogicalOperator(a: string);
    private fu;
    get filterComparisonType(): string;
    set filterComparisonType(a: string);
    private cd;
    get todayOverride(): Date;
    set todayOverride(a: Date);
    private bd;
    get clearSelectionOnEscape(): boolean;
    set clearSelectionOnEscape(a: boolean);
    private fw;
    get filterExpressionsChangingRef(): string;
    set filterExpressionsChangingRef(a: string);
    private fv;
    get filterExpressionsChangedRef(): string;
    set filterExpressionsChangedRef(a: string);
    private es;
    get cellPreviewPointerDownRef(): string;
    set cellPreviewPointerDownRef(a: string);
    private et;
    get cellPreviewPointerUpRef(): string;
    set cellPreviewPointerUpRef(a: string);
    private eq;
    get cellPointerDownRef(): string;
    set cellPointerDownRef(a: string);
    private er;
    get cellPointerUpRef(): string;
    set cellPointerUpRef(a: string);
    private ej;
    get cellClickedRef(): string;
    set cellClickedRef(a: string);
    private g5;
    get sortDescriptionsChangedRef(): string;
    set sortDescriptionsChangedRef(a: string);
    private fz;
    get groupDescriptionsChangedRef(): string;
    set groupDescriptionsChangedRef(a: string);
    private g7;
    get summaryDescriptionsChangedRef(): string;
    set summaryDescriptionsChangedRef(a: string);
    private e0;
    get columnHiddenChangedRef(): string;
    set columnHiddenChangedRef(a: string);
    private e8;
    get columnPinnedChangedRef(): string;
    set columnPinnedChangedRef(a: string);
    private ex;
    get cellValueChangingRef(): string;
    set cellValueChangingRef(a: string);
    private fh;
    get dataCommittedRef(): string;
    set dataCommittedRef(a: string);
    private fi;
    get dataCommittingRef(): string;
    set dataCommittingRef(a: string);
    private g4;
    get sizeChangedRef(): string;
    set sizeChangedRef(a: string);
    private ee;
    get actualColumnsChangedRef(): string;
    set actualColumnsChangedRef(a: string);
    private fd;
    get columnsAutoGeneratedRef(): string;
    set columnsAutoGeneratedRef(a: string);
    private gz;
    get selectedItemsChangedRef(): string;
    set selectedItemsChangedRef(a: string);
    private g0;
    get selectedKeysChangedRef(): string;
    set selectedKeysChangedRef(a: string);
    private gy;
    get selectedCellsChangedRef(): string;
    set selectedCellsChangedRef(a: string);
    private g2;
    get selectionChangedRef(): string;
    set selectionChangedRef(a: string);
    private ed;
    get activeCellChangedRef(): string;
    set activeCellChangedRef(a: string);
    private gx;
    get selectedCellRangesChangedRef(): string;
    set selectedCellRangesChangedRef(a: string);
    private ff;
    get columnWidthChangedRef(): string;
    set columnWidthChangedRef(a: string);
    private em;
    get cellEditStartedRef(): string;
    set cellEditStartedRef(a: string);
    private el;
    get cellEditEndedRef(): string;
    set cellEditEndedRef(a: string);
    private gi;
    get rowEditStartedRef(): string;
    set rowEditStartedRef(a: string);
    private gh;
    get rowEditEndedRef(): string;
    set rowEditEndedRef(a: string);
    private fg;
    get customFilterRequestedRef(): string;
    set customFilterRequestedRef(a: string);
    private ef;
    get actualPrimaryKeyChangeRef(): string;
    set actualPrimaryKeyChangeRef(a: string);
}
