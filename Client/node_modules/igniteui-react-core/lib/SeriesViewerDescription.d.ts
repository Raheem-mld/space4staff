import { Description } from "./Description";
import { SeriesDescription } from "./SeriesDescription";
import { PointDescription } from "./PointDescription";
import { RectDescription } from "./RectDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare abstract class SeriesViewerDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private j;
    get series(): SeriesDescription[];
    set series(a: SeriesDescription[]);
    private f;
    get brushes(): string[];
    set brushes(a: string[]);
    private i;
    get outlines(): string[];
    set outlines(a: string[]);
    private g;
    get markerBrushes(): string[];
    set markerBrushes(a: string[]);
    private h;
    get markerOutlines(): string[];
    set markerOutlines(a: string[]);
    private cm;
    get markerAutomaticBehavior(): string;
    set markerAutomaticBehavior(a: string);
    private p;
    get crosshairPoint(): PointDescription;
    set crosshairPoint(a: PointDescription);
    private cl;
    get legendRef(): string;
    set legendRef(a: string);
    private z;
    get animateSeriesWhenAxisRangeChanges(): boolean;
    set animateSeriesWhenAxisRangeChanges(a: boolean);
    private ad;
    get isWindowSyncedToVisibleRange(): boolean;
    set isWindowSyncedToVisibleRange(a: boolean);
    private af;
    get shouldSimulateHoverMoveCrosshairPoint(): boolean;
    set shouldSimulateHoverMoveCrosshairPoint(a: boolean);
    private ch;
    get highlightingMode(): string;
    set highlightingMode(a: string);
    private cg;
    get highlightingBehavior(): string;
    set highlightingBehavior(a: string);
    private ci;
    get legendHighlightingMode(): string;
    set legendHighlightingMode(a: string);
    private ck;
    get legendItemBadgeShape(): string;
    set legendItemBadgeShape(a: string);
    private cj;
    get legendItemBadgeMode(): string;
    set legendItemBadgeMode(a: string);
    private s;
    get effectiveViewport(): RectDescription;
    set effectiveViewport(a: RectDescription);
    private u;
    get windowRect(): RectDescription;
    set windowRect(a: RectDescription);
    private ag;
    get useTiledZooming(): boolean;
    set useTiledZooming(a: boolean);
    private ae;
    get preferHigherResolutionTiles(): boolean;
    set preferHigherResolutionTiles(a: boolean);
    private b4;
    get zoomTileCacheSize(): number;
    set zoomTileCacheSize(a: number);
    private b3;
    get highlightingTransitionDuration(): number;
    set highlightingTransitionDuration(a: number);
    private ab;
    get isPagePanningAllowed(): boolean;
    set isPagePanningAllowed(a: boolean);
    private cb;
    get contentHitTestMode(): string;
    set contentHitTestMode(a: string);
    private b7;
    get actualContentHitTestMode(): string;
    set actualContentHitTestMode(a: string);
    private ac;
    get isSurfaceInteractionDisabled(): boolean;
    set isSurfaceInteractionDisabled(a: boolean);
    private dk;
    get windowResponse(): string;
    set windowResponse(a: string);
    private bd;
    get windowRectMinWidth(): number;
    set windowRectMinWidth(a: number);
    private cc;
    get crosshairVisibility(): string;
    set crosshairVisibility(a: string);
    private dl;
    get zoomCoercionMode(): string;
    set zoomCoercionMode(a: string);
    private co;
    get plotAreaBackground(): string;
    set plotAreaBackground(a: string);
    private cd;
    get defaultInteraction(): string;
    set defaultInteraction(a: string);
    private cw;
    get rightButtonDefaultInteraction(): string;
    set rightButtonDefaultInteraction(a: string);
    private ce;
    get dragModifier(): string;
    set dragModifier(a: string);
    private cn;
    get panModifier(): string;
    set panModifier(a: string);
    private t;
    get previewRect(): RectDescription;
    set previewRect(a: RectDescription);
    private bb;
    get windowPositionHorizontal(): number;
    set windowPositionHorizontal(a: number);
    private bc;
    get windowPositionVertical(): number;
    set windowPositionVertical(a: number);
    private ca;
    get chartTitle(): string;
    set chartTitle(a: string);
    private de;
    get titleHorizontalAlignment(): string;
    set titleHorizontalAlignment(a: string);
    private c8;
    get subtitleHorizontalAlignment(): string;
    set subtitleHorizontalAlignment(a: string);
    private dg;
    get titleTextStyle(): string;
    set titleTextStyle(a: string);
    private da;
    get subtitleTextStyle(): string;
    set subtitleTextStyle(a: string);
    private df;
    get titleTextColor(): string;
    set titleTextColor(a: string);
    private c9;
    get subtitleTextColor(): string;
    set subtitleTextColor(a: string);
    private a9;
    get titleTopMargin(): number;
    set titleTopMargin(a: number);
    private a7;
    get titleLeftMargin(): number;
    set titleLeftMargin(a: number);
    private a8;
    get titleRightMargin(): number;
    set titleRightMargin(a: number);
    private a5;
    get titleBottomMargin(): number;
    set titleBottomMargin(a: number);
    private a4;
    get subtitleTopMargin(): number;
    set subtitleTopMargin(a: number);
    private a2;
    get subtitleLeftMargin(): number;
    set subtitleLeftMargin(a: number);
    private a3;
    get subtitleRightMargin(): number;
    set subtitleRightMargin(a: number);
    private a0;
    get subtitleBottomMargin(): number;
    set subtitleBottomMargin(a: number);
    private c4;
    get subtitle(): string;
    set subtitle(a: string);
    private ba;
    get topMargin(): number;
    set topMargin(a: number);
    private ax;
    get leftMargin(): number;
    set leftMargin(a: number);
    private az;
    get rightMargin(): number;
    set rightMargin(a: number);
    private av;
    get bottomMargin(): number;
    set bottomMargin(a: number);
    private au;
    get autoMarginWidth(): number;
    set autoMarginWidth(a: number);
    private at;
    get autoMarginHeight(): number;
    set autoMarginHeight(a: number);
    private aa;
    get isAntiAliasingEnabledDuringInteraction(): boolean;
    set isAntiAliasingEnabledDuringInteraction(a: boolean);
    private ay;
    get pixelScalingRatio(): number;
    set pixelScalingRatio(a: number);
    private aw;
    get interactionPixelScalingRatio(): number;
    set interactionPixelScalingRatio(a: number);
    private aq;
    get actualPixelScalingRatio(): number;
    set actualPixelScalingRatio(a: number);
    private ap;
    get actualInteractionPixelScalingRatio(): number;
    set actualInteractionPixelScalingRatio(a: number);
    private r;
    get actualWindowRect(): RectDescription;
    set actualWindowRect(a: RectDescription);
    private ar;
    get actualWindowPositionHorizontal(): number;
    set actualWindowPositionHorizontal(a: number);
    private as;
    get actualWindowPositionVertical(): number;
    set actualWindowPositionVertical(a: number);
    private cs;
    get plotAreaMouseLeftButtonDownRef(): string;
    set plotAreaMouseLeftButtonDownRef(a: string);
    private ct;
    get plotAreaMouseLeftButtonUpRef(): string;
    set plotAreaMouseLeftButtonUpRef(a: string);
    private cp;
    get plotAreaClickedRef(): string;
    set plotAreaClickedRef(a: string);
    private cq;
    get plotAreaMouseEnterRef(): string;
    set plotAreaMouseEnterRef(a: string);
    private cr;
    get plotAreaMouseLeaveRef(): string;
    set plotAreaMouseLeaveRef(a: string);
    private cu;
    get plotAreaMouseOverRef(): string;
    set plotAreaMouseOverRef(a: string);
    private cx;
    get seriesCursorMouseMoveRef(): string;
    set seriesCursorMouseMoveRef(a: string);
    private c0;
    get seriesMouseLeftButtonDownRef(): string;
    set seriesMouseLeftButtonDownRef(a: string);
    private c1;
    get seriesMouseLeftButtonUpRef(): string;
    set seriesMouseLeftButtonUpRef(a: string);
    private c2;
    get seriesMouseMoveRef(): string;
    set seriesMouseMoveRef(a: string);
    private cy;
    get seriesMouseEnterRef(): string;
    set seriesMouseEnterRef(a: string);
    private cz;
    get seriesMouseLeaveRef(): string;
    set seriesMouseLeaveRef(a: string);
    private di;
    get viewerManipulationStartingRef(): string;
    set viewerManipulationStartingRef(a: string);
    private dh;
    get viewerManipulationEndingRef(): string;
    set viewerManipulationEndingRef(a: string);
    private dj;
    get windowRectChangedRef(): string;
    set windowRectChangedRef(a: string);
    private c3;
    get sizeChangedRef(): string;
    set sizeChangedRef(a: string);
    private b8;
    get actualWindowRectChangedRef(): string;
    set actualWindowRectChangedRef(a: string);
    private cf;
    get gridAreaRectChangedRef(): string;
    set gridAreaRectChangedRef(a: string);
    private cv;
    get refreshCompletedRef(): string;
    set refreshCompletedRef(a: string);
    private b9;
    get background(): string;
    set background(a: string);
    private db;
    get titleFontFamily(): string;
    set titleFontFamily(a: string);
    private a6;
    get titleFontSize(): number;
    set titleFontSize(a: number);
    private dd;
    get titleFontWeight(): string;
    set titleFontWeight(a: string);
    private dc;
    get titleFontStyle(): string;
    set titleFontStyle(a: string);
    private c5;
    get subtitleFontFamily(): string;
    set subtitleFontFamily(a: string);
    private a1;
    get subtitleFontSize(): number;
    set subtitleFontSize(a: number);
    private c7;
    get subtitleFontWeight(): string;
    set subtitleFontWeight(a: string);
    private c6;
    get subtitleFontStyle(): string;
    set subtitleFontStyle(a: string);
}
