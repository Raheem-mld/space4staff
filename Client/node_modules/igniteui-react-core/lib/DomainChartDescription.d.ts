import { Description } from "./Description";
import { RectDescription } from "./RectDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare abstract class DomainChartDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private a9;
    get pixelScalingRatio(): number;
    set pixelScalingRatio(a: number);
    private bm;
    get titleLeftMargin(): number;
    set titleLeftMargin(a: number);
    private bn;
    get titleRightMargin(): number;
    set titleRightMargin(a: number);
    private bo;
    get titleTopMargin(): number;
    set titleTopMargin(a: number);
    private bl;
    get titleBottomMargin(): number;
    set titleBottomMargin(a: number);
    private bh;
    get subtitleLeftMargin(): number;
    set subtitleLeftMargin(a: number);
    private bj;
    get subtitleTopMargin(): number;
    set subtitleTopMargin(a: number);
    private bi;
    get subtitleRightMargin(): number;
    set subtitleRightMargin(a: number);
    private bg;
    get subtitleBottomMargin(): number;
    set subtitleBottomMargin(a: number);
    private dv;
    get subtitleTextColor(): string;
    set subtitleTextColor(a: string);
    private dy;
    get titleTextColor(): string;
    set titleTextColor(a: string);
    private a6;
    get leftMargin(): number;
    set leftMargin(a: number);
    private bp;
    get topMargin(): number;
    set topMargin(a: number);
    private bf;
    get rightMargin(): number;
    set rightMargin(a: number);
    private a4;
    get bottomMargin(): number;
    set bottomMargin(a: number);
    private cl;
    get transitionDuration(): number;
    set transitionDuration(a: number);
    private d1;
    get transitionEasingFunctionRef(): string;
    set transitionEasingFunctionRef(a: string);
    private dw;
    get subtitleTextStyle(): string;
    set subtitleTextStyle(a: string);
    private dz;
    get titleTextStyle(): string;
    set titleTextStyle(a: string);
    private c8;
    get dataSourceRef(): string;
    set dataSourceRef(a: string);
    private j;
    get includedProperties(): string[];
    set includedProperties(a: string[]);
    private i;
    get excludedProperties(): string[];
    set excludedProperties(a: string[]);
    private h;
    get brushes(): string[];
    set brushes(a: string[]);
    private n;
    get outlines(): string[];
    set outlines(a: string[]);
    private f;
    get actualBrushes(): string[];
    set actualBrushes(a: string[]);
    private g;
    get actualOutlines(): string[];
    set actualOutlines(a: string[]);
    private dg;
    get legendRef(): string;
    set legendRef(a: string);
    private ai;
    get isHorizontalZoomEnabled(): boolean;
    set isHorizontalZoomEnabled(a: boolean);
    private ak;
    get isVerticalZoomEnabled(): boolean;
    set isVerticalZoomEnabled(a: boolean);
    private am;
    get shouldDisplayMockData(): boolean;
    set shouldDisplayMockData(a: boolean);
    private an;
    get shouldUseSkeletonStyleForMockData(): boolean;
    set shouldUseSkeletonStyleForMockData(a: boolean);
    private aj;
    get isSeriesHighlightingEnabled(): boolean;
    set isSeriesHighlightingEnabled(a: boolean);
    private z;
    get windowRect(): RectDescription;
    set windowRect(a: RectDescription);
    private cz;
    get chartTitle(): string;
    set chartTitle(a: string);
    private dt;
    get subtitle(): string;
    set subtitle(a: string);
    private dx;
    get titleAlignment(): string;
    set titleAlignment(a: string);
    private du;
    get subtitleAlignment(): string;
    set subtitleAlignment(a: string);
    private d3;
    get unknownValuePlotting(): string;
    set unknownValuePlotting(a: string);
    private be;
    get resolution(): number;
    set resolution(a: number);
    private bk;
    get thickness(): number;
    set thickness(a: number);
    private dk;
    get outlineMode(): string;
    set outlineMode(a: string);
    private dj;
    get markerOutlineMode(): string;
    set markerOutlineMode(a: string);
    private di;
    get markerFillMode(): string;
    set markerFillMode(a: string);
    private a7;
    get markerFillOpacity(): number;
    set markerFillOpacity(a: number);
    private a8;
    get markerThickness(): number;
    set markerThickness(a: number);
    private m;
    get markerTypes(): string[];
    set markerTypes(a: string[]);
    private dh;
    get markerAutomaticBehavior(): string;
    set markerAutomaticBehavior(a: string);
    private k;
    get markerBrushes(): string[];
    set markerBrushes(a: string[]);
    private l;
    get markerOutlines(): string[];
    set markerOutlines(a: string[]);
    private ck;
    get markerMaxCount(): number;
    set markerMaxCount(a: number);
    private a1;
    get areaFillOpacity(): number;
    set areaFillOpacity(a: number);
    private ac;
    get animateSeriesWhenAxisRangeChanges(): boolean;
    set animateSeriesWhenAxisRangeChanges(a: boolean);
    private o;
    get trendLineBrushes(): string[];
    set trendLineBrushes(a: string[]);
    private d2;
    get trendLineType(): string;
    set trendLineType(a: string);
    private bq;
    get trendLineThickness(): number;
    set trendLineThickness(a: number);
    private ab;
    get alignsGridLinesToPixels(): boolean;
    set alignsGridLinesToPixels(a: boolean);
    private bb;
    get plotAreaMarginLeft(): number;
    set plotAreaMarginLeft(a: number);
    private bd;
    get plotAreaMarginTop(): number;
    set plotAreaMarginTop(a: number);
    private bc;
    get plotAreaMarginRight(): number;
    set plotAreaMarginRight(a: number);
    private ba;
    get plotAreaMarginBottom(): number;
    set plotAreaMarginBottom(a: number);
    private c0;
    get computedPlotAreaMarginMode(): string;
    set computedPlotAreaMarginMode(a: string);
    private dc;
    get highlightingMode(): string;
    set highlightingMode(a: string);
    private db;
    get highlightingBehavior(): string;
    set highlightingBehavior(a: string);
    private dd;
    get legendHighlightingMode(): string;
    set legendHighlightingMode(a: string);
    private df;
    get legendItemBadgeShape(): string;
    set legendItemBadgeShape(a: string);
    private de;
    get legendItemBadgeMode(): string;
    set legendItemBadgeMode(a: string);
    private al;
    get shouldAutoExpandMarginForInitialLabels(): boolean;
    set shouldAutoExpandMarginForInitialLabels(a: boolean);
    private a2;
    get autoExpandMarginExtraPadding(): number;
    set autoExpandMarginExtraPadding(a: number);
    private a3;
    get autoExpandMarginMaximumValue(): number;
    set autoExpandMarginMaximumValue(a: number);
    private cm;
    get trendLinePeriod(): number;
    set trendLinePeriod(a: number);
    private d0;
    get toolTipType(): string;
    set toolTipType(a: string);
    private c5;
    get crosshairsDisplayMode(): string;
    set crosshairsDisplayMode(a: string);
    private ag;
    get crosshairsSnapToData(): boolean;
    set crosshairsSnapToData(a: boolean);
    private c7;
    get crosshairsLineVerticalStroke(): string;
    set crosshairsLineVerticalStroke(a: string);
    private a5;
    get crosshairsLineThickness(): number;
    set crosshairsLineThickness(a: number);
    private c6;
    get crosshairsLineHorizontalStroke(): string;
    set crosshairsLineHorizontalStroke(a: string);
    private af;
    get crosshairsAnnotationEnabled(): boolean;
    set crosshairsAnnotationEnabled(a: boolean);
    private c1;
    get crosshairsAnnotationXAxisBackground(): string;
    set crosshairsAnnotationXAxisBackground(a: string);
    private c3;
    get crosshairsAnnotationYAxisBackground(): string;
    set crosshairsAnnotationYAxisBackground(a: string);
    private c2;
    get crosshairsAnnotationXAxisTextColor(): string;
    set crosshairsAnnotationXAxisTextColor(a: string);
    private c4;
    get crosshairsAnnotationYAxisTextColor(): string;
    set crosshairsAnnotationYAxisTextColor(a: string);
    private ch;
    get crosshairsAnnotationXAxisPrecision(): number;
    set crosshairsAnnotationXAxisPrecision(a: number);
    private ci;
    get crosshairsAnnotationYAxisPrecision(): number;
    set crosshairsAnnotationYAxisPrecision(a: number);
    private ah;
    get finalValueAnnotationsVisible(): boolean;
    set finalValueAnnotationsVisible(a: boolean);
    private c9;
    get finalValueAnnotationsBackground(): string;
    set finalValueAnnotationsBackground(a: string);
    private da;
    get finalValueAnnotationsTextColor(): string;
    set finalValueAnnotationsTextColor(a: string);
    private cj;
    get finalValueAnnotationsPrecision(): number;
    set finalValueAnnotationsPrecision(a: number);
    private ae;
    get calloutsVisible(): boolean;
    set calloutsVisible(a: boolean);
    private ad;
    get calloutStyleUpdatingEventEnabled(): boolean;
    set calloutStyleUpdatingEventEnabled(a: boolean);
    private cu;
    get calloutsDataSourceRef(): string;
    set calloutsDataSourceRef(a: string);
    private cx;
    get calloutsXMemberPath(): string;
    set calloutsXMemberPath(a: string);
    private cy;
    get calloutsYMemberPath(): string;
    set calloutsYMemberPath(a: string);
    private cv;
    get calloutsLabelMemberPath(): string;
    set calloutsLabelMemberPath(a: string);
    private ct;
    get calloutsContentMemberPath(): string;
    set calloutsContentMemberPath(a: string);
    private dl;
    get seriesAddedRef(): string;
    set seriesAddedRef(a: string);
    private ds;
    get seriesRemovedRef(): string;
    set seriesRemovedRef(a: string);
    private dn;
    get seriesPointerEnterRef(): string;
    set seriesPointerEnterRef(a: string);
    private dp;
    get seriesPointerLeaveRef(): string;
    set seriesPointerLeaveRef(a: string);
    private dq;
    get seriesPointerMoveRef(): string;
    set seriesPointerMoveRef(a: string);
    private dm;
    get seriesPointerDownRef(): string;
    set seriesPointerDownRef(a: string);
    private dr;
    get seriesPointerUpRef(): string;
    set seriesPointerUpRef(a: string);
    private cw;
    get calloutStyleUpdatingRef(): string;
    set calloutStyleUpdatingRef(a: string);
}
