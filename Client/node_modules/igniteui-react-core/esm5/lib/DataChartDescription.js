/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { SeriesViewerDescription } from "./SeriesViewerDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var DataChartDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DataChartDescription, _super);
    function DataChartDescription() {
        var _this = _super.call(this) || this;
        _this.e7 = false;
        _this.fr = 0;
        _this.fs = 0;
        _this.fj = 0;
        _this.fk = 0;
        _this.e6 = false;
        _this.e8 = false;
        _this.gb = null;
        _this.e5 = false;
        _this.fm = 0;
        _this.fl = 0;
        _this.e9 = false;
        _this.ga = null;
        _this.f8 = null;
        _this.f9 = null;
        _this.e3 = null;
        _this.fg = 0;
        _this.fi = 0;
        _this.fh = 0;
        _this.ff = 0;
        _this.f7 = null;
        _this.fo = 0;
        _this.fq = 0;
        _this.fp = 0;
        _this.fn = 0;
        _this.gd = null;
        _this.gc = null;
        return _this;
    }
    DataChartDescription.prototype.get_type = function () {
        return "DataChart";
    };
    Object.defineProperty(DataChartDescription.prototype, "isSquare", {
        get: function () {
            return this.e7;
        },
        set: function (a) {
            this.e7 = a;
            this.e("IsSquare");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "windowScaleHorizontal", {
        get: function () {
            return this.fr;
        },
        set: function (a) {
            this.fr = a;
            this.e("WindowScaleHorizontal");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "windowScaleVertical", {
        get: function () {
            return this.fs;
        },
        set: function (a) {
            this.fs = a;
            this.e("WindowScaleVertical");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualWindowScaleHorizontal", {
        get: function () {
            return this.fj;
        },
        set: function (a) {
            this.fj = a;
            this.e("ActualWindowScaleHorizontal");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualWindowScaleVertical", {
        get: function () {
            return this.fk;
        },
        set: function (a) {
            this.fk = a;
            this.e("ActualWindowScaleVertical");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "isHorizontalZoomEnabled", {
        get: function () {
            return this.e6;
        },
        set: function (a) {
            this.e6 = a;
            this.e("IsHorizontalZoomEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "isVerticalZoomEnabled", {
        get: function () {
            return this.e8;
        },
        set: function (a) {
            this.e8 = a;
            this.e("IsVerticalZoomEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "gridMode", {
        get: function () {
            return this.gb;
        },
        set: function (a) {
            this.gb = a;
            this.e("GridMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "alignsGridLinesToPixels", {
        get: function () {
            return this.e5;
        },
        set: function (a) {
            this.e5 = a;
            this.e("AlignsGridLinesToPixels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "autoExpandMarginMaximumValue", {
        get: function () {
            return this.fm;
        },
        set: function (a) {
            this.fm = a;
            this.e("AutoExpandMarginMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "autoExpandMarginExtraPadding", {
        get: function () {
            return this.fl;
        },
        set: function (a) {
            this.fl = a;
            this.e("AutoExpandMarginExtraPadding");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "shouldAutoExpandMarginForInitialLabels", {
        get: function () {
            return this.e9;
        },
        set: function (a) {
            this.e9 = a;
            this.e("ShouldAutoExpandMarginForInitialLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "defaultAxisStroke", {
        get: function () {
            return this.ga;
        },
        set: function (a) {
            this.ga = a;
            this.e("DefaultAxisStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "defaultAxisMajorStroke", {
        get: function () {
            return this.f8;
        },
        set: function (a) {
            this.f8 = a;
            this.e("DefaultAxisMajorStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "defaultAxisMinorStroke", {
        get: function () {
            return this.f9;
        },
        set: function (a) {
            this.f9 = a;
            this.e("DefaultAxisMinorStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "axes", {
        get: function () {
            return this.e3;
        },
        set: function (a) {
            this.e3 = a;
            this.e("Axes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginLeft", {
        get: function () {
            return this.fg;
        },
        set: function (a) {
            this.fg = a;
            this.e("ActualPlotAreaMarginLeft");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginTop", {
        get: function () {
            return this.fi;
        },
        set: function (a) {
            this.fi = a;
            this.e("ActualPlotAreaMarginTop");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginRight", {
        get: function () {
            return this.fh;
        },
        set: function (a) {
            this.fh = a;
            this.e("ActualPlotAreaMarginRight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginBottom", {
        get: function () {
            return this.ff;
        },
        set: function (a) {
            this.ff = a;
            this.e("ActualPlotAreaMarginBottom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "computedPlotAreaMarginMode", {
        get: function () {
            return this.f7;
        },
        set: function (a) {
            this.f7 = a;
            this.e("ComputedPlotAreaMarginMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginLeft", {
        get: function () {
            return this.fo;
        },
        set: function (a) {
            this.fo = a;
            this.e("PlotAreaMarginLeft");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginTop", {
        get: function () {
            return this.fq;
        },
        set: function (a) {
            this.fq = a;
            this.e("PlotAreaMarginTop");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginRight", {
        get: function () {
            return this.fp;
        },
        set: function (a) {
            this.fp = a;
            this.e("PlotAreaMarginRight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginBottom", {
        get: function () {
            return this.fn;
        },
        set: function (a) {
            this.fn = a;
            this.e("PlotAreaMarginBottom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "width", {
        get: function () {
            return this.gd;
        },
        set: function (a) {
            this.gd = a;
            this.e("Width");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "height", {
        get: function () {
            return this.gc;
        },
        set: function (a) {
            this.gc = a;
            this.e("Height");
        },
        enumerable: false,
        configurable: true
    });
    DataChartDescription.$t = markType(DataChartDescription, 'DataChartDescription', SeriesViewerDescription.$);
    return DataChartDescription;
}(SeriesViewerDescription));
export { DataChartDescription };
//# sourceMappingURL=DataChartDescription.js.map
