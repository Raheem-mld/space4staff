/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ChartSeriesEventArgsDescriptionMetadata } from "./ChartSeriesEventArgsDescriptionMetadata";
import { DomainChartSeriesPointerEventArgsDescriptionMetadata } from "./DomainChartSeriesPointerEventArgsDescriptionMetadata";
import { CalloutStyleUpdatingEventArgsDescriptionMetadata } from "./CalloutStyleUpdatingEventArgsDescriptionMetadata";
/**
 * @hidden
 */
var DomainChartDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DomainChartDescriptionMetadata, _super);
    function DomainChartDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DomainChartDescriptionMetadata.b = function (a) {
        if (DomainChartDescriptionMetadata.a == null) {
            DomainChartDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            DomainChartDescriptionMetadata.c(DomainChartDescriptionMetadata.a);
        }
        if (a.g(DomainChartDescriptionMetadata.a)) {
            return;
        }
        a.s(DomainChartDescriptionMetadata.a);
        ChartSeriesEventArgsDescriptionMetadata.d(a);
        DomainChartSeriesPointerEventArgsDescriptionMetadata.d(a);
        CalloutStyleUpdatingEventArgsDescriptionMetadata.d(a);
    };
    DomainChartDescriptionMetadata.c = function (a) {
        a.item("PixelScalingRatio", "Number:double");
        a.item("TitleLeftMargin", "Number:double");
        a.item("TitleRightMargin", "Number:double");
        a.item("TitleTopMargin", "Number:double");
        a.item("TitleBottomMargin", "Number:double");
        a.item("SubtitleLeftMargin", "Number:double");
        a.item("SubtitleTopMargin", "Number:double");
        a.item("SubtitleRightMargin", "Number:double");
        a.item("SubtitleBottomMargin", "Number:double");
        a.item("SubtitleTextColor", "Brush");
        a.item("TitleTextColor", "Brush");
        a.item("LeftMargin", "Number:double");
        a.item("TopMargin", "Number:double");
        a.item("RightMargin", "Number:double");
        a.item("BottomMargin", "Number:double");
        a.item("TransitionDuration", "Number:int");
        a.item("TransitionEasingFunctionRef", "(w:TransitionEasingFunction,wf:TransitionEasingFunction)MethodRef");
        a.item("SubtitleTextStyle", "String");
        a.item("TitleTextStyle", "String");
        a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource,wf:DataSource)DataRef::object");
        a.item("IncludedProperties", "Array:string");
        a.item("ExcludedProperties", "Array:string");
        a.item("Brushes", "BrushCollection:string");
        a.item("Outlines", "BrushCollection:string");
        a.item("ActualBrushes", "BrushCollection:string");
        a.item("ActualOutlines", "BrushCollection:string");
        a.item("LegendRef", "(w:Legend,wf:Legend)DataRef::object");
        a.item("IsHorizontalZoomEnabled", "Boolean");
        a.item("IsVerticalZoomEnabled", "Boolean");
        a.item("ShouldDisplayMockData", "Boolean");
        a.item("ShouldUseSkeletonStyleForMockData", "Boolean");
        a.item("IsSeriesHighlightingEnabled", "Boolean");
        a.item("WindowRect", "Rect");
        a.item("ChartTitle", "(w:Title,xam:Title,wf:Title)String");
        a.item("Subtitle", "String");
        a.item("TitleAlignment", "ExportedType:string:HorizontalAlignment");
        a.item("TitleAlignment@names", "Left;Center;Right;Stretch");
        a.item("SubtitleAlignment", "ExportedType:string:HorizontalAlignment");
        a.item("SubtitleAlignment@names", "Left;Center;Right;Stretch");
        a.item("UnknownValuePlotting", "ExportedType:string:UnknownValuePlotting");
        a.item("UnknownValuePlotting@names", "LinearInterpolate;DontPlot");
        a.item("Resolution", "Number:double");
        a.item("Thickness", "Number:double");
        a.item("OutlineMode", "ExportedType:string:SeriesOutlineMode");
        a.item("OutlineMode@names", "Auto;Visible;Collapsed");
        a.item("MarkerOutlineMode", "ExportedType:string:MarkerOutlineMode");
        a.item("MarkerOutlineMode@names", "Auto;Normal;MatchMarkerBrush");
        a.item("MarkerFillMode", "ExportedType:string:MarkerFillMode");
        a.item("MarkerFillMode@names", "Auto;Normal;MatchMarkerOutline");
        a.item("MarkerFillOpacity", "Number:double");
        a.item("MarkerThickness", "Number:double");
        a.item("MarkerTypes", "Collection:string:MarkerTypeCollection:MarkerType");
        a.item("MarkerTypes@names", "Unset;None;Automatic;Circle;Triangle;Pyramid;Square;Diamond;Pentagon;Hexagon;Tetragram;Pentagram;Hexagram;Hidden");
        a.item("MarkerAutomaticBehavior", "ExportedType:string:MarkerAutomaticBehavior");
        a.item("MarkerAutomaticBehavior@names", "CircleSmart;None;SmartIndexed;Indexed;Circle;Triangle;Pyramid;Square;Diamond;Pentagon;Hexagon;Tetragram;Pentagram;Hexagram");
        a.item("MarkerBrushes", "BrushCollection:string");
        a.item("MarkerOutlines", "BrushCollection:string");
        a.item("MarkerMaxCount", "Number:int");
        a.item("AreaFillOpacity", "Number:double");
        a.item("AnimateSeriesWhenAxisRangeChanges", "Boolean");
        a.item("TrendLineBrushes", "BrushCollection:string");
        a.item("TrendLineType", "ExportedType:string:TrendLineType");
        a.item("TrendLineType@names", "None;LinearFit;QuadraticFit;CubicFit;QuarticFit;QuinticFit;LogarithmicFit;ExponentialFit;PowerLawFit;SimpleAverage;ExponentialAverage;ModifiedAverage;CumulativeAverage;WeightedAverage");
        a.item("TrendLineThickness", "Number:double");
        a.item("AlignsGridLinesToPixels", "Boolean");
        a.item("PlotAreaMarginLeft", "Number:double");
        a.item("PlotAreaMarginTop", "Number:double");
        a.item("PlotAreaMarginRight", "Number:double");
        a.item("PlotAreaMarginBottom", "Number:double");
        a.item("ComputedPlotAreaMarginMode", "ExportedType:string:ComputedPlotAreaMarginMode");
        a.item("ComputedPlotAreaMarginMode@names", "Auto;Series;None");
        a.item("HighlightingMode", "ExportedType:string:SeriesHighlightingMode");
        a.item("HighlightingMode@names", "Auto;None;BrightenSpecific;Brighten;FadeOthersSpecific;FadeOthers");
        a.item("HighlightingBehavior", "ExportedType:string:SeriesHighlightingBehavior");
        a.item("HighlightingBehavior@names", "Auto;DirectlyOver;NearestItems;NearestItemsRetainMainShapes;NearestItemsAndSeries");
        a.item("LegendHighlightingMode", "ExportedType:string:LegendHighlightingMode");
        a.item("LegendHighlightingMode@names", "Auto;None;MatchSeries");
        a.item("LegendItemBadgeShape", "ExportedType:string:LegendItemBadgeShape");
        a.item("LegendItemBadgeShape@names", "Automatic;Circle;Line;Square;Marker;Bar;Column;Hidden");
        a.item("LegendItemBadgeMode", "ExportedType:string:LegendItemBadgeMode");
        a.item("LegendItemBadgeMode@names", "Simplified;MatchSeries");
        a.item("ShouldAutoExpandMarginForInitialLabels", "Boolean");
        a.item("AutoExpandMarginExtraPadding", "Number:double");
        a.item("AutoExpandMarginMaximumValue", "Number:double");
        a.item("TrendLinePeriod", "Number:int");
        a.item("ToolTipType", "ExportedType:string:ToolTipType");
        a.item("ToolTipType@names", "Default;Item;Category;None");
        a.item("CrosshairsDisplayMode", "ExportedType:string:CrosshairsDisplayMode");
        a.item("CrosshairsDisplayMode@names", "Auto;None;Horizontal;Vertical;Both");
        a.item("CrosshairsSnapToData", "Boolean");
        a.item("CrosshairsLineVerticalStroke", "Brush");
        a.item("CrosshairsLineThickness", "Number:double");
        a.item("CrosshairsLineHorizontalStroke", "Brush");
        a.item("CrosshairsAnnotationEnabled", "Boolean");
        a.item("CrosshairsAnnotationXAxisBackground", "Brush");
        a.item("CrosshairsAnnotationYAxisBackground", "Brush");
        a.item("CrosshairsAnnotationXAxisTextColor", "Brush");
        a.item("CrosshairsAnnotationYAxisTextColor", "Brush");
        a.item("CrosshairsAnnotationXAxisPrecision", "Number:int");
        a.item("CrosshairsAnnotationYAxisPrecision", "Number:int");
        a.item("FinalValueAnnotationsVisible", "Boolean");
        a.item("FinalValueAnnotationsBackground", "Brush");
        a.item("FinalValueAnnotationsTextColor", "Brush");
        a.item("FinalValueAnnotationsPrecision", "Number:int");
        a.item("CalloutsVisible", "Boolean");
        a.item("CalloutStyleUpdatingEventEnabled", "Boolean");
        a.item("CalloutsDataSourceRef", "(w:CalloutsItemsSource,xam:CalloutsItemsSource,wf:CalloutsDataSource)DataRef::object");
        a.item("CalloutsXMemberPath", "String");
        a.item("CalloutsYMemberPath", "String");
        a.item("CalloutsLabelMemberPath", "String");
        a.item("CalloutsContentMemberPath", "String");
        a.item("SeriesAddedRef", "EventRef::seriesAdded");
        a.item("SeriesRemovedRef", "EventRef::seriesRemoved");
        a.item("SeriesPointerEnterRef", "EventRef::seriesPointerEnter");
        a.item("SeriesPointerLeaveRef", "EventRef::seriesPointerLeave");
        a.item("SeriesPointerMoveRef", "EventRef::seriesPointerMove");
        a.item("SeriesPointerDownRef", "EventRef::seriesPointerDown");
        a.item("SeriesPointerUpRef", "EventRef::seriesPointerUp");
        a.item("CalloutStyleUpdatingRef", "EventRef::calloutStyleUpdating");
    };
    DomainChartDescriptionMetadata.d = function (a) {
        DomainChartDescriptionMetadata.b(a);
        a.t("DomainChart", DomainChartDescriptionMetadata.a);
    };
    DomainChartDescriptionMetadata.$t = markType(DomainChartDescriptionMetadata, 'DomainChartDescriptionMetadata');
    DomainChartDescriptionMetadata.a = null;
    return DomainChartDescriptionMetadata;
}(Base));
export { DomainChartDescriptionMetadata };
//# sourceMappingURL=DomainChartDescriptionMetadata.js.map
