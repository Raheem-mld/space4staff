/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ColumnDescription } from "./ColumnDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var NumericColumnDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(NumericColumnDescription, _super);
    function NumericColumnDescription() {
        var _this = _super.call(this) || this;
        _this.fk = null;
        _this.fm = null;
        _this.fl = null;
        _this.fn = null;
        _this.e9 = 0;
        _this.fa = 0;
        _this.fb = 0;
        _this.e7 = false;
        _this.fj = null;
        _this.e1 = null;
        _this.fi = null;
        _this.fh = null;
        _this.ff = null;
        _this.e4 = null;
        _this.fg = null;
        _this.e0 = null;
        return _this;
    }
    NumericColumnDescription.prototype.get_type = function () {
        return "NumericColumn";
    };
    Object.defineProperty(NumericColumnDescription.prototype, "negativePrefix", {
        get: function () {
            return this.fk;
        },
        set: function (a) {
            this.fk = a;
            this.e("NegativePrefix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "positivePrefix", {
        get: function () {
            return this.fm;
        },
        set: function (a) {
            this.fm = a;
            this.e("PositivePrefix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "negativeSuffix", {
        get: function () {
            return this.fl;
        },
        set: function (a) {
            this.fl = a;
            this.e("NegativeSuffix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "positiveSuffix", {
        get: function () {
            return this.fn;
        },
        set: function (a) {
            this.fn = a;
            this.e("PositiveSuffix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "maxFractionDigits", {
        get: function () {
            return this.e9;
        },
        set: function (a) {
            this.e9 = a;
            this.e("MaxFractionDigits");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "minFractionDigits", {
        get: function () {
            return this.fa;
        },
        set: function (a) {
            this.fa = a;
            this.e("MinFractionDigits");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "minIntegerDigits", {
        get: function () {
            return this.fb;
        },
        set: function (a) {
            this.fb = a;
            this.e("MinIntegerDigits");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "showGroupingSeparator", {
        get: function () {
            return this.e7;
        },
        set: function (a) {
            this.e7 = a;
            this.e("ShowGroupingSeparator");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "formatString", {
        get: function () {
            return this.fj;
        },
        set: function (a) {
            this.fj = a;
            this.e("FormatString");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "formatSpecifiers", {
        get: function () {
            return this.e1;
        },
        set: function (a) {
            this.e1 = a;
            this.e("FormatSpecifiers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "formatOverrideRef", {
        get: function () {
            return this.fi;
        },
        set: function (a) {
            this.fi = a;
            this.e("FormatOverrideRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorType", {
        get: function () {
            return this.fh;
        },
        set: function (a) {
            this.fh = a;
            this.e("EditorType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorDataSourceRef", {
        get: function () {
            return this.ff;
        },
        set: function (a) {
            this.ff = a;
            this.e("EditorDataSourceRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorDataSource", {
        get: function () {
            return this.e4;
        },
        set: function (a) {
            this.e4 = a;
            this.e("EditorDataSource");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorTextField", {
        get: function () {
            return this.fg;
        },
        set: function (a) {
            this.fg = a;
            this.e("EditorTextField");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorValueField", {
        get: function () {
            return this.e0;
        },
        set: function (a) {
            this.e0 = a;
            this.e("EditorValueField");
        },
        enumerable: false,
        configurable: true
    });
    NumericColumnDescription.$t = markType(NumericColumnDescription, 'NumericColumnDescription', ColumnDescription.$);
    NumericColumnDescription.__canMarshalByValue1 = true;
    return NumericColumnDescription;
}(ColumnDescription));
export { NumericColumnDescription };
//# sourceMappingURL=NumericColumnDescription.js.map
