/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
export let WebInputDescription = /*@__PURE__*/ (() => {
    class WebInputDescription extends Description {
        constructor() {
            super();
            this.ag = null;
            this.ah = null;
            this.aj = null;
            this.ao = null;
            this.as = null;
            this.ap = null;
            this.al = null;
            this.aq = null;
            this.n = false;
            this.o = false;
            this.q = false;
            this.m = false;
            this.p = false;
            this.y = 0;
            this.x = 0;
            this.an = null;
            this.am = null;
            this.z = 0;
            this.l = false;
            this.ad = null;
            this.ar = null;
            this.g = null;
            this.h = null;
            this.f = null;
            this.ak = null;
            this.af = null;
            this.ai = null;
            this.ae = null;
        }
        get_type() {
            return "WebInput";
        }
        get type() {
            return this.get_type();
        }
        get dir() {
            return this.ag;
        }
        set dir(a) {
            this.ag = a;
            this.e("Dir");
        }
        get displayType() {
            return this.ah;
        }
        set displayType(a) {
            this.ah = a;
            this.e("DisplayType");
        }
        get inputmode() {
            return this.aj;
        }
        set inputmode(a) {
            this.aj = a;
            this.e("Inputmode");
        }
        get name() {
            return this.ao;
        }
        set name(a) {
            this.ao = a;
            this.e("Name");
        }
        get value() {
            return this.as;
        }
        set value(a) {
            this.as = a;
            this.e("Value");
        }
        get pattern() {
            return this.ap;
        }
        set pattern(a) {
            this.ap = a;
            this.e("Pattern");
        }
        get label() {
            return this.al;
        }
        set label(a) {
            this.al = a;
            this.e("Label");
        }
        get placeholder() {
            return this.aq;
        }
        set placeholder(a) {
            this.aq = a;
            this.e("Placeholder");
        }
        get invalid() {
            return this.n;
        }
        set invalid(a) {
            this.n = a;
            this.e("Invalid");
        }
        get outlined() {
            return this.o;
        }
        set outlined(a) {
            this.o = a;
            this.e("Outlined");
        }
        get required() {
            return this.q;
        }
        set required(a) {
            this.q = a;
            this.e("Required");
        }
        get disabled() {
            return this.m;
        }
        set disabled(a) {
            this.m = a;
            this.e("Disabled");
        }
        get readonly() {
            return this.p;
        }
        set readonly(a) {
            this.p = a;
            this.e("Readonly");
        }
        get minlength() {
            return this.y;
        }
        set minlength(a) {
            this.y = a;
            this.e("Minlength");
        }
        get maxlength() {
            return this.x;
        }
        set maxlength(a) {
            this.x = a;
            this.e("Maxlength");
        }
        get min() {
            return this.an;
        }
        set min(a) {
            this.an = a;
            this.e("Min");
        }
        get max() {
            return this.am;
        }
        set max(a) {
            this.am = a;
            this.e("Max");
        }
        get step() {
            return this.z;
        }
        set step(a) {
            this.z = a;
            this.e("Step");
        }
        get autofocus() {
            return this.l;
        }
        set autofocus(a) {
            this.l = a;
            this.e("Autofocus");
        }
        get autocomplete() {
            return this.ad;
        }
        set autocomplete(a) {
            this.ad = a;
            this.e("Autocomplete");
        }
        get size() {
            return this.ar;
        }
        set size(a) {
            this.ar = a;
            this.e("Size");
        }
        get prefix() {
            return this.g;
        }
        set prefix(a) {
            this.g = a;
            this.e("Prefix");
        }
        get suffix() {
            return this.h;
        }
        set suffix(a) {
            this.h = a;
            this.e("Suffix");
        }
        get helperText() {
            return this.f;
        }
        set helperText(a) {
            this.f = a;
            this.e("HelperText");
        }
        get inputOcurredRef() {
            return this.ak;
        }
        set inputOcurredRef(a) {
            this.ak = a;
            this.e("InputOcurredRef");
        }
        get changeRef() {
            return this.af;
        }
        set changeRef(a) {
            this.af = a;
            this.e("ChangeRef");
        }
        get focusRef() {
            return this.ai;
        }
        set focusRef(a) {
            this.ai = a;
            this.e("FocusRef");
        }
        get blurRef() {
            return this.ae;
        }
        set blurRef(a) {
            this.ae = a;
            this.e("BlurRef");
        }
    }
    WebInputDescription.$t = /*@__PURE__*/ markType(WebInputDescription, 'WebInputDescription', Description.$);
    return WebInputDescription;
})();
//# sourceMappingURL=WebInputDescription.js.map
