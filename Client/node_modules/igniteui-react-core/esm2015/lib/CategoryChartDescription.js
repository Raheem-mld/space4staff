/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let CategoryChartDescription = /*@__PURE__*/ (() => {
    class CategoryChartDescription extends XYChartDescription {
        constructor() {
            super();
            this.kr = null;
            this.kv = null;
            this.kp = null;
            this.kn = null;
            this.kj = 0;
            this.ks = null;
            this.ko = null;
            this.kq = null;
            this.jv = false;
            this.kt = null;
            this.ku = null;
            this.j4 = 0;
            this.j5 = 0;
            this.j3 = 0;
            this.j6 = 0;
            this.j7 = 0;
            this.jx = false;
            this.kk = 0;
            this.j9 = 0;
            this.j8 = 0;
            this.ka = 0;
            this.jp = null;
            this.jq = null;
            this.jw = false;
            this.jt = false;
            this.ju = false;
        }
        get tooltipTemplateRef() {
            return this.kr;
        }
        set tooltipTemplateRef(a) {
            this.kr = a;
            this.e("TooltipTemplateRef");
        }
        get width() {
            return this.kv;
        }
        set width(a) {
            this.kv = a;
            this.e("Width");
        }
        get height() {
            return this.kp;
        }
        set height(a) {
            this.kp = a;
            this.e("Height");
        }
        get background() {
            return this.kn;
        }
        set background(a) {
            this.kn = a;
            this.e("Background");
        }
        get_type() {
            return "CategoryChart";
        }
        get transitionInDuration() {
            return this.kj;
        }
        set transitionInDuration(a) {
            this.kj = a;
            this.e("TransitionInDuration");
        }
        get transitionInEasingFunctionRef() {
            return this.ks;
        }
        set transitionInEasingFunctionRef(a) {
            this.ks = a;
            this.e("TransitionInEasingFunctionRef");
        }
        get chartType() {
            return this.ko;
        }
        set chartType(a) {
            this.ko = a;
            this.e("ChartType");
        }
        get markerCollisionAvoidance() {
            return this.kq;
        }
        set markerCollisionAvoidance(a) {
            this.kq = a;
            this.e("MarkerCollisionAvoidance");
        }
        get isTransitionInEnabled() {
            return this.jv;
        }
        set isTransitionInEnabled(a) {
            this.jv = a;
            this.e("IsTransitionInEnabled");
        }
        get transitionInMode() {
            return this.kt;
        }
        set transitionInMode(a) {
            this.kt = a;
            this.e("TransitionInMode");
        }
        get transitionInSpeedType() {
            return this.ku;
        }
        set transitionInSpeedType(a) {
            this.ku = a;
            this.e("TransitionInSpeedType");
        }
        get xAxisInterval() {
            return this.j4;
        }
        set xAxisInterval(a) {
            this.j4 = a;
            this.e("XAxisInterval");
        }
        get xAxisMinorInterval() {
            return this.j5;
        }
        set xAxisMinorInterval(a) {
            this.j5 = a;
            this.e("XAxisMinorInterval");
        }
        get xAxisGap() {
            return this.j3;
        }
        set xAxisGap(a) {
            this.j3 = a;
            this.e("XAxisGap");
        }
        get xAxisOverlap() {
            return this.j6;
        }
        set xAxisOverlap(a) {
            this.j6 = a;
            this.e("XAxisOverlap");
        }
        get yAxisInterval() {
            return this.j7;
        }
        set yAxisInterval(a) {
            this.j7 = a;
            this.e("YAxisInterval");
        }
        get yAxisIsLogarithmic() {
            return this.jx;
        }
        set yAxisIsLogarithmic(a) {
            this.jx = a;
            this.e("YAxisIsLogarithmic");
        }
        get yAxisLogarithmBase() {
            return this.kk;
        }
        set yAxisLogarithmBase(a) {
            this.kk = a;
            this.e("YAxisLogarithmBase");
        }
        get yAxisMinimumValue() {
            return this.j9;
        }
        set yAxisMinimumValue(a) {
            this.j9 = a;
            this.e("YAxisMinimumValue");
        }
        get yAxisMaximumValue() {
            return this.j8;
        }
        set yAxisMaximumValue(a) {
            this.j8 = a;
            this.e("YAxisMaximumValue");
        }
        get yAxisMinorInterval() {
            return this.ka;
        }
        set yAxisMinorInterval(a) {
            this.ka = a;
            this.e("YAxisMinorInterval");
        }
        get negativeBrushes() {
            return this.jp;
        }
        set negativeBrushes(a) {
            this.jp = a;
            this.e("NegativeBrushes");
        }
        get negativeOutlines() {
            return this.jq;
        }
        set negativeOutlines(a) {
            this.jq = a;
            this.e("NegativeOutlines");
        }
        get yAxisAbbreviateLargeNumbers() {
            return this.jw;
        }
        set yAxisAbbreviateLargeNumbers(a) {
            this.jw = a;
            this.e("YAxisAbbreviateLargeNumbers");
        }
        get isCategoryHighlightingEnabled() {
            return this.jt;
        }
        set isCategoryHighlightingEnabled(a) {
            this.jt = a;
            this.e("IsCategoryHighlightingEnabled");
        }
        get isItemHighlightingEnabled() {
            return this.ju;
        }
        set isItemHighlightingEnabled(a) {
            this.ju = a;
            this.e("IsItemHighlightingEnabled");
        }
    }
    CategoryChartDescription.$t = /*@__PURE__*/ markType(CategoryChartDescription, 'CategoryChartDescription', XYChartDescription.$);
    return CategoryChartDescription;
})();
//# sourceMappingURL=CategoryChartDescription.js.map
