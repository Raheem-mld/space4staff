/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SeriesViewerDescription } from "./SeriesViewerDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let DataChartDescription = /*@__PURE__*/ (() => {
    class DataChartDescription extends SeriesViewerDescription {
        constructor() {
            super();
            this.e7 = false;
            this.fr = 0;
            this.fs = 0;
            this.fj = 0;
            this.fk = 0;
            this.e6 = false;
            this.e8 = false;
            this.gb = null;
            this.e5 = false;
            this.fm = 0;
            this.fl = 0;
            this.e9 = false;
            this.ga = null;
            this.f8 = null;
            this.f9 = null;
            this.e3 = null;
            this.fg = 0;
            this.fi = 0;
            this.fh = 0;
            this.ff = 0;
            this.f7 = null;
            this.fo = 0;
            this.fq = 0;
            this.fp = 0;
            this.fn = 0;
            this.gd = null;
            this.gc = null;
        }
        get_type() {
            return "DataChart";
        }
        get isSquare() {
            return this.e7;
        }
        set isSquare(a) {
            this.e7 = a;
            this.e("IsSquare");
        }
        get windowScaleHorizontal() {
            return this.fr;
        }
        set windowScaleHorizontal(a) {
            this.fr = a;
            this.e("WindowScaleHorizontal");
        }
        get windowScaleVertical() {
            return this.fs;
        }
        set windowScaleVertical(a) {
            this.fs = a;
            this.e("WindowScaleVertical");
        }
        get actualWindowScaleHorizontal() {
            return this.fj;
        }
        set actualWindowScaleHorizontal(a) {
            this.fj = a;
            this.e("ActualWindowScaleHorizontal");
        }
        get actualWindowScaleVertical() {
            return this.fk;
        }
        set actualWindowScaleVertical(a) {
            this.fk = a;
            this.e("ActualWindowScaleVertical");
        }
        get isHorizontalZoomEnabled() {
            return this.e6;
        }
        set isHorizontalZoomEnabled(a) {
            this.e6 = a;
            this.e("IsHorizontalZoomEnabled");
        }
        get isVerticalZoomEnabled() {
            return this.e8;
        }
        set isVerticalZoomEnabled(a) {
            this.e8 = a;
            this.e("IsVerticalZoomEnabled");
        }
        get gridMode() {
            return this.gb;
        }
        set gridMode(a) {
            this.gb = a;
            this.e("GridMode");
        }
        get alignsGridLinesToPixels() {
            return this.e5;
        }
        set alignsGridLinesToPixels(a) {
            this.e5 = a;
            this.e("AlignsGridLinesToPixels");
        }
        get autoExpandMarginMaximumValue() {
            return this.fm;
        }
        set autoExpandMarginMaximumValue(a) {
            this.fm = a;
            this.e("AutoExpandMarginMaximumValue");
        }
        get autoExpandMarginExtraPadding() {
            return this.fl;
        }
        set autoExpandMarginExtraPadding(a) {
            this.fl = a;
            this.e("AutoExpandMarginExtraPadding");
        }
        get shouldAutoExpandMarginForInitialLabels() {
            return this.e9;
        }
        set shouldAutoExpandMarginForInitialLabels(a) {
            this.e9 = a;
            this.e("ShouldAutoExpandMarginForInitialLabels");
        }
        get defaultAxisStroke() {
            return this.ga;
        }
        set defaultAxisStroke(a) {
            this.ga = a;
            this.e("DefaultAxisStroke");
        }
        get defaultAxisMajorStroke() {
            return this.f8;
        }
        set defaultAxisMajorStroke(a) {
            this.f8 = a;
            this.e("DefaultAxisMajorStroke");
        }
        get defaultAxisMinorStroke() {
            return this.f9;
        }
        set defaultAxisMinorStroke(a) {
            this.f9 = a;
            this.e("DefaultAxisMinorStroke");
        }
        get axes() {
            return this.e3;
        }
        set axes(a) {
            this.e3 = a;
            this.e("Axes");
        }
        get actualPlotAreaMarginLeft() {
            return this.fg;
        }
        set actualPlotAreaMarginLeft(a) {
            this.fg = a;
            this.e("ActualPlotAreaMarginLeft");
        }
        get actualPlotAreaMarginTop() {
            return this.fi;
        }
        set actualPlotAreaMarginTop(a) {
            this.fi = a;
            this.e("ActualPlotAreaMarginTop");
        }
        get actualPlotAreaMarginRight() {
            return this.fh;
        }
        set actualPlotAreaMarginRight(a) {
            this.fh = a;
            this.e("ActualPlotAreaMarginRight");
        }
        get actualPlotAreaMarginBottom() {
            return this.ff;
        }
        set actualPlotAreaMarginBottom(a) {
            this.ff = a;
            this.e("ActualPlotAreaMarginBottom");
        }
        get computedPlotAreaMarginMode() {
            return this.f7;
        }
        set computedPlotAreaMarginMode(a) {
            this.f7 = a;
            this.e("ComputedPlotAreaMarginMode");
        }
        get plotAreaMarginLeft() {
            return this.fo;
        }
        set plotAreaMarginLeft(a) {
            this.fo = a;
            this.e("PlotAreaMarginLeft");
        }
        get plotAreaMarginTop() {
            return this.fq;
        }
        set plotAreaMarginTop(a) {
            this.fq = a;
            this.e("PlotAreaMarginTop");
        }
        get plotAreaMarginRight() {
            return this.fp;
        }
        set plotAreaMarginRight(a) {
            this.fp = a;
            this.e("PlotAreaMarginRight");
        }
        get plotAreaMarginBottom() {
            return this.fn;
        }
        set plotAreaMarginBottom(a) {
            this.fn = a;
            this.e("PlotAreaMarginBottom");
        }
        get width() {
            return this.gd;
        }
        set width(a) {
            this.gd = a;
            this.e("Width");
        }
        get height() {
            return this.gc;
        }
        set height(a) {
            this.gc = a;
            this.e("Height");
        }
    }
    DataChartDescription.$t = /*@__PURE__*/ markType(DataChartDescription, 'DataChartDescription', SeriesViewerDescription.$);
    return DataChartDescription;
})();
//# sourceMappingURL=DataChartDescription.js.map
