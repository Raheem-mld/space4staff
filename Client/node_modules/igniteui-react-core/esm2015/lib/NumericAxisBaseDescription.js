/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AxisDescription } from "./AxisDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let NumericAxisBaseDescription = /*@__PURE__*/ (() => {
    class NumericAxisBaseDescription extends AxisDescription {
        constructor() {
            super();
            this.dp = 0;
            this.di = 0;
            this.dl = 0;
            this.dn = 0;
            this.dh = 0;
            this.dk = 0;
            this.dm = 0;
            this.dg = 0;
            this.dq = 0;
            this.dj = 0;
            this.dr = 0;
            this.dc = false;
            this.db = false;
            this.d3 = 0;
            this.da = false;
            this.d7 = null;
            this.d6 = null;
            this.d5 = null;
            this.d8 = null;
        }
        get_type() {
            return "NumericAxisBase";
        }
        get minimumValue() {
            return this.dp;
        }
        set minimumValue(a) {
            this.dp = a;
            this.e("MinimumValue");
        }
        get actualMinimumValue() {
            return this.di;
        }
        set actualMinimumValue(a) {
            this.di = a;
            this.e("ActualMinimumValue");
        }
        get actualVisibleMinimumValue() {
            return this.dl;
        }
        set actualVisibleMinimumValue(a) {
            this.dl = a;
            this.e("ActualVisibleMinimumValue");
        }
        get maximumValue() {
            return this.dn;
        }
        set maximumValue(a) {
            this.dn = a;
            this.e("MaximumValue");
        }
        get actualMaximumValue() {
            return this.dh;
        }
        set actualMaximumValue(a) {
            this.dh = a;
            this.e("ActualMaximumValue");
        }
        get actualVisibleMaximumValue() {
            return this.dk;
        }
        set actualVisibleMaximumValue(a) {
            this.dk = a;
            this.e("ActualVisibleMaximumValue");
        }
        get interval() {
            return this.dm;
        }
        set interval(a) {
            this.dm = a;
            this.e("Interval");
        }
        get actualInterval() {
            return this.dg;
        }
        set actualInterval(a) {
            this.dg = a;
            this.e("ActualInterval");
        }
        get minorInterval() {
            return this.dq;
        }
        set minorInterval(a) {
            this.dq = a;
            this.e("MinorInterval");
        }
        get actualMinorInterval() {
            return this.dj;
        }
        set actualMinorInterval(a) {
            this.dj = a;
            this.e("ActualMinorInterval");
        }
        get referenceValue() {
            return this.dr;
        }
        set referenceValue(a) {
            this.dr = a;
            this.e("ReferenceValue");
        }
        get isLogarithmic() {
            return this.dc;
        }
        set isLogarithmic(a) {
            this.dc = a;
            this.e("IsLogarithmic");
        }
        get actualIsLogarithmic() {
            return this.db;
        }
        set actualIsLogarithmic(a) {
            this.db = a;
            this.e("ActualIsLogarithmic");
        }
        get logarithmBase() {
            return this.d3;
        }
        set logarithmBase(a) {
            this.d3 = a;
            this.e("LogarithmBase");
        }
        get abbreviateLargeNumbers() {
            return this.da;
        }
        set abbreviateLargeNumbers(a) {
            this.da = a;
            this.e("AbbreviateLargeNumbers");
        }
        get actualMinimumValueChangeRef() {
            return this.d7;
        }
        set actualMinimumValueChangeRef(a) {
            this.d7 = a;
            this.e("ActualMinimumValueChangeRef");
        }
        get actualMaximumValueChangeRef() {
            return this.d6;
        }
        set actualMaximumValueChangeRef(a) {
            this.d6 = a;
            this.e("ActualMaximumValueChangeRef");
        }
        get actualIntervalChangeRef() {
            return this.d5;
        }
        set actualIntervalChangeRef(a) {
            this.d5 = a;
            this.e("ActualIntervalChangeRef");
        }
        get actualMinorIntervalChangeRef() {
            return this.d8;
        }
        set actualMinorIntervalChangeRef(a) {
            this.d8 = a;
            this.e("ActualMinorIntervalChangeRef");
        }
    }
    NumericAxisBaseDescription.$t = /*@__PURE__*/ markType(NumericAxisBaseDescription, 'NumericAxisBaseDescription', AxisDescription.$);
    return NumericAxisBaseDescription;
})();
//# sourceMappingURL=NumericAxisBaseDescription.js.map
