/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let FinancialChartDescription = /*@__PURE__*/ (() => {
    class FinancialChartDescription extends XYChartDescription {
        constructor() {
            super();
            this.l5 = null;
            this.l7 = null;
            this.l4 = null;
            this.l2 = null;
            this.k1 = 0;
            this.kh = false;
            this.k5 = 0;
            this.kn = false;
            this.lu = 0;
            this.k7 = 0;
            this.k9 = 0;
            this.k8 = 0;
            this.la = 0;
            this.l6 = null;
            this.l8 = null;
            this.ma = null;
            this.kj = false;
            this.l3 = null;
            this.l9 = null;
            this.kl = false;
            this.jt = null;
            this.jy = null;
            this.km = false;
            this.k4 = 0;
            this.mb = null;
            this.ju = null;
            this.jv = null;
            this.jw = null;
            this.jx = null;
            this.j1 = null;
            this.j0 = null;
            this.js = null;
            this.jq = null;
            this.k6 = 0;
            this.k3 = 0;
            this.k2 = 0;
            this.k0 = 0;
            this.jr = null;
            this.lq = 0;
            this.kz = 0;
            this.lt = 0;
            this.lr = 0;
            this.lp = 0;
            this.ls = 0;
            this.jz = null;
            this.jp = null;
            this.kk = false;
            this.mc = null;
            this.lb = 0;
            this.ki = false;
            this.kw = new Date();
            this.kv = new Date();
            this.j2 = null;
            this.l1 = null;
        }
        get tooltipTemplateRef() {
            return this.l5;
        }
        set tooltipTemplateRef(a) {
            this.l5 = a;
            this.e("TooltipTemplateRef");
        }
        get width() {
            return this.l7;
        }
        set width(a) {
            this.l7 = a;
            this.e("Width");
        }
        get height() {
            return this.l4;
        }
        set height(a) {
            this.l4 = a;
            this.e("Height");
        }
        get background() {
            return this.l2;
        }
        set background(a) {
            this.l2 = a;
            this.e("Background");
        }
        get_type() {
            return "FinancialChart";
        }
        get leftMargin() {
            return this.k1;
        }
        set leftMargin(a) {
            this.k1 = a;
            this.e("LeftMargin");
        }
        get isHorizontalZoomEnabled() {
            return this.kh;
        }
        set isHorizontalZoomEnabled(a) {
            this.kh = a;
            this.e("IsHorizontalZoomEnabled");
        }
        get toolbarHeight() {
            return this.k5;
        }
        set toolbarHeight(a) {
            this.k5 = a;
            this.e("ToolbarHeight");
        }
        get yAxisIsLogarithmic() {
            return this.kn;
        }
        set yAxisIsLogarithmic(a) {
            this.kn = a;
            this.e("YAxisIsLogarithmic");
        }
        get yAxisLogarithmBase() {
            return this.lu;
        }
        set yAxisLogarithmBase(a) {
            this.lu = a;
            this.e("YAxisLogarithmBase");
        }
        get yAxisInterval() {
            return this.k7;
        }
        set yAxisInterval(a) {
            this.k7 = a;
            this.e("YAxisInterval");
        }
        get yAxisMinimumValue() {
            return this.k9;
        }
        set yAxisMinimumValue(a) {
            this.k9 = a;
            this.e("YAxisMinimumValue");
        }
        get yAxisMaximumValue() {
            return this.k8;
        }
        set yAxisMaximumValue(a) {
            this.k8 = a;
            this.e("YAxisMaximumValue");
        }
        get yAxisMinorInterval() {
            return this.la;
        }
        set yAxisMinorInterval(a) {
            this.la = a;
            this.e("YAxisMinorInterval");
        }
        get volumeType() {
            return this.l6;
        }
        set volumeType(a) {
            this.l6 = a;
            this.e("VolumeType");
        }
        get xAxisMode() {
            return this.l8;
        }
        set xAxisMode(a) {
            this.l8 = a;
            this.e("XAxisMode");
        }
        get yAxisMode() {
            return this.ma;
        }
        set yAxisMode(a) {
            this.ma = a;
            this.e("YAxisMode");
        }
        get isToolbarVisible() {
            return this.kj;
        }
        set isToolbarVisible(a) {
            this.kj = a;
            this.e("IsToolbarVisible");
        }
        get chartType() {
            return this.l3;
        }
        set chartType(a) {
            this.l3 = a;
            this.e("ChartType");
        }
        get yAxisLabelHorizontalAlignment() {
            return this.l9;
        }
        set yAxisLabelHorizontalAlignment(a) {
            this.l9 = a;
            this.e("YAxisLabelHorizontalAlignment");
        }
        get isWindowSyncedToVisibleRange() {
            return this.kl;
        }
        set isWindowSyncedToVisibleRange(a) {
            this.kl = a;
            this.e("IsWindowSyncedToVisibleRange");
        }
        get indicatorTypes() {
            return this.jt;
        }
        set indicatorTypes(a) {
            this.jt = a;
            this.e("IndicatorTypes");
        }
        get overlayTypes() {
            return this.jy;
        }
        set overlayTypes(a) {
            this.jy = a;
            this.e("OverlayTypes");
        }
        get yAxisAbbreviateLargeNumbers() {
            return this.km;
        }
        set yAxisAbbreviateLargeNumbers(a) {
            this.km = a;
            this.e("YAxisAbbreviateLargeNumbers");
        }
        get resolution() {
            return this.k4;
        }
        set resolution(a) {
            this.k4 = a;
            this.e("Resolution");
        }
        get zoomSliderType() {
            return this.mb;
        }
        set zoomSliderType(a) {
            this.mb = a;
            this.e("ZoomSliderType");
        }
        get negativeBrushes() {
            return this.ju;
        }
        set negativeBrushes(a) {
            this.ju = a;
            this.e("NegativeBrushes");
        }
        get negativeOutlines() {
            return this.jv;
        }
        set negativeOutlines(a) {
            this.jv = a;
            this.e("NegativeOutlines");
        }
        get overlayBrushes() {
            return this.jw;
        }
        set overlayBrushes(a) {
            this.jw = a;
            this.e("OverlayBrushes");
        }
        get overlayOutlines() {
            return this.jx;
        }
        set overlayOutlines(a) {
            this.jx = a;
            this.e("OverlayOutlines");
        }
        get volumeOutlines() {
            return this.j1;
        }
        set volumeOutlines(a) {
            this.j1 = a;
            this.e("VolumeOutlines");
        }
        get volumeBrushes() {
            return this.j0;
        }
        set volumeBrushes(a) {
            this.j0 = a;
            this.e("VolumeBrushes");
        }
        get indicatorNegativeBrushes() {
            return this.js;
        }
        set indicatorNegativeBrushes(a) {
            this.js = a;
            this.e("IndicatorNegativeBrushes");
        }
        get indicatorBrushes() {
            return this.jq;
        }
        set indicatorBrushes(a) {
            this.jq = a;
            this.e("IndicatorBrushes");
        }
        get volumeThickness() {
            return this.k6;
        }
        set volumeThickness(a) {
            this.k6 = a;
            this.e("VolumeThickness");
        }
        get overlayThickness() {
            return this.k3;
        }
        set overlayThickness(a) {
            this.k3 = a;
            this.e("OverlayThickness");
        }
        get overlayMultiplier() {
            return this.k2;
        }
        set overlayMultiplier(a) {
            this.k2 = a;
            this.e("OverlayMultiplier");
        }
        get indicatorThickness() {
            return this.k0;
        }
        set indicatorThickness(a) {
            this.k0 = a;
            this.e("IndicatorThickness");
        }
        get indicatorDisplayTypes() {
            return this.jr;
        }
        set indicatorDisplayTypes(a) {
            this.jr = a;
            this.e("IndicatorDisplayTypes");
        }
        get indicatorPeriod() {
            return this.lq;
        }
        set indicatorPeriod(a) {
            this.lq = a;
            this.e("IndicatorPeriod");
        }
        get indicatorMultiplier() {
            return this.kz;
        }
        set indicatorMultiplier(a) {
            this.kz = a;
            this.e("IndicatorMultiplier");
        }
        get indicatorSmoothingPeriod() {
            return this.lt;
        }
        set indicatorSmoothingPeriod(a) {
            this.lt = a;
            this.e("IndicatorSmoothingPeriod");
        }
        get indicatorShortPeriod() {
            return this.lr;
        }
        set indicatorShortPeriod(a) {
            this.lr = a;
            this.e("IndicatorShortPeriod");
        }
        get indicatorLongPeriod() {
            return this.lp;
        }
        set indicatorLongPeriod(a) {
            this.lp = a;
            this.e("IndicatorLongPeriod");
        }
        get indicatorSignalPeriod() {
            return this.ls;
        }
        set indicatorSignalPeriod(a) {
            this.ls = a;
            this.e("IndicatorSignalPeriod");
        }
        get rangeSelectorOptions() {
            return this.jz;
        }
        set rangeSelectorOptions(a) {
            this.jz = a;
            this.e("RangeSelectorOptions");
        }
        get customIndicatorNames() {
            return this.jp;
        }
        set customIndicatorNames(a) {
            this.jp = a;
            this.e("CustomIndicatorNames");
        }
        get isVerticalZoomEnabled() {
            return this.kk;
        }
        set isVerticalZoomEnabled(a) {
            this.kk = a;
            this.e("IsVerticalZoomEnabled");
        }
        get zoomSliderXAxisMajorStroke() {
            return this.mc;
        }
        set zoomSliderXAxisMajorStroke(a) {
            this.mc = a;
            this.e("ZoomSliderXAxisMajorStroke");
        }
        get zoomSliderXAxisMajorStrokeThickness() {
            return this.lb;
        }
        set zoomSliderXAxisMajorStrokeThickness(a) {
            this.lb = a;
            this.e("ZoomSliderXAxisMajorStrokeThickness");
        }
        get isLegendVisible() {
            return this.ki;
        }
        set isLegendVisible(a) {
            this.ki = a;
            this.e("IsLegendVisible");
        }
        get xAxisMinimumValue() {
            return this.kw;
        }
        set xAxisMinimumValue(a) {
            this.kw = a;
            this.e("XAxisMinimumValue");
        }
        get xAxisMaximumValue() {
            return this.kv;
        }
        set xAxisMaximumValue(a) {
            this.kv = a;
            this.e("XAxisMaximumValue");
        }
        get xAxisBreaks() {
            return this.j2;
        }
        set xAxisBreaks(a) {
            this.j2 = a;
            this.e("XAxisBreaks");
        }
        get applyCustomIndicatorsRef() {
            return this.l1;
        }
        set applyCustomIndicatorsRef(a) {
            this.l1 = a;
            this.e("ApplyCustomIndicatorsRef");
        }
    }
    FinancialChartDescription.$t = /*@__PURE__*/ markType(FinancialChartDescription, 'FinancialChartDescription', XYChartDescription.$);
    return FinancialChartDescription;
})();
//# sourceMappingURL=FinancialChartDescription.js.map
